; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_per_fused__softmax_add_10(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr #0 !dbg !5 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %7 = shl i32 %6, 3, !dbg !9
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %9 = lshr i32 %8, 5, !dbg !10
  %10 = and i32 %9, 3, !dbg !10
  %11 = or disjoint i32 %10, %7, !dbg !11
  %12 = or disjoint i32 %11, 4, !dbg !11
  %13 = icmp slt i32 %11, 400, !dbg !12
  %14 = icmp slt i32 %12, 400, !dbg !12
  %15 = shl nuw nsw i32 %8, 1, !dbg !13
  %16 = and i32 %15, 62, !dbg !13
  %17 = icmp samesign ult i32 %16, 50, !dbg !14
  %18 = sdiv i32 %11, 50, !dbg !15
  %19 = mul i32 %18, 50, !dbg !16
  %.decomposed = sub i32 %11, %19, !dbg !16
  %20 = sdiv i32 %12, 50, !dbg !15
  %21 = mul i32 %20, 50, !dbg !16
  %.decomposed1 = sub i32 %12, %21, !dbg !16
  %22 = mul i32 %11, 50, !dbg !17
  %23 = mul i32 %12, 50, !dbg !17
  %24 = add i32 %22, %16, !dbg !18
  %25 = add i32 %23, %16, !dbg !18
  %26 = sext i32 %24 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !19
  %28 = sext i32 %25 to i64, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !19
  %30 = and i1 %17, %13, !dbg !20
  %31 = and i1 %17, %14, !dbg !20
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %27, i1 %30) #4, !dbg !21
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !21
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !21
  %35 = bitcast i32 %33 to float, !dbg !21
  %36 = bitcast i32 %34 to float, !dbg !21
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %29, i1 %31) #4, !dbg !21
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !21
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !21
  %40 = bitcast i32 %38 to float, !dbg !21
  %41 = bitcast i32 %39 to float, !dbg !21
  %42 = mul nsw i32 %.decomposed, 50, !dbg !22
  %43 = mul nsw i32 %.decomposed1, 50, !dbg !22
  %44 = add nsw i32 %42, %16, !dbg !23
  %45 = add nsw i32 %43, %16, !dbg !23
  %46 = mul i32 %18, 2528, !dbg !24
  %47 = mul i32 %20, 2528, !dbg !24
  %48 = add i32 %44, %46, !dbg !25
  %49 = add i32 %45, %47, !dbg !25
  %50 = sext i32 %48 to i64, !dbg !26
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !26
  %52 = sext i32 %49 to i64, !dbg !26
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !26
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %51, i1 %30) #4, !dbg !27
  %55 = extractvalue { i32, i32 } %54, 0, !dbg !27
  %56 = extractvalue { i32, i32 } %54, 1, !dbg !27
  %57 = bitcast i32 %55 to float, !dbg !27
  %58 = bitcast i32 %56 to float, !dbg !27
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %53, i1 %31) #4, !dbg !27
  %60 = extractvalue { i32, i32 } %59, 0, !dbg !27
  %61 = extractvalue { i32, i32 } %59, 1, !dbg !27
  %62 = bitcast i32 %60 to float, !dbg !27
  %63 = bitcast i32 %61 to float, !dbg !27
  %64 = fadd float %35, %57, !dbg !28
  %65 = fadd float %36, %58, !dbg !28
  %66 = fadd float %40, %62, !dbg !28
  %67 = fadd float %41, %63, !dbg !28
  %68 = select i1 %30, float %64, float 0xFFF0000000000000, !dbg !29
  %69 = select i1 %30, float %65, float 0xFFF0000000000000, !dbg !29
  %70 = select i1 %31, float %66, float 0xFFF0000000000000, !dbg !29
  %71 = select i1 %31, float %67, float 0xFFF0000000000000, !dbg !29
  %72 = fcmp ogt float %68, %69, !dbg !30
  %73 = fcmp uno float %68, 0.000000e+00, !dbg !34
  %74 = or i1 %72, %73, !dbg !35
  %75 = select i1 %74, float %68, float %69, !dbg !36
  %76 = fcmp ogt float %70, %71, !dbg !30
  %77 = fcmp uno float %70, 0.000000e+00, !dbg !34
  %78 = or i1 %76, %77, !dbg !35
  %79 = select i1 %78, float %70, float %71, !dbg !36
  %80 = bitcast float %75 to i32, !dbg !37
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 16, i32 31), !dbg !37
  %82 = bitcast i32 %81 to float, !dbg !37
  %83 = fcmp ogt float %75, %82, !dbg !30
  %84 = fcmp uno float %75, 0.000000e+00, !dbg !34
  %85 = or i1 %83, %84, !dbg !35
  %86 = select i1 %85, float %75, float %82, !dbg !36
  %87 = bitcast float %86 to i32, !dbg !37
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 8, i32 31), !dbg !37
  %89 = bitcast i32 %88 to float, !dbg !37
  %90 = fcmp ogt float %86, %89, !dbg !30
  %91 = fcmp uno float %86, 0.000000e+00, !dbg !34
  %92 = or i1 %90, %91, !dbg !35
  %93 = select i1 %92, float %86, float %89, !dbg !36
  %94 = bitcast float %93 to i32, !dbg !37
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 4, i32 31), !dbg !37
  %96 = bitcast i32 %95 to float, !dbg !37
  %97 = fcmp ogt float %93, %96, !dbg !30
  %98 = fcmp uno float %93, 0.000000e+00, !dbg !34
  %99 = or i1 %97, %98, !dbg !35
  %100 = select i1 %99, float %93, float %96, !dbg !36
  %101 = bitcast float %100 to i32, !dbg !37
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 2, i32 31), !dbg !37
  %103 = bitcast i32 %102 to float, !dbg !37
  %104 = fcmp ogt float %100, %103, !dbg !30
  %105 = fcmp uno float %100, 0.000000e+00, !dbg !34
  %106 = or i1 %104, %105, !dbg !35
  %107 = select i1 %106, float %100, float %103, !dbg !36
  %108 = bitcast float %107 to i32, !dbg !37
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 1, i32 31), !dbg !37
  %110 = bitcast i32 %109 to float, !dbg !37
  %111 = fcmp ogt float %107, %110, !dbg !30
  %112 = fcmp uno float %107, 0.000000e+00, !dbg !34
  %113 = or i1 %111, %112, !dbg !35
  %114 = select i1 %113, float %107, float %110, !dbg !36
  %115 = bitcast float %79 to i32, !dbg !37
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 16, i32 31), !dbg !37
  %117 = bitcast i32 %116 to float, !dbg !37
  %118 = fcmp ogt float %79, %117, !dbg !30
  %119 = fcmp uno float %79, 0.000000e+00, !dbg !34
  %120 = or i1 %118, %119, !dbg !35
  %121 = select i1 %120, float %79, float %117, !dbg !36
  %122 = bitcast float %121 to i32, !dbg !37
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 8, i32 31), !dbg !37
  %124 = bitcast i32 %123 to float, !dbg !37
  %125 = fcmp ogt float %121, %124, !dbg !30
  %126 = fcmp uno float %121, 0.000000e+00, !dbg !34
  %127 = or i1 %125, %126, !dbg !35
  %128 = select i1 %127, float %121, float %124, !dbg !36
  %129 = bitcast float %128 to i32, !dbg !37
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 4, i32 31), !dbg !37
  %131 = bitcast i32 %130 to float, !dbg !37
  %132 = fcmp ogt float %128, %131, !dbg !30
  %133 = fcmp uno float %128, 0.000000e+00, !dbg !34
  %134 = or i1 %132, %133, !dbg !35
  %135 = select i1 %134, float %128, float %131, !dbg !36
  %136 = bitcast float %135 to i32, !dbg !37
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 2, i32 31), !dbg !37
  %138 = bitcast i32 %137 to float, !dbg !37
  %139 = fcmp ogt float %135, %138, !dbg !30
  %140 = fcmp uno float %135, 0.000000e+00, !dbg !34
  %141 = or i1 %139, %140, !dbg !35
  %142 = select i1 %141, float %135, float %138, !dbg !36
  %143 = bitcast float %142 to i32, !dbg !37
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 1, i32 31), !dbg !37
  %145 = bitcast i32 %144 to float, !dbg !37
  %146 = fcmp ogt float %142, %145, !dbg !30
  %147 = fcmp uno float %142, 0.000000e+00, !dbg !34
  %148 = or i1 %146, %147, !dbg !35
  %149 = select i1 %148, float %142, float %145, !dbg !36
  %150 = fsub float %64, %114, !dbg !38
  %151 = fsub float %65, %114, !dbg !38
  %152 = fsub float %66, %149, !dbg !38
  %153 = fsub float %67, %149, !dbg !38
  %154 = fmul float %150, 0x3FF7154760000000, !dbg !39
  %155 = tail call float @llvm.nvvm.ex2.approx.f(float %154), !dbg !39
  %156 = fmul float %151, 0x3FF7154760000000, !dbg !39
  %157 = tail call float @llvm.nvvm.ex2.approx.f(float %156), !dbg !39
  %158 = fmul float %152, 0x3FF7154760000000, !dbg !39
  %159 = tail call float @llvm.nvvm.ex2.approx.f(float %158), !dbg !39
  %160 = fmul float %153, 0x3FF7154760000000, !dbg !39
  %161 = tail call float @llvm.nvvm.ex2.approx.f(float %160), !dbg !39
  %162 = fadd float %155, %157, !dbg !40
  %163 = select i1 %30, float %162, float 0.000000e+00, !dbg !40
  %164 = fadd float %159, %161, !dbg !40
  %165 = select i1 %31, float %164, float 0.000000e+00, !dbg !40
  %166 = bitcast float %163 to i32, !dbg !44
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 16, i32 31), !dbg !44
  %168 = bitcast i32 %167 to float, !dbg !44
  %169 = fadd float %163, %168, !dbg !40
  %170 = bitcast float %169 to i32, !dbg !44
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 8, i32 31), !dbg !44
  %172 = bitcast i32 %171 to float, !dbg !44
  %173 = fadd float %169, %172, !dbg !40
  %174 = bitcast float %173 to i32, !dbg !44
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 4, i32 31), !dbg !44
  %176 = bitcast i32 %175 to float, !dbg !44
  %177 = fadd float %173, %176, !dbg !40
  %178 = bitcast float %177 to i32, !dbg !44
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 2, i32 31), !dbg !44
  %180 = bitcast i32 %179 to float, !dbg !44
  %181 = fadd float %177, %180, !dbg !40
  %182 = bitcast float %181 to i32, !dbg !44
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 1, i32 31), !dbg !44
  %184 = bitcast i32 %183 to float, !dbg !44
  %185 = fadd float %181, %184, !dbg !40
  %186 = bitcast float %165 to i32, !dbg !44
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 16, i32 31), !dbg !44
  %188 = bitcast i32 %187 to float, !dbg !44
  %189 = fadd float %165, %188, !dbg !40
  %190 = bitcast float %189 to i32, !dbg !44
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %190, i32 8, i32 31), !dbg !44
  %192 = bitcast i32 %191 to float, !dbg !44
  %193 = fadd float %189, %192, !dbg !40
  %194 = bitcast float %193 to i32, !dbg !44
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 4, i32 31), !dbg !44
  %196 = bitcast i32 %195 to float, !dbg !44
  %197 = fadd float %193, %196, !dbg !40
  %198 = bitcast float %197 to i32, !dbg !44
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 2, i32 31), !dbg !44
  %200 = bitcast i32 %199 to float, !dbg !44
  %201 = fadd float %197, %200, !dbg !40
  %202 = bitcast float %201 to i32, !dbg !44
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 1, i32 31), !dbg !44
  %204 = bitcast i32 %203 to float, !dbg !44
  %205 = fadd float %201, %204, !dbg !40
  %206 = tail call float @llvm.nvvm.div.full(float %155, float %185), !dbg !45
  %207 = tail call float @llvm.nvvm.div.full(float %157, float %185), !dbg !45
  %208 = tail call float @llvm.nvvm.div.full(float %159, float %205), !dbg !45
  %209 = tail call float @llvm.nvvm.div.full(float %161, float %205), !dbg !45
  %210 = bitcast float %206 to i32, !dbg !46
  %211 = bitcast float %207 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %210, i32 %211, ptr addrspace(1) %51, i1 %30) #4, !dbg !46
  %212 = bitcast float %208 to i32, !dbg !46
  %213 = bitcast float %209 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %212, i32 %213, ptr addrspace(1) %53, i1 %31) #4, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "cjgujg2s3lvpsqkrlzuzbcldofxrz3zop22m6skn526gjzfe3ddl.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/jg")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "triton_per_fused__softmax_add_10", linkageName: "triton_per_fused__softmax_add_10", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 28, scope: !5)
!9 = !DILocation(line: 24, column: 33, scope: !5)
!10 = !DILocation(line: 25, column: 44, scope: !5)
!11 = !DILocation(line: 25, column: 23, scope: !5)
!12 = !DILocation(line: 26, column: 21, scope: !5)
!13 = !DILocation(line: 27, column: 38, scope: !5)
!14 = !DILocation(line: 29, column: 25, scope: !5)
!15 = !DILocation(line: 35, column: 19, scope: !5)
!16 = !DILocation(line: 34, column: 19, scope: !5)
!17 = !DILocation(line: 36, column: 40, scope: !5)
!18 = !DILocation(line: 36, column: 37, scope: !5)
!19 = !DILocation(line: 36, column: 30, scope: !5)
!20 = !DILocation(line: 36, column: 55, scope: !5)
!21 = !DILocation(line: 36, column: 45, scope: !5)
!22 = !DILocation(line: 37, column: 44, scope: !5)
!23 = !DILocation(line: 37, column: 41, scope: !5)
!24 = !DILocation(line: 37, column: 54, scope: !5)
!25 = !DILocation(line: 37, column: 49, scope: !5)
!26 = !DILocation(line: 37, column: 34, scope: !5)
!27 = !DILocation(line: 37, column: 59, scope: !5)
!28 = !DILocation(line: 38, column: 18, scope: !5)
!29 = !DILocation(line: 41, column: 43, scope: !5)
!30 = !DILocation(line: 111, column: 15, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !5, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 42, column: 37, scope: !5)
!34 = !DILocation(line: 113, column: 21, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 113, column: 16, scope: !31, inlinedAt: !33)
!36 = !DILocation(line: 114, column: 29, scope: !31, inlinedAt: !33)
!37 = !DILocation(line: 124, column: 29, scope: !31, inlinedAt: !33)
!38 = !DILocation(line: 43, column: 18, scope: !5)
!39 = !DILocation(line: 44, column: 24, scope: !5)
!40 = !DILocation(line: 260, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !5, file: !42, discriminator: 0)
!42 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!43 = !DILocation(line: 47, column: 26, scope: !5)
!44 = !DILocation(line: 290, column: 36, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 50, column: 21, scope: !5)
!46 = !DILocation(line: 51, column: 60, scope: !5)
!47 = !DILocation(line: 51, column: 4, scope: !5)
