; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr #0 !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %8 = icmp samesign ult i32 %7, 10368, !dbg !9
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %10 = and i32 %9, 31, !dbg !10
  %11 = lshr i32 %9, 5, !dbg !10
  %12 = shl nuw nsw i32 %9, 2, !dbg !10
  %13 = and i32 %12, 508, !dbg !10
  %14 = udiv i32 %7, 324, !dbg !11
  %15 = mul i32 %14, 324, !dbg !12
  %.decomposed = sub i32 %7, %15, !dbg !12
  %16 = icmp samesign ult i32 %13, 324, !dbg !13
  %17 = mul i32 %7, 324, !dbg !14
  %18 = add i32 %13, %17, !dbg !15
  %19 = sext i32 %18 to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !16
  %21 = and i1 %8, %16, !dbg !17
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !18
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %20, i64 %22, i1 %21) #5, !dbg !18
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !18
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !18
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !18
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !18
  %28 = mul nuw nsw i32 %.decomposed, 324, !dbg !19
  %29 = add nuw nsw i32 %13, %28, !dbg !20
  %30 = mul i32 %14, 104992, !dbg !21
  %31 = add i32 %29, %30, !dbg !22
  %32 = sext i32 %31 to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !23
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !24
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %33, i64 %34, i1 %21) #5, !dbg !24
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !24
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !24
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !24
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !24
  %40 = insertelement <4 x i32> poison, i32 %24, i64 0, !dbg !18
  %41 = insertelement <4 x i32> %40, i32 %25, i64 1, !dbg !18
  %42 = insertelement <4 x i32> %41, i32 %26, i64 2, !dbg !18
  %43 = insertelement <4 x i32> %42, i32 %27, i64 3, !dbg !18
  %44 = bitcast <4 x i32> %43 to <4 x float>, !dbg !18
  %45 = insertelement <4 x i32> poison, i32 %36, i64 0, !dbg !24
  %46 = insertelement <4 x i32> %45, i32 %37, i64 1, !dbg !24
  %47 = insertelement <4 x i32> %46, i32 %38, i64 2, !dbg !24
  %48 = insertelement <4 x i32> %47, i32 %39, i64 3, !dbg !24
  %49 = bitcast <4 x i32> %48 to <4 x float>, !dbg !24
  %50 = fadd <4 x float> %44, %49, !dbg !25
  %51 = fcmp une <4 x float> %50, splat (float 0xFFF0000000000000), !dbg !26
  %52 = extractelement <4 x float> %50, i64 0, !dbg !27
  %53 = fsub float 0xFFF0000000000000, %52, !dbg !27
  %54 = extractelement <4 x float> %50, i64 1, !dbg !27
  %55 = fsub float 0xFFF0000000000000, %54, !dbg !27
  %56 = extractelement <4 x float> %50, i64 2, !dbg !27
  %57 = fsub float 0xFFF0000000000000, %56, !dbg !27
  %58 = extractelement <4 x float> %50, i64 3, !dbg !27
  %59 = fsub float 0xFFF0000000000000, %58, !dbg !27
  %60 = fmul float %53, 0x3FF7154760000000, !dbg !31
  %61 = tail call float @llvm.nvvm.ex2.approx.f(float %60), !dbg !31
  %62 = fmul float %55, 0x3FF7154760000000, !dbg !31
  %63 = tail call float @llvm.nvvm.ex2.approx.f(float %62), !dbg !31
  %64 = fmul float %57, 0x3FF7154760000000, !dbg !31
  %65 = tail call float @llvm.nvvm.ex2.approx.f(float %64), !dbg !31
  %66 = fmul float %59, 0x3FF7154760000000, !dbg !31
  %67 = tail call float @llvm.nvvm.ex2.approx.f(float %66), !dbg !31
  %68 = fsub float %52, %52, !dbg !32
  %69 = fsub float %54, %54, !dbg !32
  %70 = fsub float %56, %56, !dbg !32
  %71 = fsub float %58, %58, !dbg !32
  %72 = fmul float %68, 0x3FF7154760000000, !dbg !31
  %73 = tail call float @llvm.nvvm.ex2.approx.f(float %72), !dbg !31
  %74 = fmul float %69, 0x3FF7154760000000, !dbg !31
  %75 = tail call float @llvm.nvvm.ex2.approx.f(float %74), !dbg !31
  %76 = fmul float %70, 0x3FF7154760000000, !dbg !31
  %77 = tail call float @llvm.nvvm.ex2.approx.f(float %76), !dbg !31
  %78 = fmul float %71, 0x3FF7154760000000, !dbg !31
  %79 = tail call float @llvm.nvvm.ex2.approx.f(float %78), !dbg !31
  %80 = fmul float %61, 0.000000e+00, !dbg !33
  %81 = fmul float %63, 0.000000e+00, !dbg !33
  %82 = fmul float %65, 0.000000e+00, !dbg !33
  %83 = fmul float %67, 0.000000e+00, !dbg !33
  %84 = fadd float %80, %73, !dbg !34
  %85 = extractelement <4 x i1> %51, i64 0, !dbg !34
  %86 = select i1 %85, float %84, float 1.000000e+00, !dbg !34
  %87 = fadd float %81, %75, !dbg !34
  %88 = extractelement <4 x i1> %51, i64 1, !dbg !34
  %89 = select i1 %88, float %87, float 1.000000e+00, !dbg !34
  %90 = fadd float %82, %77, !dbg !34
  %91 = extractelement <4 x i1> %51, i64 2, !dbg !34
  %92 = select i1 %91, float %90, float 1.000000e+00, !dbg !34
  %93 = fadd float %83, %79, !dbg !34
  %94 = extractelement <4 x i1> %51, i64 3, !dbg !34
  %95 = select i1 %94, float %93, float 1.000000e+00, !dbg !34
  %96 = select i1 %21, float %52, float 0xFFF0000000000000, !dbg !35
  %97 = select i1 %21, float %54, float 0xFFF0000000000000, !dbg !35
  %98 = select i1 %21, float %56, float 0xFFF0000000000000, !dbg !35
  %99 = select i1 %21, float %58, float 0xFFF0000000000000, !dbg !35
  %100 = select i1 %21, float %86, float 0.000000e+00, !dbg !36
  %101 = select i1 %21, float %89, float 0.000000e+00, !dbg !36
  %102 = select i1 %21, float %92, float 0.000000e+00, !dbg !36
  %103 = select i1 %21, float %95, float 0.000000e+00, !dbg !36
  %104 = bitcast <4 x i1> %51 to i4, !dbg !37
  %105 = icmp ne i4 %104, 0, !dbg !37
  %106 = select i1 %21, i1 %105, i1 false, !dbg !37
  %107 = zext i1 %106 to i32, !dbg !39
  %108 = tail call i32 @llvm.nvvm.redux.sync.or(i32 %107, i32 -1), !dbg !39
  %109 = trunc i32 %108 to i8, !dbg !39
  %110 = and i32 %11, 3, !dbg !39
  %111 = icmp eq i32 %10, 0, !dbg !39
  %112 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %110, !dbg !39
  %113 = insertelement <1 x i8> poison, i8 %109, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %112, <1 x i8> %113, i1 %111) #5, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  %114 = icmp samesign ult i32 %9, 4, !dbg !39
  %115 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %9, !dbg !39
  %116 = tail call i8 asm sideeffect "@$2 ld.shared.b8 $0, [ $1 + 0 ];", "=h,r,b"(ptr addrspace(3) %115, i1 %114) #5, !dbg !39
  %117 = zext i8 %116 to i32, !dbg !39
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 2, i32 31), !dbg !39
  %119 = trunc i32 %118 to i8, !dbg !39
  %120 = or i8 %116, %119, !dbg !37
  %121 = zext i8 %120 to i32, !dbg !39
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 1, i32 31), !dbg !39
  %123 = trunc i32 %122 to i8, !dbg !39
  %124 = or i8 %120, %123, !dbg !37
  %125 = icmp eq i32 %9, 0, !dbg !39
  %126 = insertelement <1 x i8> poison, i8 %124, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %115, <1 x i8> %126, i1 %125) #5, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  %127 = load i8, ptr addrspace(3) @global_smem, align 16, !dbg !39
  %.not = icmp eq i8 %127, 0, !dbg !40
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !41
  %128 = fcmp ogt float %96, %97, !dbg !43
  %129 = fcmp uno float %96, 0.000000e+00, !dbg !44
  %130 = or i1 %128, %129, !dbg !45
  %131 = select i1 %130, float %96, float %97, !dbg !46
  %132 = fcmp ogt float %131, %98, !dbg !43
  %133 = fcmp uno float %131, 0.000000e+00, !dbg !44
  %134 = or i1 %132, %133, !dbg !45
  %135 = select i1 %134, float %131, float %98, !dbg !46
  %136 = fcmp ogt float %135, %99, !dbg !43
  %137 = fcmp uno float %135, 0.000000e+00, !dbg !44
  %138 = or i1 %136, %137, !dbg !45
  %139 = select i1 %138, float %135, float %99, !dbg !46
  %140 = bitcast float %139 to i32, !dbg !41
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 16, i32 31), !dbg !41
  %142 = bitcast i32 %141 to float, !dbg !41
  %143 = fcmp ogt float %139, %142, !dbg !43
  %144 = fcmp uno float %139, 0.000000e+00, !dbg !44
  %145 = or i1 %144, %143, !dbg !45
  %146 = select i1 %145, float %139, float %142, !dbg !46
  %147 = bitcast float %146 to i32, !dbg !41
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 8, i32 31), !dbg !41
  %149 = bitcast i32 %148 to float, !dbg !41
  %150 = fcmp ogt float %146, %149, !dbg !43
  %151 = fcmp uno float %146, 0.000000e+00, !dbg !44
  %152 = or i1 %150, %151, !dbg !45
  %153 = select i1 %152, float %146, float %149, !dbg !46
  %154 = bitcast float %153 to i32, !dbg !41
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 4, i32 31), !dbg !41
  %156 = bitcast i32 %155 to float, !dbg !41
  %157 = fcmp ogt float %153, %156, !dbg !43
  %158 = fcmp uno float %153, 0.000000e+00, !dbg !44
  %159 = or i1 %157, %158, !dbg !45
  %160 = select i1 %159, float %153, float %156, !dbg !46
  %161 = bitcast float %160 to i32, !dbg !41
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 2, i32 31), !dbg !41
  %163 = bitcast i32 %162 to float, !dbg !41
  %164 = fcmp ogt float %160, %163, !dbg !43
  %165 = fcmp uno float %160, 0.000000e+00, !dbg !44
  %166 = or i1 %164, %165, !dbg !45
  %167 = select i1 %166, float %160, float %163, !dbg !46
  %168 = bitcast float %167 to i32, !dbg !41
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 1, i32 31), !dbg !41
  %170 = bitcast i32 %169 to float, !dbg !41
  %171 = fcmp ogt float %167, %170, !dbg !43
  %172 = fcmp uno float %167, 0.000000e+00, !dbg !44
  %173 = or i1 %171, %172, !dbg !45
  %174 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !41
  %175 = select i1 %173, i32 %168, i32 %169, !dbg !46
  %176 = insertelement <1 x i32> poison, i32 %175, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %176, i1 %111) #5, !dbg !41
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !41
  %177 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !41
  %178 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %177, i1 %114) #5, !dbg !41
  %179 = bitcast i32 %178 to float, !dbg !41
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 2, i32 31), !dbg !41
  %181 = bitcast i32 %180 to float, !dbg !41
  %182 = fcmp ogt float %179, %181, !dbg !43
  %183 = fcmp uno float %179, 0.000000e+00, !dbg !44
  %184 = or i1 %183, %182, !dbg !45
  %185 = select i1 %184, float %179, float %181, !dbg !46
  %186 = bitcast float %185 to i32, !dbg !41
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 1, i32 31), !dbg !41
  %188 = bitcast i32 %187 to float, !dbg !41
  %189 = fcmp ogt float %185, %188, !dbg !43
  %190 = fcmp uno float %185, 0.000000e+00, !dbg !44
  %191 = or i1 %189, %190, !dbg !45
  %192 = select i1 %191, i32 %186, i32 %187, !dbg !46
  %193 = insertelement <1 x i32> poison, i32 %192, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %193, i1 %125) #5, !dbg !41
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !41
  %194 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !41
  %195 = fcmp oeq float %194, 0xFFF0000000000000, !dbg !47
  %196 = fsub float %96, %194, !dbg !48
  %197 = fsub float %97, %194, !dbg !48
  %198 = fsub float %98, %194, !dbg !48
  %199 = fsub float %99, %194, !dbg !48
  %200 = fmul float %196, 0x3FF7154760000000, !dbg !49
  %201 = select i1 %195, float 0.000000e+00, float %200, !dbg !50
  %202 = tail call float @llvm.nvvm.ex2.approx.f(float %201), !dbg !49
  %203 = fmul float %197, 0x3FF7154760000000, !dbg !49
  %204 = select i1 %195, float 0.000000e+00, float %203, !dbg !50
  %205 = tail call float @llvm.nvvm.ex2.approx.f(float %204), !dbg !49
  %206 = fmul float %198, 0x3FF7154760000000, !dbg !49
  %207 = select i1 %195, float 0.000000e+00, float %206, !dbg !50
  %208 = tail call float @llvm.nvvm.ex2.approx.f(float %207), !dbg !49
  %209 = fmul float %199, 0x3FF7154760000000, !dbg !49
  %210 = select i1 %195, float 0.000000e+00, float %209, !dbg !50
  %211 = tail call float @llvm.nvvm.ex2.approx.f(float %210), !dbg !49
  %212 = fmul float %100, %202, !dbg !51
  %213 = fmul float %101, %205, !dbg !51
  %214 = fmul float %102, %208, !dbg !51
  %215 = fmul float %103, %211, !dbg !51
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !52
  %216 = fadd float %212, %213, !dbg !55
  %217 = fadd float %216, %214, !dbg !55
  %218 = fadd float %217, %215, !dbg !55
  %219 = bitcast float %218 to i32, !dbg !52
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 16, i32 31), !dbg !52
  %221 = bitcast i32 %220 to float, !dbg !52
  %222 = fadd float %218, %221, !dbg !55
  %223 = bitcast float %222 to i32, !dbg !52
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 8, i32 31), !dbg !52
  %225 = bitcast i32 %224 to float, !dbg !52
  %226 = fadd float %222, %225, !dbg !55
  %227 = bitcast float %226 to i32, !dbg !52
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 4, i32 31), !dbg !52
  %229 = bitcast i32 %228 to float, !dbg !52
  %230 = fadd float %226, %229, !dbg !55
  %231 = bitcast float %230 to i32, !dbg !52
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 2, i32 31), !dbg !52
  %233 = bitcast i32 %232 to float, !dbg !52
  %234 = fadd float %230, %233, !dbg !55
  %235 = bitcast float %234 to i32, !dbg !52
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 1, i32 31), !dbg !52
  %237 = bitcast i32 %236 to float, !dbg !52
  %238 = fadd float %234, %237, !dbg !55
  %239 = bitcast float %238 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %239, i1 %111) #5, !dbg !52
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !52
  %240 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %177, i1 %114) #5, !dbg !52
  %241 = bitcast i32 %240 to float, !dbg !52
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 2, i32 31), !dbg !52
  %243 = bitcast i32 %242 to float, !dbg !52
  %244 = fadd float %241, %243, !dbg !55
  %245 = bitcast float %244 to i32, !dbg !52
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 1, i32 31), !dbg !52
  %247 = bitcast i32 %246 to float, !dbg !52
  %248 = fadd float %244, %247, !dbg !55
  %249 = bitcast float %248 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %249, i1 %125) #5, !dbg !52
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !52
  %250 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !52
  %251 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #5, !dbg !56
  %252 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %20, i64 %251, i1 %21) #5, !dbg !56
  %253 = extractvalue { i32, i32, i32, i32 } %252, 0, !dbg !56
  %254 = extractvalue { i32, i32, i32, i32 } %252, 1, !dbg !56
  %255 = extractvalue { i32, i32, i32, i32 } %252, 2, !dbg !56
  %256 = extractvalue { i32, i32, i32, i32 } %252, 3, !dbg !56
  %257 = bitcast i32 %253 to float, !dbg !56
  %258 = bitcast i32 %254 to float, !dbg !56
  %259 = bitcast i32 %255 to float, !dbg !56
  %260 = bitcast i32 %256 to float, !dbg !56
  %261 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #5, !dbg !57
  %262 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %33, i64 %261, i1 %21) #5, !dbg !57
  %263 = extractvalue { i32, i32, i32, i32 } %262, 0, !dbg !57
  %264 = extractvalue { i32, i32, i32, i32 } %262, 1, !dbg !57
  %265 = extractvalue { i32, i32, i32, i32 } %262, 2, !dbg !57
  %266 = extractvalue { i32, i32, i32, i32 } %262, 3, !dbg !57
  %267 = bitcast i32 %263 to float, !dbg !57
  %268 = bitcast i32 %264 to float, !dbg !57
  %269 = bitcast i32 %265 to float, !dbg !57
  %270 = bitcast i32 %266 to float, !dbg !57
  %271 = fadd float %257, %267, !dbg !58
  %272 = fadd float %258, %268, !dbg !58
  %273 = fadd float %259, %269, !dbg !58
  %274 = fadd float %260, %270, !dbg !58
  %275 = fsub float %271, %194, !dbg !59
  %276 = fsub float %272, %194, !dbg !59
  %277 = fsub float %273, %194, !dbg !59
  %278 = fsub float %274, %194, !dbg !59
  %279 = fmul float %275, 0x3FF7154760000000, !dbg !60
  %280 = tail call float @llvm.nvvm.ex2.approx.f(float %279), !dbg !60
  %281 = fmul float %276, 0x3FF7154760000000, !dbg !60
  %282 = tail call float @llvm.nvvm.ex2.approx.f(float %281), !dbg !60
  %283 = fmul float %277, 0x3FF7154760000000, !dbg !60
  %284 = tail call float @llvm.nvvm.ex2.approx.f(float %283), !dbg !60
  %285 = fmul float %278, 0x3FF7154760000000, !dbg !60
  %286 = tail call float @llvm.nvvm.ex2.approx.f(float %285), !dbg !60
  %287 = tail call float @llvm.nvvm.div.full(float %280, float %250), !dbg !61
  %288 = tail call float @llvm.nvvm.div.full(float %282, float %250), !dbg !61
  %289 = tail call float @llvm.nvvm.div.full(float %284, float %250), !dbg !61
  %290 = tail call float @llvm.nvvm.div.full(float %286, float %250), !dbg !61
  %291 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !62
  %292 = bitcast float %287 to i32, !dbg !63
  %293 = select i1 %.not, i32 0, i32 %292, !dbg !64
  %294 = bitcast float %288 to i32, !dbg !63
  %295 = select i1 %.not, i32 0, i32 %294, !dbg !64
  %296 = bitcast float %289 to i32, !dbg !63
  %297 = select i1 %.not, i32 0, i32 %296, !dbg !64
  %298 = bitcast float %290 to i32, !dbg !63
  %299 = select i1 %.not, i32 0, i32 %298, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %293, i32 %295, i32 %297, i32 %299, ptr addrspace(1) %291, i1 %21) #5, !dbg !63
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.redux.sync.or(i32, i32) #3

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #4

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { convergent nocallback nounwind }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "coefcjzwqeaazrpai4joq343fvrsgrhhb67vzijrbyjgc63uwhrl.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/oe")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "triton_red_fused_9", linkageName: "triton_red_fused_9", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 23, column: 28, scope: !5)
!9 = !DILocation(line: 25, column: 21, scope: !5)
!10 = !DILocation(line: 26, column: 37, scope: !5)
!11 = !DILocation(line: 30, column: 19, scope: !5)
!12 = !DILocation(line: 29, column: 19, scope: !5)
!13 = !DILocation(line: 38, column: 29, scope: !5)
!14 = !DILocation(line: 42, column: 45, scope: !5)
!15 = !DILocation(line: 42, column: 41, scope: !5)
!16 = !DILocation(line: 42, column: 34, scope: !5)
!17 = !DILocation(line: 42, column: 60, scope: !5)
!18 = !DILocation(line: 42, column: 50, scope: !5)
!19 = !DILocation(line: 43, column: 45, scope: !5)
!20 = !DILocation(line: 43, column: 41, scope: !5)
!21 = !DILocation(line: 43, column: 57, scope: !5)
!22 = !DILocation(line: 43, column: 50, scope: !5)
!23 = !DILocation(line: 43, column: 34, scope: !5)
!24 = !DILocation(line: 43, column: 62, scope: !5)
!25 = !DILocation(line: 44, column: 22, scope: !5)
!26 = !DILocation(line: 46, column: 23, scope: !5)
!27 = !DILocation(line: 197, column: 53, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !5, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 56, column: 43, scope: !5)
!31 = !DILocation(line: 174, column: 24, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 200, column: 53, scope: !28, inlinedAt: !30)
!33 = !DILocation(line: 206, column: 24, scope: !28, inlinedAt: !30)
!34 = !DILocation(line: 206, column: 36, scope: !28, inlinedAt: !30)
!35 = !DILocation(line: 59, column: 64, scope: !5)
!36 = !DILocation(line: 60, column: 64, scope: !5)
!37 = !DILocation(line: 261, column: 15, scope: !28, inlinedAt: !38)
!38 = !DILocation(line: 61, column: 49, scope: !5)
!39 = !DILocation(line: 266, column: 29, scope: !28, inlinedAt: !38)
!40 = !DILocation(line: 61, column: 64, scope: !5)
!41 = !DILocation(line: 124, column: 29, scope: !28, inlinedAt: !42)
!42 = !DILocation(line: 64, column: 35, scope: !5)
!43 = !DILocation(line: 111, column: 15, scope: !28, inlinedAt: !42)
!44 = !DILocation(line: 113, column: 21, scope: !28, inlinedAt: !42)
!45 = !DILocation(line: 113, column: 16, scope: !28, inlinedAt: !42)
!46 = !DILocation(line: 114, column: 29, scope: !28, inlinedAt: !42)
!47 = !DILocation(line: 181, column: 40, scope: !28, inlinedAt: !42)
!48 = !DILocation(line: 181, column: 68, scope: !28, inlinedAt: !42)
!49 = !DILocation(line: 174, column: 24, scope: !28, inlinedAt: !42)
!50 = !DILocation(line: 181, column: 58, scope: !28, inlinedAt: !42)
!51 = !DILocation(line: 182, column: 31, scope: !28, inlinedAt: !42)
!52 = !DILocation(line: 290, column: 36, scope: !53, inlinedAt: !42)
!53 = distinct !DILexicalBlockFile(scope: !5, file: !54, discriminator: 0)
!54 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!55 = !DILocation(line: 260, column: 15, scope: !53, inlinedAt: !42)
!56 = !DILocation(line: 75, column: 51, scope: !5)
!57 = !DILocation(line: 76, column: 63, scope: !5)
!58 = !DILocation(line: 78, column: 24, scope: !5)
!59 = !DILocation(line: 79, column: 24, scope: !5)
!60 = !DILocation(line: 80, column: 28, scope: !5)
!61 = !DILocation(line: 81, column: 25, scope: !5)
!62 = !DILocation(line: 84, column: 29, scope: !5)
!63 = !DILocation(line: 84, column: 64, scope: !5)
!64 = !DILocation(line: 83, column: 39, scope: !5)
!65 = !DILocation(line: 69, column: 4, scope: !5)
