; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_poi_fused__softmax_add_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr #0 !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.z(), !dbg !8
  %10 = shl nuw nsw i32 %9, 3, !dbg !9
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %12 = lshr i32 %11, 4, !dbg !10
  %13 = and i32 %12, 7, !dbg !10
  %14 = and i32 %11, 1, !dbg !10
  %15 = shl nuw nsw i32 %14, 2, !dbg !10
  %16 = or disjoint i32 %13, %10, !dbg !11
  %17 = or disjoint i32 %15, %10, !dbg !11
  %18 = icmp eq i32 %9, 0, !dbg !12
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !13
  %20 = shl nuw nsw i32 %19, 3, !dbg !14
  %21 = and i32 %11, 128, !dbg !15
  %.lobit1 = lshr exact i32 %21, 7, !dbg !15
  %22 = lshr i32 %11, 1, !dbg !15
  %23 = and i32 %22, 7, !dbg !15
  %24 = or disjoint i32 %.lobit1, %20, !dbg !16
  %25 = or disjoint i32 %23, %20, !dbg !16
  %26 = icmp samesign ult i32 %19, 8, !dbg !17
  %27 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !18
  %28 = shl i32 %27, 6, !dbg !19
  %29 = shl nuw nsw i32 %11, 2, !dbg !20
  %30 = and i32 %29, 60, !dbg !20
  %31 = lshr i32 %11, 4, !dbg !20
  %32 = and i32 %31, 15, !dbg !20
  %33 = or disjoint i32 %30, %28, !dbg !21
  %34 = or disjoint i32 %32, %28, !dbg !21
  %35 = or disjoint i32 %34, 16, !dbg !21
  %36 = or disjoint i32 %34, 32, !dbg !21
  %37 = or disjoint i32 %34, 48, !dbg !21
  %38 = icmp slt i32 %33, 64, !dbg !22
  %39 = icmp slt i32 %34, 64, !dbg !22
  %40 = icmp slt i32 %35, 64, !dbg !22
  %41 = icmp slt i32 %36, 64, !dbg !22
  %42 = icmp slt i32 %37, 64, !dbg !22
  %43 = shl nuw nsw i32 %24, 6, !dbg !23
  %44 = or disjoint i32 %43, 128, !dbg !23
  %45 = or disjoint i32 %43, 256, !dbg !23
  %46 = or disjoint i32 %43, 384, !dbg !23
  %47 = shl nuw nsw i32 %16, 12, !dbg !24
  %48 = add i32 %47, %33, !dbg !25
  %49 = add i32 %48, %43, !dbg !26
  %50 = add i32 %48, %44, !dbg !26
  %51 = add i32 %48, %45, !dbg !26
  %52 = add i32 %48, %46, !dbg !26
  %53 = sext i32 %49 to i64, !dbg !27
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !27
  %55 = sext i32 %50 to i64, !dbg !27
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !27
  %57 = sext i32 %51 to i64, !dbg !27
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !27
  %59 = sext i32 %52 to i64, !dbg !27
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !27
  %61 = and i1 %26, %38, !dbg !28
  %62 = and i1 %26, %39, !dbg !28
  %63 = and i1 %26, %40, !dbg !28
  %64 = and i1 %26, %41, !dbg !28
  %65 = and i1 %26, %42, !dbg !28
  %66 = and i1 %18, %61, !dbg !29
  %67 = and i1 %18, %62, !dbg !29
  %68 = and i1 %18, %63, !dbg !29
  %69 = and i1 %18, %64, !dbg !29
  %70 = and i1 %18, %65, !dbg !29
  %71 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !30
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$6 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l,b"(ptr addrspace(1) %54, i64 %71, i1 %66) #4, !dbg !30
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !30
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !30
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !30
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !30
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !30
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$6 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l,b"(ptr addrspace(1) %56, i64 %77, i1 %66) #4, !dbg !30
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !30
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !30
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !30
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !30
  %83 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !30
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$6 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l,b"(ptr addrspace(1) %58, i64 %83, i1 %66) #4, !dbg !30
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !30
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !30
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !30
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !30
  %89 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !30
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$6 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l,b"(ptr addrspace(1) %60, i64 %89, i1 %66) #4, !dbg !30
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !30
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !30
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !30
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !30
  %95 = shl nuw nsw i32 %11, 5, !dbg !30
  %96 = and i32 %95, 480, !dbg !30
  %97 = shl nuw nsw i32 %21, 2, !dbg !30
  %98 = or disjoint i32 %96, %97, !dbg !30
  %99 = or disjoint i32 %13, %98, !dbg !30
  %100 = shl nuw nsw i32 %11, 8, !dbg !30
  %101 = and i32 %100, 3584, !dbg !30
  %102 = and i32 %22, 24, !dbg !30
  %103 = or disjoint i32 %102, %101, !dbg !30
  %104 = lshr i32 %11, 1, !dbg !30
  %105 = and i32 %104, 32, !dbg !30
  %106 = or disjoint i32 %103, %105, !dbg !30
  %107 = or disjoint i32 %106, %15, !dbg !30
  %108 = lshr exact i32 %21, 1, !dbg !30
  %109 = or disjoint i32 %107, %108, !dbg !30
  %110 = lshr exact i32 %98, 1, !dbg !30
  %111 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %110, !dbg !30
  %112 = getelementptr inbounds nuw float, ptr addrspace(3) %111, i32 %99, !dbg !30
  %113 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !30
  store <1 x i32> %113, ptr addrspace(3) %112, align 4, !dbg !30
  %114 = or disjoint i32 %99, 8, !dbg !30
  %115 = lshr i32 %114, 3, !dbg !30
  %116 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %115, !dbg !30
  %117 = getelementptr inbounds nuw float, ptr addrspace(3) %116, i32 %114, !dbg !30
  %118 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !30
  store <1 x i32> %118, ptr addrspace(3) %117, align 4, !dbg !30
  %119 = or disjoint i32 %99, 16, !dbg !30
  %120 = lshr i32 %119, 3, !dbg !30
  %121 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %120, !dbg !30
  %122 = getelementptr inbounds nuw float, ptr addrspace(3) %121, i32 %119, !dbg !30
  %123 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !30
  store <1 x i32> %123, ptr addrspace(3) %122, align 4, !dbg !30
  %124 = or disjoint i32 %99, 24, !dbg !30
  %125 = lshr i32 %124, 3, !dbg !30
  %126 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %125, !dbg !30
  %127 = getelementptr inbounds nuw float, ptr addrspace(3) %126, i32 %124, !dbg !30
  %128 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !30
  store <1 x i32> %128, ptr addrspace(3) %127, align 4, !dbg !30
  %129 = or disjoint i32 %99, 1024, !dbg !30
  %130 = lshr i32 %129, 3, !dbg !30
  %131 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %130, !dbg !30
  %132 = getelementptr inbounds nuw float, ptr addrspace(3) %131, i32 %129, !dbg !30
  %133 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !30
  store <1 x i32> %133, ptr addrspace(3) %132, align 4, !dbg !30
  %134 = or disjoint i32 %99, 1032, !dbg !30
  %135 = lshr i32 %134, 3, !dbg !30
  %136 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %135, !dbg !30
  %137 = getelementptr inbounds nuw float, ptr addrspace(3) %136, i32 %134, !dbg !30
  %138 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !30
  store <1 x i32> %138, ptr addrspace(3) %137, align 4, !dbg !30
  %139 = or disjoint i32 %99, 1040, !dbg !30
  %140 = lshr i32 %139, 3, !dbg !30
  %141 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %140, !dbg !30
  %142 = getelementptr inbounds nuw float, ptr addrspace(3) %141, i32 %139, !dbg !30
  %143 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !30
  store <1 x i32> %143, ptr addrspace(3) %142, align 4, !dbg !30
  %144 = or disjoint i32 %99, 1048, !dbg !30
  %145 = lshr i32 %144, 3, !dbg !30
  %146 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %145, !dbg !30
  %147 = getelementptr inbounds nuw float, ptr addrspace(3) %146, i32 %144, !dbg !30
  %148 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !30
  store <1 x i32> %148, ptr addrspace(3) %147, align 4, !dbg !30
  %149 = or disjoint i32 %99, 2048, !dbg !30
  %150 = lshr i32 %149, 3, !dbg !30
  %151 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %150, !dbg !30
  %152 = getelementptr inbounds nuw float, ptr addrspace(3) %151, i32 %149, !dbg !30
  %153 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !30
  store <1 x i32> %153, ptr addrspace(3) %152, align 4, !dbg !30
  %154 = or disjoint i32 %99, 2056, !dbg !30
  %155 = lshr i32 %154, 3, !dbg !30
  %156 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %155, !dbg !30
  %157 = getelementptr inbounds nuw float, ptr addrspace(3) %156, i32 %154, !dbg !30
  %158 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !30
  store <1 x i32> %158, ptr addrspace(3) %157, align 4, !dbg !30
  %159 = or disjoint i32 %99, 2064, !dbg !30
  %160 = lshr i32 %159, 3, !dbg !30
  %161 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %160, !dbg !30
  %162 = getelementptr inbounds nuw float, ptr addrspace(3) %161, i32 %159, !dbg !30
  %163 = insertelement <1 x i32> poison, i32 %87, i64 0, !dbg !30
  store <1 x i32> %163, ptr addrspace(3) %162, align 4, !dbg !30
  %164 = or disjoint i32 %99, 2072, !dbg !30
  %165 = lshr i32 %164, 3, !dbg !30
  %166 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %165, !dbg !30
  %167 = getelementptr inbounds nuw float, ptr addrspace(3) %166, i32 %164, !dbg !30
  %168 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !30
  store <1 x i32> %168, ptr addrspace(3) %167, align 4, !dbg !30
  %169 = or disjoint i32 %99, 3072, !dbg !30
  %170 = lshr i32 %169, 3, !dbg !30
  %171 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %170, !dbg !30
  %172 = getelementptr inbounds nuw float, ptr addrspace(3) %171, i32 %169, !dbg !30
  %173 = insertelement <1 x i32> poison, i32 %91, i64 0, !dbg !30
  store <1 x i32> %173, ptr addrspace(3) %172, align 4, !dbg !30
  %174 = or disjoint i32 %99, 3080, !dbg !30
  %175 = lshr i32 %174, 3, !dbg !30
  %176 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %175, !dbg !30
  %177 = getelementptr inbounds nuw float, ptr addrspace(3) %176, i32 %174, !dbg !30
  %178 = insertelement <1 x i32> poison, i32 %92, i64 0, !dbg !30
  store <1 x i32> %178, ptr addrspace(3) %177, align 4, !dbg !30
  %179 = or disjoint i32 %99, 3088, !dbg !30
  %180 = lshr i32 %179, 3, !dbg !30
  %181 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %180, !dbg !30
  %182 = getelementptr inbounds nuw float, ptr addrspace(3) %181, i32 %179, !dbg !30
  %183 = insertelement <1 x i32> poison, i32 %93, i64 0, !dbg !30
  store <1 x i32> %183, ptr addrspace(3) %182, align 4, !dbg !30
  %184 = or disjoint i32 %99, 3096, !dbg !30
  %185 = lshr i32 %184, 3, !dbg !30
  %186 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %185, !dbg !30
  %187 = getelementptr inbounds nuw float, ptr addrspace(3) %186, i32 %184, !dbg !30
  %188 = insertelement <1 x i32> poison, i32 %94, i64 0, !dbg !30
  store <1 x i32> %188, ptr addrspace(3) %187, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  %189 = lshr i32 %109, 3, !dbg !30
  %190 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %189, !dbg !30
  %191 = getelementptr inbounds nuw float, ptr addrspace(3) %190, i32 %109, !dbg !30
  %192 = load float, ptr addrspace(3) %191, align 4, !dbg !30
  %193 = getelementptr inbounds nuw i8, ptr addrspace(3) %191, i32 4, !dbg !30
  %194 = load float, ptr addrspace(3) %193, align 4, !dbg !30
  %195 = getelementptr inbounds nuw i8, ptr addrspace(3) %191, i32 8, !dbg !30
  %196 = load float, ptr addrspace(3) %195, align 4, !dbg !30
  %197 = getelementptr inbounds nuw i8, ptr addrspace(3) %191, i32 12, !dbg !30
  %198 = load float, ptr addrspace(3) %197, align 4, !dbg !30
  %199 = or disjoint i32 %109, 128, !dbg !30
  %200 = lshr i32 %199, 3, !dbg !30
  %201 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %200, !dbg !30
  %202 = getelementptr inbounds nuw float, ptr addrspace(3) %201, i32 %199, !dbg !30
  %203 = load float, ptr addrspace(3) %202, align 4, !dbg !30
  %204 = or disjoint i32 %109, 129, !dbg !30
  %205 = lshr i32 %204, 3, !dbg !30
  %206 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %205, !dbg !30
  %207 = getelementptr inbounds nuw float, ptr addrspace(3) %206, i32 %204, !dbg !30
  %208 = load float, ptr addrspace(3) %207, align 4, !dbg !30
  %209 = or disjoint i32 %109, 130, !dbg !30
  %210 = lshr i32 %209, 3, !dbg !30
  %211 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %210, !dbg !30
  %212 = getelementptr inbounds nuw float, ptr addrspace(3) %211, i32 %209, !dbg !30
  %213 = load float, ptr addrspace(3) %212, align 4, !dbg !30
  %214 = or disjoint i32 %109, 131, !dbg !30
  %215 = lshr i32 %214, 3, !dbg !30
  %216 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %215, !dbg !30
  %217 = getelementptr inbounds nuw float, ptr addrspace(3) %216, i32 %214, !dbg !30
  %218 = load float, ptr addrspace(3) %217, align 4, !dbg !30
  %219 = or disjoint i32 %109, 256, !dbg !30
  %220 = lshr i32 %219, 3, !dbg !30
  %221 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %220, !dbg !30
  %222 = getelementptr inbounds nuw float, ptr addrspace(3) %221, i32 %219, !dbg !30
  %223 = load float, ptr addrspace(3) %222, align 4, !dbg !30
  %224 = or disjoint i32 %109, 257, !dbg !30
  %225 = lshr i32 %224, 3, !dbg !30
  %226 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %225, !dbg !30
  %227 = getelementptr inbounds nuw float, ptr addrspace(3) %226, i32 %224, !dbg !30
  %228 = load float, ptr addrspace(3) %227, align 4, !dbg !30
  %229 = or disjoint i32 %109, 258, !dbg !30
  %230 = lshr i32 %229, 3, !dbg !30
  %231 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %230, !dbg !30
  %232 = getelementptr inbounds nuw float, ptr addrspace(3) %231, i32 %229, !dbg !30
  %233 = load float, ptr addrspace(3) %232, align 4, !dbg !30
  %234 = or disjoint i32 %109, 259, !dbg !30
  %235 = lshr i32 %234, 3, !dbg !30
  %236 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %235, !dbg !30
  %237 = getelementptr inbounds nuw float, ptr addrspace(3) %236, i32 %234, !dbg !30
  %238 = load float, ptr addrspace(3) %237, align 4, !dbg !30
  %239 = or disjoint i32 %109, 384, !dbg !30
  %240 = lshr i32 %239, 3, !dbg !30
  %241 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %240, !dbg !30
  %242 = getelementptr inbounds nuw float, ptr addrspace(3) %241, i32 %239, !dbg !30
  %243 = load float, ptr addrspace(3) %242, align 4, !dbg !30
  %244 = or disjoint i32 %109, 385, !dbg !30
  %245 = lshr i32 %244, 3, !dbg !30
  %246 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %245, !dbg !30
  %247 = getelementptr inbounds nuw float, ptr addrspace(3) %246, i32 %244, !dbg !30
  %248 = load float, ptr addrspace(3) %247, align 4, !dbg !30
  %249 = or disjoint i32 %109, 386, !dbg !30
  %250 = lshr i32 %249, 3, !dbg !30
  %251 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %250, !dbg !30
  %252 = getelementptr inbounds nuw float, ptr addrspace(3) %251, i32 %249, !dbg !30
  %253 = load float, ptr addrspace(3) %252, align 4, !dbg !30
  %254 = or disjoint i32 %109, 387, !dbg !30
  %255 = lshr i32 %254, 3, !dbg !30
  %256 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %255, !dbg !30
  %257 = getelementptr inbounds nuw float, ptr addrspace(3) %256, i32 %254, !dbg !30
  %258 = load float, ptr addrspace(3) %257, align 4, !dbg !30
  %259 = shl i32 %34, 3, !dbg !31
  %260 = shl i32 %35, 3, !dbg !31
  %261 = shl i32 %36, 3, !dbg !31
  %262 = shl i32 %37, 3, !dbg !31
  %263 = shl nuw nsw i32 %25, 9, !dbg !32
  %264 = add nuw nsw i32 %263, %17, !dbg !33
  %265 = add i32 %264, %259, !dbg !34
  %266 = add i32 %264, %260, !dbg !34
  %267 = add i32 %264, %261, !dbg !34
  %268 = add i32 %264, %262, !dbg !34
  %269 = sext i32 %265 to i64, !dbg !35
  %270 = getelementptr float, ptr addrspace(1) %1, i64 %269, !dbg !35
  %271 = sext i32 %266 to i64, !dbg !35
  %272 = getelementptr float, ptr addrspace(1) %1, i64 %271, !dbg !35
  %273 = sext i32 %267 to i64, !dbg !35
  %274 = getelementptr float, ptr addrspace(1) %1, i64 %273, !dbg !35
  %275 = sext i32 %268 to i64, !dbg !35
  %276 = getelementptr float, ptr addrspace(1) %1, i64 %275, !dbg !35
  %277 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !36
  %278 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$6 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l,b"(ptr addrspace(1) %270, i64 %277, i1 %67) #4, !dbg !36
  %279 = extractvalue { i32, i32, i32, i32 } %278, 0, !dbg !36
  %280 = extractvalue { i32, i32, i32, i32 } %278, 1, !dbg !36
  %281 = extractvalue { i32, i32, i32, i32 } %278, 2, !dbg !36
  %282 = extractvalue { i32, i32, i32, i32 } %278, 3, !dbg !36
  %283 = bitcast i32 %279 to float, !dbg !36
  %284 = bitcast i32 %280 to float, !dbg !36
  %285 = bitcast i32 %281 to float, !dbg !36
  %286 = bitcast i32 %282 to float, !dbg !36
  %287 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !36
  %288 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$6 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l,b"(ptr addrspace(1) %272, i64 %287, i1 %68) #4, !dbg !36
  %289 = extractvalue { i32, i32, i32, i32 } %288, 0, !dbg !36
  %290 = extractvalue { i32, i32, i32, i32 } %288, 1, !dbg !36
  %291 = extractvalue { i32, i32, i32, i32 } %288, 2, !dbg !36
  %292 = extractvalue { i32, i32, i32, i32 } %288, 3, !dbg !36
  %293 = bitcast i32 %289 to float, !dbg !36
  %294 = bitcast i32 %290 to float, !dbg !36
  %295 = bitcast i32 %291 to float, !dbg !36
  %296 = bitcast i32 %292 to float, !dbg !36
  %297 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !36
  %298 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$6 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l,b"(ptr addrspace(1) %274, i64 %297, i1 %69) #4, !dbg !36
  %299 = extractvalue { i32, i32, i32, i32 } %298, 0, !dbg !36
  %300 = extractvalue { i32, i32, i32, i32 } %298, 1, !dbg !36
  %301 = extractvalue { i32, i32, i32, i32 } %298, 2, !dbg !36
  %302 = extractvalue { i32, i32, i32, i32 } %298, 3, !dbg !36
  %303 = bitcast i32 %299 to float, !dbg !36
  %304 = bitcast i32 %300 to float, !dbg !36
  %305 = bitcast i32 %301 to float, !dbg !36
  %306 = bitcast i32 %302 to float, !dbg !36
  %307 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !36
  %308 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$6 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l,b"(ptr addrspace(1) %276, i64 %307, i1 %70) #4, !dbg !36
  %309 = extractvalue { i32, i32, i32, i32 } %308, 0, !dbg !36
  %310 = extractvalue { i32, i32, i32, i32 } %308, 1, !dbg !36
  %311 = extractvalue { i32, i32, i32, i32 } %308, 2, !dbg !36
  %312 = extractvalue { i32, i32, i32, i32 } %308, 3, !dbg !36
  %313 = bitcast i32 %309 to float, !dbg !36
  %314 = bitcast i32 %310 to float, !dbg !36
  %315 = bitcast i32 %311 to float, !dbg !36
  %316 = bitcast i32 %312 to float, !dbg !36
  %317 = shl nuw nsw i32 %17, 6, !dbg !37
  %318 = or disjoint i32 %317, 64, !dbg !37
  %319 = or disjoint i32 %317, 128, !dbg !37
  %320 = or disjoint i32 %317, 192, !dbg !37
  %321 = add nuw nsw i32 %317, %25, !dbg !38
  %322 = add nuw nsw i32 %318, %25, !dbg !38
  %323 = add nuw nsw i32 %319, %25, !dbg !38
  %324 = add nuw nsw i32 %320, %25, !dbg !38
  %325 = zext nneg i32 %321 to i64, !dbg !39
  %326 = getelementptr float, ptr addrspace(1) %2, i64 %325, !dbg !39
  %327 = zext nneg i32 %322 to i64, !dbg !39
  %328 = getelementptr float, ptr addrspace(1) %2, i64 %327, !dbg !39
  %329 = zext nneg i32 %323 to i64, !dbg !39
  %330 = getelementptr float, ptr addrspace(1) %2, i64 %329, !dbg !39
  %331 = zext nneg i32 %324 to i64, !dbg !39
  %332 = getelementptr float, ptr addrspace(1) %2, i64 %331, !dbg !39
  %333 = and i1 %26, %18, !dbg !40
  %334 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !41
  %335 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %326, i64 %334, i1 %333) #4, !dbg !41
  %336 = bitcast i32 %335 to float, !dbg !41
  %337 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !41
  %338 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %328, i64 %337, i1 %333) #4, !dbg !41
  %339 = bitcast i32 %338 to float, !dbg !41
  %340 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !41
  %341 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %330, i64 %340, i1 %333) #4, !dbg !41
  %342 = bitcast i32 %341 to float, !dbg !41
  %343 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !41
  %344 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %332, i64 %343, i1 %333) #4, !dbg !41
  %345 = bitcast i32 %344 to float, !dbg !41
  %346 = getelementptr float, ptr addrspace(1) %3, i64 %325, !dbg !42
  %347 = getelementptr float, ptr addrspace(1) %3, i64 %327, !dbg !42
  %348 = getelementptr float, ptr addrspace(1) %3, i64 %329, !dbg !42
  %349 = getelementptr float, ptr addrspace(1) %3, i64 %331, !dbg !42
  %350 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !43
  %351 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %346, i64 %350, i1 %333) #4, !dbg !43
  %352 = bitcast i32 %351 to float, !dbg !43
  %353 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !43
  %354 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %347, i64 %353, i1 %333) #4, !dbg !43
  %355 = bitcast i32 %354 to float, !dbg !43
  %356 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !43
  %357 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %348, i64 %356, i1 %333) #4, !dbg !43
  %358 = bitcast i32 %357 to float, !dbg !43
  %359 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !43
  %360 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %349, i64 %359, i1 %333) #4, !dbg !43
  %361 = bitcast i32 %360 to float, !dbg !43
  %362 = fadd float %192, %283, !dbg !44
  %363 = fadd float %194, %284, !dbg !44
  %364 = fadd float %196, %285, !dbg !44
  %365 = fadd float %198, %286, !dbg !44
  %366 = fadd float %203, %293, !dbg !44
  %367 = fadd float %208, %294, !dbg !44
  %368 = fadd float %213, %295, !dbg !44
  %369 = fadd float %218, %296, !dbg !44
  %370 = fadd float %223, %303, !dbg !44
  %371 = fadd float %228, %304, !dbg !44
  %372 = fadd float %233, %305, !dbg !44
  %373 = fadd float %238, %306, !dbg !44
  %374 = fadd float %243, %313, !dbg !44
  %375 = fadd float %248, %314, !dbg !44
  %376 = fadd float %253, %315, !dbg !44
  %377 = fadd float %258, %316, !dbg !44
  %378 = fsub float %362, %336, !dbg !45
  %379 = fsub float %363, %339, !dbg !45
  %380 = fsub float %364, %342, !dbg !45
  %381 = fsub float %365, %345, !dbg !45
  %382 = fsub float %366, %336, !dbg !45
  %383 = fsub float %367, %339, !dbg !45
  %384 = fsub float %368, %342, !dbg !45
  %385 = fsub float %369, %345, !dbg !45
  %386 = fsub float %370, %336, !dbg !45
  %387 = fsub float %371, %339, !dbg !45
  %388 = fsub float %372, %342, !dbg !45
  %389 = fsub float %373, %345, !dbg !45
  %390 = fsub float %374, %336, !dbg !45
  %391 = fsub float %375, %339, !dbg !45
  %392 = fsub float %376, %342, !dbg !45
  %393 = fsub float %377, %345, !dbg !45
  %394 = fmul float %378, 0x3FF7154760000000, !dbg !46
  %395 = tail call float @llvm.nvvm.ex2.approx.f(float %394), !dbg !46
  %396 = fmul float %379, 0x3FF7154760000000, !dbg !46
  %397 = tail call float @llvm.nvvm.ex2.approx.f(float %396), !dbg !46
  %398 = fmul float %380, 0x3FF7154760000000, !dbg !46
  %399 = tail call float @llvm.nvvm.ex2.approx.f(float %398), !dbg !46
  %400 = fmul float %381, 0x3FF7154760000000, !dbg !46
  %401 = tail call float @llvm.nvvm.ex2.approx.f(float %400), !dbg !46
  %402 = fmul float %382, 0x3FF7154760000000, !dbg !46
  %403 = tail call float @llvm.nvvm.ex2.approx.f(float %402), !dbg !46
  %404 = fmul float %383, 0x3FF7154760000000, !dbg !46
  %405 = tail call float @llvm.nvvm.ex2.approx.f(float %404), !dbg !46
  %406 = fmul float %384, 0x3FF7154760000000, !dbg !46
  %407 = tail call float @llvm.nvvm.ex2.approx.f(float %406), !dbg !46
  %408 = fmul float %385, 0x3FF7154760000000, !dbg !46
  %409 = tail call float @llvm.nvvm.ex2.approx.f(float %408), !dbg !46
  %410 = fmul float %386, 0x3FF7154760000000, !dbg !46
  %411 = tail call float @llvm.nvvm.ex2.approx.f(float %410), !dbg !46
  %412 = fmul float %387, 0x3FF7154760000000, !dbg !46
  %413 = tail call float @llvm.nvvm.ex2.approx.f(float %412), !dbg !46
  %414 = fmul float %388, 0x3FF7154760000000, !dbg !46
  %415 = tail call float @llvm.nvvm.ex2.approx.f(float %414), !dbg !46
  %416 = fmul float %389, 0x3FF7154760000000, !dbg !46
  %417 = tail call float @llvm.nvvm.ex2.approx.f(float %416), !dbg !46
  %418 = fmul float %390, 0x3FF7154760000000, !dbg !46
  %419 = tail call float @llvm.nvvm.ex2.approx.f(float %418), !dbg !46
  %420 = fmul float %391, 0x3FF7154760000000, !dbg !46
  %421 = tail call float @llvm.nvvm.ex2.approx.f(float %420), !dbg !46
  %422 = fmul float %392, 0x3FF7154760000000, !dbg !46
  %423 = tail call float @llvm.nvvm.ex2.approx.f(float %422), !dbg !46
  %424 = fmul float %393, 0x3FF7154760000000, !dbg !46
  %425 = tail call float @llvm.nvvm.ex2.approx.f(float %424), !dbg !46
  %426 = tail call float @llvm.nvvm.div.full(float %395, float %352), !dbg !47
  %427 = tail call float @llvm.nvvm.div.full(float %397, float %355), !dbg !47
  %428 = tail call float @llvm.nvvm.div.full(float %399, float %358), !dbg !47
  %429 = tail call float @llvm.nvvm.div.full(float %401, float %361), !dbg !47
  %430 = tail call float @llvm.nvvm.div.full(float %403, float %352), !dbg !47
  %431 = tail call float @llvm.nvvm.div.full(float %405, float %355), !dbg !47
  %432 = tail call float @llvm.nvvm.div.full(float %407, float %358), !dbg !47
  %433 = tail call float @llvm.nvvm.div.full(float %409, float %361), !dbg !47
  %434 = tail call float @llvm.nvvm.div.full(float %411, float %352), !dbg !47
  %435 = tail call float @llvm.nvvm.div.full(float %413, float %355), !dbg !47
  %436 = tail call float @llvm.nvvm.div.full(float %415, float %358), !dbg !47
  %437 = tail call float @llvm.nvvm.div.full(float %417, float %361), !dbg !47
  %438 = tail call float @llvm.nvvm.div.full(float %419, float %352), !dbg !47
  %439 = tail call float @llvm.nvvm.div.full(float %421, float %355), !dbg !47
  %440 = tail call float @llvm.nvvm.div.full(float %423, float %358), !dbg !47
  %441 = tail call float @llvm.nvvm.div.full(float %425, float %361), !dbg !47
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !48
  %442 = shl nuw nsw i32 %14, 11, !dbg !49
  %443 = and i32 %95, 448, !dbg !49
  %444 = or disjoint i32 %442, %443, !dbg !49
  %445 = or disjoint i32 %32, %444, !dbg !49
  %446 = and i32 %95, 3584, !dbg !49
  %447 = or disjoint i32 %446, %30, !dbg !49
  %448 = or disjoint i32 %447, %108, !dbg !49
  %449 = lshr exact i32 %444, 2, !dbg !49
  %450 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %449, !dbg !49
  %451 = getelementptr inbounds nuw float, ptr addrspace(3) %450, i32 %445, !dbg !49
  store float %426, ptr addrspace(3) %451, align 4, !dbg !49
  %452 = or disjoint i32 %445, 512, !dbg !49
  %453 = lshr i32 %452, 4, !dbg !49
  %454 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %453, !dbg !49
  %455 = getelementptr inbounds nuw float, ptr addrspace(3) %454, i32 %452, !dbg !49
  store float %427, ptr addrspace(3) %455, align 4, !dbg !49
  %456 = or disjoint i32 %445, 1024, !dbg !49
  %457 = lshr i32 %456, 4, !dbg !49
  %458 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %457, !dbg !49
  %459 = getelementptr inbounds nuw float, ptr addrspace(3) %458, i32 %456, !dbg !49
  store float %428, ptr addrspace(3) %459, align 4, !dbg !49
  %460 = or disjoint i32 %445, 1536, !dbg !49
  %461 = lshr i32 %460, 4, !dbg !49
  %462 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %461, !dbg !49
  %463 = getelementptr inbounds nuw float, ptr addrspace(3) %462, i32 %460, !dbg !49
  store float %429, ptr addrspace(3) %463, align 4, !dbg !49
  %464 = getelementptr inbounds nuw i8, ptr addrspace(3) %451, i32 64, !dbg !49
  store float %430, ptr addrspace(3) %464, align 4, !dbg !49
  %465 = or disjoint i32 %445, 528, !dbg !49
  %466 = lshr i32 %465, 4, !dbg !49
  %467 = and i32 %466, 134217660, !dbg !49
  %468 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %467, !dbg !49
  %469 = getelementptr inbounds nuw float, ptr addrspace(3) %468, i32 %465, !dbg !49
  store float %431, ptr addrspace(3) %469, align 4, !dbg !49
  %470 = or disjoint i32 %445, 1040, !dbg !49
  %471 = lshr i32 %470, 4, !dbg !49
  %472 = and i32 %471, 134217692, !dbg !49
  %473 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %472, !dbg !49
  %474 = getelementptr inbounds nuw float, ptr addrspace(3) %473, i32 %470, !dbg !49
  store float %432, ptr addrspace(3) %474, align 4, !dbg !49
  %475 = or disjoint i32 %445, 1552, !dbg !49
  %476 = lshr i32 %475, 4, !dbg !49
  %477 = and i32 %476, 134217724, !dbg !49
  %478 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %477, !dbg !49
  %479 = getelementptr inbounds nuw float, ptr addrspace(3) %478, i32 %475, !dbg !49
  store float %433, ptr addrspace(3) %479, align 4, !dbg !49
  %480 = getelementptr inbounds nuw i8, ptr addrspace(3) %451, i32 128, !dbg !49
  store float %434, ptr addrspace(3) %480, align 4, !dbg !49
  %481 = or disjoint i32 %445, 544, !dbg !49
  %482 = lshr i32 %481, 4, !dbg !49
  %483 = and i32 %482, 134217660, !dbg !49
  %484 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %483, !dbg !49
  %485 = getelementptr inbounds nuw float, ptr addrspace(3) %484, i32 %481, !dbg !49
  store float %435, ptr addrspace(3) %485, align 4, !dbg !49
  %486 = or disjoint i32 %445, 1056, !dbg !49
  %487 = lshr i32 %486, 4, !dbg !49
  %488 = and i32 %487, 134217692, !dbg !49
  %489 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %488, !dbg !49
  %490 = getelementptr inbounds nuw float, ptr addrspace(3) %489, i32 %486, !dbg !49
  store float %436, ptr addrspace(3) %490, align 4, !dbg !49
  %491 = or disjoint i32 %445, 1568, !dbg !49
  %492 = lshr i32 %491, 4, !dbg !49
  %493 = and i32 %492, 134217724, !dbg !49
  %494 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %493, !dbg !49
  %495 = getelementptr inbounds nuw float, ptr addrspace(3) %494, i32 %491, !dbg !49
  store float %437, ptr addrspace(3) %495, align 4, !dbg !49
  %496 = getelementptr inbounds nuw i8, ptr addrspace(3) %451, i32 192, !dbg !49
  store float %438, ptr addrspace(3) %496, align 4, !dbg !49
  %497 = or disjoint i32 %445, 560, !dbg !49
  %498 = lshr i32 %497, 4, !dbg !49
  %499 = and i32 %498, 134217660, !dbg !49
  %500 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %499, !dbg !49
  %501 = getelementptr inbounds nuw float, ptr addrspace(3) %500, i32 %497, !dbg !49
  store float %439, ptr addrspace(3) %501, align 4, !dbg !49
  %502 = or disjoint i32 %445, 1072, !dbg !49
  %503 = lshr i32 %502, 4, !dbg !49
  %504 = and i32 %503, 134217692, !dbg !49
  %505 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %504, !dbg !49
  %506 = getelementptr inbounds nuw float, ptr addrspace(3) %505, i32 %502, !dbg !49
  store float %440, ptr addrspace(3) %506, align 4, !dbg !49
  %507 = or disjoint i32 %445, 1584, !dbg !49
  %508 = lshr i32 %507, 4, !dbg !49
  %509 = and i32 %508, 134217724, !dbg !49
  %510 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %509, !dbg !49
  %511 = getelementptr inbounds nuw float, ptr addrspace(3) %510, i32 %507, !dbg !49
  store float %441, ptr addrspace(3) %511, align 4, !dbg !49
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !49
  %512 = lshr i32 %448, 4, !dbg !49
  %513 = and i32 %512, 228, !dbg !49
  %514 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %513, !dbg !49
  %515 = getelementptr inbounds nuw float, ptr addrspace(3) %514, i32 %448, !dbg !49
  %516 = or disjoint i32 %448, 128, !dbg !49
  %517 = lshr i32 %516, 4, !dbg !49
  %518 = and i32 %517, 236, !dbg !49
  %519 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %518, !dbg !49
  %520 = getelementptr inbounds nuw float, ptr addrspace(3) %519, i32 %516, !dbg !49
  %521 = load <4 x i32>, ptr addrspace(3) %520, align 16, !dbg !49
  %522 = or disjoint i32 %448, 256, !dbg !49
  %523 = lshr i32 %522, 4, !dbg !49
  %524 = and i32 %523, 244, !dbg !49
  %525 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %524, !dbg !49
  %526 = getelementptr inbounds nuw float, ptr addrspace(3) %525, i32 %522, !dbg !49
  %527 = load <4 x i32>, ptr addrspace(3) %526, align 16, !dbg !49
  %528 = or disjoint i32 %448, 384, !dbg !49
  %529 = lshr i32 %528, 4, !dbg !49
  %530 = and i32 %529, 252, !dbg !49
  %531 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %530, !dbg !49
  %532 = getelementptr inbounds nuw float, ptr addrspace(3) %531, i32 %528, !dbg !49
  %533 = load <4 x i32>, ptr addrspace(3) %532, align 16, !dbg !49
  %.extract = load i32, ptr addrspace(3) %515, align 16, !dbg !49
  %534 = getelementptr inbounds nuw i8, ptr addrspace(3) %515, i32 4, !dbg !49
  %.extract21 = load i32, ptr addrspace(3) %534, align 4, !dbg !49
  %535 = getelementptr inbounds nuw i8, ptr addrspace(3) %515, i32 8, !dbg !49
  %.extract22 = load i32, ptr addrspace(3) %535, align 8, !dbg !49
  %536 = getelementptr inbounds nuw i8, ptr addrspace(3) %515, i32 12, !dbg !49
  %.extract23 = load i32, ptr addrspace(3) %536, align 4, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract21, i32 %.extract22, i32 %.extract23, ptr addrspace(1) %54, i1 %66) #4, !dbg !49
  %.extract24 = extractelement <4 x i32> %521, i64 0, !dbg !49
  %.extract25 = extractelement <4 x i32> %521, i64 1, !dbg !49
  %.extract26 = extractelement <4 x i32> %521, i64 2, !dbg !49
  %.extract27 = extractelement <4 x i32> %521, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract24, i32 %.extract25, i32 %.extract26, i32 %.extract27, ptr addrspace(1) %56, i1 %66) #4, !dbg !49
  %.extract28 = extractelement <4 x i32> %527, i64 0, !dbg !49
  %.extract29 = extractelement <4 x i32> %527, i64 1, !dbg !49
  %.extract30 = extractelement <4 x i32> %527, i64 2, !dbg !49
  %.extract31 = extractelement <4 x i32> %527, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract28, i32 %.extract29, i32 %.extract30, i32 %.extract31, ptr addrspace(1) %58, i1 %66) #4, !dbg !49
  %.extract32 = extractelement <4 x i32> %533, i64 0, !dbg !49
  %.extract33 = extractelement <4 x i32> %533, i64 1, !dbg !49
  %.extract34 = extractelement <4 x i32> %533, i64 2, !dbg !49
  %.extract35 = extractelement <4 x i32> %533, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract32, i32 %.extract33, i32 %.extract34, i32 %.extract35, ptr addrspace(1) %60, i1 %66) #4, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.z() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { "nvvm.reqntid"="256" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "c7fydtvgc2ryykzkj4wnk3cmbeju5cyfoey5m4w2sv6riksngfma.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/7f")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "triton_poi_fused__softmax_add_4", linkageName: "triton_poi_fused__softmax_add_4", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 22, column: 28, scope: !5)
!9 = !DILocation(line: 22, column: 33, scope: !5)
!10 = !DILocation(line: 23, column: 44, scope: !5)
!11 = !DILocation(line: 23, column: 23, scope: !5)
!12 = !DILocation(line: 24, column: 21, scope: !5)
!13 = !DILocation(line: 25, column: 28, scope: !5)
!14 = !DILocation(line: 25, column: 33, scope: !5)
!15 = !DILocation(line: 26, column: 44, scope: !5)
!16 = !DILocation(line: 26, column: 23, scope: !5)
!17 = !DILocation(line: 27, column: 21, scope: !5)
!18 = !DILocation(line: 28, column: 28, scope: !5)
!19 = !DILocation(line: 28, column: 33, scope: !5)
!20 = !DILocation(line: 29, column: 44, scope: !5)
!21 = !DILocation(line: 29, column: 23, scope: !5)
!22 = !DILocation(line: 30, column: 21, scope: !5)
!23 = !DILocation(line: 34, column: 42, scope: !5)
!24 = !DILocation(line: 34, column: 52, scope: !5)
!25 = !DILocation(line: 34, column: 39, scope: !5)
!26 = !DILocation(line: 34, column: 47, scope: !5)
!27 = !DILocation(line: 34, column: 34, scope: !5)
!28 = !DILocation(line: 34, column: 65, scope: !5)
!29 = !DILocation(line: 34, column: 73, scope: !5)
!30 = !DILocation(line: 34, column: 57, scope: !5)
!31 = !DILocation(line: 35, column: 37, scope: !5)
!32 = !DILocation(line: 35, column: 46, scope: !5)
!33 = !DILocation(line: 35, column: 35, scope: !5)
!34 = !DILocation(line: 35, column: 42, scope: !5)
!35 = !DILocation(line: 35, column: 30, scope: !5)
!36 = !DILocation(line: 35, column: 51, scope: !5)
!37 = !DILocation(line: 36, column: 38, scope: !5)
!38 = !DILocation(line: 36, column: 35, scope: !5)
!39 = !DILocation(line: 36, column: 30, scope: !5)
!40 = !DILocation(line: 36, column: 51, scope: !5)
!41 = !DILocation(line: 36, column: 43, scope: !5)
!42 = !DILocation(line: 37, column: 30, scope: !5)
!43 = !DILocation(line: 37, column: 43, scope: !5)
!44 = !DILocation(line: 38, column: 18, scope: !5)
!45 = !DILocation(line: 39, column: 18, scope: !5)
!46 = !DILocation(line: 40, column: 23, scope: !5)
!47 = !DILocation(line: 41, column: 19, scope: !5)
!48 = !DILocation(line: 42, column: 4, scope: !5)
!49 = !DILocation(line: 43, column: 57, scope: !5)
!50 = !DILocation(line: 43, column: 4, scope: !5)
