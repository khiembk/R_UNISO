; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_per_fused_add_mean_mul_pow_rsqrt_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr #0 !dbg !5 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !9
  %13 = and i32 %12, 31, !dbg !9
  %14 = lshr i32 %12, 5, !dbg !9
  %15 = shl nuw nsw i32 %12, 2, !dbg !9
  %16 = and i32 %15, 508, !dbg !9
  %17 = shl i32 %11, 9, !dbg !10
  %18 = or disjoint i32 %16, %17, !dbg !11
  %19 = sext i32 %18 to i64, !dbg !12
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !12
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %20) #6, !dbg !13
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !13
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !13
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !13
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !13
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !14
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %26) #6, !dbg !15
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !15
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !15
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !15
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !15
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !16
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %32) #6, !dbg !17
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !17
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !17
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !17
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !17
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !18
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %38) #6, !dbg !19
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !19
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !19
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !19
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !19
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %19, !dbg !20
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %44) #6, !dbg !21
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !21
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !21
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !21
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !21
  %50 = zext nneg i32 %16 to i64, !dbg !22
  %51 = getelementptr float, ptr addrspace(1) %5, i64 %50, !dbg !22
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #6, !dbg !23
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l"(ptr addrspace(1) %51, i64 %52) #6, !dbg !23
  %54 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !13
  %55 = insertelement <2 x i32> %54, i32 %23, i64 1, !dbg !13
  %56 = bitcast <2 x i32> %55 to <2 x float>, !dbg !13
  %57 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !15
  %58 = insertelement <2 x i32> %57, i32 %29, i64 1, !dbg !15
  %59 = bitcast <2 x i32> %58 to <2 x float>, !dbg !15
  %60 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !17
  %61 = insertelement <2 x i32> %60, i32 %35, i64 1, !dbg !17
  %62 = bitcast <2 x i32> %61 to <2 x float>, !dbg !17
  %63 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !19
  %64 = insertelement <2 x i32> %63, i32 %41, i64 1, !dbg !19
  %65 = bitcast <2 x i32> %64 to <2 x float>, !dbg !19
  %66 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !21
  %67 = insertelement <2 x i32> %66, i32 %47, i64 1, !dbg !21
  %68 = bitcast <2 x i32> %67 to <2 x float>, !dbg !21
  %69 = fadd <2 x float> %56, %59, !dbg !24
  %70 = fadd <2 x float> %69, %62, !dbg !25
  %71 = fadd <2 x float> %70, %65, !dbg !26
  %72 = fadd <2 x float> %71, %68, !dbg !27
  %73 = fmul <2 x float> %72, %72, !dbg !28
  %74 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !13
  %75 = insertelement <2 x i32> %74, i32 %24, i64 1, !dbg !13
  %76 = bitcast <2 x i32> %75 to <2 x float>, !dbg !13
  %77 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !15
  %78 = insertelement <2 x i32> %77, i32 %30, i64 1, !dbg !15
  %79 = bitcast <2 x i32> %78 to <2 x float>, !dbg !15
  %80 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !17
  %81 = insertelement <2 x i32> %80, i32 %36, i64 1, !dbg !17
  %82 = bitcast <2 x i32> %81 to <2 x float>, !dbg !17
  %83 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !19
  %84 = insertelement <2 x i32> %83, i32 %42, i64 1, !dbg !19
  %85 = bitcast <2 x i32> %84 to <2 x float>, !dbg !19
  %86 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !21
  %87 = insertelement <2 x i32> %86, i32 %48, i64 1, !dbg !21
  %88 = bitcast <2 x i32> %87 to <2 x float>, !dbg !21
  %89 = fadd <2 x float> %76, %79, !dbg !24
  %90 = fadd <2 x float> %89, %82, !dbg !25
  %91 = fadd <2 x float> %90, %85, !dbg !26
  %92 = fadd <2 x float> %91, %88, !dbg !27
  %93 = fmul <2 x float> %92, %92, !dbg !28
  %shift = shufflevector <2 x float> %73, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !29
  %94 = fadd <2 x float> %73, %shift, !dbg !29
  %shift1 = shufflevector <2 x float> %93, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !29
  %95 = fadd <2 x float> %shift1, %94, !dbg !29
  %96 = fadd <2 x float> %93, %95, !dbg !29
  %97 = extractelement <2 x float> %96, i64 0, !dbg !29
  %98 = bitcast float %97 to i32, !dbg !33
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 16, i32 31), !dbg !33
  %100 = bitcast i32 %99 to float, !dbg !33
  %101 = fadd float %97, %100, !dbg !29
  %102 = bitcast float %101 to i32, !dbg !33
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 8, i32 31), !dbg !33
  %104 = bitcast i32 %103 to float, !dbg !33
  %105 = fadd float %101, %104, !dbg !29
  %106 = bitcast float %105 to i32, !dbg !33
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 4, i32 31), !dbg !33
  %108 = bitcast i32 %107 to float, !dbg !33
  %109 = fadd float %105, %108, !dbg !29
  %110 = bitcast float %109 to i32, !dbg !33
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 2, i32 31), !dbg !33
  %112 = bitcast i32 %111 to float, !dbg !33
  %113 = fadd float %109, %112, !dbg !29
  %114 = bitcast float %113 to i32, !dbg !33
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 1, i32 31), !dbg !33
  %116 = bitcast i32 %115 to float, !dbg !33
  %117 = fadd float %113, %116, !dbg !29
  %118 = and i32 %14, 3, !dbg !33
  %119 = icmp eq i32 %13, 0, !dbg !33
  %120 = getelementptr float, ptr addrspace(3) @global_smem, i32 %118, !dbg !33
  %121 = bitcast float %117 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 %119) #6, !dbg !33
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !33
  %122 = icmp samesign ult i32 %12, 4, !dbg !33
  %123 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !33
  %124 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %123, i1 %122) #6, !dbg !33
  %125 = bitcast i32 %124 to float, !dbg !33
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 2, i32 31), !dbg !33
  %127 = bitcast i32 %126 to float, !dbg !33
  %128 = fadd float %125, %127, !dbg !29
  %129 = bitcast float %128 to i32, !dbg !33
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 1, i32 31), !dbg !33
  %131 = bitcast i32 %130 to float, !dbg !33
  %132 = fadd float %128, %131, !dbg !29
  %133 = icmp eq i32 %12, 0, !dbg !33
  %134 = bitcast float %132 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %134, i1 %133) #6, !dbg !33
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !33
  %135 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !33
  %136 = fadd float %135, 0.000000e+00, !dbg !34
  %137 = tail call float @llvm.nvvm.div.full(float %136, float 5.120000e+02), !dbg !38
  %138 = fadd float %137, 0x3EB0C6F7A0000000, !dbg !39
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %.not.i = icmp eq i32 %139, 0, !dbg !40
  br i1 %.not.i, label %142, label %140, !dbg !40

140:                                              ; preds = %10
  %141 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %138), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

142:                                              ; preds = %10
  %143 = tail call float @llvm.nvvm.rsqrt.approx.f(float %138), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %140, %142
  %.0.i = phi float [ %141, %140 ], [ %143, %142 ], !dbg !40
  %144 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !23
  %145 = bitcast i32 %144 to float, !dbg !23
  %146 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !23
  %147 = bitcast i32 %146 to float, !dbg !23
  %148 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !23
  %149 = bitcast i32 %148 to float, !dbg !23
  %150 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !23
  %151 = bitcast i32 %150 to float, !dbg !23
  %152 = extractelement <2 x float> %72, i64 0, !dbg !41
  %153 = fmul float %152, %.0.i, !dbg !42
  %154 = extractelement <2 x float> %72, i64 1, !dbg !41
  %155 = fmul float %154, %.0.i, !dbg !42
  %156 = extractelement <2 x float> %92, i64 1, !dbg !41
  %157 = fmul float %156, %.0.i, !dbg !42
  %158 = extractelement <2 x float> %92, i64 0, !dbg !41
  %159 = fmul float %158, %.0.i, !dbg !42
  %160 = fmul float %153, %151, !dbg !43
  %161 = fmul float %155, %149, !dbg !43
  %162 = fmul float %157, %147, !dbg !43
  %163 = fmul float %159, %145, !dbg !43
  %164 = bitcast float %152 to i32, !dbg !41
  %165 = bitcast float %154 to i32, !dbg !41
  %166 = bitcast float %156 to i32, !dbg !41
  %167 = bitcast float %158 to i32, !dbg !41
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %164, i32 %165, i32 %166, i32 %167, ptr addrspace(1) %26) #6, !dbg !41
  %168 = getelementptr float, ptr addrspace(1) %6, i64 %19, !dbg !44
  %169 = bitcast float %160 to i32, !dbg !45
  %170 = bitcast float %161 to i32, !dbg !45
  %171 = bitcast float %162 to i32, !dbg !45
  %172 = bitcast float %163 to i32, !dbg !45
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %169, i32 %170, i32 %171, i32 %172, ptr addrspace(1) %168) #6, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "cn64ooodypc2sqdcjoreugxb2bxlaoas7xzwknk5tv27weteroqm.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/n6")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "triton_per_fused_add_mean_mul_pow_rsqrt_7", linkageName: "triton_per_fused_add_mean_mul_pow_rsqrt_7", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 25, column: 28, scope: !5)
!9 = !DILocation(line: 28, column: 28, scope: !5)
!10 = !DILocation(line: 35, column: 41, scope: !5)
!11 = !DILocation(line: 35, column: 37, scope: !5)
!12 = !DILocation(line: 35, column: 30, scope: !5)
!13 = !DILocation(line: 35, column: 46, scope: !5)
!14 = !DILocation(line: 36, column: 34, scope: !5)
!15 = !DILocation(line: 36, column: 50, scope: !5)
!16 = !DILocation(line: 37, column: 30, scope: !5)
!17 = !DILocation(line: 37, column: 46, scope: !5)
!18 = !DILocation(line: 38, column: 30, scope: !5)
!19 = !DILocation(line: 38, column: 46, scope: !5)
!20 = !DILocation(line: 39, column: 30, scope: !5)
!21 = !DILocation(line: 39, column: 46, scope: !5)
!22 = !DILocation(line: 40, column: 31, scope: !5)
!23 = !DILocation(line: 40, column: 38, scope: !5)
!24 = !DILocation(line: 41, column: 18, scope: !5)
!25 = !DILocation(line: 42, column: 18, scope: !5)
!26 = !DILocation(line: 43, column: 18, scope: !5)
!27 = !DILocation(line: 44, column: 18, scope: !5)
!28 = !DILocation(line: 45, column: 18, scope: !5)
!29 = !DILocation(line: 260, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !5, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!32 = !DILocation(line: 47, column: 59, scope: !5)
!33 = !DILocation(line: 290, column: 36, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 66, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !5, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 47, column: 45, scope: !5)
!38 = !DILocation(line: 49, column: 21, scope: !5)
!39 = !DILocation(line: 51, column: 20, scope: !5)
!40 = !DILocation(line: 52, column: 28, scope: !5)
!41 = !DILocation(line: 55, column: 50, scope: !5)
!42 = !DILocation(line: 53, column: 19, scope: !5)
!43 = !DILocation(line: 54, column: 20, scope: !5)
!44 = !DILocation(line: 56, column: 25, scope: !5)
!45 = !DILocation(line: 56, column: 48, scope: !5)
!46 = !DILocation(line: 56, column: 4, scope: !5)
