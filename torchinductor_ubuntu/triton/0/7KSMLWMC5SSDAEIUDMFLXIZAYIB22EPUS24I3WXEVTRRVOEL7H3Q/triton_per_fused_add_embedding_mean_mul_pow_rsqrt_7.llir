; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [121 x i8] c"/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/5t/c5tqlz75cvds6xe33hwpvurzrkrvas5x57rc6jm7lhgiqksr77c4.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 32128\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !5 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_per_fused_add_embedding_mean_mul_pow_rsqrt_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr #1 !dbg !9 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = shl nuw nsw i32 %11, 2, !dbg !11
  %13 = and i32 %12, 508, !dbg !11
  %14 = zext nneg i32 %10 to i64, !dbg !12
  %15 = getelementptr i64, ptr addrspace(1) %1, i64 %14, !dbg !12
  %16 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !13
  %17 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l"(ptr addrspace(1) %15, i64 %16) #7, !dbg !13
  %18 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !13
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l"(ptr addrspace(1) %15, i64 %18) #7, !dbg !13
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !13
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l"(ptr addrspace(1) %15, i64 %20) #7, !dbg !13
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !13
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l"(ptr addrspace(1) %15, i64 %22) #7, !dbg !13
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !13
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l"(ptr addrspace(1) %15, i64 %24) #7, !dbg !13
  %26 = shl i32 %10, 9, !dbg !14
  %27 = or disjoint i32 %13, %26, !dbg !15
  %28 = sext i32 %27 to i64, !dbg !16
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !16
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %29) #7, !dbg !17
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !18
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %31) #7, !dbg !19
  %33 = zext nneg i32 %13 to i64, !dbg !20
  %34 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !20
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !21
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l"(ptr addrspace(1) %34, i64 %35) #7, !dbg !21
  %37 = add i64 %25, 32128, !dbg !22
  %38 = icmp slt i64 %25, 0, !dbg !23
  %39 = select i1 %38, i64 %37, i64 %25, !dbg !24
  %40 = icmp ugt i64 %39, 32127, !dbg !25
  br i1 %40, label %41, label %42, !dbg !26

41:                                               ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 43, ptr nonnull @assertFunc_0, i64 1), !dbg !26
  unreachable, !dbg !26

42:                                               ; preds = %9
  %43 = icmp slt i64 %23, 0, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !19
  %45 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !19
  %46 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !19
  %47 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !19
  %48 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !17
  %49 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !17
  %50 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !17
  %51 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !17
  %52 = lshr i32 %11, 5, !dbg !11
  %53 = and i32 %11, 31, !dbg !11
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !26
  %54 = shl i64 %23, 9, !dbg !27
  %55 = add i64 %54, 16449536, !dbg !27
  %56 = select i1 %43, i64 %55, i64 %54, !dbg !27
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !28
  %58 = getelementptr float, ptr addrspace(1) %57, i64 %33, !dbg !28
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %58) #7, !dbg !29
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !29
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !29
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !29
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !29
  %64 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !19
  %65 = insertelement <2 x i32> %64, i32 %46, i64 1, !dbg !19
  %66 = bitcast <2 x i32> %65 to <2 x float>, !dbg !19
  %67 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !17
  %68 = insertelement <2 x i32> %67, i32 %50, i64 1, !dbg !17
  %69 = bitcast <2 x i32> %68 to <2 x float>, !dbg !17
  %70 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !29
  %71 = insertelement <2 x i32> %70, i32 %61, i64 1, !dbg !29
  %72 = bitcast <2 x i32> %71 to <2 x float>, !dbg !29
  %73 = fadd <2 x float> %69, %72, !dbg !30
  %74 = fadd <2 x float> %73, %66, !dbg !31
  %75 = fmul <2 x float> %74, %74, !dbg !32
  %76 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !19
  %77 = insertelement <2 x i32> %76, i32 %45, i64 1, !dbg !19
  %78 = bitcast <2 x i32> %77 to <2 x float>, !dbg !19
  %79 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !17
  %80 = insertelement <2 x i32> %79, i32 %49, i64 1, !dbg !17
  %81 = bitcast <2 x i32> %80 to <2 x float>, !dbg !17
  %82 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !29
  %83 = insertelement <2 x i32> %82, i32 %62, i64 1, !dbg !29
  %84 = bitcast <2 x i32> %83 to <2 x float>, !dbg !29
  %85 = fadd <2 x float> %81, %84, !dbg !30
  %86 = fadd <2 x float> %85, %78, !dbg !31
  %87 = fmul <2 x float> %86, %86, !dbg !32
  %shift = shufflevector <2 x float> %75, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %88 = fadd <2 x float> %75, %shift, !dbg !33
  %shift1 = shufflevector <2 x float> %87, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %89 = fadd <2 x float> %shift1, %88, !dbg !33
  %90 = fadd <2 x float> %87, %89, !dbg !33
  %91 = extractelement <2 x float> %90, i64 0, !dbg !33
  %92 = bitcast float %91 to i32, !dbg !37
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 16, i32 31), !dbg !37
  %94 = bitcast i32 %93 to float, !dbg !37
  %95 = fadd float %91, %94, !dbg !33
  %96 = bitcast float %95 to i32, !dbg !37
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 8, i32 31), !dbg !37
  %98 = bitcast i32 %97 to float, !dbg !37
  %99 = fadd float %95, %98, !dbg !33
  %100 = bitcast float %99 to i32, !dbg !37
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 4, i32 31), !dbg !37
  %102 = bitcast i32 %101 to float, !dbg !37
  %103 = fadd float %99, %102, !dbg !33
  %104 = bitcast float %103 to i32, !dbg !37
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 2, i32 31), !dbg !37
  %106 = bitcast i32 %105 to float, !dbg !37
  %107 = fadd float %103, %106, !dbg !33
  %108 = bitcast float %107 to i32, !dbg !37
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 1, i32 31), !dbg !37
  %110 = bitcast i32 %109 to float, !dbg !37
  %111 = fadd float %107, %110, !dbg !33
  %112 = and i32 %52, 3, !dbg !37
  %113 = icmp eq i32 %53, 0, !dbg !37
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !37
  %115 = bitcast float %111 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 %113) #7, !dbg !37
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !37
  %116 = icmp samesign ult i32 %11, 4, !dbg !37
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !37
  %118 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %117, i1 %116) #7, !dbg !37
  %119 = bitcast i32 %118 to float, !dbg !37
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 2, i32 31), !dbg !37
  %121 = bitcast i32 %120 to float, !dbg !37
  %122 = fadd float %119, %121, !dbg !33
  %123 = bitcast float %122 to i32, !dbg !37
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 1, i32 31), !dbg !37
  %125 = bitcast i32 %124 to float, !dbg !37
  %126 = fadd float %122, %125, !dbg !33
  %127 = icmp eq i32 %11, 0, !dbg !37
  %128 = bitcast float %126 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %128, i1 %127) #7, !dbg !37
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !37
  %129 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !37
  %130 = fadd float %129, 0.000000e+00, !dbg !38
  %131 = tail call float @llvm.nvvm.div.full(float %130, float 5.120000e+02), !dbg !42
  %132 = fadd float %131, 0x3EB0C6F7A0000000, !dbg !43
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !44
  %.not.i = icmp eq i32 %133, 0, !dbg !44
  br i1 %.not.i, label %136, label %134, !dbg !44

134:                                              ; preds = %42
  %135 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %132), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

136:                                              ; preds = %42
  %137 = tail call float @llvm.nvvm.rsqrt.approx.f(float %132), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

__nv_rsqrtf.exit:                                 ; preds = %134, %136
  %.0.i = phi float [ %135, %134 ], [ %137, %136 ], !dbg !44
  %138 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !21
  %139 = bitcast i32 %138 to float, !dbg !21
  %140 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !21
  %141 = bitcast i32 %140 to float, !dbg !21
  %142 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !21
  %143 = bitcast i32 %142 to float, !dbg !21
  %144 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !21
  %145 = bitcast i32 %144 to float, !dbg !21
  %146 = extractelement <2 x float> %74, i64 0, !dbg !45
  %147 = fmul float %146, %.0.i, !dbg !46
  %148 = extractelement <2 x float> %74, i64 1, !dbg !45
  %149 = fmul float %148, %.0.i, !dbg !46
  %150 = extractelement <2 x float> %86, i64 1, !dbg !45
  %151 = fmul float %150, %.0.i, !dbg !46
  %152 = extractelement <2 x float> %86, i64 0, !dbg !45
  %153 = fmul float %152, %.0.i, !dbg !46
  %154 = fmul float %147, %139, !dbg !47
  %155 = fmul float %149, %141, !dbg !47
  %156 = fmul float %151, %143, !dbg !47
  %157 = fmul float %153, %145, !dbg !47
  %158 = bitcast float %146 to i32, !dbg !45
  %159 = bitcast float %148 to i32, !dbg !45
  %160 = bitcast float %150 to i32, !dbg !45
  %161 = bitcast float %152 to i32, !dbg !45
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %158, i32 %159, i32 %160, i32 %161, ptr addrspace(1) %29) #7, !dbg !45
  %162 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !48
  %163 = bitcast float %154 to i32, !dbg !49
  %164 = bitcast float %155 to i32, !dbg !49
  %165 = bitcast float %156 to i32, !dbg !49
  %166 = bitcast float %157 to i32, !dbg !49
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %163, i32 %164, i32 %165, i32 %166, ptr addrspace(1) %162) #7, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #5

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { noreturn }
attributes #1 = { "nvvm.reqntid"="128" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "c5tqlz75cvds6xe33hwpvurzrkrvas5x57rc6jm7lhgiqksr77c4.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/5t")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !6, file: !6, type: !7, spFlags: DISPFlagOptimized)
!6 = !DIFile(filename: "<unknown>", directory: "")
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = distinct !DISubprogram(name: "triton_per_fused_add_embedding_mean_mul_pow_rsqrt_7", linkageName: "triton_per_fused_add_embedding_mean_mul_pow_rsqrt_7", scope: !1, file: !1, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!10 = !DILocation(line: 25, column: 28, scope: !9)
!11 = !DILocation(line: 28, column: 28, scope: !9)
!12 = !DILocation(line: 35, column: 30, scope: !9)
!13 = !DILocation(line: 35, column: 35, scope: !9)
!14 = !DILocation(line: 36, column: 45, scope: !9)
!15 = !DILocation(line: 36, column: 41, scope: !9)
!16 = !DILocation(line: 36, column: 34, scope: !9)
!17 = !DILocation(line: 36, column: 50, scope: !9)
!18 = !DILocation(line: 37, column: 30, scope: !9)
!19 = !DILocation(line: 37, column: 46, scope: !9)
!20 = !DILocation(line: 38, column: 31, scope: !9)
!21 = !DILocation(line: 38, column: 38, scope: !9)
!22 = !DILocation(line: 40, column: 18, scope: !9)
!23 = !DILocation(line: 41, column: 18, scope: !9)
!24 = !DILocation(line: 42, column: 32, scope: !9)
!25 = !DILocation(line: 43, column: 36, scope: !9)
!26 = !DILocation(line: 43, column: 51, scope: !9)
!27 = !DILocation(line: 44, column: 41, scope: !9)
!28 = !DILocation(line: 44, column: 30, scope: !9)
!29 = !DILocation(line: 44, column: 48, scope: !9)
!30 = !DILocation(line: 45, column: 18, scope: !9)
!31 = !DILocation(line: 46, column: 19, scope: !9)
!32 = !DILocation(line: 47, column: 20, scope: !9)
!33 = !DILocation(line: 260, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !9, file: !35, discriminator: 0)
!35 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!36 = !DILocation(line: 49, column: 59, scope: !9)
!37 = !DILocation(line: 290, column: 36, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 66, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !9, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 49, column: 45, scope: !9)
!42 = !DILocation(line: 51, column: 21, scope: !9)
!43 = !DILocation(line: 53, column: 20, scope: !9)
!44 = !DILocation(line: 54, column: 28, scope: !9)
!45 = !DILocation(line: 57, column: 51, scope: !9)
!46 = !DILocation(line: 55, column: 20, scope: !9)
!47 = !DILocation(line: 56, column: 20, scope: !9)
!48 = !DILocation(line: 58, column: 25, scope: !9)
!49 = !DILocation(line: 58, column: 48, scope: !9)
!50 = !DILocation(line: 58, column: 4, scope: !9)
