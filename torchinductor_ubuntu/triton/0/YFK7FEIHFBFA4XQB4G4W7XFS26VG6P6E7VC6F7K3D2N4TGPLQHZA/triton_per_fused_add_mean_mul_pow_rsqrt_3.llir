; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_per_fused_add_mean_mul_pow_rsqrt_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr #0 !dbg !5 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !9
  %10 = and i32 %9, 31, !dbg !9
  %11 = lshr i32 %9, 5, !dbg !9
  %12 = shl nuw nsw i32 %9, 2, !dbg !9
  %13 = and i32 %12, 508, !dbg !9
  %14 = icmp samesign ult i32 %13, 384, !dbg !10
  %15 = mul i32 %8, 384, !dbg !11
  %16 = add i32 %13, %15, !dbg !12
  %17 = sext i32 %16 to i64, !dbg !13
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !13
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %18, i1 %14) #6, !dbg !14
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !14
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !14
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !14
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !14
  %24 = bitcast i32 %20 to float, !dbg !14
  %25 = bitcast i32 %21 to float, !dbg !14
  %26 = bitcast i32 %22 to float, !dbg !14
  %27 = bitcast i32 %23 to float, !dbg !14
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !15
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %28, i1 %14) #6, !dbg !16
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !16
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !16
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !16
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !16
  %34 = bitcast i32 %30 to float, !dbg !16
  %35 = bitcast i32 %31 to float, !dbg !16
  %36 = bitcast i32 %32 to float, !dbg !16
  %37 = bitcast i32 %33 to float, !dbg !16
  %38 = zext nneg i32 %13 to i64, !dbg !17
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !17
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #6, !dbg !18
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %39, i64 %40, i1 %14) #6, !dbg !18
  %42 = fadd float %24, %34, !dbg !19
  %43 = fadd float %25, %35, !dbg !19
  %44 = fadd float %26, %36, !dbg !19
  %45 = fadd float %27, %37, !dbg !19
  %46 = fmul float %42, %42, !dbg !20
  %47 = fmul float %43, %43, !dbg !20
  %48 = fmul float %44, %44, !dbg !20
  %49 = fmul float %45, %45, !dbg !20
  %50 = fadd float %46, %47, !dbg !21
  %51 = fadd float %48, %50, !dbg !21
  %52 = fadd float %49, %51, !dbg !21
  %53 = select i1 %14, float %52, float 0.000000e+00, !dbg !21
  %54 = bitcast float %53 to i32, !dbg !25
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 16, i32 31), !dbg !25
  %56 = bitcast i32 %55 to float, !dbg !25
  %57 = fadd float %53, %56, !dbg !21
  %58 = bitcast float %57 to i32, !dbg !25
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 8, i32 31), !dbg !25
  %60 = bitcast i32 %59 to float, !dbg !25
  %61 = fadd float %57, %60, !dbg !21
  %62 = bitcast float %61 to i32, !dbg !25
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 4, i32 31), !dbg !25
  %64 = bitcast i32 %63 to float, !dbg !25
  %65 = fadd float %61, %64, !dbg !21
  %66 = bitcast float %65 to i32, !dbg !25
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 2, i32 31), !dbg !25
  %68 = bitcast i32 %67 to float, !dbg !25
  %69 = fadd float %65, %68, !dbg !21
  %70 = bitcast float %69 to i32, !dbg !25
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 1, i32 31), !dbg !25
  %72 = bitcast i32 %71 to float, !dbg !25
  %73 = fadd float %69, %72, !dbg !21
  %74 = and i32 %11, 3, !dbg !25
  %75 = icmp eq i32 %10, 0, !dbg !25
  %76 = getelementptr float, ptr addrspace(3) @global_smem, i32 %74, !dbg !25
  %77 = bitcast float %73 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 %75) #6, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %78 = icmp samesign ult i32 %9, 4, !dbg !25
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !25
  %80 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %79, i1 %78) #6, !dbg !25
  %81 = bitcast i32 %80 to float, !dbg !25
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 2, i32 31), !dbg !25
  %83 = bitcast i32 %82 to float, !dbg !25
  %84 = fadd float %81, %83, !dbg !21
  %85 = bitcast float %84 to i32, !dbg !25
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 1, i32 31), !dbg !25
  %87 = bitcast i32 %86 to float, !dbg !25
  %88 = fadd float %84, %87, !dbg !21
  %89 = icmp eq i32 %9, 0, !dbg !25
  %90 = bitcast float %88 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %90, i1 %89) #6, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %91 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !25
  %92 = fadd float %91, 0.000000e+00, !dbg !26
  %93 = tail call float @llvm.nvvm.div.full(float %92, float 3.840000e+02), !dbg !30
  %94 = fadd float %93, 0x3EB0C6F7A0000000, !dbg !31
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !32
  %.not.i = icmp eq i32 %95, 0, !dbg !32
  br i1 %.not.i, label %98, label %96, !dbg !32

96:                                               ; preds = %7
  %97 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %94), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

98:                                               ; preds = %7
  %99 = tail call float @llvm.nvvm.rsqrt.approx.f(float %94), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

__nv_rsqrtf.exit:                                 ; preds = %96, %98
  %.0.i = phi float [ %97, %96 ], [ %99, %98 ], !dbg !32
  %100 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !18
  %101 = bitcast i32 %100 to float, !dbg !18
  %102 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !18
  %103 = bitcast i32 %102 to float, !dbg !18
  %104 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !18
  %105 = bitcast i32 %104 to float, !dbg !18
  %106 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !18
  %107 = bitcast i32 %106 to float, !dbg !18
  %108 = fmul float %42, %.0.i, !dbg !33
  %109 = fmul float %43, %.0.i, !dbg !33
  %110 = fmul float %44, %.0.i, !dbg !33
  %111 = fmul float %45, %.0.i, !dbg !33
  %112 = fmul float %108, %107, !dbg !34
  %113 = fmul float %109, %105, !dbg !34
  %114 = fmul float %110, %103, !dbg !34
  %115 = fmul float %111, %101, !dbg !34
  %116 = getelementptr float, ptr addrspace(1) %3, i64 %17, !dbg !35
  %117 = bitcast float %112 to i32, !dbg !36
  %118 = bitcast float %113 to i32, !dbg !36
  %119 = bitcast float %114 to i32, !dbg !36
  %120 = bitcast float %115 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %117, i32 %118, i32 %119, i32 %120, ptr addrspace(1) %116, i1 %14) #6, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "ceygvd7szk7zsh6cog3w5gl7jcq75tgyhcdz6kwz6fypifonhofg.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/ey")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "triton_per_fused_add_mean_mul_pow_rsqrt_3", linkageName: "triton_per_fused_add_mean_mul_pow_rsqrt_3", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 25, column: 28, scope: !5)
!9 = !DILocation(line: 28, column: 28, scope: !5)
!10 = !DILocation(line: 30, column: 25, scope: !5)
!11 = !DILocation(line: 35, column: 41, scope: !5)
!12 = !DILocation(line: 35, column: 37, scope: !5)
!13 = !DILocation(line: 35, column: 30, scope: !5)
!14 = !DILocation(line: 35, column: 46, scope: !5)
!15 = !DILocation(line: 36, column: 30, scope: !5)
!16 = !DILocation(line: 36, column: 46, scope: !5)
!17 = !DILocation(line: 37, column: 30, scope: !5)
!18 = !DILocation(line: 37, column: 37, scope: !5)
!19 = !DILocation(line: 38, column: 18, scope: !5)
!20 = !DILocation(line: 39, column: 18, scope: !5)
!21 = !DILocation(line: 260, column: 15, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !5, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!24 = !DILocation(line: 42, column: 57, scope: !5)
!25 = !DILocation(line: 290, column: 36, scope: !22, inlinedAt: !24)
!26 = !DILocation(line: 66, column: 15, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !5, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 42, column: 44, scope: !5)
!30 = !DILocation(line: 44, column: 20, scope: !5)
!31 = !DILocation(line: 46, column: 20, scope: !5)
!32 = !DILocation(line: 47, column: 28, scope: !5)
!33 = !DILocation(line: 48, column: 19, scope: !5)
!34 = !DILocation(line: 49, column: 19, scope: !5)
!35 = !DILocation(line: 50, column: 25, scope: !5)
!36 = !DILocation(line: 50, column: 48, scope: !5)
!37 = !DILocation(line: 50, column: 4, scope: !5)
