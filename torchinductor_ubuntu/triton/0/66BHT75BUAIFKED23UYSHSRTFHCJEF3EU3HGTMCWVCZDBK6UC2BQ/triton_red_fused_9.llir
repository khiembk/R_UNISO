; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_red_fused_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr #0 !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %8 = shl i32 %7, 6, !dbg !9
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %10 = lshr i32 %9, 1, !dbg !10
  %11 = and i32 %10, 63, !dbg !10
  %12 = or disjoint i32 %11, %8, !dbg !11
  %13 = icmp slt i32 %12, 10368, !dbg !12
  %14 = shl nuw nsw i32 %9, 2, !dbg !13
  %15 = and i32 %14, 4, !dbg !13
  %16 = sdiv i32 %12, 324, !dbg !14
  %17 = mul i32 %12, 324, !dbg !15
  %18 = mul i32 %12, 324
  %19 = shl nsw i32 %16, 4
  %20 = add i32 %19, %18
  %21 = zext nneg i32 %15 to i64, !dbg !16
  br label %22, !dbg !16

22:                                               ; preds = %6, %22
  %indvars.iv = phi i64 [ 0, %6 ], [ %indvars.iv.next, %22 ]
  %23 = phi <4 x i1> [ zeroinitializer, %6 ], [ %62, %22 ]
  %24 = phi <8 x float> [ <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, %6 ], [ %121, %22 ]
  %25 = or disjoint i64 %indvars.iv, %21, !dbg !17
  %26 = icmp samesign ult i64 %25, 324, !dbg !18
  %27 = trunc nuw nsw i64 %25 to i32, !dbg !19
  %28 = add i32 %17, %27, !dbg !19
  %29 = sext i32 %28 to i64, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !20
  %31 = and i1 %13, %26, !dbg !21
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !22
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %30, i64 %32, i1 %31) #4, !dbg !22
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !22
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !22
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !22
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !22
  %38 = add i32 %20, %27, !dbg !23
  %39 = sext i32 %38 to i64, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !24
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !25
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %40, i64 %41, i1 %31) #4, !dbg !25
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !25
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !25
  %47 = insertelement <4 x i32> poison, i32 %34, i64 0, !dbg !22
  %48 = insertelement <4 x i32> %47, i32 %35, i64 1, !dbg !22
  %49 = insertelement <4 x i32> %48, i32 %36, i64 2, !dbg !22
  %50 = insertelement <4 x i32> %49, i32 %37, i64 3, !dbg !22
  %51 = bitcast <4 x i32> %50 to <4 x float>, !dbg !22
  %52 = insertelement <4 x i32> poison, i32 %43, i64 0, !dbg !25
  %53 = insertelement <4 x i32> %52, i32 %44, i64 1, !dbg !25
  %54 = insertelement <4 x i32> %53, i32 %45, i64 2, !dbg !25
  %55 = insertelement <4 x i32> %54, i32 %46, i64 3, !dbg !25
  %56 = bitcast <4 x i32> %55 to <4 x float>, !dbg !25
  %57 = fadd <4 x float> %51, %56, !dbg !26
  %58 = fcmp une <4 x float> %57, splat (float 0xFFF0000000000000), !dbg !27
  %59 = insertelement <4 x i1> poison, i1 %31, i64 0, !dbg !28
  %60 = shufflevector <4 x i1> %59, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !28
  %61 = select <4 x i1> %60, <4 x i1> %58, <4 x i1> zeroinitializer, !dbg !28
  %62 = or <4 x i1> %23, %61, !dbg !28
  %63 = shufflevector <8 x float> %24, <8 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !29
  %64 = fcmp uno <4 x float> %63, zeroinitializer, !dbg !29
  %65 = fcmp ogt <4 x float> %63, %57, !dbg !33
  %66 = or <4 x i1> %64, %65, !dbg !34
  %67 = select <4 x i1> %66, <4 x float> %63, <4 x float> %57, !dbg !35
  %68 = fcmp oeq <4 x float> %67, splat (float 0xFFF0000000000000), !dbg !36
  %69 = extractelement <8 x float> %24, i64 4, !dbg !37
  %70 = extractelement <4 x float> %67, i64 0, !dbg !38
  %71 = fsub float %69, %70, !dbg !37
  %72 = extractelement <8 x float> %24, i64 5, !dbg !37
  %73 = extractelement <4 x float> %67, i64 1, !dbg !38
  %74 = fsub float %72, %73, !dbg !37
  %75 = extractelement <8 x float> %24, i64 6, !dbg !37
  %76 = extractelement <4 x float> %67, i64 2, !dbg !38
  %77 = fsub float %75, %76, !dbg !37
  %78 = extractelement <8 x float> %24, i64 7, !dbg !37
  %79 = extractelement <4 x float> %67, i64 3, !dbg !38
  %80 = fsub float %78, %79, !dbg !37
  %81 = fmul float %71, 0x3FF7154760000000, !dbg !39
  %82 = tail call float @llvm.nvvm.ex2.approx.f(float %81), !dbg !39
  %83 = fmul float %74, 0x3FF7154760000000, !dbg !39
  %84 = tail call float @llvm.nvvm.ex2.approx.f(float %83), !dbg !39
  %85 = fmul float %77, 0x3FF7154760000000, !dbg !39
  %86 = tail call float @llvm.nvvm.ex2.approx.f(float %85), !dbg !39
  %87 = fmul float %80, 0x3FF7154760000000, !dbg !39
  %88 = tail call float @llvm.nvvm.ex2.approx.f(float %87), !dbg !39
  %89 = insertelement <4 x float> poison, float %82, i64 0, !dbg !40
  %90 = insertelement <4 x float> %89, float %84, i64 1, !dbg !40
  %91 = insertelement <4 x float> %90, float %86, i64 2, !dbg !40
  %92 = insertelement <4 x float> %91, float %88, i64 3, !dbg !40
  %93 = select <4 x i1> %68, <4 x float> splat (float 1.000000e+00), <4 x float> %92, !dbg !40
  %94 = fsub <4 x float> %57, %67, !dbg !38
  %95 = extractelement <4 x float> %94, i64 0, !dbg !38
  %96 = fsub <4 x float> %57, %67, !dbg !38
  %97 = extractelement <4 x float> %96, i64 1, !dbg !38
  %98 = fsub <4 x float> %57, %67, !dbg !38
  %99 = extractelement <4 x float> %98, i64 2, !dbg !38
  %100 = fsub <4 x float> %57, %67, !dbg !38
  %101 = extractelement <4 x float> %100, i64 3, !dbg !38
  %102 = fmul float %95, 0x3FF7154760000000, !dbg !39
  %103 = tail call float @llvm.nvvm.ex2.approx.f(float %102), !dbg !39
  %104 = fmul float %97, 0x3FF7154760000000, !dbg !39
  %105 = tail call float @llvm.nvvm.ex2.approx.f(float %104), !dbg !39
  %106 = fmul float %99, 0x3FF7154760000000, !dbg !39
  %107 = tail call float @llvm.nvvm.ex2.approx.f(float %106), !dbg !39
  %108 = fmul float %101, 0x3FF7154760000000, !dbg !39
  %109 = tail call float @llvm.nvvm.ex2.approx.f(float %108), !dbg !39
  %110 = insertelement <4 x float> poison, float %103, i64 0, !dbg !41
  %111 = insertelement <4 x float> %110, float %105, i64 1, !dbg !41
  %112 = insertelement <4 x float> %111, float %107, i64 2, !dbg !41
  %113 = insertelement <4 x float> %112, float %109, i64 3, !dbg !41
  %114 = select <4 x i1> %68, <4 x float> splat (float 1.000000e+00), <4 x float> %113, !dbg !41
  %115 = shufflevector <8 x float> %24, <8 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !42
  %116 = fmul <4 x float> %115, %93, !dbg !42
  %117 = fadd <4 x float> %116, %114, !dbg !43
  %118 = insertelement <8 x i1> poison, i1 %31, i64 0, !dbg !44
  %119 = shufflevector <8 x i1> %118, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !44
  %120 = shufflevector <4 x float> %117, <4 x float> %67, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !44
  %121 = select <8 x i1> %119, <8 x float> %120, <8 x float> %24, !dbg !44
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !16
  %122 = icmp samesign ult i64 %indvars.iv, 316, !dbg !16
  br i1 %122, label %22, label %123, !dbg !16

123:                                              ; preds = %22
  %124 = bitcast <4 x i1> %62 to i4, !dbg !45
  %125 = icmp ne i4 %124, 0, !dbg !45
  %126 = zext i1 %125 to i8, !dbg !45
  %127 = zext i1 %125 to i32, !dbg !47
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 1, i32 31), !dbg !47
  %129 = trunc i32 %128 to i8, !dbg !47
  %130 = or i8 %129, %126, !dbg !45
  %.not = icmp eq i8 %130, 0, !dbg !48
  %131 = extractelement <8 x float> %121, i64 4, !dbg !49
  %132 = extractelement <8 x float> %121, i64 5, !dbg !49
  %133 = fcmp ogt float %131, %132, !dbg !49
  %134 = fcmp uno float %131, 0.000000e+00, !dbg !51
  %135 = or i1 %133, %134, !dbg !52
  %136 = select i1 %135, float %131, float %132, !dbg !53
  %137 = extractelement <8 x float> %121, i64 6, !dbg !49
  %138 = fcmp ogt float %136, %137, !dbg !49
  %139 = fcmp uno float %136, 0.000000e+00, !dbg !51
  %140 = or i1 %138, %139, !dbg !52
  %141 = select i1 %140, float %136, float %137, !dbg !53
  %142 = extractelement <8 x float> %121, i64 7, !dbg !49
  %143 = fcmp ogt float %141, %142, !dbg !49
  %144 = fcmp uno float %141, 0.000000e+00, !dbg !51
  %145 = or i1 %143, %144, !dbg !52
  %146 = select i1 %145, float %141, float %142, !dbg !53
  %147 = bitcast float %146 to i32, !dbg !54
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 1, i32 31), !dbg !54
  %149 = bitcast i32 %148 to float, !dbg !54
  %150 = fcmp ogt float %146, %149, !dbg !49
  %151 = fcmp uno float %146, 0.000000e+00, !dbg !51
  %152 = or i1 %151, %150, !dbg !52
  %153 = select i1 %152, float %146, float %149, !dbg !53
  %154 = fcmp oeq float %153, 0xFFF0000000000000, !dbg !55
  %155 = fsub float %131, %153, !dbg !56
  %156 = fsub float %132, %153, !dbg !56
  %157 = fsub float %137, %153, !dbg !56
  %158 = fsub float %142, %153, !dbg !56
  %159 = fmul float %155, 0x3FF7154760000000, !dbg !57
  %160 = select i1 %154, float 0.000000e+00, float %159, !dbg !58
  %161 = tail call float @llvm.nvvm.ex2.approx.f(float %160), !dbg !57
  %162 = fmul float %156, 0x3FF7154760000000, !dbg !57
  %163 = select i1 %154, float 0.000000e+00, float %162, !dbg !58
  %164 = tail call float @llvm.nvvm.ex2.approx.f(float %163), !dbg !57
  %165 = fmul float %157, 0x3FF7154760000000, !dbg !57
  %166 = select i1 %154, float 0.000000e+00, float %165, !dbg !58
  %167 = tail call float @llvm.nvvm.ex2.approx.f(float %166), !dbg !57
  %168 = fmul float %158, 0x3FF7154760000000, !dbg !57
  %169 = select i1 %154, float 0.000000e+00, float %168, !dbg !58
  %170 = tail call float @llvm.nvvm.ex2.approx.f(float %169), !dbg !57
  %171 = extractelement <8 x float> %121, i64 0, !dbg !59
  %172 = fmul float %171, %161, !dbg !59
  %173 = extractelement <8 x float> %121, i64 1, !dbg !59
  %174 = fmul float %173, %164, !dbg !59
  %175 = extractelement <8 x float> %121, i64 2, !dbg !59
  %176 = fmul float %175, %167, !dbg !59
  %177 = extractelement <8 x float> %121, i64 3, !dbg !59
  %178 = fmul float %177, %170, !dbg !59
  %179 = fadd float %172, %174, !dbg !60
  %180 = fadd float %179, %176, !dbg !60
  %181 = fadd float %180, %178, !dbg !60
  %182 = bitcast float %181 to i32, !dbg !63
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 1, i32 31), !dbg !63
  %184 = bitcast i32 %183 to float, !dbg !63
  %185 = fadd float %181, %184, !dbg !60
  br label %186, !dbg !64

186:                                              ; preds = %123, %186
  %indvars.iv15 = phi i64 [ 0, %123 ], [ %indvars.iv.next16, %186 ]
  %187 = or disjoint i64 %indvars.iv15, %21, !dbg !65
  %188 = icmp samesign ult i64 %187, 324, !dbg !66
  %189 = trunc nuw nsw i64 %187 to i32, !dbg !67
  %190 = add i32 %17, %189, !dbg !67
  %191 = sext i32 %190 to i64, !dbg !68
  %192 = getelementptr float, ptr addrspace(1) %0, i64 %191, !dbg !68
  %193 = and i1 %13, %188, !dbg !69
  %194 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #4, !dbg !70
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %192, i64 %194, i1 %193) #4, !dbg !70
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !70
  %197 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !70
  %198 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !70
  %199 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !70
  %200 = bitcast i32 %196 to float, !dbg !70
  %201 = bitcast i32 %197 to float, !dbg !70
  %202 = bitcast i32 %198 to float, !dbg !70
  %203 = bitcast i32 %199 to float, !dbg !70
  %204 = add i32 %20, %189, !dbg !71
  %205 = sext i32 %204 to i64, !dbg !72
  %206 = getelementptr float, ptr addrspace(1) %1, i64 %205, !dbg !72
  %207 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #4, !dbg !73
  %208 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %206, i64 %207, i1 %193) #4, !dbg !73
  %209 = extractvalue { i32, i32, i32, i32 } %208, 0, !dbg !73
  %210 = extractvalue { i32, i32, i32, i32 } %208, 1, !dbg !73
  %211 = extractvalue { i32, i32, i32, i32 } %208, 2, !dbg !73
  %212 = extractvalue { i32, i32, i32, i32 } %208, 3, !dbg !73
  %213 = bitcast i32 %209 to float, !dbg !73
  %214 = bitcast i32 %210 to float, !dbg !73
  %215 = bitcast i32 %211 to float, !dbg !73
  %216 = bitcast i32 %212 to float, !dbg !73
  %217 = fadd float %200, %213, !dbg !74
  %218 = fadd float %201, %214, !dbg !74
  %219 = fadd float %202, %215, !dbg !74
  %220 = fadd float %203, %216, !dbg !74
  %221 = fsub float %217, %153, !dbg !75
  %222 = fsub float %218, %153, !dbg !75
  %223 = fsub float %219, %153, !dbg !75
  %224 = fsub float %220, %153, !dbg !75
  %225 = fmul float %221, 0x3FF7154760000000, !dbg !76
  %226 = tail call float @llvm.nvvm.ex2.approx.f(float %225), !dbg !76
  %227 = fmul float %222, 0x3FF7154760000000, !dbg !76
  %228 = tail call float @llvm.nvvm.ex2.approx.f(float %227), !dbg !76
  %229 = fmul float %223, 0x3FF7154760000000, !dbg !76
  %230 = tail call float @llvm.nvvm.ex2.approx.f(float %229), !dbg !76
  %231 = fmul float %224, 0x3FF7154760000000, !dbg !76
  %232 = tail call float @llvm.nvvm.ex2.approx.f(float %231), !dbg !76
  %233 = tail call float @llvm.nvvm.div.full(float %226, float %185), !dbg !77
  %234 = tail call float @llvm.nvvm.div.full(float %228, float %185), !dbg !77
  %235 = tail call float @llvm.nvvm.div.full(float %230, float %185), !dbg !77
  %236 = tail call float @llvm.nvvm.div.full(float %232, float %185), !dbg !77
  %237 = getelementptr float, ptr addrspace(1) %2, i64 %205, !dbg !78
  %238 = bitcast float %233 to i32, !dbg !79
  %239 = select i1 %.not, i32 0, i32 %238, !dbg !80
  %240 = bitcast float %234 to i32, !dbg !79
  %241 = select i1 %.not, i32 0, i32 %240, !dbg !80
  %242 = bitcast float %235 to i32, !dbg !79
  %243 = select i1 %.not, i32 0, i32 %242, !dbg !80
  %244 = bitcast float %236 to i32, !dbg !79
  %245 = select i1 %.not, i32 0, i32 %244, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %239, i32 %241, i32 %243, i32 %245, ptr addrspace(1) %237, i1 %193) #4, !dbg !79
  %indvars.iv.next16 = add nuw nsw i64 %indvars.iv15, 8, !dbg !64
  %246 = icmp samesign ult i64 %indvars.iv15, 316, !dbg !64
  br i1 %246, label %186, label %247, !dbg !64

247:                                              ; preds = %186
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "coefcjzwqeaazrpai4joq343fvrsgrhhb67vzijrbyjgc63uwhrl.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/oe")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "triton_red_fused_9", linkageName: "triton_red_fused_9", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 23, column: 28, scope: !5)
!9 = !DILocation(line: 23, column: 33, scope: !5)
!10 = !DILocation(line: 24, column: 44, scope: !5)
!11 = !DILocation(line: 24, column: 23, scope: !5)
!12 = !DILocation(line: 25, column: 21, scope: !5)
!13 = !DILocation(line: 26, column: 37, scope: !5)
!14 = !DILocation(line: 30, column: 19, scope: !5)
!15 = !DILocation(line: 42, column: 45, scope: !5)
!16 = !DILocation(line: 36, column: 40, scope: !5)
!17 = !DILocation(line: 37, column: 31, scope: !5)
!18 = !DILocation(line: 38, column: 29, scope: !5)
!19 = !DILocation(line: 42, column: 41, scope: !5)
!20 = !DILocation(line: 42, column: 34, scope: !5)
!21 = !DILocation(line: 42, column: 60, scope: !5)
!22 = !DILocation(line: 42, column: 50, scope: !5)
!23 = !DILocation(line: 43, column: 50, scope: !5)
!24 = !DILocation(line: 43, column: 34, scope: !5)
!25 = !DILocation(line: 43, column: 62, scope: !5)
!26 = !DILocation(line: 44, column: 22, scope: !5)
!27 = !DILocation(line: 46, column: 23, scope: !5)
!28 = !DILocation(line: 52, column: 49, scope: !5)
!29 = !DILocation(line: 113, column: 21, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !5, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 56, column: 43, scope: !5)
!33 = !DILocation(line: 111, column: 15, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 113, column: 16, scope: !30, inlinedAt: !32)
!35 = !DILocation(line: 114, column: 29, scope: !30, inlinedAt: !32)
!36 = !DILocation(line: 197, column: 19, scope: !30, inlinedAt: !32)
!37 = !DILocation(line: 197, column: 53, scope: !30, inlinedAt: !32)
!38 = !DILocation(line: 200, column: 53, scope: !30, inlinedAt: !32)
!39 = !DILocation(line: 174, column: 24, scope: !30, inlinedAt: !32)
!40 = !DILocation(line: 197, column: 39, scope: !30, inlinedAt: !32)
!41 = !DILocation(line: 200, column: 39, scope: !30, inlinedAt: !32)
!42 = !DILocation(line: 206, column: 24, scope: !30, inlinedAt: !32)
!43 = !DILocation(line: 206, column: 36, scope: !30, inlinedAt: !32)
!44 = !DILocation(line: 60, column: 64, scope: !5)
!45 = !DILocation(line: 261, column: 15, scope: !30, inlinedAt: !46)
!46 = !DILocation(line: 61, column: 49, scope: !5)
!47 = !DILocation(line: 266, column: 29, scope: !30, inlinedAt: !46)
!48 = !DILocation(line: 61, column: 64, scope: !5)
!49 = !DILocation(line: 111, column: 15, scope: !30, inlinedAt: !50)
!50 = !DILocation(line: 64, column: 35, scope: !5)
!51 = !DILocation(line: 113, column: 21, scope: !30, inlinedAt: !50)
!52 = !DILocation(line: 113, column: 16, scope: !30, inlinedAt: !50)
!53 = !DILocation(line: 114, column: 29, scope: !30, inlinedAt: !50)
!54 = !DILocation(line: 124, column: 29, scope: !30, inlinedAt: !50)
!55 = !DILocation(line: 181, column: 40, scope: !30, inlinedAt: !50)
!56 = !DILocation(line: 181, column: 68, scope: !30, inlinedAt: !50)
!57 = !DILocation(line: 174, column: 24, scope: !30, inlinedAt: !50)
!58 = !DILocation(line: 181, column: 58, scope: !30, inlinedAt: !50)
!59 = !DILocation(line: 182, column: 31, scope: !30, inlinedAt: !50)
!60 = !DILocation(line: 260, column: 15, scope: !61, inlinedAt: !50)
!61 = distinct !DILexicalBlockFile(scope: !5, file: !62, discriminator: 0)
!62 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!63 = !DILocation(line: 290, column: 36, scope: !61, inlinedAt: !50)
!64 = !DILocation(line: 69, column: 40, scope: !5)
!65 = !DILocation(line: 70, column: 31, scope: !5)
!66 = !DILocation(line: 71, column: 29, scope: !5)
!67 = !DILocation(line: 75, column: 42, scope: !5)
!68 = !DILocation(line: 75, column: 35, scope: !5)
!69 = !DILocation(line: 75, column: 61, scope: !5)
!70 = !DILocation(line: 75, column: 51, scope: !5)
!71 = !DILocation(line: 76, column: 51, scope: !5)
!72 = !DILocation(line: 76, column: 35, scope: !5)
!73 = !DILocation(line: 76, column: 63, scope: !5)
!74 = !DILocation(line: 78, column: 24, scope: !5)
!75 = !DILocation(line: 79, column: 24, scope: !5)
!76 = !DILocation(line: 80, column: 28, scope: !5)
!77 = !DILocation(line: 81, column: 25, scope: !5)
!78 = !DILocation(line: 84, column: 29, scope: !5)
!79 = !DILocation(line: 84, column: 64, scope: !5)
!80 = !DILocation(line: 83, column: 39, scope: !5)
!81 = !DILocation(line: 69, column: 4, scope: !5)
