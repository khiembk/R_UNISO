; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_15(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr #0 !dbg !5 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %7 = shl i32 %6, 3, !dbg !9
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %9 = lshr i32 %8, 5, !dbg !10
  %10 = lshr i32 %8, 7, !dbg !10
  %11 = and i32 %10, 3, !dbg !10
  %12 = or i32 %10, 4, !dbg !10
  %13 = or disjoint i32 %11, %7, !dbg !11
  %14 = or disjoint i32 %12, %7, !dbg !11
  %15 = icmp slt i32 %13, 10368, !dbg !12
  %16 = icmp slt i32 %14, 10368, !dbg !12
  %17 = and i32 %8, 31, !dbg !13
  %18 = shl nuw nsw i32 %8, 2, !dbg !13
  %19 = and i32 %18, 508, !dbg !13
  %20 = sdiv i32 %13, 324, !dbg !14
  %21 = mul i32 %20, 324, !dbg !15
  %.decomposed = sub i32 %13, %21, !dbg !15
  %22 = sdiv i32 %14, 324, !dbg !14
  %23 = mul i32 %22, 324, !dbg !15
  %.decomposed2 = sub i32 %14, %23, !dbg !15
  %24 = icmp samesign ult i32 %19, 324, !dbg !16
  %25 = mul i32 %13, 324, !dbg !17
  %26 = mul i32 %14, 324, !dbg !17
  %27 = add i32 %25, %19, !dbg !18
  %28 = add i32 %26, %19, !dbg !18
  %29 = sext i32 %27 to i64, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !19
  %31 = sext i32 %28 to i64, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !19
  %33 = and i1 %24, %15, !dbg !20
  %34 = and i1 %24, %16, !dbg !20
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !21
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %30, i64 %35, i1 %33) #5, !dbg !21
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !21
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !21
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !21
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !21
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !21
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %32, i64 %41, i1 %34) #5, !dbg !21
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !21
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !21
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !21
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !21
  %47 = mul nsw i32 %.decomposed, 324, !dbg !22
  %48 = mul nsw i32 %.decomposed2, 324, !dbg !22
  %49 = add nsw i32 %47, %19, !dbg !23
  %50 = add nsw i32 %48, %19, !dbg !23
  %51 = mul i32 %20, 104992, !dbg !24
  %52 = mul i32 %22, 104992, !dbg !24
  %53 = add i32 %49, %51, !dbg !25
  %54 = add i32 %50, %52, !dbg !25
  %55 = sext i32 %53 to i64, !dbg !26
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !26
  %57 = sext i32 %54 to i64, !dbg !26
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !26
  %59 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !27
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %56, i64 %59, i1 %33) #5, !dbg !27
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !27
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !27
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !27
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !27
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !27
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %58, i64 %65, i1 %34) #5, !dbg !27
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !27
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !27
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !27
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !27
  %71 = insertelement <4 x i32> poison, i32 %37, i64 0, !dbg !21
  %72 = insertelement <4 x i32> %71, i32 %38, i64 1, !dbg !21
  %73 = insertelement <4 x i32> %72, i32 %39, i64 2, !dbg !21
  %74 = insertelement <4 x i32> %73, i32 %40, i64 3, !dbg !21
  %75 = bitcast <4 x i32> %74 to <4 x float>, !dbg !21
  %76 = insertelement <4 x i32> poison, i32 %61, i64 0, !dbg !27
  %77 = insertelement <4 x i32> %76, i32 %62, i64 1, !dbg !27
  %78 = insertelement <4 x i32> %77, i32 %63, i64 2, !dbg !27
  %79 = insertelement <4 x i32> %78, i32 %64, i64 3, !dbg !27
  %80 = bitcast <4 x i32> %79 to <4 x float>, !dbg !27
  %81 = fadd <4 x float> %75, %80, !dbg !28
  %82 = fcmp une <4 x float> %81, splat (float 0xFFF0000000000000), !dbg !29
  %83 = insertelement <4 x i32> poison, i32 %43, i64 0, !dbg !21
  %84 = insertelement <4 x i32> %83, i32 %44, i64 1, !dbg !21
  %85 = insertelement <4 x i32> %84, i32 %45, i64 2, !dbg !21
  %86 = insertelement <4 x i32> %85, i32 %46, i64 3, !dbg !21
  %87 = bitcast <4 x i32> %86 to <4 x float>, !dbg !21
  %88 = insertelement <4 x i32> poison, i32 %67, i64 0, !dbg !27
  %89 = insertelement <4 x i32> %88, i32 %68, i64 1, !dbg !27
  %90 = insertelement <4 x i32> %89, i32 %69, i64 2, !dbg !27
  %91 = insertelement <4 x i32> %90, i32 %70, i64 3, !dbg !27
  %92 = bitcast <4 x i32> %91 to <4 x float>, !dbg !27
  %93 = fadd <4 x float> %87, %92, !dbg !28
  %94 = fcmp une <4 x float> %93, splat (float 0xFFF0000000000000), !dbg !29
  %95 = extractelement <4 x float> %81, i64 0, !dbg !30
  %96 = fsub float 0xFFF0000000000000, %95, !dbg !30
  %97 = extractelement <4 x float> %81, i64 1, !dbg !30
  %98 = fsub float 0xFFF0000000000000, %97, !dbg !30
  %99 = extractelement <4 x float> %81, i64 2, !dbg !30
  %100 = fsub float 0xFFF0000000000000, %99, !dbg !30
  %101 = extractelement <4 x float> %81, i64 3, !dbg !30
  %102 = fsub float 0xFFF0000000000000, %101, !dbg !30
  %103 = extractelement <4 x float> %93, i64 0, !dbg !30
  %104 = fsub float 0xFFF0000000000000, %103, !dbg !30
  %105 = extractelement <4 x float> %93, i64 1, !dbg !30
  %106 = fsub float 0xFFF0000000000000, %105, !dbg !30
  %107 = extractelement <4 x float> %93, i64 2, !dbg !30
  %108 = fsub float 0xFFF0000000000000, %107, !dbg !30
  %109 = extractelement <4 x float> %93, i64 3, !dbg !30
  %110 = fsub float 0xFFF0000000000000, %109, !dbg !30
  %111 = fmul float %96, 0x3FF7154760000000, !dbg !34
  %112 = tail call float @llvm.nvvm.ex2.approx.f(float %111), !dbg !34
  %113 = fmul float %98, 0x3FF7154760000000, !dbg !34
  %114 = tail call float @llvm.nvvm.ex2.approx.f(float %113), !dbg !34
  %115 = fmul float %100, 0x3FF7154760000000, !dbg !34
  %116 = tail call float @llvm.nvvm.ex2.approx.f(float %115), !dbg !34
  %117 = fmul float %102, 0x3FF7154760000000, !dbg !34
  %118 = tail call float @llvm.nvvm.ex2.approx.f(float %117), !dbg !34
  %119 = fmul float %104, 0x3FF7154760000000, !dbg !34
  %120 = tail call float @llvm.nvvm.ex2.approx.f(float %119), !dbg !34
  %121 = fmul float %106, 0x3FF7154760000000, !dbg !34
  %122 = tail call float @llvm.nvvm.ex2.approx.f(float %121), !dbg !34
  %123 = fmul float %108, 0x3FF7154760000000, !dbg !34
  %124 = tail call float @llvm.nvvm.ex2.approx.f(float %123), !dbg !34
  %125 = fmul float %110, 0x3FF7154760000000, !dbg !34
  %126 = tail call float @llvm.nvvm.ex2.approx.f(float %125), !dbg !34
  %127 = fsub float %95, %95, !dbg !35
  %128 = fsub float %97, %97, !dbg !35
  %129 = fsub float %99, %99, !dbg !35
  %130 = fsub float %101, %101, !dbg !35
  %131 = fsub float %103, %103, !dbg !35
  %132 = fsub float %105, %105, !dbg !35
  %133 = fsub float %107, %107, !dbg !35
  %134 = fsub float %109, %109, !dbg !35
  %135 = fmul float %127, 0x3FF7154760000000, !dbg !34
  %136 = tail call float @llvm.nvvm.ex2.approx.f(float %135), !dbg !34
  %137 = fmul float %128, 0x3FF7154760000000, !dbg !34
  %138 = tail call float @llvm.nvvm.ex2.approx.f(float %137), !dbg !34
  %139 = fmul float %129, 0x3FF7154760000000, !dbg !34
  %140 = tail call float @llvm.nvvm.ex2.approx.f(float %139), !dbg !34
  %141 = fmul float %130, 0x3FF7154760000000, !dbg !34
  %142 = tail call float @llvm.nvvm.ex2.approx.f(float %141), !dbg !34
  %143 = fmul float %131, 0x3FF7154760000000, !dbg !34
  %144 = tail call float @llvm.nvvm.ex2.approx.f(float %143), !dbg !34
  %145 = fmul float %132, 0x3FF7154760000000, !dbg !34
  %146 = tail call float @llvm.nvvm.ex2.approx.f(float %145), !dbg !34
  %147 = fmul float %133, 0x3FF7154760000000, !dbg !34
  %148 = tail call float @llvm.nvvm.ex2.approx.f(float %147), !dbg !34
  %149 = fmul float %134, 0x3FF7154760000000, !dbg !34
  %150 = tail call float @llvm.nvvm.ex2.approx.f(float %149), !dbg !34
  %151 = fmul float %112, 0.000000e+00, !dbg !36
  %152 = fmul float %114, 0.000000e+00, !dbg !36
  %153 = fmul float %116, 0.000000e+00, !dbg !36
  %154 = fmul float %118, 0.000000e+00, !dbg !36
  %155 = fmul float %120, 0.000000e+00, !dbg !36
  %156 = fmul float %122, 0.000000e+00, !dbg !36
  %157 = fmul float %124, 0.000000e+00, !dbg !36
  %158 = fmul float %126, 0.000000e+00, !dbg !36
  %159 = fadd float %151, %136, !dbg !37
  %160 = extractelement <4 x i1> %82, i64 0, !dbg !37
  %161 = select i1 %160, float %159, float 1.000000e+00, !dbg !37
  %162 = fadd float %152, %138, !dbg !37
  %163 = extractelement <4 x i1> %82, i64 1, !dbg !37
  %164 = select i1 %163, float %162, float 1.000000e+00, !dbg !37
  %165 = fadd float %153, %140, !dbg !37
  %166 = extractelement <4 x i1> %82, i64 2, !dbg !37
  %167 = select i1 %166, float %165, float 1.000000e+00, !dbg !37
  %168 = fadd float %154, %142, !dbg !37
  %169 = extractelement <4 x i1> %82, i64 3, !dbg !37
  %170 = select i1 %169, float %168, float 1.000000e+00, !dbg !37
  %171 = fadd float %155, %144, !dbg !37
  %172 = extractelement <4 x i1> %94, i64 0, !dbg !37
  %173 = select i1 %172, float %171, float 1.000000e+00, !dbg !37
  %174 = fadd float %156, %146, !dbg !37
  %175 = extractelement <4 x i1> %94, i64 1, !dbg !37
  %176 = select i1 %175, float %174, float 1.000000e+00, !dbg !37
  %177 = fadd float %157, %148, !dbg !37
  %178 = extractelement <4 x i1> %94, i64 2, !dbg !37
  %179 = select i1 %178, float %177, float 1.000000e+00, !dbg !37
  %180 = fadd float %158, %150, !dbg !37
  %181 = extractelement <4 x i1> %94, i64 3, !dbg !37
  %182 = select i1 %181, float %180, float 1.000000e+00, !dbg !37
  %183 = select i1 %33, float %95, float 0xFFF0000000000000, !dbg !38
  %184 = select i1 %33, float %97, float 0xFFF0000000000000, !dbg !38
  %185 = select i1 %33, float %99, float 0xFFF0000000000000, !dbg !38
  %186 = select i1 %33, float %101, float 0xFFF0000000000000, !dbg !38
  %187 = select i1 %34, float %103, float 0xFFF0000000000000, !dbg !38
  %188 = select i1 %34, float %105, float 0xFFF0000000000000, !dbg !38
  %189 = select i1 %34, float %107, float 0xFFF0000000000000, !dbg !38
  %190 = select i1 %34, float %109, float 0xFFF0000000000000, !dbg !38
  %191 = select i1 %33, float %161, float 0.000000e+00, !dbg !39
  %192 = select i1 %33, float %164, float 0.000000e+00, !dbg !39
  %193 = select i1 %33, float %167, float 0.000000e+00, !dbg !39
  %194 = select i1 %33, float %170, float 0.000000e+00, !dbg !39
  %195 = select i1 %34, float %173, float 0.000000e+00, !dbg !39
  %196 = select i1 %34, float %176, float 0.000000e+00, !dbg !39
  %197 = select i1 %34, float %179, float 0.000000e+00, !dbg !39
  %198 = select i1 %34, float %182, float 0.000000e+00, !dbg !39
  %199 = bitcast <4 x i1> %82 to i4, !dbg !40
  %200 = icmp ne i4 %199, 0, !dbg !40
  %201 = select i1 %33, i1 %200, i1 false, !dbg !40
  %202 = bitcast <4 x i1> %94 to i4, !dbg !40
  %203 = icmp ne i4 %202, 0, !dbg !40
  %204 = select i1 %34, i1 %203, i1 false, !dbg !40
  %205 = zext i1 %201 to i32, !dbg !42
  %206 = tail call i32 @llvm.nvvm.redux.sync.or(i32 %205, i32 -1), !dbg !42
  %207 = trunc i32 %206 to i8, !dbg !42
  %208 = zext i1 %204 to i32, !dbg !42
  %209 = tail call i32 @llvm.nvvm.redux.sync.or(i32 %208, i32 -1), !dbg !42
  %210 = trunc i32 %209 to i8, !dbg !42
  %211 = and i32 %9, 3, !dbg !42
  %212 = icmp eq i32 %17, 0, !dbg !42
  %213 = shl nuw nsw i32 %11, 2, !dbg !42
  %214 = or disjoint i32 %213, %211, !dbg !42
  %215 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %214, !dbg !42
  %216 = insertelement <1 x i8> poison, i8 %207, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %215, <1 x i8> %216, i1 %212) #5, !dbg !42
  %217 = shl nuw nsw i32 %12, 2, !dbg !42
  %218 = or disjoint i32 %217, %211, !dbg !42
  %219 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %218, !dbg !42
  %220 = insertelement <1 x i8> poison, i8 %210, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %219, <1 x i8> %220, i1 %212) #5, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %221 = icmp samesign ult i32 %8, 32, !dbg !42
  %222 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %8, !dbg !42
  %223 = tail call i8 asm sideeffect "@$2 ld.shared.b8 $0, [ $1 + 0 ];", "=h,r,b"(ptr addrspace(3) %222, i1 %221) #5, !dbg !42
  %224 = zext i8 %223 to i32, !dbg !42
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 2, i32 31), !dbg !42
  %226 = trunc i32 %225 to i8, !dbg !42
  %227 = or i8 %223, %226, !dbg !40
  %228 = zext i8 %227 to i32, !dbg !42
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 1, i32 31), !dbg !42
  %230 = trunc i32 %229 to i8, !dbg !42
  %231 = or i8 %227, %230, !dbg !40
  %232 = and i32 %8, 995, !dbg !42
  %233 = icmp eq i32 %232, 0, !dbg !42
  %234 = insertelement <1 x i8> poison, i8 %231, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %222, <1 x i8> %234, i1 %233) #5, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %235 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %213, !dbg !42
  %236 = load i8, ptr addrspace(3) %235, align 4, !dbg !42
  %237 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %217, !dbg !42
  %238 = load i8, ptr addrspace(3) %237, align 4, !dbg !42
  %.not = icmp eq i8 %236, 0, !dbg !43
  %.not1 = icmp eq i8 %238, 0, !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !44
  %239 = fcmp ogt float %183, %184, !dbg !46
  %240 = fcmp uno float %183, 0.000000e+00, !dbg !47
  %241 = or i1 %239, %240, !dbg !48
  %242 = select i1 %241, float %183, float %184, !dbg !49
  %243 = fcmp ogt float %242, %185, !dbg !46
  %244 = fcmp uno float %242, 0.000000e+00, !dbg !47
  %245 = or i1 %243, %244, !dbg !48
  %246 = select i1 %245, float %242, float %185, !dbg !49
  %247 = fcmp ogt float %246, %186, !dbg !46
  %248 = fcmp uno float %246, 0.000000e+00, !dbg !47
  %249 = or i1 %247, %248, !dbg !48
  %250 = select i1 %249, float %246, float %186, !dbg !49
  %251 = fcmp ogt float %187, %188, !dbg !46
  %252 = fcmp uno float %187, 0.000000e+00, !dbg !47
  %253 = or i1 %251, %252, !dbg !48
  %254 = select i1 %253, float %187, float %188, !dbg !49
  %255 = fcmp ogt float %254, %189, !dbg !46
  %256 = fcmp uno float %254, 0.000000e+00, !dbg !47
  %257 = or i1 %255, %256, !dbg !48
  %258 = select i1 %257, float %254, float %189, !dbg !49
  %259 = fcmp ogt float %258, %190, !dbg !46
  %260 = fcmp uno float %258, 0.000000e+00, !dbg !47
  %261 = or i1 %259, %260, !dbg !48
  %262 = select i1 %261, float %258, float %190, !dbg !49
  %263 = bitcast float %250 to i32, !dbg !44
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 16, i32 31), !dbg !44
  %265 = bitcast i32 %264 to float, !dbg !44
  %266 = fcmp ogt float %250, %265, !dbg !46
  %267 = fcmp uno float %250, 0.000000e+00, !dbg !47
  %268 = or i1 %267, %266, !dbg !48
  %269 = select i1 %268, float %250, float %265, !dbg !49
  %270 = bitcast float %269 to i32, !dbg !44
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 8, i32 31), !dbg !44
  %272 = bitcast i32 %271 to float, !dbg !44
  %273 = fcmp ogt float %269, %272, !dbg !46
  %274 = fcmp uno float %269, 0.000000e+00, !dbg !47
  %275 = or i1 %273, %274, !dbg !48
  %276 = select i1 %275, float %269, float %272, !dbg !49
  %277 = bitcast float %276 to i32, !dbg !44
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 4, i32 31), !dbg !44
  %279 = bitcast i32 %278 to float, !dbg !44
  %280 = fcmp ogt float %276, %279, !dbg !46
  %281 = fcmp uno float %276, 0.000000e+00, !dbg !47
  %282 = or i1 %280, %281, !dbg !48
  %283 = select i1 %282, float %276, float %279, !dbg !49
  %284 = bitcast float %283 to i32, !dbg !44
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 2, i32 31), !dbg !44
  %286 = bitcast i32 %285 to float, !dbg !44
  %287 = fcmp ogt float %283, %286, !dbg !46
  %288 = fcmp uno float %283, 0.000000e+00, !dbg !47
  %289 = or i1 %287, %288, !dbg !48
  %290 = select i1 %289, float %283, float %286, !dbg !49
  %291 = bitcast float %290 to i32, !dbg !44
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 1, i32 31), !dbg !44
  %293 = bitcast i32 %292 to float, !dbg !44
  %294 = fcmp ogt float %290, %293, !dbg !46
  %295 = fcmp uno float %290, 0.000000e+00, !dbg !47
  %296 = or i1 %294, %295, !dbg !48
  %297 = bitcast float %262 to i32, !dbg !44
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 16, i32 31), !dbg !44
  %299 = bitcast i32 %298 to float, !dbg !44
  %300 = fcmp ogt float %262, %299, !dbg !46
  %301 = fcmp uno float %262, 0.000000e+00, !dbg !47
  %302 = or i1 %301, %300, !dbg !48
  %303 = select i1 %302, float %262, float %299, !dbg !49
  %304 = bitcast float %303 to i32, !dbg !44
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 8, i32 31), !dbg !44
  %306 = bitcast i32 %305 to float, !dbg !44
  %307 = fcmp ogt float %303, %306, !dbg !46
  %308 = fcmp uno float %303, 0.000000e+00, !dbg !47
  %309 = or i1 %307, %308, !dbg !48
  %310 = select i1 %309, float %303, float %306, !dbg !49
  %311 = bitcast float %310 to i32, !dbg !44
  %312 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %311, i32 4, i32 31), !dbg !44
  %313 = bitcast i32 %312 to float, !dbg !44
  %314 = fcmp ogt float %310, %313, !dbg !46
  %315 = fcmp uno float %310, 0.000000e+00, !dbg !47
  %316 = or i1 %314, %315, !dbg !48
  %317 = select i1 %316, float %310, float %313, !dbg !49
  %318 = bitcast float %317 to i32, !dbg !44
  %319 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %318, i32 2, i32 31), !dbg !44
  %320 = bitcast i32 %319 to float, !dbg !44
  %321 = fcmp ogt float %317, %320, !dbg !46
  %322 = fcmp uno float %317, 0.000000e+00, !dbg !47
  %323 = or i1 %321, %322, !dbg !48
  %324 = select i1 %323, float %317, float %320, !dbg !49
  %325 = bitcast float %324 to i32, !dbg !44
  %326 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %325, i32 1, i32 31), !dbg !44
  %327 = bitcast i32 %326 to float, !dbg !44
  %328 = fcmp ogt float %324, %327, !dbg !46
  %329 = fcmp uno float %324, 0.000000e+00, !dbg !47
  %330 = or i1 %328, %329, !dbg !48
  %331 = getelementptr float, ptr addrspace(3) @global_smem, i32 %214, !dbg !44
  %332 = select i1 %296, i32 %291, i32 %292, !dbg !49
  %333 = insertelement <1 x i32> poison, i32 %332, i64 0, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %331, <1 x i32> %333, i1 %212) #5, !dbg !44
  %334 = getelementptr float, ptr addrspace(3) @global_smem, i32 %218, !dbg !44
  %335 = select i1 %330, i32 %325, i32 %326, !dbg !49
  %336 = insertelement <1 x i32> poison, i32 %335, i64 0, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %334, <1 x i32> %336, i1 %212) #5, !dbg !44
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !44
  %337 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !44
  %338 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %337, i1 %221) #5, !dbg !44
  %339 = bitcast i32 %338 to float, !dbg !44
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 2, i32 31), !dbg !44
  %341 = bitcast i32 %340 to float, !dbg !44
  %342 = fcmp ogt float %339, %341, !dbg !46
  %343 = fcmp uno float %339, 0.000000e+00, !dbg !47
  %344 = or i1 %343, %342, !dbg !48
  %345 = select i1 %344, float %339, float %341, !dbg !49
  %346 = bitcast float %345 to i32, !dbg !44
  %347 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %346, i32 1, i32 31), !dbg !44
  %348 = bitcast i32 %347 to float, !dbg !44
  %349 = fcmp ogt float %345, %348, !dbg !46
  %350 = fcmp uno float %345, 0.000000e+00, !dbg !47
  %351 = or i1 %349, %350, !dbg !48
  %352 = select i1 %351, i32 %346, i32 %347, !dbg !49
  %353 = insertelement <1 x i32> poison, i32 %352, i64 0, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %337, <1 x i32> %353, i1 %233) #5, !dbg !44
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !44
  %354 = getelementptr float, ptr addrspace(3) @global_smem, i32 %213, !dbg !44
  %355 = load float, ptr addrspace(3) %354, align 16, !dbg !44
  %356 = getelementptr float, ptr addrspace(3) @global_smem, i32 %217, !dbg !44
  %357 = load float, ptr addrspace(3) %356, align 16, !dbg !44
  %358 = fcmp oeq float %355, 0xFFF0000000000000, !dbg !50
  %359 = fcmp oeq float %357, 0xFFF0000000000000, !dbg !50
  %360 = fsub float %183, %355, !dbg !51
  %361 = fsub float %184, %355, !dbg !51
  %362 = fsub float %185, %355, !dbg !51
  %363 = fsub float %186, %355, !dbg !51
  %364 = fsub float %187, %357, !dbg !51
  %365 = fsub float %188, %357, !dbg !51
  %366 = fsub float %189, %357, !dbg !51
  %367 = fsub float %190, %357, !dbg !51
  %368 = fmul float %360, 0x3FF7154760000000, !dbg !52
  %369 = select i1 %358, float 0.000000e+00, float %368, !dbg !53
  %370 = tail call float @llvm.nvvm.ex2.approx.f(float %369), !dbg !52
  %371 = fmul float %361, 0x3FF7154760000000, !dbg !52
  %372 = select i1 %358, float 0.000000e+00, float %371, !dbg !53
  %373 = tail call float @llvm.nvvm.ex2.approx.f(float %372), !dbg !52
  %374 = fmul float %362, 0x3FF7154760000000, !dbg !52
  %375 = select i1 %358, float 0.000000e+00, float %374, !dbg !53
  %376 = tail call float @llvm.nvvm.ex2.approx.f(float %375), !dbg !52
  %377 = fmul float %363, 0x3FF7154760000000, !dbg !52
  %378 = select i1 %358, float 0.000000e+00, float %377, !dbg !53
  %379 = tail call float @llvm.nvvm.ex2.approx.f(float %378), !dbg !52
  %380 = fmul float %364, 0x3FF7154760000000, !dbg !52
  %381 = select i1 %359, float 0.000000e+00, float %380, !dbg !53
  %382 = tail call float @llvm.nvvm.ex2.approx.f(float %381), !dbg !52
  %383 = fmul float %365, 0x3FF7154760000000, !dbg !52
  %384 = select i1 %359, float 0.000000e+00, float %383, !dbg !53
  %385 = tail call float @llvm.nvvm.ex2.approx.f(float %384), !dbg !52
  %386 = fmul float %366, 0x3FF7154760000000, !dbg !52
  %387 = select i1 %359, float 0.000000e+00, float %386, !dbg !53
  %388 = tail call float @llvm.nvvm.ex2.approx.f(float %387), !dbg !52
  %389 = fmul float %367, 0x3FF7154760000000, !dbg !52
  %390 = select i1 %359, float 0.000000e+00, float %389, !dbg !53
  %391 = tail call float @llvm.nvvm.ex2.approx.f(float %390), !dbg !52
  %392 = fmul float %191, %370, !dbg !54
  %393 = fmul float %192, %373, !dbg !54
  %394 = fmul float %193, %376, !dbg !54
  %395 = fmul float %194, %379, !dbg !54
  %396 = fmul float %195, %382, !dbg !54
  %397 = fmul float %196, %385, !dbg !54
  %398 = fmul float %197, %388, !dbg !54
  %399 = fmul float %198, %391, !dbg !54
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !55
  %400 = fadd float %392, %393, !dbg !58
  %401 = fadd float %400, %394, !dbg !58
  %402 = fadd float %401, %395, !dbg !58
  %403 = fadd float %396, %397, !dbg !58
  %404 = fadd float %403, %398, !dbg !58
  %405 = fadd float %404, %399, !dbg !58
  %406 = bitcast float %402 to i32, !dbg !55
  %407 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %406, i32 16, i32 31), !dbg !55
  %408 = bitcast i32 %407 to float, !dbg !55
  %409 = fadd float %402, %408, !dbg !58
  %410 = bitcast float %409 to i32, !dbg !55
  %411 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %410, i32 8, i32 31), !dbg !55
  %412 = bitcast i32 %411 to float, !dbg !55
  %413 = fadd float %409, %412, !dbg !58
  %414 = bitcast float %413 to i32, !dbg !55
  %415 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %414, i32 4, i32 31), !dbg !55
  %416 = bitcast i32 %415 to float, !dbg !55
  %417 = fadd float %413, %416, !dbg !58
  %418 = bitcast float %417 to i32, !dbg !55
  %419 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %418, i32 2, i32 31), !dbg !55
  %420 = bitcast i32 %419 to float, !dbg !55
  %421 = fadd float %417, %420, !dbg !58
  %422 = bitcast float %421 to i32, !dbg !55
  %423 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %422, i32 1, i32 31), !dbg !55
  %424 = bitcast i32 %423 to float, !dbg !55
  %425 = fadd float %421, %424, !dbg !58
  %426 = bitcast float %405 to i32, !dbg !55
  %427 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %426, i32 16, i32 31), !dbg !55
  %428 = bitcast i32 %427 to float, !dbg !55
  %429 = fadd float %405, %428, !dbg !58
  %430 = bitcast float %429 to i32, !dbg !55
  %431 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %430, i32 8, i32 31), !dbg !55
  %432 = bitcast i32 %431 to float, !dbg !55
  %433 = fadd float %429, %432, !dbg !58
  %434 = bitcast float %433 to i32, !dbg !55
  %435 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %434, i32 4, i32 31), !dbg !55
  %436 = bitcast i32 %435 to float, !dbg !55
  %437 = fadd float %433, %436, !dbg !58
  %438 = bitcast float %437 to i32, !dbg !55
  %439 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %438, i32 2, i32 31), !dbg !55
  %440 = bitcast i32 %439 to float, !dbg !55
  %441 = fadd float %437, %440, !dbg !58
  %442 = bitcast float %441 to i32, !dbg !55
  %443 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %442, i32 1, i32 31), !dbg !55
  %444 = bitcast i32 %443 to float, !dbg !55
  %445 = fadd float %441, %444, !dbg !58
  %446 = bitcast float %425 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %331, <1 x i32> %446, i1 %212) #5, !dbg !55
  %447 = bitcast float %445 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %334, <1 x i32> %447, i1 %212) #5, !dbg !55
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !55
  %448 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %337, i1 %221) #5, !dbg !55
  %449 = bitcast i32 %448 to float, !dbg !55
  %450 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %448, i32 2, i32 31), !dbg !55
  %451 = bitcast i32 %450 to float, !dbg !55
  %452 = fadd float %449, %451, !dbg !58
  %453 = bitcast float %452 to i32, !dbg !55
  %454 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %453, i32 1, i32 31), !dbg !55
  %455 = bitcast i32 %454 to float, !dbg !55
  %456 = fadd float %452, %455, !dbg !58
  %457 = bitcast float %456 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %337, <1 x i32> %457, i1 %233) #5, !dbg !55
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !55
  %458 = load float, ptr addrspace(3) %354, align 16, !dbg !55
  %459 = load float, ptr addrspace(3) %356, align 16, !dbg !55
  %460 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #5, !dbg !59
  %461 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %30, i64 %460, i1 %33) #5, !dbg !59
  %462 = extractvalue { i32, i32, i32, i32 } %461, 0, !dbg !59
  %463 = extractvalue { i32, i32, i32, i32 } %461, 1, !dbg !59
  %464 = extractvalue { i32, i32, i32, i32 } %461, 2, !dbg !59
  %465 = extractvalue { i32, i32, i32, i32 } %461, 3, !dbg !59
  %466 = bitcast i32 %462 to float, !dbg !59
  %467 = bitcast i32 %463 to float, !dbg !59
  %468 = bitcast i32 %464 to float, !dbg !59
  %469 = bitcast i32 %465 to float, !dbg !59
  %470 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #5, !dbg !59
  %471 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %32, i64 %470, i1 %34) #5, !dbg !59
  %472 = extractvalue { i32, i32, i32, i32 } %471, 0, !dbg !59
  %473 = extractvalue { i32, i32, i32, i32 } %471, 1, !dbg !59
  %474 = extractvalue { i32, i32, i32, i32 } %471, 2, !dbg !59
  %475 = extractvalue { i32, i32, i32, i32 } %471, 3, !dbg !59
  %476 = bitcast i32 %472 to float, !dbg !59
  %477 = bitcast i32 %473 to float, !dbg !59
  %478 = bitcast i32 %474 to float, !dbg !59
  %479 = bitcast i32 %475 to float, !dbg !59
  %480 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #5, !dbg !60
  %481 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %56, i64 %480, i1 %33) #5, !dbg !60
  %482 = extractvalue { i32, i32, i32, i32 } %481, 0, !dbg !60
  %483 = extractvalue { i32, i32, i32, i32 } %481, 1, !dbg !60
  %484 = extractvalue { i32, i32, i32, i32 } %481, 2, !dbg !60
  %485 = extractvalue { i32, i32, i32, i32 } %481, 3, !dbg !60
  %486 = bitcast i32 %482 to float, !dbg !60
  %487 = bitcast i32 %483 to float, !dbg !60
  %488 = bitcast i32 %484 to float, !dbg !60
  %489 = bitcast i32 %485 to float, !dbg !60
  %490 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #5, !dbg !60
  %491 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %58, i64 %490, i1 %34) #5, !dbg !60
  %492 = extractvalue { i32, i32, i32, i32 } %491, 0, !dbg !60
  %493 = extractvalue { i32, i32, i32, i32 } %491, 1, !dbg !60
  %494 = extractvalue { i32, i32, i32, i32 } %491, 2, !dbg !60
  %495 = extractvalue { i32, i32, i32, i32 } %491, 3, !dbg !60
  %496 = bitcast i32 %492 to float, !dbg !60
  %497 = bitcast i32 %493 to float, !dbg !60
  %498 = bitcast i32 %494 to float, !dbg !60
  %499 = bitcast i32 %495 to float, !dbg !60
  %500 = fadd float %466, %486, !dbg !61
  %501 = fadd float %467, %487, !dbg !61
  %502 = fadd float %468, %488, !dbg !61
  %503 = fadd float %469, %489, !dbg !61
  %504 = fadd float %476, %496, !dbg !61
  %505 = fadd float %477, %497, !dbg !61
  %506 = fadd float %478, %498, !dbg !61
  %507 = fadd float %479, %499, !dbg !61
  %508 = fsub float %500, %355, !dbg !62
  %509 = fsub float %501, %355, !dbg !62
  %510 = fsub float %502, %355, !dbg !62
  %511 = fsub float %503, %355, !dbg !62
  %512 = fsub float %504, %357, !dbg !62
  %513 = fsub float %505, %357, !dbg !62
  %514 = fsub float %506, %357, !dbg !62
  %515 = fsub float %507, %357, !dbg !62
  %516 = fmul float %508, 0x3FF7154760000000, !dbg !63
  %517 = tail call float @llvm.nvvm.ex2.approx.f(float %516), !dbg !63
  %518 = fmul float %509, 0x3FF7154760000000, !dbg !63
  %519 = tail call float @llvm.nvvm.ex2.approx.f(float %518), !dbg !63
  %520 = fmul float %510, 0x3FF7154760000000, !dbg !63
  %521 = tail call float @llvm.nvvm.ex2.approx.f(float %520), !dbg !63
  %522 = fmul float %511, 0x3FF7154760000000, !dbg !63
  %523 = tail call float @llvm.nvvm.ex2.approx.f(float %522), !dbg !63
  %524 = fmul float %512, 0x3FF7154760000000, !dbg !63
  %525 = tail call float @llvm.nvvm.ex2.approx.f(float %524), !dbg !63
  %526 = fmul float %513, 0x3FF7154760000000, !dbg !63
  %527 = tail call float @llvm.nvvm.ex2.approx.f(float %526), !dbg !63
  %528 = fmul float %514, 0x3FF7154760000000, !dbg !63
  %529 = tail call float @llvm.nvvm.ex2.approx.f(float %528), !dbg !63
  %530 = fmul float %515, 0x3FF7154760000000, !dbg !63
  %531 = tail call float @llvm.nvvm.ex2.approx.f(float %530), !dbg !63
  %532 = tail call float @llvm.nvvm.div.full(float %517, float %458), !dbg !64
  %533 = tail call float @llvm.nvvm.div.full(float %519, float %458), !dbg !64
  %534 = tail call float @llvm.nvvm.div.full(float %521, float %458), !dbg !64
  %535 = tail call float @llvm.nvvm.div.full(float %523, float %458), !dbg !64
  %536 = tail call float @llvm.nvvm.div.full(float %525, float %459), !dbg !64
  %537 = tail call float @llvm.nvvm.div.full(float %527, float %459), !dbg !64
  %538 = tail call float @llvm.nvvm.div.full(float %529, float %459), !dbg !64
  %539 = tail call float @llvm.nvvm.div.full(float %531, float %459), !dbg !64
  %540 = bitcast float %532 to i32, !dbg !65
  %541 = select i1 %.not, i32 0, i32 %540, !dbg !66
  %542 = bitcast float %533 to i32, !dbg !65
  %543 = select i1 %.not, i32 0, i32 %542, !dbg !66
  %544 = bitcast float %534 to i32, !dbg !65
  %545 = select i1 %.not, i32 0, i32 %544, !dbg !66
  %546 = bitcast float %535 to i32, !dbg !65
  %547 = select i1 %.not, i32 0, i32 %546, !dbg !66
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %541, i32 %543, i32 %545, i32 %547, ptr addrspace(1) %56, i1 %33) #5, !dbg !65
  %548 = bitcast float %536 to i32, !dbg !65
  %549 = select i1 %.not1, i32 0, i32 %548, !dbg !66
  %550 = bitcast float %537 to i32, !dbg !65
  %551 = select i1 %.not1, i32 0, i32 %550, !dbg !66
  %552 = bitcast float %538 to i32, !dbg !65
  %553 = select i1 %.not1, i32 0, i32 %552, !dbg !66
  %554 = bitcast float %539 to i32, !dbg !65
  %555 = select i1 %.not1, i32 0, i32 %554, !dbg !66
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %549, i32 %551, i32 %553, i32 %555, ptr addrspace(1) %58, i1 %34) #5, !dbg !65
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.redux.sync.or(i32, i32) #3

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #4

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

attributes #0 = { "nvvm.reqntid"="512" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { convergent nocallback nounwind }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "c3s5rpotgkrxj53byxl6iiai4e64ppfdhf7r5r7xy2iceaf5vzca.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/3s")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "triton_red_fused_15", linkageName: "triton_red_fused_15", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 23, column: 28, scope: !5)
!9 = !DILocation(line: 23, column: 33, scope: !5)
!10 = !DILocation(line: 24, column: 44, scope: !5)
!11 = !DILocation(line: 24, column: 23, scope: !5)
!12 = !DILocation(line: 25, column: 21, scope: !5)
!13 = !DILocation(line: 26, column: 37, scope: !5)
!14 = !DILocation(line: 30, column: 19, scope: !5)
!15 = !DILocation(line: 29, column: 19, scope: !5)
!16 = !DILocation(line: 38, column: 29, scope: !5)
!17 = !DILocation(line: 42, column: 45, scope: !5)
!18 = !DILocation(line: 42, column: 41, scope: !5)
!19 = !DILocation(line: 42, column: 34, scope: !5)
!20 = !DILocation(line: 42, column: 60, scope: !5)
!21 = !DILocation(line: 42, column: 50, scope: !5)
!22 = !DILocation(line: 43, column: 49, scope: !5)
!23 = !DILocation(line: 43, column: 45, scope: !5)
!24 = !DILocation(line: 43, column: 61, scope: !5)
!25 = !DILocation(line: 43, column: 54, scope: !5)
!26 = !DILocation(line: 43, column: 38, scope: !5)
!27 = !DILocation(line: 43, column: 66, scope: !5)
!28 = !DILocation(line: 44, column: 22, scope: !5)
!29 = !DILocation(line: 46, column: 23, scope: !5)
!30 = !DILocation(line: 197, column: 53, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !5, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 56, column: 43, scope: !5)
!34 = !DILocation(line: 174, column: 24, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 200, column: 53, scope: !31, inlinedAt: !33)
!36 = !DILocation(line: 206, column: 24, scope: !31, inlinedAt: !33)
!37 = !DILocation(line: 206, column: 36, scope: !31, inlinedAt: !33)
!38 = !DILocation(line: 59, column: 64, scope: !5)
!39 = !DILocation(line: 60, column: 64, scope: !5)
!40 = !DILocation(line: 261, column: 15, scope: !31, inlinedAt: !41)
!41 = !DILocation(line: 61, column: 49, scope: !5)
!42 = !DILocation(line: 266, column: 29, scope: !31, inlinedAt: !41)
!43 = !DILocation(line: 61, column: 64, scope: !5)
!44 = !DILocation(line: 124, column: 29, scope: !31, inlinedAt: !45)
!45 = !DILocation(line: 64, column: 35, scope: !5)
!46 = !DILocation(line: 111, column: 15, scope: !31, inlinedAt: !45)
!47 = !DILocation(line: 113, column: 21, scope: !31, inlinedAt: !45)
!48 = !DILocation(line: 113, column: 16, scope: !31, inlinedAt: !45)
!49 = !DILocation(line: 114, column: 29, scope: !31, inlinedAt: !45)
!50 = !DILocation(line: 181, column: 40, scope: !31, inlinedAt: !45)
!51 = !DILocation(line: 181, column: 68, scope: !31, inlinedAt: !45)
!52 = !DILocation(line: 174, column: 24, scope: !31, inlinedAt: !45)
!53 = !DILocation(line: 181, column: 58, scope: !31, inlinedAt: !45)
!54 = !DILocation(line: 182, column: 31, scope: !31, inlinedAt: !45)
!55 = !DILocation(line: 290, column: 36, scope: !56, inlinedAt: !45)
!56 = distinct !DILexicalBlockFile(scope: !5, file: !57, discriminator: 0)
!57 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!58 = !DILocation(line: 260, column: 15, scope: !56, inlinedAt: !45)
!59 = !DILocation(line: 75, column: 51, scope: !5)
!60 = !DILocation(line: 76, column: 67, scope: !5)
!61 = !DILocation(line: 78, column: 24, scope: !5)
!62 = !DILocation(line: 79, column: 24, scope: !5)
!63 = !DILocation(line: 80, column: 28, scope: !5)
!64 = !DILocation(line: 81, column: 25, scope: !5)
!65 = !DILocation(line: 84, column: 67, scope: !5)
!66 = !DILocation(line: 83, column: 39, scope: !5)
!67 = !DILocation(line: 69, column: 4, scope: !5)
