; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_per_fused_add_mean_mul_pow_rsqrt_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr #0 !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !9
  %12 = and i32 %11, 31, !dbg !9
  %13 = lshr i32 %11, 5, !dbg !9
  %14 = shl nuw nsw i32 %11, 2, !dbg !9
  %15 = and i32 %14, 508, !dbg !9
  %16 = shl i32 %10, 9, !dbg !10
  %17 = or disjoint i32 %15, %16, !dbg !11
  %18 = sext i32 %17 to i64, !dbg !12
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !12
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %19) #6, !dbg !13
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !13
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !13
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !13
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !13
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !14
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %25) #6, !dbg !15
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !15
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !15
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !15
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !15
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !16
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %31) #6, !dbg !17
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !17
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !17
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !17
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !17
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !18
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %37) #6, !dbg !19
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !19
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !19
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !19
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !19
  %43 = zext nneg i32 %15 to i64, !dbg !20
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %43, !dbg !20
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #6, !dbg !21
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l"(ptr addrspace(1) %44, i64 %45) #6, !dbg !21
  %47 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !13
  %48 = insertelement <2 x i32> %47, i32 %22, i64 1, !dbg !13
  %49 = bitcast <2 x i32> %48 to <2 x float>, !dbg !13
  %50 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !15
  %51 = insertelement <2 x i32> %50, i32 %28, i64 1, !dbg !15
  %52 = bitcast <2 x i32> %51 to <2 x float>, !dbg !15
  %53 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !17
  %54 = insertelement <2 x i32> %53, i32 %34, i64 1, !dbg !17
  %55 = bitcast <2 x i32> %54 to <2 x float>, !dbg !17
  %56 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !19
  %57 = insertelement <2 x i32> %56, i32 %40, i64 1, !dbg !19
  %58 = bitcast <2 x i32> %57 to <2 x float>, !dbg !19
  %59 = fadd <2 x float> %49, %52, !dbg !22
  %60 = fadd <2 x float> %59, %55, !dbg !23
  %61 = fadd <2 x float> %60, %58, !dbg !24
  %62 = fmul <2 x float> %61, %61, !dbg !25
  %63 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !13
  %64 = insertelement <2 x i32> %63, i32 %23, i64 1, !dbg !13
  %65 = bitcast <2 x i32> %64 to <2 x float>, !dbg !13
  %66 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !15
  %67 = insertelement <2 x i32> %66, i32 %29, i64 1, !dbg !15
  %68 = bitcast <2 x i32> %67 to <2 x float>, !dbg !15
  %69 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !17
  %70 = insertelement <2 x i32> %69, i32 %35, i64 1, !dbg !17
  %71 = bitcast <2 x i32> %70 to <2 x float>, !dbg !17
  %72 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !19
  %73 = insertelement <2 x i32> %72, i32 %41, i64 1, !dbg !19
  %74 = bitcast <2 x i32> %73 to <2 x float>, !dbg !19
  %75 = fadd <2 x float> %65, %68, !dbg !22
  %76 = fadd <2 x float> %75, %71, !dbg !23
  %77 = fadd <2 x float> %76, %74, !dbg !24
  %78 = fmul <2 x float> %77, %77, !dbg !25
  %shift = shufflevector <2 x float> %62, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !26
  %79 = fadd <2 x float> %62, %shift, !dbg !26
  %shift1 = shufflevector <2 x float> %78, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !26
  %80 = fadd <2 x float> %shift1, %79, !dbg !26
  %81 = fadd <2 x float> %78, %80, !dbg !26
  %82 = extractelement <2 x float> %81, i64 0, !dbg !26
  %83 = bitcast float %82 to i32, !dbg !30
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 16, i32 31), !dbg !30
  %85 = bitcast i32 %84 to float, !dbg !30
  %86 = fadd float %82, %85, !dbg !26
  %87 = bitcast float %86 to i32, !dbg !30
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 8, i32 31), !dbg !30
  %89 = bitcast i32 %88 to float, !dbg !30
  %90 = fadd float %86, %89, !dbg !26
  %91 = bitcast float %90 to i32, !dbg !30
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 4, i32 31), !dbg !30
  %93 = bitcast i32 %92 to float, !dbg !30
  %94 = fadd float %90, %93, !dbg !26
  %95 = bitcast float %94 to i32, !dbg !30
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 2, i32 31), !dbg !30
  %97 = bitcast i32 %96 to float, !dbg !30
  %98 = fadd float %94, %97, !dbg !26
  %99 = bitcast float %98 to i32, !dbg !30
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 1, i32 31), !dbg !30
  %101 = bitcast i32 %100 to float, !dbg !30
  %102 = fadd float %98, %101, !dbg !26
  %103 = and i32 %13, 3, !dbg !30
  %104 = icmp eq i32 %12, 0, !dbg !30
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i32 %103, !dbg !30
  %106 = bitcast float %102 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 %104) #6, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  %107 = icmp samesign ult i32 %11, 4, !dbg !30
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !30
  %109 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %108, i1 %107) #6, !dbg !30
  %110 = bitcast i32 %109 to float, !dbg !30
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 2, i32 31), !dbg !30
  %112 = bitcast i32 %111 to float, !dbg !30
  %113 = fadd float %110, %112, !dbg !26
  %114 = bitcast float %113 to i32, !dbg !30
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 1, i32 31), !dbg !30
  %116 = bitcast i32 %115 to float, !dbg !30
  %117 = fadd float %113, %116, !dbg !26
  %118 = icmp eq i32 %11, 0, !dbg !30
  %119 = bitcast float %117 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %119, i1 %118) #6, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  %120 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !30
  %121 = fadd float %120, 0.000000e+00, !dbg !31
  %122 = tail call float @llvm.nvvm.div.full(float %121, float 5.120000e+02), !dbg !35
  %123 = fadd float %122, 0x3EB0C6F7A0000000, !dbg !36
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !37
  %.not.i = icmp eq i32 %124, 0, !dbg !37
  br i1 %.not.i, label %127, label %125, !dbg !37

125:                                              ; preds = %9
  %126 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %123), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

127:                                              ; preds = %9
  %128 = tail call float @llvm.nvvm.rsqrt.approx.f(float %123), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

__nv_rsqrtf.exit:                                 ; preds = %125, %127
  %.0.i = phi float [ %126, %125 ], [ %128, %127 ], !dbg !37
  %129 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !21
  %130 = bitcast i32 %129 to float, !dbg !21
  %131 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !21
  %132 = bitcast i32 %131 to float, !dbg !21
  %133 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !21
  %134 = bitcast i32 %133 to float, !dbg !21
  %135 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !21
  %136 = bitcast i32 %135 to float, !dbg !21
  %137 = extractelement <2 x float> %61, i64 0, !dbg !38
  %138 = fmul float %137, %.0.i, !dbg !38
  %139 = extractelement <2 x float> %61, i64 1, !dbg !38
  %140 = fmul float %139, %.0.i, !dbg !38
  %141 = extractelement <2 x float> %77, i64 1, !dbg !38
  %142 = fmul float %141, %.0.i, !dbg !38
  %143 = extractelement <2 x float> %77, i64 0, !dbg !38
  %144 = fmul float %143, %.0.i, !dbg !38
  %145 = fmul float %138, %136, !dbg !39
  %146 = fmul float %140, %134, !dbg !39
  %147 = fmul float %142, %132, !dbg !39
  %148 = fmul float %144, %130, !dbg !39
  %149 = getelementptr float, ptr addrspace(1) %5, i64 %18, !dbg !40
  %150 = bitcast float %145 to i32, !dbg !41
  %151 = bitcast float %146 to i32, !dbg !41
  %152 = bitcast float %147 to i32, !dbg !41
  %153 = bitcast float %148 to i32, !dbg !41
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %150, i32 %151, i32 %152, i32 %153, ptr addrspace(1) %149) #6, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "cwdhcmrlnsbjtobzmwwysl4wtplzsnpz5uqtgductf72pfm5ppxz.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/wd")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "triton_per_fused_add_mean_mul_pow_rsqrt_6", linkageName: "triton_per_fused_add_mean_mul_pow_rsqrt_6", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 25, column: 28, scope: !5)
!9 = !DILocation(line: 28, column: 28, scope: !5)
!10 = !DILocation(line: 35, column: 41, scope: !5)
!11 = !DILocation(line: 35, column: 37, scope: !5)
!12 = !DILocation(line: 35, column: 30, scope: !5)
!13 = !DILocation(line: 35, column: 46, scope: !5)
!14 = !DILocation(line: 36, column: 30, scope: !5)
!15 = !DILocation(line: 36, column: 46, scope: !5)
!16 = !DILocation(line: 37, column: 30, scope: !5)
!17 = !DILocation(line: 37, column: 46, scope: !5)
!18 = !DILocation(line: 38, column: 30, scope: !5)
!19 = !DILocation(line: 38, column: 46, scope: !5)
!20 = !DILocation(line: 39, column: 31, scope: !5)
!21 = !DILocation(line: 39, column: 38, scope: !5)
!22 = !DILocation(line: 40, column: 18, scope: !5)
!23 = !DILocation(line: 41, column: 18, scope: !5)
!24 = !DILocation(line: 42, column: 18, scope: !5)
!25 = !DILocation(line: 43, column: 18, scope: !5)
!26 = !DILocation(line: 260, column: 15, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !5, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!29 = !DILocation(line: 45, column: 58, scope: !5)
!30 = !DILocation(line: 290, column: 36, scope: !27, inlinedAt: !29)
!31 = !DILocation(line: 66, column: 15, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !5, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 45, column: 45, scope: !5)
!35 = !DILocation(line: 47, column: 21, scope: !5)
!36 = !DILocation(line: 49, column: 20, scope: !5)
!37 = !DILocation(line: 50, column: 28, scope: !5)
!38 = !DILocation(line: 51, column: 19, scope: !5)
!39 = !DILocation(line: 52, column: 20, scope: !5)
!40 = !DILocation(line: 53, column: 25, scope: !5)
!41 = !DILocation(line: 53, column: 48, scope: !5)
!42 = !DILocation(line: 53, column: 4, scope: !5)
