; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_red_fused_15(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr #0 !dbg !5 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %7 = shl i32 %6, 6, !dbg !9
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %9 = lshr i32 %8, 4, !dbg !10
  %10 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !10
  %11 = shufflevector <2 x i32> %10, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !10
  %12 = insertelement <2 x i32> <i32 31, i32 poison>, i32 %7, i64 1, !dbg !10
  %13 = and <2 x i32> %11, %12, !dbg !10
  %14 = or disjoint <2 x i32> %11, %12, !dbg !10
  %15 = shufflevector <2 x i32> %13, <2 x i32> %14, <2 x i32> <i32 0, i32 3>, !dbg !10
  %16 = insertelement <2 x i32> <i32 poison, i32 32>, i32 %7, i64 0, !dbg !11
  %17 = or <2 x i32> %15, %16, !dbg !11
  %18 = icmp slt <2 x i32> %17, splat (i32 10368), !dbg !12
  %19 = shl nuw nsw i32 %8, 2, !dbg !13
  %20 = and i32 %19, 60, !dbg !13
  %21 = extractelement <2 x i32> %17, i64 0
  %22 = sdiv i32 %21, 324, !dbg !14
  %23 = extractelement <2 x i32> %17, i64 1
  %24 = sdiv i32 %23, 324, !dbg !14
  %25 = mul i32 %21, 324, !dbg !15
  %26 = mul i32 %23, 324, !dbg !15
  %27 = mul i32 %21, 324
  %28 = shl nsw i32 %22, 4
  %29 = add i32 %28, %27
  %30 = mul i32 %23, 324
  %31 = shl nsw i32 %24, 4
  %32 = add i32 %31, %30
  %33 = zext nneg i32 %20 to i64, !dbg !16
  br label %34, !dbg !16

34:                                               ; preds = %5, %34
  %indvars.iv = phi i64 [ 0, %5 ], [ %indvars.iv.next, %34 ]
  %35 = phi <4 x i1> [ zeroinitializer, %5 ], [ %114, %34 ]
  %36 = phi <4 x i1> [ zeroinitializer, %5 ], [ %99, %34 ]
  %37 = phi <16 x float> [ <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, %5 ], [ %214, %34 ]
  %38 = or disjoint i64 %indvars.iv, %33, !dbg !17
  %39 = icmp samesign ult i64 %38, 324, !dbg !18
  %40 = trunc nuw nsw i64 %38 to i32, !dbg !19
  %41 = add i32 %25, %40, !dbg !19
  %42 = add i32 %26, %40, !dbg !19
  %43 = sext i32 %41 to i64, !dbg !20
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !20
  %45 = sext i32 %42 to i64, !dbg !20
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !20
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !21
  %48 = add i32 %29, %40, !dbg !22
  %49 = add i32 %32, %40, !dbg !22
  %50 = sext i32 %48 to i64, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !23
  %52 = sext i32 %49 to i64, !dbg !23
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !23
  %54 = shufflevector <16 x float> %37, <16 x float> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !24
  %55 = fcmp uno <8 x float> %54, zeroinitializer, !dbg !24
  %56 = insertelement <2 x i1> poison, i1 %39, i64 0, !dbg !28
  %57 = shufflevector <2 x i1> %56, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !28
  %58 = and <2 x i1> %18, %57, !dbg !28
  %59 = shufflevector <2 x i1> %58, <2 x i1> poison, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !28
  %60 = extractelement <2 x i1> %58, i64 0, !dbg !29
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %44, i64 %47, i1 %60) #4, !dbg !21
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !21
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !21
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !21
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !21
  %66 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !21
  %67 = extractelement <2 x i1> %58, i64 1, !dbg !29
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %46, i64 %66, i1 %67) #4, !dbg !21
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !21
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !21
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !21
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !21
  %73 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !29
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %51, i64 %73, i1 %60) #4, !dbg !29
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !29
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !29
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !29
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !29
  %79 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !29
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %53, i64 %79, i1 %67) #4, !dbg !29
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !29
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !29
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !29
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !29
  %85 = insertelement <4 x i32> poison, i32 %62, i64 0, !dbg !21
  %86 = insertelement <4 x i32> %85, i32 %63, i64 1, !dbg !21
  %87 = insertelement <4 x i32> %86, i32 %64, i64 2, !dbg !21
  %88 = insertelement <4 x i32> %87, i32 %65, i64 3, !dbg !21
  %89 = bitcast <4 x i32> %88 to <4 x float>, !dbg !21
  %90 = insertelement <4 x i32> poison, i32 %75, i64 0, !dbg !29
  %91 = insertelement <4 x i32> %90, i32 %76, i64 1, !dbg !29
  %92 = insertelement <4 x i32> %91, i32 %77, i64 2, !dbg !29
  %93 = insertelement <4 x i32> %92, i32 %78, i64 3, !dbg !29
  %94 = bitcast <4 x i32> %93 to <4 x float>, !dbg !29
  %95 = fadd <4 x float> %89, %94, !dbg !30
  %96 = fcmp une <4 x float> %95, splat (float 0xFFF0000000000000), !dbg !31
  %97 = shufflevector <2 x i1> %58, <2 x i1> poison, <4 x i32> zeroinitializer, !dbg !32
  %98 = select <4 x i1> %97, <4 x i1> %96, <4 x i1> zeroinitializer, !dbg !32
  %99 = or <4 x i1> %36, %98, !dbg !32
  %100 = insertelement <4 x i32> poison, i32 %69, i64 0, !dbg !21
  %101 = insertelement <4 x i32> %100, i32 %70, i64 1, !dbg !21
  %102 = insertelement <4 x i32> %101, i32 %71, i64 2, !dbg !21
  %103 = insertelement <4 x i32> %102, i32 %72, i64 3, !dbg !21
  %104 = bitcast <4 x i32> %103 to <4 x float>, !dbg !21
  %105 = insertelement <4 x i32> poison, i32 %81, i64 0, !dbg !29
  %106 = insertelement <4 x i32> %105, i32 %82, i64 1, !dbg !29
  %107 = insertelement <4 x i32> %106, i32 %83, i64 2, !dbg !29
  %108 = insertelement <4 x i32> %107, i32 %84, i64 3, !dbg !29
  %109 = bitcast <4 x i32> %108 to <4 x float>, !dbg !29
  %110 = fadd <4 x float> %104, %109, !dbg !30
  %111 = fcmp une <4 x float> %110, splat (float 0xFFF0000000000000), !dbg !31
  %112 = shufflevector <2 x i1> %58, <2 x i1> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>, !dbg !32
  %113 = select <4 x i1> %112, <4 x i1> %111, <4 x i1> zeroinitializer, !dbg !32
  %114 = or <4 x i1> %35, %113, !dbg !32
  %115 = extractelement <4 x float> %95, i64 0, !dbg !33
  %116 = extractelement <4 x float> %95, i64 1, !dbg !33
  %117 = extractelement <4 x float> %95, i64 2, !dbg !33
  %118 = extractelement <4 x float> %95, i64 3, !dbg !33
  %119 = extractelement <4 x float> %110, i64 0, !dbg !33
  %120 = extractelement <4 x float> %110, i64 1, !dbg !33
  %121 = extractelement <4 x float> %110, i64 2, !dbg !33
  %122 = extractelement <4 x float> %110, i64 3, !dbg !33
  %123 = shufflevector <4 x float> %95, <4 x float> %110, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !34
  %124 = fcmp ogt <8 x float> %54, %123, !dbg !34
  %125 = or <8 x i1> %55, %124, !dbg !35
  %126 = select <8 x i1> %125, <8 x float> %54, <8 x float> %123, !dbg !36
  %127 = fcmp oeq <8 x float> %126, splat (float 0xFFF0000000000000), !dbg !37
  %128 = extractelement <16 x float> %37, i64 8, !dbg !38
  %129 = extractelement <8 x float> %126, i64 0, !dbg !33
  %130 = fsub float %128, %129, !dbg !38
  %131 = extractelement <16 x float> %37, i64 9, !dbg !38
  %132 = extractelement <8 x float> %126, i64 1, !dbg !33
  %133 = fsub float %131, %132, !dbg !38
  %134 = extractelement <16 x float> %37, i64 10, !dbg !38
  %135 = extractelement <8 x float> %126, i64 2, !dbg !33
  %136 = fsub float %134, %135, !dbg !38
  %137 = extractelement <16 x float> %37, i64 11, !dbg !38
  %138 = extractelement <8 x float> %126, i64 3, !dbg !33
  %139 = fsub float %137, %138, !dbg !38
  %140 = extractelement <16 x float> %37, i64 12, !dbg !38
  %141 = extractelement <8 x float> %126, i64 4, !dbg !33
  %142 = fsub float %140, %141, !dbg !38
  %143 = extractelement <16 x float> %37, i64 13, !dbg !38
  %144 = extractelement <8 x float> %126, i64 5, !dbg !33
  %145 = fsub float %143, %144, !dbg !38
  %146 = extractelement <16 x float> %37, i64 14, !dbg !38
  %147 = extractelement <8 x float> %126, i64 6, !dbg !33
  %148 = fsub float %146, %147, !dbg !38
  %149 = extractelement <16 x float> %37, i64 15, !dbg !38
  %150 = extractelement <8 x float> %126, i64 7, !dbg !33
  %151 = fsub float %149, %150, !dbg !38
  %152 = fmul float %130, 0x3FF7154760000000, !dbg !39
  %153 = tail call float @llvm.nvvm.ex2.approx.f(float %152), !dbg !39
  %154 = fmul float %133, 0x3FF7154760000000, !dbg !39
  %155 = tail call float @llvm.nvvm.ex2.approx.f(float %154), !dbg !39
  %156 = fmul float %136, 0x3FF7154760000000, !dbg !39
  %157 = tail call float @llvm.nvvm.ex2.approx.f(float %156), !dbg !39
  %158 = fmul float %139, 0x3FF7154760000000, !dbg !39
  %159 = tail call float @llvm.nvvm.ex2.approx.f(float %158), !dbg !39
  %160 = fmul float %142, 0x3FF7154760000000, !dbg !39
  %161 = tail call float @llvm.nvvm.ex2.approx.f(float %160), !dbg !39
  %162 = fmul float %145, 0x3FF7154760000000, !dbg !39
  %163 = tail call float @llvm.nvvm.ex2.approx.f(float %162), !dbg !39
  %164 = fmul float %148, 0x3FF7154760000000, !dbg !39
  %165 = tail call float @llvm.nvvm.ex2.approx.f(float %164), !dbg !39
  %166 = fmul float %151, 0x3FF7154760000000, !dbg !39
  %167 = tail call float @llvm.nvvm.ex2.approx.f(float %166), !dbg !39
  %168 = insertelement <8 x float> poison, float %153, i64 0, !dbg !40
  %169 = insertelement <8 x float> %168, float %155, i64 1, !dbg !40
  %170 = insertelement <8 x float> %169, float %157, i64 2, !dbg !40
  %171 = insertelement <8 x float> %170, float %159, i64 3, !dbg !40
  %172 = insertelement <8 x float> %171, float %161, i64 4, !dbg !40
  %173 = insertelement <8 x float> %172, float %163, i64 5, !dbg !40
  %174 = insertelement <8 x float> %173, float %165, i64 6, !dbg !40
  %175 = insertelement <8 x float> %174, float %167, i64 7, !dbg !40
  %176 = select <8 x i1> %127, <8 x float> splat (float 1.000000e+00), <8 x float> %175, !dbg !40
  %177 = fsub float %115, %129, !dbg !33
  %178 = fsub float %116, %132, !dbg !33
  %179 = fsub float %117, %135, !dbg !33
  %180 = fsub float %118, %138, !dbg !33
  %181 = fsub float %119, %141, !dbg !33
  %182 = fsub float %120, %144, !dbg !33
  %183 = fsub float %121, %147, !dbg !33
  %184 = fsub float %122, %150, !dbg !33
  %185 = fmul float %177, 0x3FF7154760000000, !dbg !39
  %186 = tail call float @llvm.nvvm.ex2.approx.f(float %185), !dbg !39
  %187 = fmul float %178, 0x3FF7154760000000, !dbg !39
  %188 = tail call float @llvm.nvvm.ex2.approx.f(float %187), !dbg !39
  %189 = fmul float %179, 0x3FF7154760000000, !dbg !39
  %190 = tail call float @llvm.nvvm.ex2.approx.f(float %189), !dbg !39
  %191 = fmul float %180, 0x3FF7154760000000, !dbg !39
  %192 = tail call float @llvm.nvvm.ex2.approx.f(float %191), !dbg !39
  %193 = fmul float %181, 0x3FF7154760000000, !dbg !39
  %194 = tail call float @llvm.nvvm.ex2.approx.f(float %193), !dbg !39
  %195 = fmul float %182, 0x3FF7154760000000, !dbg !39
  %196 = tail call float @llvm.nvvm.ex2.approx.f(float %195), !dbg !39
  %197 = fmul float %183, 0x3FF7154760000000, !dbg !39
  %198 = tail call float @llvm.nvvm.ex2.approx.f(float %197), !dbg !39
  %199 = fmul float %184, 0x3FF7154760000000, !dbg !39
  %200 = tail call float @llvm.nvvm.ex2.approx.f(float %199), !dbg !39
  %201 = insertelement <8 x float> poison, float %186, i64 0, !dbg !41
  %202 = insertelement <8 x float> %201, float %188, i64 1, !dbg !41
  %203 = insertelement <8 x float> %202, float %190, i64 2, !dbg !41
  %204 = insertelement <8 x float> %203, float %192, i64 3, !dbg !41
  %205 = insertelement <8 x float> %204, float %194, i64 4, !dbg !41
  %206 = insertelement <8 x float> %205, float %196, i64 5, !dbg !41
  %207 = insertelement <8 x float> %206, float %198, i64 6, !dbg !41
  %208 = insertelement <8 x float> %207, float %200, i64 7, !dbg !41
  %209 = select <8 x i1> %127, <8 x float> splat (float 1.000000e+00), <8 x float> %208, !dbg !41
  %210 = shufflevector <16 x float> %37, <16 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !42
  %211 = fmul <8 x float> %210, %176, !dbg !42
  %212 = fadd <8 x float> %211, %209, !dbg !43
  %213 = shufflevector <8 x float> %212, <8 x float> %126, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !44
  %214 = select <16 x i1> %59, <16 x float> %213, <16 x float> %37, !dbg !44
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !16
  %215 = icmp samesign ult i64 %indvars.iv, 260, !dbg !16
  br i1 %215, label %34, label %216, !dbg !16

216:                                              ; preds = %34
  %217 = bitcast <4 x i1> %99 to i4, !dbg !45
  %218 = icmp ne i4 %217, 0, !dbg !45
  %219 = zext i1 %218 to i8, !dbg !45
  %220 = bitcast <4 x i1> %114 to i4, !dbg !45
  %221 = icmp ne i4 %220, 0, !dbg !45
  %222 = zext i1 %221 to i8, !dbg !45
  %223 = zext i1 %218 to i32, !dbg !47
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 8, i32 31), !dbg !47
  %225 = trunc i32 %224 to i8, !dbg !47
  %226 = or i8 %225, %219, !dbg !45
  %227 = zext i8 %226 to i32, !dbg !47
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 4, i32 31), !dbg !47
  %229 = trunc i32 %228 to i8, !dbg !47
  %230 = or i8 %226, %229, !dbg !45
  %231 = zext i8 %230 to i32, !dbg !47
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 2, i32 31), !dbg !47
  %233 = trunc i32 %232 to i8, !dbg !47
  %234 = or i8 %230, %233, !dbg !45
  %235 = zext i8 %234 to i32, !dbg !47
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 1, i32 31), !dbg !47
  %237 = trunc i32 %236 to i8, !dbg !47
  %238 = or i8 %234, %237, !dbg !45
  %239 = zext i1 %221 to i32, !dbg !47
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 8, i32 31), !dbg !47
  %241 = trunc i32 %240 to i8, !dbg !47
  %242 = or i8 %241, %222, !dbg !45
  %243 = zext i8 %242 to i32, !dbg !47
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 4, i32 31), !dbg !47
  %245 = trunc i32 %244 to i8, !dbg !47
  %246 = or i8 %242, %245, !dbg !45
  %247 = zext i8 %246 to i32, !dbg !47
  %248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 2, i32 31), !dbg !47
  %249 = trunc i32 %248 to i8, !dbg !47
  %250 = or i8 %246, %249, !dbg !45
  %251 = zext i8 %250 to i32, !dbg !47
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 1, i32 31), !dbg !47
  %253 = trunc i32 %252 to i8, !dbg !47
  %254 = or i8 %250, %253, !dbg !45
  %.not = icmp eq i8 %238, 0, !dbg !48
  %.not2 = icmp eq i8 %254, 0, !dbg !48
  %255 = extractelement <16 x float> %214, i64 8, !dbg !49
  %256 = extractelement <16 x float> %214, i64 9, !dbg !49
  %257 = fcmp ogt float %255, %256, !dbg !49
  %258 = fcmp uno float %255, 0.000000e+00, !dbg !51
  %259 = or i1 %257, %258, !dbg !52
  %260 = select i1 %259, float %255, float %256, !dbg !53
  %261 = extractelement <16 x float> %214, i64 10, !dbg !49
  %262 = fcmp ogt float %260, %261, !dbg !49
  %263 = fcmp uno float %260, 0.000000e+00, !dbg !51
  %264 = or i1 %262, %263, !dbg !52
  %265 = select i1 %264, float %260, float %261, !dbg !53
  %266 = extractelement <16 x float> %214, i64 11, !dbg !49
  %267 = fcmp ogt float %265, %266, !dbg !49
  %268 = fcmp uno float %265, 0.000000e+00, !dbg !51
  %269 = or i1 %267, %268, !dbg !52
  %270 = select i1 %269, float %265, float %266, !dbg !53
  %271 = extractelement <16 x float> %214, i64 12, !dbg !49
  %272 = extractelement <16 x float> %214, i64 13, !dbg !49
  %273 = fcmp ogt float %271, %272, !dbg !49
  %274 = fcmp uno float %271, 0.000000e+00, !dbg !51
  %275 = or i1 %273, %274, !dbg !52
  %276 = select i1 %275, float %271, float %272, !dbg !53
  %277 = extractelement <16 x float> %214, i64 14, !dbg !49
  %278 = fcmp ogt float %276, %277, !dbg !49
  %279 = fcmp uno float %276, 0.000000e+00, !dbg !51
  %280 = or i1 %278, %279, !dbg !52
  %281 = select i1 %280, float %276, float %277, !dbg !53
  %282 = extractelement <16 x float> %214, i64 15, !dbg !49
  %283 = fcmp ogt float %281, %282, !dbg !49
  %284 = fcmp uno float %281, 0.000000e+00, !dbg !51
  %285 = or i1 %283, %284, !dbg !52
  %286 = select i1 %285, float %281, float %282, !dbg !53
  %287 = bitcast float %270 to i32, !dbg !54
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 8, i32 31), !dbg !54
  %289 = bitcast i32 %288 to float, !dbg !54
  %290 = fcmp ogt float %270, %289, !dbg !49
  %291 = fcmp uno float %270, 0.000000e+00, !dbg !51
  %292 = or i1 %291, %290, !dbg !52
  %293 = select i1 %292, float %270, float %289, !dbg !53
  %294 = bitcast float %293 to i32, !dbg !54
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 4, i32 31), !dbg !54
  %296 = bitcast i32 %295 to float, !dbg !54
  %297 = fcmp ogt float %293, %296, !dbg !49
  %298 = fcmp uno float %293, 0.000000e+00, !dbg !51
  %299 = or i1 %297, %298, !dbg !52
  %300 = select i1 %299, float %293, float %296, !dbg !53
  %301 = bitcast float %300 to i32, !dbg !54
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 2, i32 31), !dbg !54
  %303 = bitcast i32 %302 to float, !dbg !54
  %304 = fcmp ogt float %300, %303, !dbg !49
  %305 = fcmp uno float %300, 0.000000e+00, !dbg !51
  %306 = or i1 %304, %305, !dbg !52
  %307 = select i1 %306, float %300, float %303, !dbg !53
  %308 = bitcast float %307 to i32, !dbg !54
  %309 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %308, i32 1, i32 31), !dbg !54
  %310 = bitcast i32 %309 to float, !dbg !54
  %311 = fcmp ogt float %307, %310, !dbg !49
  %312 = fcmp uno float %307, 0.000000e+00, !dbg !51
  %313 = or i1 %311, %312, !dbg !52
  %314 = select i1 %313, float %307, float %310, !dbg !53
  %315 = bitcast float %286 to i32, !dbg !54
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 8, i32 31), !dbg !54
  %317 = bitcast i32 %316 to float, !dbg !54
  %318 = fcmp ogt float %286, %317, !dbg !49
  %319 = fcmp uno float %286, 0.000000e+00, !dbg !51
  %320 = or i1 %319, %318, !dbg !52
  %321 = select i1 %320, float %286, float %317, !dbg !53
  %322 = bitcast float %321 to i32, !dbg !54
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 4, i32 31), !dbg !54
  %324 = bitcast i32 %323 to float, !dbg !54
  %325 = fcmp ogt float %321, %324, !dbg !49
  %326 = fcmp uno float %321, 0.000000e+00, !dbg !51
  %327 = or i1 %325, %326, !dbg !52
  %328 = select i1 %327, float %321, float %324, !dbg !53
  %329 = bitcast float %328 to i32, !dbg !54
  %330 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %329, i32 2, i32 31), !dbg !54
  %331 = bitcast i32 %330 to float, !dbg !54
  %332 = fcmp ogt float %328, %331, !dbg !49
  %333 = fcmp uno float %328, 0.000000e+00, !dbg !51
  %334 = or i1 %332, %333, !dbg !52
  %335 = select i1 %334, float %328, float %331, !dbg !53
  %336 = bitcast float %335 to i32, !dbg !54
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %336, i32 1, i32 31), !dbg !54
  %338 = bitcast i32 %337 to float, !dbg !54
  %339 = fcmp ogt float %335, %338, !dbg !49
  %340 = fcmp uno float %335, 0.000000e+00, !dbg !51
  %341 = or i1 %339, %340, !dbg !52
  %342 = select i1 %341, float %335, float %338, !dbg !53
  %343 = fcmp oeq float %314, 0xFFF0000000000000, !dbg !55
  %344 = fcmp oeq float %342, 0xFFF0000000000000, !dbg !55
  %345 = fsub float %255, %314, !dbg !56
  %346 = fsub float %256, %314, !dbg !56
  %347 = fsub float %261, %314, !dbg !56
  %348 = fsub float %266, %314, !dbg !56
  %349 = fsub float %271, %342, !dbg !56
  %350 = fsub float %272, %342, !dbg !56
  %351 = fsub float %277, %342, !dbg !56
  %352 = fsub float %282, %342, !dbg !56
  %353 = fmul float %345, 0x3FF7154760000000, !dbg !57
  %354 = select i1 %343, float 0.000000e+00, float %353, !dbg !58
  %355 = tail call float @llvm.nvvm.ex2.approx.f(float %354), !dbg !57
  %356 = fmul float %346, 0x3FF7154760000000, !dbg !57
  %357 = select i1 %343, float 0.000000e+00, float %356, !dbg !58
  %358 = tail call float @llvm.nvvm.ex2.approx.f(float %357), !dbg !57
  %359 = fmul float %347, 0x3FF7154760000000, !dbg !57
  %360 = select i1 %343, float 0.000000e+00, float %359, !dbg !58
  %361 = tail call float @llvm.nvvm.ex2.approx.f(float %360), !dbg !57
  %362 = fmul float %348, 0x3FF7154760000000, !dbg !57
  %363 = select i1 %343, float 0.000000e+00, float %362, !dbg !58
  %364 = tail call float @llvm.nvvm.ex2.approx.f(float %363), !dbg !57
  %365 = fmul float %349, 0x3FF7154760000000, !dbg !57
  %366 = select i1 %344, float 0.000000e+00, float %365, !dbg !58
  %367 = tail call float @llvm.nvvm.ex2.approx.f(float %366), !dbg !57
  %368 = fmul float %350, 0x3FF7154760000000, !dbg !57
  %369 = select i1 %344, float 0.000000e+00, float %368, !dbg !58
  %370 = tail call float @llvm.nvvm.ex2.approx.f(float %369), !dbg !57
  %371 = fmul float %351, 0x3FF7154760000000, !dbg !57
  %372 = select i1 %344, float 0.000000e+00, float %371, !dbg !58
  %373 = tail call float @llvm.nvvm.ex2.approx.f(float %372), !dbg !57
  %374 = fmul float %352, 0x3FF7154760000000, !dbg !57
  %375 = select i1 %344, float 0.000000e+00, float %374, !dbg !58
  %376 = tail call float @llvm.nvvm.ex2.approx.f(float %375), !dbg !57
  %377 = extractelement <16 x float> %214, i64 0, !dbg !59
  %378 = fmul float %377, %355, !dbg !59
  %379 = extractelement <16 x float> %214, i64 1, !dbg !59
  %380 = fmul float %379, %358, !dbg !59
  %381 = extractelement <16 x float> %214, i64 2, !dbg !59
  %382 = fmul float %381, %361, !dbg !59
  %383 = extractelement <16 x float> %214, i64 3, !dbg !59
  %384 = fmul float %383, %364, !dbg !59
  %385 = extractelement <16 x float> %214, i64 4, !dbg !59
  %386 = fmul float %385, %367, !dbg !59
  %387 = extractelement <16 x float> %214, i64 5, !dbg !59
  %388 = fmul float %387, %370, !dbg !59
  %389 = extractelement <16 x float> %214, i64 6, !dbg !59
  %390 = fmul float %389, %373, !dbg !59
  %391 = extractelement <16 x float> %214, i64 7, !dbg !59
  %392 = fmul float %391, %376, !dbg !59
  %393 = fadd float %378, %380, !dbg !60
  %394 = fadd float %393, %382, !dbg !60
  %395 = fadd float %394, %384, !dbg !60
  %396 = fadd float %386, %388, !dbg !60
  %397 = fadd float %396, %390, !dbg !60
  %398 = fadd float %397, %392, !dbg !60
  %399 = bitcast float %395 to i32, !dbg !63
  %400 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %399, i32 8, i32 31), !dbg !63
  %401 = bitcast i32 %400 to float, !dbg !63
  %402 = fadd float %395, %401, !dbg !60
  %403 = bitcast float %402 to i32, !dbg !63
  %404 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %403, i32 4, i32 31), !dbg !63
  %405 = bitcast i32 %404 to float, !dbg !63
  %406 = fadd float %402, %405, !dbg !60
  %407 = bitcast float %406 to i32, !dbg !63
  %408 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %407, i32 2, i32 31), !dbg !63
  %409 = bitcast i32 %408 to float, !dbg !63
  %410 = fadd float %406, %409, !dbg !60
  %411 = bitcast float %410 to i32, !dbg !63
  %412 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %411, i32 1, i32 31), !dbg !63
  %413 = bitcast i32 %412 to float, !dbg !63
  %414 = fadd float %410, %413, !dbg !60
  %415 = bitcast float %398 to i32, !dbg !63
  %416 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %415, i32 8, i32 31), !dbg !63
  %417 = bitcast i32 %416 to float, !dbg !63
  %418 = fadd float %398, %417, !dbg !60
  %419 = bitcast float %418 to i32, !dbg !63
  %420 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %419, i32 4, i32 31), !dbg !63
  %421 = bitcast i32 %420 to float, !dbg !63
  %422 = fadd float %418, %421, !dbg !60
  %423 = bitcast float %422 to i32, !dbg !63
  %424 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %423, i32 2, i32 31), !dbg !63
  %425 = bitcast i32 %424 to float, !dbg !63
  %426 = fadd float %422, %425, !dbg !60
  %427 = bitcast float %426 to i32, !dbg !63
  %428 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %427, i32 1, i32 31), !dbg !63
  %429 = bitcast i32 %428 to float, !dbg !63
  %430 = fadd float %426, %429, !dbg !60
  %431 = extractelement <2 x i1> %18, i64 0, !dbg !64
  %432 = extractelement <2 x i1> %18, i64 1, !dbg !64
  br label %433, !dbg !65

433:                                              ; preds = %216, %433
  %indvars.iv28 = phi i64 [ 0, %216 ], [ %indvars.iv.next29, %433 ]
  %434 = or disjoint i64 %indvars.iv28, %33, !dbg !66
  %435 = icmp samesign ult i64 %434, 324, !dbg !67
  %436 = trunc nuw nsw i64 %434 to i32, !dbg !68
  %437 = add i32 %25, %436, !dbg !68
  %438 = add i32 %26, %436, !dbg !68
  %439 = sext i32 %437 to i64, !dbg !69
  %440 = getelementptr float, ptr addrspace(1) %1, i64 %439, !dbg !69
  %441 = sext i32 %438 to i64, !dbg !69
  %442 = getelementptr float, ptr addrspace(1) %1, i64 %441, !dbg !69
  %443 = and i1 %431, %435, !dbg !64
  %444 = and i1 %432, %435, !dbg !64
  %445 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #4, !dbg !70
  %446 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %440, i64 %445, i1 %443) #4, !dbg !70
  %447 = extractvalue { i32, i32, i32, i32 } %446, 0, !dbg !70
  %448 = extractvalue { i32, i32, i32, i32 } %446, 1, !dbg !70
  %449 = extractvalue { i32, i32, i32, i32 } %446, 2, !dbg !70
  %450 = extractvalue { i32, i32, i32, i32 } %446, 3, !dbg !70
  %451 = bitcast i32 %447 to float, !dbg !70
  %452 = bitcast i32 %448 to float, !dbg !70
  %453 = bitcast i32 %449 to float, !dbg !70
  %454 = bitcast i32 %450 to float, !dbg !70
  %455 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #4, !dbg !70
  %456 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %442, i64 %455, i1 %444) #4, !dbg !70
  %457 = extractvalue { i32, i32, i32, i32 } %456, 0, !dbg !70
  %458 = extractvalue { i32, i32, i32, i32 } %456, 1, !dbg !70
  %459 = extractvalue { i32, i32, i32, i32 } %456, 2, !dbg !70
  %460 = extractvalue { i32, i32, i32, i32 } %456, 3, !dbg !70
  %461 = bitcast i32 %457 to float, !dbg !70
  %462 = bitcast i32 %458 to float, !dbg !70
  %463 = bitcast i32 %459 to float, !dbg !70
  %464 = bitcast i32 %460 to float, !dbg !70
  %465 = add i32 %29, %436, !dbg !71
  %466 = add i32 %32, %436, !dbg !71
  %467 = sext i32 %465 to i64, !dbg !72
  %468 = getelementptr float, ptr addrspace(1) %0, i64 %467, !dbg !72
  %469 = sext i32 %466 to i64, !dbg !72
  %470 = getelementptr float, ptr addrspace(1) %0, i64 %469, !dbg !72
  %471 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #4, !dbg !73
  %472 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %468, i64 %471, i1 %443) #4, !dbg !73
  %473 = extractvalue { i32, i32, i32, i32 } %472, 0, !dbg !73
  %474 = extractvalue { i32, i32, i32, i32 } %472, 1, !dbg !73
  %475 = extractvalue { i32, i32, i32, i32 } %472, 2, !dbg !73
  %476 = extractvalue { i32, i32, i32, i32 } %472, 3, !dbg !73
  %477 = bitcast i32 %473 to float, !dbg !73
  %478 = bitcast i32 %474 to float, !dbg !73
  %479 = bitcast i32 %475 to float, !dbg !73
  %480 = bitcast i32 %476 to float, !dbg !73
  %481 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #4, !dbg !73
  %482 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %470, i64 %481, i1 %444) #4, !dbg !73
  %483 = extractvalue { i32, i32, i32, i32 } %482, 0, !dbg !73
  %484 = extractvalue { i32, i32, i32, i32 } %482, 1, !dbg !73
  %485 = extractvalue { i32, i32, i32, i32 } %482, 2, !dbg !73
  %486 = extractvalue { i32, i32, i32, i32 } %482, 3, !dbg !73
  %487 = bitcast i32 %483 to float, !dbg !73
  %488 = bitcast i32 %484 to float, !dbg !73
  %489 = bitcast i32 %485 to float, !dbg !73
  %490 = bitcast i32 %486 to float, !dbg !73
  %491 = fadd float %451, %477, !dbg !74
  %492 = fadd float %452, %478, !dbg !74
  %493 = fadd float %453, %479, !dbg !74
  %494 = fadd float %454, %480, !dbg !74
  %495 = fadd float %461, %487, !dbg !74
  %496 = fadd float %462, %488, !dbg !74
  %497 = fadd float %463, %489, !dbg !74
  %498 = fadd float %464, %490, !dbg !74
  %499 = fsub float %491, %314, !dbg !75
  %500 = fsub float %492, %314, !dbg !75
  %501 = fsub float %493, %314, !dbg !75
  %502 = fsub float %494, %314, !dbg !75
  %503 = fsub float %495, %342, !dbg !75
  %504 = fsub float %496, %342, !dbg !75
  %505 = fsub float %497, %342, !dbg !75
  %506 = fsub float %498, %342, !dbg !75
  %507 = fmul float %499, 0x3FF7154760000000, !dbg !76
  %508 = tail call float @llvm.nvvm.ex2.approx.f(float %507), !dbg !76
  %509 = fmul float %500, 0x3FF7154760000000, !dbg !76
  %510 = tail call float @llvm.nvvm.ex2.approx.f(float %509), !dbg !76
  %511 = fmul float %501, 0x3FF7154760000000, !dbg !76
  %512 = tail call float @llvm.nvvm.ex2.approx.f(float %511), !dbg !76
  %513 = fmul float %502, 0x3FF7154760000000, !dbg !76
  %514 = tail call float @llvm.nvvm.ex2.approx.f(float %513), !dbg !76
  %515 = fmul float %503, 0x3FF7154760000000, !dbg !76
  %516 = tail call float @llvm.nvvm.ex2.approx.f(float %515), !dbg !76
  %517 = fmul float %504, 0x3FF7154760000000, !dbg !76
  %518 = tail call float @llvm.nvvm.ex2.approx.f(float %517), !dbg !76
  %519 = fmul float %505, 0x3FF7154760000000, !dbg !76
  %520 = tail call float @llvm.nvvm.ex2.approx.f(float %519), !dbg !76
  %521 = fmul float %506, 0x3FF7154760000000, !dbg !76
  %522 = tail call float @llvm.nvvm.ex2.approx.f(float %521), !dbg !76
  %523 = tail call float @llvm.nvvm.div.full(float %508, float %414), !dbg !77
  %524 = tail call float @llvm.nvvm.div.full(float %510, float %414), !dbg !77
  %525 = tail call float @llvm.nvvm.div.full(float %512, float %414), !dbg !77
  %526 = tail call float @llvm.nvvm.div.full(float %514, float %414), !dbg !77
  %527 = tail call float @llvm.nvvm.div.full(float %516, float %430), !dbg !77
  %528 = tail call float @llvm.nvvm.div.full(float %518, float %430), !dbg !77
  %529 = tail call float @llvm.nvvm.div.full(float %520, float %430), !dbg !77
  %530 = tail call float @llvm.nvvm.div.full(float %522, float %430), !dbg !77
  %531 = bitcast float %523 to i32, !dbg !78
  %532 = select i1 %.not, i32 0, i32 %531, !dbg !79
  %533 = bitcast float %524 to i32, !dbg !78
  %534 = select i1 %.not, i32 0, i32 %533, !dbg !79
  %535 = bitcast float %525 to i32, !dbg !78
  %536 = select i1 %.not, i32 0, i32 %535, !dbg !79
  %537 = bitcast float %526 to i32, !dbg !78
  %538 = select i1 %.not, i32 0, i32 %537, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %532, i32 %534, i32 %536, i32 %538, ptr addrspace(1) %468, i1 %443) #4, !dbg !78
  %539 = bitcast float %527 to i32, !dbg !78
  %540 = select i1 %.not2, i32 0, i32 %539, !dbg !79
  %541 = bitcast float %528 to i32, !dbg !78
  %542 = select i1 %.not2, i32 0, i32 %541, !dbg !79
  %543 = bitcast float %529 to i32, !dbg !78
  %544 = select i1 %.not2, i32 0, i32 %543, !dbg !79
  %545 = bitcast float %530 to i32, !dbg !78
  %546 = select i1 %.not2, i32 0, i32 %545, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %540, i32 %542, i32 %544, i32 %546, ptr addrspace(1) %470, i1 %444) #4, !dbg !78
  %indvars.iv.next29 = add nuw nsw i64 %indvars.iv28, 64, !dbg !65
  %547 = icmp samesign ult i64 %indvars.iv28, 260, !dbg !65
  br i1 %547, label %433, label %548, !dbg !65

548:                                              ; preds = %433
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { "nvvm.reqntid"="512" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "c3s5rpotgkrxj53byxl6iiai4e64ppfdhf7r5r7xy2iceaf5vzca.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/3s")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "triton_red_fused_15", linkageName: "triton_red_fused_15", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 23, column: 28, scope: !5)
!9 = !DILocation(line: 23, column: 33, scope: !5)
!10 = !DILocation(line: 24, column: 44, scope: !5)
!11 = !DILocation(line: 24, column: 23, scope: !5)
!12 = !DILocation(line: 25, column: 21, scope: !5)
!13 = !DILocation(line: 26, column: 37, scope: !5)
!14 = !DILocation(line: 30, column: 19, scope: !5)
!15 = !DILocation(line: 42, column: 45, scope: !5)
!16 = !DILocation(line: 36, column: 40, scope: !5)
!17 = !DILocation(line: 37, column: 31, scope: !5)
!18 = !DILocation(line: 38, column: 29, scope: !5)
!19 = !DILocation(line: 42, column: 41, scope: !5)
!20 = !DILocation(line: 42, column: 34, scope: !5)
!21 = !DILocation(line: 42, column: 50, scope: !5)
!22 = !DILocation(line: 43, column: 54, scope: !5)
!23 = !DILocation(line: 43, column: 38, scope: !5)
!24 = !DILocation(line: 113, column: 21, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !5, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 56, column: 43, scope: !5)
!28 = !DILocation(line: 42, column: 60, scope: !5)
!29 = !DILocation(line: 43, column: 66, scope: !5)
!30 = !DILocation(line: 44, column: 22, scope: !5)
!31 = !DILocation(line: 46, column: 23, scope: !5)
!32 = !DILocation(line: 52, column: 49, scope: !5)
!33 = !DILocation(line: 200, column: 53, scope: !25, inlinedAt: !27)
!34 = !DILocation(line: 111, column: 15, scope: !25, inlinedAt: !27)
!35 = !DILocation(line: 113, column: 16, scope: !25, inlinedAt: !27)
!36 = !DILocation(line: 114, column: 29, scope: !25, inlinedAt: !27)
!37 = !DILocation(line: 197, column: 19, scope: !25, inlinedAt: !27)
!38 = !DILocation(line: 197, column: 53, scope: !25, inlinedAt: !27)
!39 = !DILocation(line: 174, column: 24, scope: !25, inlinedAt: !27)
!40 = !DILocation(line: 197, column: 39, scope: !25, inlinedAt: !27)
!41 = !DILocation(line: 200, column: 39, scope: !25, inlinedAt: !27)
!42 = !DILocation(line: 206, column: 24, scope: !25, inlinedAt: !27)
!43 = !DILocation(line: 206, column: 36, scope: !25, inlinedAt: !27)
!44 = !DILocation(line: 60, column: 64, scope: !5)
!45 = !DILocation(line: 261, column: 15, scope: !25, inlinedAt: !46)
!46 = !DILocation(line: 61, column: 49, scope: !5)
!47 = !DILocation(line: 266, column: 29, scope: !25, inlinedAt: !46)
!48 = !DILocation(line: 61, column: 64, scope: !5)
!49 = !DILocation(line: 111, column: 15, scope: !25, inlinedAt: !50)
!50 = !DILocation(line: 64, column: 35, scope: !5)
!51 = !DILocation(line: 113, column: 21, scope: !25, inlinedAt: !50)
!52 = !DILocation(line: 113, column: 16, scope: !25, inlinedAt: !50)
!53 = !DILocation(line: 114, column: 29, scope: !25, inlinedAt: !50)
!54 = !DILocation(line: 124, column: 29, scope: !25, inlinedAt: !50)
!55 = !DILocation(line: 181, column: 40, scope: !25, inlinedAt: !50)
!56 = !DILocation(line: 181, column: 68, scope: !25, inlinedAt: !50)
!57 = !DILocation(line: 174, column: 24, scope: !25, inlinedAt: !50)
!58 = !DILocation(line: 181, column: 58, scope: !25, inlinedAt: !50)
!59 = !DILocation(line: 182, column: 31, scope: !25, inlinedAt: !50)
!60 = !DILocation(line: 260, column: 15, scope: !61, inlinedAt: !50)
!61 = distinct !DILexicalBlockFile(scope: !5, file: !62, discriminator: 0)
!62 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!63 = !DILocation(line: 290, column: 36, scope: !61, inlinedAt: !50)
!64 = !DILocation(line: 75, column: 61, scope: !5)
!65 = !DILocation(line: 69, column: 40, scope: !5)
!66 = !DILocation(line: 70, column: 31, scope: !5)
!67 = !DILocation(line: 71, column: 29, scope: !5)
!68 = !DILocation(line: 75, column: 42, scope: !5)
!69 = !DILocation(line: 75, column: 35, scope: !5)
!70 = !DILocation(line: 75, column: 51, scope: !5)
!71 = !DILocation(line: 76, column: 55, scope: !5)
!72 = !DILocation(line: 76, column: 39, scope: !5)
!73 = !DILocation(line: 76, column: 67, scope: !5)
!74 = !DILocation(line: 78, column: 24, scope: !5)
!75 = !DILocation(line: 79, column: 24, scope: !5)
!76 = !DILocation(line: 80, column: 28, scope: !5)
!77 = !DILocation(line: 81, column: 25, scope: !5)
!78 = !DILocation(line: 84, column: 67, scope: !5)
!79 = !DILocation(line: 83, column: 39, scope: !5)
!80 = !DILocation(line: 69, column: 4, scope: !5)
