; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_red_fused_15(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr #0 !dbg !5 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %7 = shl i32 %6, 6, !dbg !9
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %9 = lshr i32 %8, 1, !dbg !10
  %10 = and i32 %9, 63, !dbg !10
  %11 = or disjoint i32 %10, %7, !dbg !11
  %12 = icmp slt i32 %11, 10368, !dbg !12
  %13 = shl nuw nsw i32 %8, 2, !dbg !13
  %14 = and i32 %13, 4, !dbg !13
  %15 = sdiv i32 %11, 324, !dbg !14
  %16 = mul i32 %11, 324, !dbg !15
  %17 = mul i32 %11, 324
  %18 = shl nsw i32 %15, 4
  %19 = add i32 %18, %17
  %20 = zext nneg i32 %14 to i64, !dbg !16
  br label %21, !dbg !16

21:                                               ; preds = %5, %21
  %indvars.iv = phi i64 [ 0, %5 ], [ %indvars.iv.next, %21 ]
  %22 = phi <4 x i1> [ zeroinitializer, %5 ], [ %61, %21 ]
  %23 = phi <8 x float> [ <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, %5 ], [ %120, %21 ]
  %24 = or disjoint i64 %indvars.iv, %20, !dbg !17
  %25 = icmp samesign ult i64 %24, 324, !dbg !18
  %26 = trunc nuw nsw i64 %24 to i32, !dbg !19
  %27 = add i32 %16, %26, !dbg !19
  %28 = sext i32 %27 to i64, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !20
  %30 = and i1 %12, %25, !dbg !21
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !22
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %29, i64 %31, i1 %30) #4, !dbg !22
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !22
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !22
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !22
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !22
  %37 = add i32 %19, %26, !dbg !23
  %38 = sext i32 %37 to i64, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !24
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !25
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %39, i64 %40, i1 %30) #4, !dbg !25
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !25
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !25
  %46 = insertelement <4 x i32> poison, i32 %33, i64 0, !dbg !22
  %47 = insertelement <4 x i32> %46, i32 %34, i64 1, !dbg !22
  %48 = insertelement <4 x i32> %47, i32 %35, i64 2, !dbg !22
  %49 = insertelement <4 x i32> %48, i32 %36, i64 3, !dbg !22
  %50 = bitcast <4 x i32> %49 to <4 x float>, !dbg !22
  %51 = insertelement <4 x i32> poison, i32 %42, i64 0, !dbg !25
  %52 = insertelement <4 x i32> %51, i32 %43, i64 1, !dbg !25
  %53 = insertelement <4 x i32> %52, i32 %44, i64 2, !dbg !25
  %54 = insertelement <4 x i32> %53, i32 %45, i64 3, !dbg !25
  %55 = bitcast <4 x i32> %54 to <4 x float>, !dbg !25
  %56 = fadd <4 x float> %50, %55, !dbg !26
  %57 = fcmp une <4 x float> %56, splat (float 0xFFF0000000000000), !dbg !27
  %58 = insertelement <4 x i1> poison, i1 %30, i64 0, !dbg !28
  %59 = shufflevector <4 x i1> %58, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !28
  %60 = select <4 x i1> %59, <4 x i1> %57, <4 x i1> zeroinitializer, !dbg !28
  %61 = or <4 x i1> %22, %60, !dbg !28
  %62 = shufflevector <8 x float> %23, <8 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !29
  %63 = fcmp uno <4 x float> %62, zeroinitializer, !dbg !29
  %64 = fcmp ogt <4 x float> %62, %56, !dbg !33
  %65 = or <4 x i1> %63, %64, !dbg !34
  %66 = select <4 x i1> %65, <4 x float> %62, <4 x float> %56, !dbg !35
  %67 = fcmp oeq <4 x float> %66, splat (float 0xFFF0000000000000), !dbg !36
  %68 = extractelement <8 x float> %23, i64 4, !dbg !37
  %69 = extractelement <4 x float> %66, i64 0, !dbg !38
  %70 = fsub float %68, %69, !dbg !37
  %71 = extractelement <8 x float> %23, i64 5, !dbg !37
  %72 = extractelement <4 x float> %66, i64 1, !dbg !38
  %73 = fsub float %71, %72, !dbg !37
  %74 = extractelement <8 x float> %23, i64 6, !dbg !37
  %75 = extractelement <4 x float> %66, i64 2, !dbg !38
  %76 = fsub float %74, %75, !dbg !37
  %77 = extractelement <8 x float> %23, i64 7, !dbg !37
  %78 = extractelement <4 x float> %66, i64 3, !dbg !38
  %79 = fsub float %77, %78, !dbg !37
  %80 = fmul float %70, 0x3FF7154760000000, !dbg !39
  %81 = tail call float @llvm.nvvm.ex2.approx.f(float %80), !dbg !39
  %82 = fmul float %73, 0x3FF7154760000000, !dbg !39
  %83 = tail call float @llvm.nvvm.ex2.approx.f(float %82), !dbg !39
  %84 = fmul float %76, 0x3FF7154760000000, !dbg !39
  %85 = tail call float @llvm.nvvm.ex2.approx.f(float %84), !dbg !39
  %86 = fmul float %79, 0x3FF7154760000000, !dbg !39
  %87 = tail call float @llvm.nvvm.ex2.approx.f(float %86), !dbg !39
  %88 = insertelement <4 x float> poison, float %81, i64 0, !dbg !40
  %89 = insertelement <4 x float> %88, float %83, i64 1, !dbg !40
  %90 = insertelement <4 x float> %89, float %85, i64 2, !dbg !40
  %91 = insertelement <4 x float> %90, float %87, i64 3, !dbg !40
  %92 = select <4 x i1> %67, <4 x float> splat (float 1.000000e+00), <4 x float> %91, !dbg !40
  %93 = fsub <4 x float> %56, %66, !dbg !38
  %94 = extractelement <4 x float> %93, i64 0, !dbg !38
  %95 = fsub <4 x float> %56, %66, !dbg !38
  %96 = extractelement <4 x float> %95, i64 1, !dbg !38
  %97 = fsub <4 x float> %56, %66, !dbg !38
  %98 = extractelement <4 x float> %97, i64 2, !dbg !38
  %99 = fsub <4 x float> %56, %66, !dbg !38
  %100 = extractelement <4 x float> %99, i64 3, !dbg !38
  %101 = fmul float %94, 0x3FF7154760000000, !dbg !39
  %102 = tail call float @llvm.nvvm.ex2.approx.f(float %101), !dbg !39
  %103 = fmul float %96, 0x3FF7154760000000, !dbg !39
  %104 = tail call float @llvm.nvvm.ex2.approx.f(float %103), !dbg !39
  %105 = fmul float %98, 0x3FF7154760000000, !dbg !39
  %106 = tail call float @llvm.nvvm.ex2.approx.f(float %105), !dbg !39
  %107 = fmul float %100, 0x3FF7154760000000, !dbg !39
  %108 = tail call float @llvm.nvvm.ex2.approx.f(float %107), !dbg !39
  %109 = insertelement <4 x float> poison, float %102, i64 0, !dbg !41
  %110 = insertelement <4 x float> %109, float %104, i64 1, !dbg !41
  %111 = insertelement <4 x float> %110, float %106, i64 2, !dbg !41
  %112 = insertelement <4 x float> %111, float %108, i64 3, !dbg !41
  %113 = select <4 x i1> %67, <4 x float> splat (float 1.000000e+00), <4 x float> %112, !dbg !41
  %114 = shufflevector <8 x float> %23, <8 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !42
  %115 = fmul <4 x float> %114, %92, !dbg !42
  %116 = fadd <4 x float> %115, %113, !dbg !43
  %117 = insertelement <8 x i1> poison, i1 %30, i64 0, !dbg !44
  %118 = shufflevector <8 x i1> %117, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !44
  %119 = shufflevector <4 x float> %116, <4 x float> %66, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !44
  %120 = select <8 x i1> %118, <8 x float> %119, <8 x float> %23, !dbg !44
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !16
  %121 = icmp samesign ult i64 %indvars.iv, 316, !dbg !16
  br i1 %121, label %21, label %122, !dbg !16

122:                                              ; preds = %21
  %123 = bitcast <4 x i1> %61 to i4, !dbg !45
  %124 = icmp ne i4 %123, 0, !dbg !45
  %125 = zext i1 %124 to i8, !dbg !45
  %126 = zext i1 %124 to i32, !dbg !47
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 1, i32 31), !dbg !47
  %128 = trunc i32 %127 to i8, !dbg !47
  %129 = or i8 %128, %125, !dbg !45
  %.not = icmp eq i8 %129, 0, !dbg !48
  %130 = extractelement <8 x float> %120, i64 4, !dbg !49
  %131 = extractelement <8 x float> %120, i64 5, !dbg !49
  %132 = fcmp ogt float %130, %131, !dbg !49
  %133 = fcmp uno float %130, 0.000000e+00, !dbg !51
  %134 = or i1 %132, %133, !dbg !52
  %135 = select i1 %134, float %130, float %131, !dbg !53
  %136 = extractelement <8 x float> %120, i64 6, !dbg !49
  %137 = fcmp ogt float %135, %136, !dbg !49
  %138 = fcmp uno float %135, 0.000000e+00, !dbg !51
  %139 = or i1 %137, %138, !dbg !52
  %140 = select i1 %139, float %135, float %136, !dbg !53
  %141 = extractelement <8 x float> %120, i64 7, !dbg !49
  %142 = fcmp ogt float %140, %141, !dbg !49
  %143 = fcmp uno float %140, 0.000000e+00, !dbg !51
  %144 = or i1 %142, %143, !dbg !52
  %145 = select i1 %144, float %140, float %141, !dbg !53
  %146 = bitcast float %145 to i32, !dbg !54
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 1, i32 31), !dbg !54
  %148 = bitcast i32 %147 to float, !dbg !54
  %149 = fcmp ogt float %145, %148, !dbg !49
  %150 = fcmp uno float %145, 0.000000e+00, !dbg !51
  %151 = or i1 %150, %149, !dbg !52
  %152 = select i1 %151, float %145, float %148, !dbg !53
  %153 = fcmp oeq float %152, 0xFFF0000000000000, !dbg !55
  %154 = fsub float %130, %152, !dbg !56
  %155 = fsub float %131, %152, !dbg !56
  %156 = fsub float %136, %152, !dbg !56
  %157 = fsub float %141, %152, !dbg !56
  %158 = fmul float %154, 0x3FF7154760000000, !dbg !57
  %159 = select i1 %153, float 0.000000e+00, float %158, !dbg !58
  %160 = tail call float @llvm.nvvm.ex2.approx.f(float %159), !dbg !57
  %161 = fmul float %155, 0x3FF7154760000000, !dbg !57
  %162 = select i1 %153, float 0.000000e+00, float %161, !dbg !58
  %163 = tail call float @llvm.nvvm.ex2.approx.f(float %162), !dbg !57
  %164 = fmul float %156, 0x3FF7154760000000, !dbg !57
  %165 = select i1 %153, float 0.000000e+00, float %164, !dbg !58
  %166 = tail call float @llvm.nvvm.ex2.approx.f(float %165), !dbg !57
  %167 = fmul float %157, 0x3FF7154760000000, !dbg !57
  %168 = select i1 %153, float 0.000000e+00, float %167, !dbg !58
  %169 = tail call float @llvm.nvvm.ex2.approx.f(float %168), !dbg !57
  %170 = extractelement <8 x float> %120, i64 0, !dbg !59
  %171 = fmul float %170, %160, !dbg !59
  %172 = extractelement <8 x float> %120, i64 1, !dbg !59
  %173 = fmul float %172, %163, !dbg !59
  %174 = extractelement <8 x float> %120, i64 2, !dbg !59
  %175 = fmul float %174, %166, !dbg !59
  %176 = extractelement <8 x float> %120, i64 3, !dbg !59
  %177 = fmul float %176, %169, !dbg !59
  %178 = fadd float %171, %173, !dbg !60
  %179 = fadd float %178, %175, !dbg !60
  %180 = fadd float %179, %177, !dbg !60
  %181 = bitcast float %180 to i32, !dbg !63
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 1, i32 31), !dbg !63
  %183 = bitcast i32 %182 to float, !dbg !63
  %184 = fadd float %180, %183, !dbg !60
  br label %185, !dbg !64

185:                                              ; preds = %122, %185
  %indvars.iv15 = phi i64 [ 0, %122 ], [ %indvars.iv.next16, %185 ]
  %186 = or disjoint i64 %indvars.iv15, %20, !dbg !65
  %187 = icmp samesign ult i64 %186, 324, !dbg !66
  %188 = trunc nuw nsw i64 %186 to i32, !dbg !67
  %189 = add i32 %16, %188, !dbg !67
  %190 = sext i32 %189 to i64, !dbg !68
  %191 = getelementptr float, ptr addrspace(1) %1, i64 %190, !dbg !68
  %192 = and i1 %12, %187, !dbg !69
  %193 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #4, !dbg !70
  %194 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %191, i64 %193, i1 %192) #4, !dbg !70
  %195 = extractvalue { i32, i32, i32, i32 } %194, 0, !dbg !70
  %196 = extractvalue { i32, i32, i32, i32 } %194, 1, !dbg !70
  %197 = extractvalue { i32, i32, i32, i32 } %194, 2, !dbg !70
  %198 = extractvalue { i32, i32, i32, i32 } %194, 3, !dbg !70
  %199 = bitcast i32 %195 to float, !dbg !70
  %200 = bitcast i32 %196 to float, !dbg !70
  %201 = bitcast i32 %197 to float, !dbg !70
  %202 = bitcast i32 %198 to float, !dbg !70
  %203 = add i32 %19, %188, !dbg !71
  %204 = sext i32 %203 to i64, !dbg !72
  %205 = getelementptr float, ptr addrspace(1) %0, i64 %204, !dbg !72
  %206 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #4, !dbg !73
  %207 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %205, i64 %206, i1 %192) #4, !dbg !73
  %208 = extractvalue { i32, i32, i32, i32 } %207, 0, !dbg !73
  %209 = extractvalue { i32, i32, i32, i32 } %207, 1, !dbg !73
  %210 = extractvalue { i32, i32, i32, i32 } %207, 2, !dbg !73
  %211 = extractvalue { i32, i32, i32, i32 } %207, 3, !dbg !73
  %212 = bitcast i32 %208 to float, !dbg !73
  %213 = bitcast i32 %209 to float, !dbg !73
  %214 = bitcast i32 %210 to float, !dbg !73
  %215 = bitcast i32 %211 to float, !dbg !73
  %216 = fadd float %199, %212, !dbg !74
  %217 = fadd float %200, %213, !dbg !74
  %218 = fadd float %201, %214, !dbg !74
  %219 = fadd float %202, %215, !dbg !74
  %220 = fsub float %216, %152, !dbg !75
  %221 = fsub float %217, %152, !dbg !75
  %222 = fsub float %218, %152, !dbg !75
  %223 = fsub float %219, %152, !dbg !75
  %224 = fmul float %220, 0x3FF7154760000000, !dbg !76
  %225 = tail call float @llvm.nvvm.ex2.approx.f(float %224), !dbg !76
  %226 = fmul float %221, 0x3FF7154760000000, !dbg !76
  %227 = tail call float @llvm.nvvm.ex2.approx.f(float %226), !dbg !76
  %228 = fmul float %222, 0x3FF7154760000000, !dbg !76
  %229 = tail call float @llvm.nvvm.ex2.approx.f(float %228), !dbg !76
  %230 = fmul float %223, 0x3FF7154760000000, !dbg !76
  %231 = tail call float @llvm.nvvm.ex2.approx.f(float %230), !dbg !76
  %232 = tail call float @llvm.nvvm.div.full(float %225, float %184), !dbg !77
  %233 = tail call float @llvm.nvvm.div.full(float %227, float %184), !dbg !77
  %234 = tail call float @llvm.nvvm.div.full(float %229, float %184), !dbg !77
  %235 = tail call float @llvm.nvvm.div.full(float %231, float %184), !dbg !77
  %236 = bitcast float %232 to i32, !dbg !78
  %237 = select i1 %.not, i32 0, i32 %236, !dbg !79
  %238 = bitcast float %233 to i32, !dbg !78
  %239 = select i1 %.not, i32 0, i32 %238, !dbg !79
  %240 = bitcast float %234 to i32, !dbg !78
  %241 = select i1 %.not, i32 0, i32 %240, !dbg !79
  %242 = bitcast float %235 to i32, !dbg !78
  %243 = select i1 %.not, i32 0, i32 %242, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %237, i32 %239, i32 %241, i32 %243, ptr addrspace(1) %205, i1 %192) #4, !dbg !78
  %indvars.iv.next16 = add nuw nsw i64 %indvars.iv15, 8, !dbg !64
  %244 = icmp samesign ult i64 %indvars.iv15, 316, !dbg !64
  br i1 %244, label %185, label %245, !dbg !64

245:                                              ; preds = %185
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "c3s5rpotgkrxj53byxl6iiai4e64ppfdhf7r5r7xy2iceaf5vzca.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/3s")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "triton_red_fused_15", linkageName: "triton_red_fused_15", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 23, column: 28, scope: !5)
!9 = !DILocation(line: 23, column: 33, scope: !5)
!10 = !DILocation(line: 24, column: 44, scope: !5)
!11 = !DILocation(line: 24, column: 23, scope: !5)
!12 = !DILocation(line: 25, column: 21, scope: !5)
!13 = !DILocation(line: 26, column: 37, scope: !5)
!14 = !DILocation(line: 30, column: 19, scope: !5)
!15 = !DILocation(line: 42, column: 45, scope: !5)
!16 = !DILocation(line: 36, column: 40, scope: !5)
!17 = !DILocation(line: 37, column: 31, scope: !5)
!18 = !DILocation(line: 38, column: 29, scope: !5)
!19 = !DILocation(line: 42, column: 41, scope: !5)
!20 = !DILocation(line: 42, column: 34, scope: !5)
!21 = !DILocation(line: 42, column: 60, scope: !5)
!22 = !DILocation(line: 42, column: 50, scope: !5)
!23 = !DILocation(line: 43, column: 54, scope: !5)
!24 = !DILocation(line: 43, column: 38, scope: !5)
!25 = !DILocation(line: 43, column: 66, scope: !5)
!26 = !DILocation(line: 44, column: 22, scope: !5)
!27 = !DILocation(line: 46, column: 23, scope: !5)
!28 = !DILocation(line: 52, column: 49, scope: !5)
!29 = !DILocation(line: 113, column: 21, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !5, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 56, column: 43, scope: !5)
!33 = !DILocation(line: 111, column: 15, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 113, column: 16, scope: !30, inlinedAt: !32)
!35 = !DILocation(line: 114, column: 29, scope: !30, inlinedAt: !32)
!36 = !DILocation(line: 197, column: 19, scope: !30, inlinedAt: !32)
!37 = !DILocation(line: 197, column: 53, scope: !30, inlinedAt: !32)
!38 = !DILocation(line: 200, column: 53, scope: !30, inlinedAt: !32)
!39 = !DILocation(line: 174, column: 24, scope: !30, inlinedAt: !32)
!40 = !DILocation(line: 197, column: 39, scope: !30, inlinedAt: !32)
!41 = !DILocation(line: 200, column: 39, scope: !30, inlinedAt: !32)
!42 = !DILocation(line: 206, column: 24, scope: !30, inlinedAt: !32)
!43 = !DILocation(line: 206, column: 36, scope: !30, inlinedAt: !32)
!44 = !DILocation(line: 60, column: 64, scope: !5)
!45 = !DILocation(line: 261, column: 15, scope: !30, inlinedAt: !46)
!46 = !DILocation(line: 61, column: 49, scope: !5)
!47 = !DILocation(line: 266, column: 29, scope: !30, inlinedAt: !46)
!48 = !DILocation(line: 61, column: 64, scope: !5)
!49 = !DILocation(line: 111, column: 15, scope: !30, inlinedAt: !50)
!50 = !DILocation(line: 64, column: 35, scope: !5)
!51 = !DILocation(line: 113, column: 21, scope: !30, inlinedAt: !50)
!52 = !DILocation(line: 113, column: 16, scope: !30, inlinedAt: !50)
!53 = !DILocation(line: 114, column: 29, scope: !30, inlinedAt: !50)
!54 = !DILocation(line: 124, column: 29, scope: !30, inlinedAt: !50)
!55 = !DILocation(line: 181, column: 40, scope: !30, inlinedAt: !50)
!56 = !DILocation(line: 181, column: 68, scope: !30, inlinedAt: !50)
!57 = !DILocation(line: 174, column: 24, scope: !30, inlinedAt: !50)
!58 = !DILocation(line: 181, column: 58, scope: !30, inlinedAt: !50)
!59 = !DILocation(line: 182, column: 31, scope: !30, inlinedAt: !50)
!60 = !DILocation(line: 260, column: 15, scope: !61, inlinedAt: !50)
!61 = distinct !DILexicalBlockFile(scope: !5, file: !62, discriminator: 0)
!62 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!63 = !DILocation(line: 290, column: 36, scope: !61, inlinedAt: !50)
!64 = !DILocation(line: 69, column: 40, scope: !5)
!65 = !DILocation(line: 70, column: 31, scope: !5)
!66 = !DILocation(line: 71, column: 29, scope: !5)
!67 = !DILocation(line: 75, column: 42, scope: !5)
!68 = !DILocation(line: 75, column: 35, scope: !5)
!69 = !DILocation(line: 75, column: 61, scope: !5)
!70 = !DILocation(line: 75, column: 51, scope: !5)
!71 = !DILocation(line: 76, column: 55, scope: !5)
!72 = !DILocation(line: 76, column: 39, scope: !5)
!73 = !DILocation(line: 76, column: 67, scope: !5)
!74 = !DILocation(line: 78, column: 24, scope: !5)
!75 = !DILocation(line: 79, column: 24, scope: !5)
!76 = !DILocation(line: 80, column: 28, scope: !5)
!77 = !DILocation(line: 81, column: 25, scope: !5)
!78 = !DILocation(line: 84, column: 67, scope: !5)
!79 = !DILocation(line: 83, column: 39, scope: !5)
!80 = !DILocation(line: 69, column: 4, scope: !5)
