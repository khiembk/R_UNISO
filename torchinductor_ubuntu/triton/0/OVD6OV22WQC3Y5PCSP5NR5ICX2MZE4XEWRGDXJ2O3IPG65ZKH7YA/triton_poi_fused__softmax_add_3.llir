; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_poi_fused__softmax_add_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr #0 !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.z(), !dbg !8
  %10 = icmp samesign ult i32 %9, 8, !dbg !9
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !10
  %12 = shl nuw nsw i32 %11, 6, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 1, !dbg !12
  %15 = and i32 %14, 63, !dbg !12
  %16 = and i32 %13, 63, !dbg !12
  %17 = or disjoint i32 %15, %12, !dbg !13
  %18 = or disjoint i32 %12, %16, !dbg !13
  %19 = icmp eq i32 %11, 0, !dbg !14
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !15
  %21 = shl i32 %20, 2, !dbg !16
  %22 = shl nuw nsw i32 %13, 1, !dbg !17
  %23 = and i32 %22, 2, !dbg !17
  %24 = lshr i32 %13, 6, !dbg !17
  %.lobit = and i32 %24, 1, !dbg !17
  %25 = or disjoint i32 %23, %21, !dbg !18
  %26 = or disjoint i32 %.lobit, %21, !dbg !18
  %27 = or disjoint i32 %26, 2, !dbg !18
  %28 = icmp slt i32 %25, 64, !dbg !19
  %29 = icmp slt i32 %26, 64, !dbg !19
  %30 = icmp slt i32 %27, 64, !dbg !19
  %31 = shl nuw nsw i32 %17, 6, !dbg !20
  %32 = shl nuw nsw i32 %9, 12, !dbg !21
  %33 = add i32 %25, %32, !dbg !22
  %34 = add i32 %33, %31, !dbg !23
  %35 = sext i32 %34 to i64, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !24
  %37 = and i1 %19, %28, !dbg !25
  %38 = and i1 %19, %29, !dbg !25
  %39 = and i1 %19, %30, !dbg !25
  %40 = and i1 %10, %37, !dbg !26
  %41 = and i1 %10, %38, !dbg !26
  %42 = and i1 %10, %39, !dbg !26
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !27
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$4 ld.global.L1::evict_last.L2::cache_hint.v2.b32 { $0, $1 }, [ $2 + 0 ], $3;", "=r,=r,l,l,b"(ptr addrspace(1) %36, i64 %43, i1 %40) #4, !dbg !27
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !27
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !27
  %47 = and i32 %22, 254, !dbg !27
  %48 = shl nuw nsw i32 %13, 2, !dbg !27
  %49 = and i32 %48, 252, !dbg !27
  %50 = and i32 %13, 126, !dbg !27
  %51 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %50, !dbg !27
  %52 = getelementptr inbounds nuw float, ptr addrspace(3) %51, i32 %47, !dbg !27
  %53 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !27
  %54 = insertelement <2 x i32> %53, i32 %46, i64 1, !dbg !27
  store <2 x i32> %54, ptr addrspace(3) %52, align 8, !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !27
  %55 = lshr exact i32 %49, 1, !dbg !27
  %56 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %55, !dbg !27
  %57 = getelementptr inbounds nuw float, ptr addrspace(3) %56, i32 %49, !dbg !27
  %58 = getelementptr inbounds nuw float, ptr addrspace(3) %57, i32 %.lobit, !dbg !27
  %59 = load float, ptr addrspace(3) %58, align 4, !dbg !27
  %60 = getelementptr inbounds nuw i8, ptr addrspace(3) %58, i32 8, !dbg !27
  %61 = load float, ptr addrspace(3) %60, align 4, !dbg !27
  %62 = shl i32 %26, 3, !dbg !28
  %63 = shl i32 %27, 3, !dbg !28
  %64 = shl nuw nsw i32 %18, 9, !dbg !29
  %65 = add nuw i32 %64, %9, !dbg !30
  %66 = add i32 %65, %62, !dbg !31
  %67 = add i32 %65, %63, !dbg !31
  %68 = sext i32 %66 to i64, !dbg !32
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !32
  %70 = sext i32 %67 to i64, !dbg !32
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !32
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !33
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %69, i64 %72, i1 %41) #4, !dbg !33
  %74 = bitcast i32 %73 to float, !dbg !33
  %75 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !33
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %71, i64 %75, i1 %42) #4, !dbg !33
  %77 = bitcast i32 %76 to float, !dbg !33
  %78 = shl nuw nsw i32 %9, 6, !dbg !34
  %79 = add nuw nsw i32 %18, %78, !dbg !35
  %80 = zext nneg i32 %79 to i64, !dbg !36
  %81 = getelementptr float, ptr addrspace(1) %2, i64 %80, !dbg !36
  %82 = and i1 %19, %10, !dbg !37
  %83 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !38
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %81, i64 %83, i1 %82) #4, !dbg !38
  %85 = bitcast i32 %84 to float, !dbg !38
  %86 = getelementptr float, ptr addrspace(1) %3, i64 %80, !dbg !39
  %87 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !40
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %86, i64 %87, i1 %82) #4, !dbg !40
  %89 = bitcast i32 %88 to float, !dbg !40
  %90 = fadd float %59, %74, !dbg !41
  %91 = fadd float %61, %77, !dbg !41
  %92 = fsub float %90, %85, !dbg !42
  %93 = fsub float %91, %85, !dbg !42
  %94 = fmul float %92, 0x3FF7154760000000, !dbg !43
  %95 = tail call float @llvm.nvvm.ex2.approx.f(float %94), !dbg !43
  %96 = fmul float %93, 0x3FF7154760000000, !dbg !43
  %97 = tail call float @llvm.nvvm.ex2.approx.f(float %96), !dbg !43
  %98 = tail call float @llvm.nvvm.div.full(float %95, float %89), !dbg !44
  %99 = tail call float @llvm.nvvm.div.full(float %97, float %89), !dbg !44
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !45
  store float %98, ptr addrspace(3) %58, align 4, !dbg !46
  store float %99, ptr addrspace(3) %60, align 4, !dbg !46
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !46
  %.extract = load i32, ptr addrspace(3) %52, align 8, !dbg !46
  %100 = getelementptr inbounds nuw i8, ptr addrspace(3) %52, i32 4, !dbg !46
  %.extract5 = load i32, ptr addrspace(3) %100, align 4, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract5, ptr addrspace(1) %36, i1 %40) #4, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.z() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "cbnwmtvai6eyv2vnbx5a5dqsz4avapf4xfblx6js3upepstdpxwj.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/bn")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "triton_poi_fused__softmax_add_3", linkageName: "triton_poi_fused__softmax_add_3", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 22, column: 28, scope: !5)
!9 = !DILocation(line: 24, column: 21, scope: !5)
!10 = !DILocation(line: 25, column: 28, scope: !5)
!11 = !DILocation(line: 25, column: 33, scope: !5)
!12 = !DILocation(line: 26, column: 44, scope: !5)
!13 = !DILocation(line: 26, column: 23, scope: !5)
!14 = !DILocation(line: 27, column: 21, scope: !5)
!15 = !DILocation(line: 28, column: 28, scope: !5)
!16 = !DILocation(line: 28, column: 33, scope: !5)
!17 = !DILocation(line: 29, column: 44, scope: !5)
!18 = !DILocation(line: 29, column: 23, scope: !5)
!19 = !DILocation(line: 30, column: 21, scope: !5)
!20 = !DILocation(line: 34, column: 42, scope: !5)
!21 = !DILocation(line: 34, column: 52, scope: !5)
!22 = !DILocation(line: 34, column: 39, scope: !5)
!23 = !DILocation(line: 34, column: 47, scope: !5)
!24 = !DILocation(line: 34, column: 34, scope: !5)
!25 = !DILocation(line: 34, column: 65, scope: !5)
!26 = !DILocation(line: 34, column: 73, scope: !5)
!27 = !DILocation(line: 34, column: 57, scope: !5)
!28 = !DILocation(line: 35, column: 37, scope: !5)
!29 = !DILocation(line: 35, column: 46, scope: !5)
!30 = !DILocation(line: 35, column: 35, scope: !5)
!31 = !DILocation(line: 35, column: 42, scope: !5)
!32 = !DILocation(line: 35, column: 30, scope: !5)
!33 = !DILocation(line: 35, column: 51, scope: !5)
!34 = !DILocation(line: 36, column: 38, scope: !5)
!35 = !DILocation(line: 36, column: 35, scope: !5)
!36 = !DILocation(line: 36, column: 30, scope: !5)
!37 = !DILocation(line: 36, column: 51, scope: !5)
!38 = !DILocation(line: 36, column: 43, scope: !5)
!39 = !DILocation(line: 37, column: 30, scope: !5)
!40 = !DILocation(line: 37, column: 43, scope: !5)
!41 = !DILocation(line: 38, column: 18, scope: !5)
!42 = !DILocation(line: 39, column: 18, scope: !5)
!43 = !DILocation(line: 40, column: 23, scope: !5)
!44 = !DILocation(line: 41, column: 19, scope: !5)
!45 = !DILocation(line: 42, column: 4, scope: !5)
!46 = !DILocation(line: 43, column: 57, scope: !5)
!47 = !DILocation(line: 43, column: 4, scope: !5)
