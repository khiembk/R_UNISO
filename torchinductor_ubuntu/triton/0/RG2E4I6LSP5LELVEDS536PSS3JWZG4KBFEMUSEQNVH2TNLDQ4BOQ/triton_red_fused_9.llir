; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr #0 !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %8 = shl i32 %7, 3, !dbg !9
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %10 = lshr i32 %9, 5, !dbg !10
  %11 = lshr i32 %9, 7, !dbg !10
  %12 = and i32 %11, 3, !dbg !10
  %13 = or i32 %11, 4, !dbg !10
  %14 = or disjoint i32 %12, %8, !dbg !11
  %15 = or disjoint i32 %13, %8, !dbg !11
  %16 = icmp slt i32 %14, 10368, !dbg !12
  %17 = icmp slt i32 %15, 10368, !dbg !12
  %18 = and i32 %9, 31, !dbg !13
  %19 = shl nuw nsw i32 %9, 2, !dbg !13
  %20 = and i32 %19, 508, !dbg !13
  %21 = sdiv i32 %14, 324, !dbg !14
  %22 = mul i32 %21, 324, !dbg !15
  %.decomposed = sub i32 %14, %22, !dbg !15
  %23 = sdiv i32 %15, 324, !dbg !14
  %24 = mul i32 %23, 324, !dbg !15
  %.decomposed2 = sub i32 %15, %24, !dbg !15
  %25 = icmp samesign ult i32 %20, 324, !dbg !16
  %26 = mul i32 %14, 324, !dbg !17
  %27 = mul i32 %15, 324, !dbg !17
  %28 = add i32 %26, %20, !dbg !18
  %29 = add i32 %27, %20, !dbg !18
  %30 = sext i32 %28 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !19
  %32 = sext i32 %29 to i64, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !19
  %34 = and i1 %25, %16, !dbg !20
  %35 = and i1 %25, %17, !dbg !20
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !21
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %31, i64 %36, i1 %34) #5, !dbg !21
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !21
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !21
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !21
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !21
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !21
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %33, i64 %42, i1 %35) #5, !dbg !21
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !21
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !21
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !21
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !21
  %48 = mul nsw i32 %.decomposed, 324, !dbg !22
  %49 = mul nsw i32 %.decomposed2, 324, !dbg !22
  %50 = add nsw i32 %48, %20, !dbg !23
  %51 = add nsw i32 %49, %20, !dbg !23
  %52 = mul i32 %21, 104992, !dbg !24
  %53 = mul i32 %23, 104992, !dbg !24
  %54 = add i32 %50, %52, !dbg !25
  %55 = add i32 %51, %53, !dbg !25
  %56 = sext i32 %54 to i64, !dbg !26
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !26
  %58 = sext i32 %55 to i64, !dbg !26
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !26
  %60 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !27
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %57, i64 %60, i1 %34) #5, !dbg !27
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !27
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !27
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !27
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !27
  %66 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !27
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %59, i64 %66, i1 %35) #5, !dbg !27
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !27
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !27
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !27
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !27
  %72 = insertelement <4 x i32> poison, i32 %38, i64 0, !dbg !21
  %73 = insertelement <4 x i32> %72, i32 %39, i64 1, !dbg !21
  %74 = insertelement <4 x i32> %73, i32 %40, i64 2, !dbg !21
  %75 = insertelement <4 x i32> %74, i32 %41, i64 3, !dbg !21
  %76 = bitcast <4 x i32> %75 to <4 x float>, !dbg !21
  %77 = insertelement <4 x i32> poison, i32 %62, i64 0, !dbg !27
  %78 = insertelement <4 x i32> %77, i32 %63, i64 1, !dbg !27
  %79 = insertelement <4 x i32> %78, i32 %64, i64 2, !dbg !27
  %80 = insertelement <4 x i32> %79, i32 %65, i64 3, !dbg !27
  %81 = bitcast <4 x i32> %80 to <4 x float>, !dbg !27
  %82 = fadd <4 x float> %76, %81, !dbg !28
  %83 = fcmp une <4 x float> %82, splat (float 0xFFF0000000000000), !dbg !29
  %84 = insertelement <4 x i32> poison, i32 %44, i64 0, !dbg !21
  %85 = insertelement <4 x i32> %84, i32 %45, i64 1, !dbg !21
  %86 = insertelement <4 x i32> %85, i32 %46, i64 2, !dbg !21
  %87 = insertelement <4 x i32> %86, i32 %47, i64 3, !dbg !21
  %88 = bitcast <4 x i32> %87 to <4 x float>, !dbg !21
  %89 = insertelement <4 x i32> poison, i32 %68, i64 0, !dbg !27
  %90 = insertelement <4 x i32> %89, i32 %69, i64 1, !dbg !27
  %91 = insertelement <4 x i32> %90, i32 %70, i64 2, !dbg !27
  %92 = insertelement <4 x i32> %91, i32 %71, i64 3, !dbg !27
  %93 = bitcast <4 x i32> %92 to <4 x float>, !dbg !27
  %94 = fadd <4 x float> %88, %93, !dbg !28
  %95 = fcmp une <4 x float> %94, splat (float 0xFFF0000000000000), !dbg !29
  %96 = extractelement <4 x float> %82, i64 0, !dbg !30
  %97 = fsub float 0xFFF0000000000000, %96, !dbg !30
  %98 = extractelement <4 x float> %82, i64 1, !dbg !30
  %99 = fsub float 0xFFF0000000000000, %98, !dbg !30
  %100 = extractelement <4 x float> %82, i64 2, !dbg !30
  %101 = fsub float 0xFFF0000000000000, %100, !dbg !30
  %102 = extractelement <4 x float> %82, i64 3, !dbg !30
  %103 = fsub float 0xFFF0000000000000, %102, !dbg !30
  %104 = extractelement <4 x float> %94, i64 0, !dbg !30
  %105 = fsub float 0xFFF0000000000000, %104, !dbg !30
  %106 = extractelement <4 x float> %94, i64 1, !dbg !30
  %107 = fsub float 0xFFF0000000000000, %106, !dbg !30
  %108 = extractelement <4 x float> %94, i64 2, !dbg !30
  %109 = fsub float 0xFFF0000000000000, %108, !dbg !30
  %110 = extractelement <4 x float> %94, i64 3, !dbg !30
  %111 = fsub float 0xFFF0000000000000, %110, !dbg !30
  %112 = fmul float %97, 0x3FF7154760000000, !dbg !34
  %113 = tail call float @llvm.nvvm.ex2.approx.f(float %112), !dbg !34
  %114 = fmul float %99, 0x3FF7154760000000, !dbg !34
  %115 = tail call float @llvm.nvvm.ex2.approx.f(float %114), !dbg !34
  %116 = fmul float %101, 0x3FF7154760000000, !dbg !34
  %117 = tail call float @llvm.nvvm.ex2.approx.f(float %116), !dbg !34
  %118 = fmul float %103, 0x3FF7154760000000, !dbg !34
  %119 = tail call float @llvm.nvvm.ex2.approx.f(float %118), !dbg !34
  %120 = fmul float %105, 0x3FF7154760000000, !dbg !34
  %121 = tail call float @llvm.nvvm.ex2.approx.f(float %120), !dbg !34
  %122 = fmul float %107, 0x3FF7154760000000, !dbg !34
  %123 = tail call float @llvm.nvvm.ex2.approx.f(float %122), !dbg !34
  %124 = fmul float %109, 0x3FF7154760000000, !dbg !34
  %125 = tail call float @llvm.nvvm.ex2.approx.f(float %124), !dbg !34
  %126 = fmul float %111, 0x3FF7154760000000, !dbg !34
  %127 = tail call float @llvm.nvvm.ex2.approx.f(float %126), !dbg !34
  %128 = fsub float %96, %96, !dbg !35
  %129 = fsub float %98, %98, !dbg !35
  %130 = fsub float %100, %100, !dbg !35
  %131 = fsub float %102, %102, !dbg !35
  %132 = fsub float %104, %104, !dbg !35
  %133 = fsub float %106, %106, !dbg !35
  %134 = fsub float %108, %108, !dbg !35
  %135 = fsub float %110, %110, !dbg !35
  %136 = fmul float %128, 0x3FF7154760000000, !dbg !34
  %137 = tail call float @llvm.nvvm.ex2.approx.f(float %136), !dbg !34
  %138 = fmul float %129, 0x3FF7154760000000, !dbg !34
  %139 = tail call float @llvm.nvvm.ex2.approx.f(float %138), !dbg !34
  %140 = fmul float %130, 0x3FF7154760000000, !dbg !34
  %141 = tail call float @llvm.nvvm.ex2.approx.f(float %140), !dbg !34
  %142 = fmul float %131, 0x3FF7154760000000, !dbg !34
  %143 = tail call float @llvm.nvvm.ex2.approx.f(float %142), !dbg !34
  %144 = fmul float %132, 0x3FF7154760000000, !dbg !34
  %145 = tail call float @llvm.nvvm.ex2.approx.f(float %144), !dbg !34
  %146 = fmul float %133, 0x3FF7154760000000, !dbg !34
  %147 = tail call float @llvm.nvvm.ex2.approx.f(float %146), !dbg !34
  %148 = fmul float %134, 0x3FF7154760000000, !dbg !34
  %149 = tail call float @llvm.nvvm.ex2.approx.f(float %148), !dbg !34
  %150 = fmul float %135, 0x3FF7154760000000, !dbg !34
  %151 = tail call float @llvm.nvvm.ex2.approx.f(float %150), !dbg !34
  %152 = fmul float %113, 0.000000e+00, !dbg !36
  %153 = fmul float %115, 0.000000e+00, !dbg !36
  %154 = fmul float %117, 0.000000e+00, !dbg !36
  %155 = fmul float %119, 0.000000e+00, !dbg !36
  %156 = fmul float %121, 0.000000e+00, !dbg !36
  %157 = fmul float %123, 0.000000e+00, !dbg !36
  %158 = fmul float %125, 0.000000e+00, !dbg !36
  %159 = fmul float %127, 0.000000e+00, !dbg !36
  %160 = fadd float %152, %137, !dbg !37
  %161 = extractelement <4 x i1> %83, i64 0, !dbg !37
  %162 = select i1 %161, float %160, float 1.000000e+00, !dbg !37
  %163 = fadd float %153, %139, !dbg !37
  %164 = extractelement <4 x i1> %83, i64 1, !dbg !37
  %165 = select i1 %164, float %163, float 1.000000e+00, !dbg !37
  %166 = fadd float %154, %141, !dbg !37
  %167 = extractelement <4 x i1> %83, i64 2, !dbg !37
  %168 = select i1 %167, float %166, float 1.000000e+00, !dbg !37
  %169 = fadd float %155, %143, !dbg !37
  %170 = extractelement <4 x i1> %83, i64 3, !dbg !37
  %171 = select i1 %170, float %169, float 1.000000e+00, !dbg !37
  %172 = fadd float %156, %145, !dbg !37
  %173 = extractelement <4 x i1> %95, i64 0, !dbg !37
  %174 = select i1 %173, float %172, float 1.000000e+00, !dbg !37
  %175 = fadd float %157, %147, !dbg !37
  %176 = extractelement <4 x i1> %95, i64 1, !dbg !37
  %177 = select i1 %176, float %175, float 1.000000e+00, !dbg !37
  %178 = fadd float %158, %149, !dbg !37
  %179 = extractelement <4 x i1> %95, i64 2, !dbg !37
  %180 = select i1 %179, float %178, float 1.000000e+00, !dbg !37
  %181 = fadd float %159, %151, !dbg !37
  %182 = extractelement <4 x i1> %95, i64 3, !dbg !37
  %183 = select i1 %182, float %181, float 1.000000e+00, !dbg !37
  %184 = select i1 %34, float %96, float 0xFFF0000000000000, !dbg !38
  %185 = select i1 %34, float %98, float 0xFFF0000000000000, !dbg !38
  %186 = select i1 %34, float %100, float 0xFFF0000000000000, !dbg !38
  %187 = select i1 %34, float %102, float 0xFFF0000000000000, !dbg !38
  %188 = select i1 %35, float %104, float 0xFFF0000000000000, !dbg !38
  %189 = select i1 %35, float %106, float 0xFFF0000000000000, !dbg !38
  %190 = select i1 %35, float %108, float 0xFFF0000000000000, !dbg !38
  %191 = select i1 %35, float %110, float 0xFFF0000000000000, !dbg !38
  %192 = select i1 %34, float %162, float 0.000000e+00, !dbg !39
  %193 = select i1 %34, float %165, float 0.000000e+00, !dbg !39
  %194 = select i1 %34, float %168, float 0.000000e+00, !dbg !39
  %195 = select i1 %34, float %171, float 0.000000e+00, !dbg !39
  %196 = select i1 %35, float %174, float 0.000000e+00, !dbg !39
  %197 = select i1 %35, float %177, float 0.000000e+00, !dbg !39
  %198 = select i1 %35, float %180, float 0.000000e+00, !dbg !39
  %199 = select i1 %35, float %183, float 0.000000e+00, !dbg !39
  %200 = bitcast <4 x i1> %83 to i4, !dbg !40
  %201 = icmp ne i4 %200, 0, !dbg !40
  %202 = select i1 %34, i1 %201, i1 false, !dbg !40
  %203 = bitcast <4 x i1> %95 to i4, !dbg !40
  %204 = icmp ne i4 %203, 0, !dbg !40
  %205 = select i1 %35, i1 %204, i1 false, !dbg !40
  %206 = zext i1 %202 to i32, !dbg !42
  %207 = tail call i32 @llvm.nvvm.redux.sync.or(i32 %206, i32 -1), !dbg !42
  %208 = trunc i32 %207 to i8, !dbg !42
  %209 = zext i1 %205 to i32, !dbg !42
  %210 = tail call i32 @llvm.nvvm.redux.sync.or(i32 %209, i32 -1), !dbg !42
  %211 = trunc i32 %210 to i8, !dbg !42
  %212 = and i32 %10, 3, !dbg !42
  %213 = icmp eq i32 %18, 0, !dbg !42
  %214 = shl nuw nsw i32 %12, 2, !dbg !42
  %215 = or disjoint i32 %214, %212, !dbg !42
  %216 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %215, !dbg !42
  %217 = insertelement <1 x i8> poison, i8 %208, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %216, <1 x i8> %217, i1 %213) #5, !dbg !42
  %218 = shl nuw nsw i32 %13, 2, !dbg !42
  %219 = or disjoint i32 %218, %212, !dbg !42
  %220 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %219, !dbg !42
  %221 = insertelement <1 x i8> poison, i8 %211, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %220, <1 x i8> %221, i1 %213) #5, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %222 = icmp samesign ult i32 %9, 32, !dbg !42
  %223 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %9, !dbg !42
  %224 = tail call i8 asm sideeffect "@$2 ld.shared.b8 $0, [ $1 + 0 ];", "=h,r,b"(ptr addrspace(3) %223, i1 %222) #5, !dbg !42
  %225 = zext i8 %224 to i32, !dbg !42
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 2, i32 31), !dbg !42
  %227 = trunc i32 %226 to i8, !dbg !42
  %228 = or i8 %224, %227, !dbg !40
  %229 = zext i8 %228 to i32, !dbg !42
  %230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %229, i32 1, i32 31), !dbg !42
  %231 = trunc i32 %230 to i8, !dbg !42
  %232 = or i8 %228, %231, !dbg !40
  %233 = and i32 %9, 995, !dbg !42
  %234 = icmp eq i32 %233, 0, !dbg !42
  %235 = insertelement <1 x i8> poison, i8 %232, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %223, <1 x i8> %235, i1 %234) #5, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %236 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %214, !dbg !42
  %237 = load i8, ptr addrspace(3) %236, align 4, !dbg !42
  %238 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %218, !dbg !42
  %239 = load i8, ptr addrspace(3) %238, align 4, !dbg !42
  %.not = icmp eq i8 %237, 0, !dbg !43
  %.not1 = icmp eq i8 %239, 0, !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !44
  %240 = fcmp ogt float %184, %185, !dbg !46
  %241 = fcmp uno float %184, 0.000000e+00, !dbg !47
  %242 = or i1 %240, %241, !dbg !48
  %243 = select i1 %242, float %184, float %185, !dbg !49
  %244 = fcmp ogt float %243, %186, !dbg !46
  %245 = fcmp uno float %243, 0.000000e+00, !dbg !47
  %246 = or i1 %244, %245, !dbg !48
  %247 = select i1 %246, float %243, float %186, !dbg !49
  %248 = fcmp ogt float %247, %187, !dbg !46
  %249 = fcmp uno float %247, 0.000000e+00, !dbg !47
  %250 = or i1 %248, %249, !dbg !48
  %251 = select i1 %250, float %247, float %187, !dbg !49
  %252 = fcmp ogt float %188, %189, !dbg !46
  %253 = fcmp uno float %188, 0.000000e+00, !dbg !47
  %254 = or i1 %252, %253, !dbg !48
  %255 = select i1 %254, float %188, float %189, !dbg !49
  %256 = fcmp ogt float %255, %190, !dbg !46
  %257 = fcmp uno float %255, 0.000000e+00, !dbg !47
  %258 = or i1 %256, %257, !dbg !48
  %259 = select i1 %258, float %255, float %190, !dbg !49
  %260 = fcmp ogt float %259, %191, !dbg !46
  %261 = fcmp uno float %259, 0.000000e+00, !dbg !47
  %262 = or i1 %260, %261, !dbg !48
  %263 = select i1 %262, float %259, float %191, !dbg !49
  %264 = bitcast float %251 to i32, !dbg !44
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 16, i32 31), !dbg !44
  %266 = bitcast i32 %265 to float, !dbg !44
  %267 = fcmp ogt float %251, %266, !dbg !46
  %268 = fcmp uno float %251, 0.000000e+00, !dbg !47
  %269 = or i1 %268, %267, !dbg !48
  %270 = select i1 %269, float %251, float %266, !dbg !49
  %271 = bitcast float %270 to i32, !dbg !44
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 8, i32 31), !dbg !44
  %273 = bitcast i32 %272 to float, !dbg !44
  %274 = fcmp ogt float %270, %273, !dbg !46
  %275 = fcmp uno float %270, 0.000000e+00, !dbg !47
  %276 = or i1 %274, %275, !dbg !48
  %277 = select i1 %276, float %270, float %273, !dbg !49
  %278 = bitcast float %277 to i32, !dbg !44
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 4, i32 31), !dbg !44
  %280 = bitcast i32 %279 to float, !dbg !44
  %281 = fcmp ogt float %277, %280, !dbg !46
  %282 = fcmp uno float %277, 0.000000e+00, !dbg !47
  %283 = or i1 %281, %282, !dbg !48
  %284 = select i1 %283, float %277, float %280, !dbg !49
  %285 = bitcast float %284 to i32, !dbg !44
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 2, i32 31), !dbg !44
  %287 = bitcast i32 %286 to float, !dbg !44
  %288 = fcmp ogt float %284, %287, !dbg !46
  %289 = fcmp uno float %284, 0.000000e+00, !dbg !47
  %290 = or i1 %288, %289, !dbg !48
  %291 = select i1 %290, float %284, float %287, !dbg !49
  %292 = bitcast float %291 to i32, !dbg !44
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %292, i32 1, i32 31), !dbg !44
  %294 = bitcast i32 %293 to float, !dbg !44
  %295 = fcmp ogt float %291, %294, !dbg !46
  %296 = fcmp uno float %291, 0.000000e+00, !dbg !47
  %297 = or i1 %295, %296, !dbg !48
  %298 = bitcast float %263 to i32, !dbg !44
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 16, i32 31), !dbg !44
  %300 = bitcast i32 %299 to float, !dbg !44
  %301 = fcmp ogt float %263, %300, !dbg !46
  %302 = fcmp uno float %263, 0.000000e+00, !dbg !47
  %303 = or i1 %302, %301, !dbg !48
  %304 = select i1 %303, float %263, float %300, !dbg !49
  %305 = bitcast float %304 to i32, !dbg !44
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 8, i32 31), !dbg !44
  %307 = bitcast i32 %306 to float, !dbg !44
  %308 = fcmp ogt float %304, %307, !dbg !46
  %309 = fcmp uno float %304, 0.000000e+00, !dbg !47
  %310 = or i1 %308, %309, !dbg !48
  %311 = select i1 %310, float %304, float %307, !dbg !49
  %312 = bitcast float %311 to i32, !dbg !44
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 4, i32 31), !dbg !44
  %314 = bitcast i32 %313 to float, !dbg !44
  %315 = fcmp ogt float %311, %314, !dbg !46
  %316 = fcmp uno float %311, 0.000000e+00, !dbg !47
  %317 = or i1 %315, %316, !dbg !48
  %318 = select i1 %317, float %311, float %314, !dbg !49
  %319 = bitcast float %318 to i32, !dbg !44
  %320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 2, i32 31), !dbg !44
  %321 = bitcast i32 %320 to float, !dbg !44
  %322 = fcmp ogt float %318, %321, !dbg !46
  %323 = fcmp uno float %318, 0.000000e+00, !dbg !47
  %324 = or i1 %322, %323, !dbg !48
  %325 = select i1 %324, float %318, float %321, !dbg !49
  %326 = bitcast float %325 to i32, !dbg !44
  %327 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %326, i32 1, i32 31), !dbg !44
  %328 = bitcast i32 %327 to float, !dbg !44
  %329 = fcmp ogt float %325, %328, !dbg !46
  %330 = fcmp uno float %325, 0.000000e+00, !dbg !47
  %331 = or i1 %329, %330, !dbg !48
  %332 = getelementptr float, ptr addrspace(3) @global_smem, i32 %215, !dbg !44
  %333 = select i1 %297, i32 %292, i32 %293, !dbg !49
  %334 = insertelement <1 x i32> poison, i32 %333, i64 0, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %332, <1 x i32> %334, i1 %213) #5, !dbg !44
  %335 = getelementptr float, ptr addrspace(3) @global_smem, i32 %219, !dbg !44
  %336 = select i1 %331, i32 %326, i32 %327, !dbg !49
  %337 = insertelement <1 x i32> poison, i32 %336, i64 0, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %335, <1 x i32> %337, i1 %213) #5, !dbg !44
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !44
  %338 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !44
  %339 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %338, i1 %222) #5, !dbg !44
  %340 = bitcast i32 %339 to float, !dbg !44
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 2, i32 31), !dbg !44
  %342 = bitcast i32 %341 to float, !dbg !44
  %343 = fcmp ogt float %340, %342, !dbg !46
  %344 = fcmp uno float %340, 0.000000e+00, !dbg !47
  %345 = or i1 %344, %343, !dbg !48
  %346 = select i1 %345, float %340, float %342, !dbg !49
  %347 = bitcast float %346 to i32, !dbg !44
  %348 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %347, i32 1, i32 31), !dbg !44
  %349 = bitcast i32 %348 to float, !dbg !44
  %350 = fcmp ogt float %346, %349, !dbg !46
  %351 = fcmp uno float %346, 0.000000e+00, !dbg !47
  %352 = or i1 %350, %351, !dbg !48
  %353 = select i1 %352, i32 %347, i32 %348, !dbg !49
  %354 = insertelement <1 x i32> poison, i32 %353, i64 0, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %338, <1 x i32> %354, i1 %234) #5, !dbg !44
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !44
  %355 = getelementptr float, ptr addrspace(3) @global_smem, i32 %214, !dbg !44
  %356 = load float, ptr addrspace(3) %355, align 16, !dbg !44
  %357 = getelementptr float, ptr addrspace(3) @global_smem, i32 %218, !dbg !44
  %358 = load float, ptr addrspace(3) %357, align 16, !dbg !44
  %359 = fcmp oeq float %356, 0xFFF0000000000000, !dbg !50
  %360 = fcmp oeq float %358, 0xFFF0000000000000, !dbg !50
  %361 = fsub float %184, %356, !dbg !51
  %362 = fsub float %185, %356, !dbg !51
  %363 = fsub float %186, %356, !dbg !51
  %364 = fsub float %187, %356, !dbg !51
  %365 = fsub float %188, %358, !dbg !51
  %366 = fsub float %189, %358, !dbg !51
  %367 = fsub float %190, %358, !dbg !51
  %368 = fsub float %191, %358, !dbg !51
  %369 = fmul float %361, 0x3FF7154760000000, !dbg !52
  %370 = select i1 %359, float 0.000000e+00, float %369, !dbg !53
  %371 = tail call float @llvm.nvvm.ex2.approx.f(float %370), !dbg !52
  %372 = fmul float %362, 0x3FF7154760000000, !dbg !52
  %373 = select i1 %359, float 0.000000e+00, float %372, !dbg !53
  %374 = tail call float @llvm.nvvm.ex2.approx.f(float %373), !dbg !52
  %375 = fmul float %363, 0x3FF7154760000000, !dbg !52
  %376 = select i1 %359, float 0.000000e+00, float %375, !dbg !53
  %377 = tail call float @llvm.nvvm.ex2.approx.f(float %376), !dbg !52
  %378 = fmul float %364, 0x3FF7154760000000, !dbg !52
  %379 = select i1 %359, float 0.000000e+00, float %378, !dbg !53
  %380 = tail call float @llvm.nvvm.ex2.approx.f(float %379), !dbg !52
  %381 = fmul float %365, 0x3FF7154760000000, !dbg !52
  %382 = select i1 %360, float 0.000000e+00, float %381, !dbg !53
  %383 = tail call float @llvm.nvvm.ex2.approx.f(float %382), !dbg !52
  %384 = fmul float %366, 0x3FF7154760000000, !dbg !52
  %385 = select i1 %360, float 0.000000e+00, float %384, !dbg !53
  %386 = tail call float @llvm.nvvm.ex2.approx.f(float %385), !dbg !52
  %387 = fmul float %367, 0x3FF7154760000000, !dbg !52
  %388 = select i1 %360, float 0.000000e+00, float %387, !dbg !53
  %389 = tail call float @llvm.nvvm.ex2.approx.f(float %388), !dbg !52
  %390 = fmul float %368, 0x3FF7154760000000, !dbg !52
  %391 = select i1 %360, float 0.000000e+00, float %390, !dbg !53
  %392 = tail call float @llvm.nvvm.ex2.approx.f(float %391), !dbg !52
  %393 = fmul float %192, %371, !dbg !54
  %394 = fmul float %193, %374, !dbg !54
  %395 = fmul float %194, %377, !dbg !54
  %396 = fmul float %195, %380, !dbg !54
  %397 = fmul float %196, %383, !dbg !54
  %398 = fmul float %197, %386, !dbg !54
  %399 = fmul float %198, %389, !dbg !54
  %400 = fmul float %199, %392, !dbg !54
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !55
  %401 = fadd float %393, %394, !dbg !58
  %402 = fadd float %401, %395, !dbg !58
  %403 = fadd float %402, %396, !dbg !58
  %404 = fadd float %397, %398, !dbg !58
  %405 = fadd float %404, %399, !dbg !58
  %406 = fadd float %405, %400, !dbg !58
  %407 = bitcast float %403 to i32, !dbg !55
  %408 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %407, i32 16, i32 31), !dbg !55
  %409 = bitcast i32 %408 to float, !dbg !55
  %410 = fadd float %403, %409, !dbg !58
  %411 = bitcast float %410 to i32, !dbg !55
  %412 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %411, i32 8, i32 31), !dbg !55
  %413 = bitcast i32 %412 to float, !dbg !55
  %414 = fadd float %410, %413, !dbg !58
  %415 = bitcast float %414 to i32, !dbg !55
  %416 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %415, i32 4, i32 31), !dbg !55
  %417 = bitcast i32 %416 to float, !dbg !55
  %418 = fadd float %414, %417, !dbg !58
  %419 = bitcast float %418 to i32, !dbg !55
  %420 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %419, i32 2, i32 31), !dbg !55
  %421 = bitcast i32 %420 to float, !dbg !55
  %422 = fadd float %418, %421, !dbg !58
  %423 = bitcast float %422 to i32, !dbg !55
  %424 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %423, i32 1, i32 31), !dbg !55
  %425 = bitcast i32 %424 to float, !dbg !55
  %426 = fadd float %422, %425, !dbg !58
  %427 = bitcast float %406 to i32, !dbg !55
  %428 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %427, i32 16, i32 31), !dbg !55
  %429 = bitcast i32 %428 to float, !dbg !55
  %430 = fadd float %406, %429, !dbg !58
  %431 = bitcast float %430 to i32, !dbg !55
  %432 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %431, i32 8, i32 31), !dbg !55
  %433 = bitcast i32 %432 to float, !dbg !55
  %434 = fadd float %430, %433, !dbg !58
  %435 = bitcast float %434 to i32, !dbg !55
  %436 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %435, i32 4, i32 31), !dbg !55
  %437 = bitcast i32 %436 to float, !dbg !55
  %438 = fadd float %434, %437, !dbg !58
  %439 = bitcast float %438 to i32, !dbg !55
  %440 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %439, i32 2, i32 31), !dbg !55
  %441 = bitcast i32 %440 to float, !dbg !55
  %442 = fadd float %438, %441, !dbg !58
  %443 = bitcast float %442 to i32, !dbg !55
  %444 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %443, i32 1, i32 31), !dbg !55
  %445 = bitcast i32 %444 to float, !dbg !55
  %446 = fadd float %442, %445, !dbg !58
  %447 = bitcast float %426 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %332, <1 x i32> %447, i1 %213) #5, !dbg !55
  %448 = bitcast float %446 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %335, <1 x i32> %448, i1 %213) #5, !dbg !55
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !55
  %449 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %338, i1 %222) #5, !dbg !55
  %450 = bitcast i32 %449 to float, !dbg !55
  %451 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %449, i32 2, i32 31), !dbg !55
  %452 = bitcast i32 %451 to float, !dbg !55
  %453 = fadd float %450, %452, !dbg !58
  %454 = bitcast float %453 to i32, !dbg !55
  %455 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %454, i32 1, i32 31), !dbg !55
  %456 = bitcast i32 %455 to float, !dbg !55
  %457 = fadd float %453, %456, !dbg !58
  %458 = bitcast float %457 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %338, <1 x i32> %458, i1 %234) #5, !dbg !55
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !55
  %459 = load float, ptr addrspace(3) %355, align 16, !dbg !55
  %460 = load float, ptr addrspace(3) %357, align 16, !dbg !55
  %461 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #5, !dbg !59
  %462 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %31, i64 %461, i1 %34) #5, !dbg !59
  %463 = extractvalue { i32, i32, i32, i32 } %462, 0, !dbg !59
  %464 = extractvalue { i32, i32, i32, i32 } %462, 1, !dbg !59
  %465 = extractvalue { i32, i32, i32, i32 } %462, 2, !dbg !59
  %466 = extractvalue { i32, i32, i32, i32 } %462, 3, !dbg !59
  %467 = bitcast i32 %463 to float, !dbg !59
  %468 = bitcast i32 %464 to float, !dbg !59
  %469 = bitcast i32 %465 to float, !dbg !59
  %470 = bitcast i32 %466 to float, !dbg !59
  %471 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #5, !dbg !59
  %472 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %33, i64 %471, i1 %35) #5, !dbg !59
  %473 = extractvalue { i32, i32, i32, i32 } %472, 0, !dbg !59
  %474 = extractvalue { i32, i32, i32, i32 } %472, 1, !dbg !59
  %475 = extractvalue { i32, i32, i32, i32 } %472, 2, !dbg !59
  %476 = extractvalue { i32, i32, i32, i32 } %472, 3, !dbg !59
  %477 = bitcast i32 %473 to float, !dbg !59
  %478 = bitcast i32 %474 to float, !dbg !59
  %479 = bitcast i32 %475 to float, !dbg !59
  %480 = bitcast i32 %476 to float, !dbg !59
  %481 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #5, !dbg !60
  %482 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %57, i64 %481, i1 %34) #5, !dbg !60
  %483 = extractvalue { i32, i32, i32, i32 } %482, 0, !dbg !60
  %484 = extractvalue { i32, i32, i32, i32 } %482, 1, !dbg !60
  %485 = extractvalue { i32, i32, i32, i32 } %482, 2, !dbg !60
  %486 = extractvalue { i32, i32, i32, i32 } %482, 3, !dbg !60
  %487 = bitcast i32 %483 to float, !dbg !60
  %488 = bitcast i32 %484 to float, !dbg !60
  %489 = bitcast i32 %485 to float, !dbg !60
  %490 = bitcast i32 %486 to float, !dbg !60
  %491 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #5, !dbg !60
  %492 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %59, i64 %491, i1 %35) #5, !dbg !60
  %493 = extractvalue { i32, i32, i32, i32 } %492, 0, !dbg !60
  %494 = extractvalue { i32, i32, i32, i32 } %492, 1, !dbg !60
  %495 = extractvalue { i32, i32, i32, i32 } %492, 2, !dbg !60
  %496 = extractvalue { i32, i32, i32, i32 } %492, 3, !dbg !60
  %497 = bitcast i32 %493 to float, !dbg !60
  %498 = bitcast i32 %494 to float, !dbg !60
  %499 = bitcast i32 %495 to float, !dbg !60
  %500 = bitcast i32 %496 to float, !dbg !60
  %501 = fadd float %467, %487, !dbg !61
  %502 = fadd float %468, %488, !dbg !61
  %503 = fadd float %469, %489, !dbg !61
  %504 = fadd float %470, %490, !dbg !61
  %505 = fadd float %477, %497, !dbg !61
  %506 = fadd float %478, %498, !dbg !61
  %507 = fadd float %479, %499, !dbg !61
  %508 = fadd float %480, %500, !dbg !61
  %509 = fsub float %501, %356, !dbg !62
  %510 = fsub float %502, %356, !dbg !62
  %511 = fsub float %503, %356, !dbg !62
  %512 = fsub float %504, %356, !dbg !62
  %513 = fsub float %505, %358, !dbg !62
  %514 = fsub float %506, %358, !dbg !62
  %515 = fsub float %507, %358, !dbg !62
  %516 = fsub float %508, %358, !dbg !62
  %517 = fmul float %509, 0x3FF7154760000000, !dbg !63
  %518 = tail call float @llvm.nvvm.ex2.approx.f(float %517), !dbg !63
  %519 = fmul float %510, 0x3FF7154760000000, !dbg !63
  %520 = tail call float @llvm.nvvm.ex2.approx.f(float %519), !dbg !63
  %521 = fmul float %511, 0x3FF7154760000000, !dbg !63
  %522 = tail call float @llvm.nvvm.ex2.approx.f(float %521), !dbg !63
  %523 = fmul float %512, 0x3FF7154760000000, !dbg !63
  %524 = tail call float @llvm.nvvm.ex2.approx.f(float %523), !dbg !63
  %525 = fmul float %513, 0x3FF7154760000000, !dbg !63
  %526 = tail call float @llvm.nvvm.ex2.approx.f(float %525), !dbg !63
  %527 = fmul float %514, 0x3FF7154760000000, !dbg !63
  %528 = tail call float @llvm.nvvm.ex2.approx.f(float %527), !dbg !63
  %529 = fmul float %515, 0x3FF7154760000000, !dbg !63
  %530 = tail call float @llvm.nvvm.ex2.approx.f(float %529), !dbg !63
  %531 = fmul float %516, 0x3FF7154760000000, !dbg !63
  %532 = tail call float @llvm.nvvm.ex2.approx.f(float %531), !dbg !63
  %533 = tail call float @llvm.nvvm.div.full(float %518, float %459), !dbg !64
  %534 = tail call float @llvm.nvvm.div.full(float %520, float %459), !dbg !64
  %535 = tail call float @llvm.nvvm.div.full(float %522, float %459), !dbg !64
  %536 = tail call float @llvm.nvvm.div.full(float %524, float %459), !dbg !64
  %537 = tail call float @llvm.nvvm.div.full(float %526, float %460), !dbg !64
  %538 = tail call float @llvm.nvvm.div.full(float %528, float %460), !dbg !64
  %539 = tail call float @llvm.nvvm.div.full(float %530, float %460), !dbg !64
  %540 = tail call float @llvm.nvvm.div.full(float %532, float %460), !dbg !64
  %541 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !65
  %542 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !65
  %543 = bitcast float %533 to i32, !dbg !66
  %544 = select i1 %.not, i32 0, i32 %543, !dbg !67
  %545 = bitcast float %534 to i32, !dbg !66
  %546 = select i1 %.not, i32 0, i32 %545, !dbg !67
  %547 = bitcast float %535 to i32, !dbg !66
  %548 = select i1 %.not, i32 0, i32 %547, !dbg !67
  %549 = bitcast float %536 to i32, !dbg !66
  %550 = select i1 %.not, i32 0, i32 %549, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %544, i32 %546, i32 %548, i32 %550, ptr addrspace(1) %541, i1 %34) #5, !dbg !66
  %551 = bitcast float %537 to i32, !dbg !66
  %552 = select i1 %.not1, i32 0, i32 %551, !dbg !67
  %553 = bitcast float %538 to i32, !dbg !66
  %554 = select i1 %.not1, i32 0, i32 %553, !dbg !67
  %555 = bitcast float %539 to i32, !dbg !66
  %556 = select i1 %.not1, i32 0, i32 %555, !dbg !67
  %557 = bitcast float %540 to i32, !dbg !66
  %558 = select i1 %.not1, i32 0, i32 %557, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %552, i32 %554, i32 %556, i32 %558, ptr addrspace(1) %542, i1 %35) #5, !dbg !66
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.redux.sync.or(i32, i32) #3

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #4

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

attributes #0 = { "nvvm.reqntid"="512" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { convergent nocallback nounwind }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "coefcjzwqeaazrpai4joq343fvrsgrhhb67vzijrbyjgc63uwhrl.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/oe")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "triton_red_fused_9", linkageName: "triton_red_fused_9", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 23, column: 28, scope: !5)
!9 = !DILocation(line: 23, column: 33, scope: !5)
!10 = !DILocation(line: 24, column: 44, scope: !5)
!11 = !DILocation(line: 24, column: 23, scope: !5)
!12 = !DILocation(line: 25, column: 21, scope: !5)
!13 = !DILocation(line: 26, column: 37, scope: !5)
!14 = !DILocation(line: 30, column: 19, scope: !5)
!15 = !DILocation(line: 29, column: 19, scope: !5)
!16 = !DILocation(line: 38, column: 29, scope: !5)
!17 = !DILocation(line: 42, column: 45, scope: !5)
!18 = !DILocation(line: 42, column: 41, scope: !5)
!19 = !DILocation(line: 42, column: 34, scope: !5)
!20 = !DILocation(line: 42, column: 60, scope: !5)
!21 = !DILocation(line: 42, column: 50, scope: !5)
!22 = !DILocation(line: 43, column: 45, scope: !5)
!23 = !DILocation(line: 43, column: 41, scope: !5)
!24 = !DILocation(line: 43, column: 57, scope: !5)
!25 = !DILocation(line: 43, column: 50, scope: !5)
!26 = !DILocation(line: 43, column: 34, scope: !5)
!27 = !DILocation(line: 43, column: 62, scope: !5)
!28 = !DILocation(line: 44, column: 22, scope: !5)
!29 = !DILocation(line: 46, column: 23, scope: !5)
!30 = !DILocation(line: 197, column: 53, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !5, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 56, column: 43, scope: !5)
!34 = !DILocation(line: 174, column: 24, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 200, column: 53, scope: !31, inlinedAt: !33)
!36 = !DILocation(line: 206, column: 24, scope: !31, inlinedAt: !33)
!37 = !DILocation(line: 206, column: 36, scope: !31, inlinedAt: !33)
!38 = !DILocation(line: 59, column: 64, scope: !5)
!39 = !DILocation(line: 60, column: 64, scope: !5)
!40 = !DILocation(line: 261, column: 15, scope: !31, inlinedAt: !41)
!41 = !DILocation(line: 61, column: 49, scope: !5)
!42 = !DILocation(line: 266, column: 29, scope: !31, inlinedAt: !41)
!43 = !DILocation(line: 61, column: 64, scope: !5)
!44 = !DILocation(line: 124, column: 29, scope: !31, inlinedAt: !45)
!45 = !DILocation(line: 64, column: 35, scope: !5)
!46 = !DILocation(line: 111, column: 15, scope: !31, inlinedAt: !45)
!47 = !DILocation(line: 113, column: 21, scope: !31, inlinedAt: !45)
!48 = !DILocation(line: 113, column: 16, scope: !31, inlinedAt: !45)
!49 = !DILocation(line: 114, column: 29, scope: !31, inlinedAt: !45)
!50 = !DILocation(line: 181, column: 40, scope: !31, inlinedAt: !45)
!51 = !DILocation(line: 181, column: 68, scope: !31, inlinedAt: !45)
!52 = !DILocation(line: 174, column: 24, scope: !31, inlinedAt: !45)
!53 = !DILocation(line: 181, column: 58, scope: !31, inlinedAt: !45)
!54 = !DILocation(line: 182, column: 31, scope: !31, inlinedAt: !45)
!55 = !DILocation(line: 290, column: 36, scope: !56, inlinedAt: !45)
!56 = distinct !DILexicalBlockFile(scope: !5, file: !57, discriminator: 0)
!57 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!58 = !DILocation(line: 260, column: 15, scope: !56, inlinedAt: !45)
!59 = !DILocation(line: 75, column: 51, scope: !5)
!60 = !DILocation(line: 76, column: 63, scope: !5)
!61 = !DILocation(line: 78, column: 24, scope: !5)
!62 = !DILocation(line: 79, column: 24, scope: !5)
!63 = !DILocation(line: 80, column: 28, scope: !5)
!64 = !DILocation(line: 81, column: 25, scope: !5)
!65 = !DILocation(line: 84, column: 29, scope: !5)
!66 = !DILocation(line: 84, column: 64, scope: !5)
!67 = !DILocation(line: 83, column: 39, scope: !5)
!68 = !DILocation(line: 69, column: 4, scope: !5)
