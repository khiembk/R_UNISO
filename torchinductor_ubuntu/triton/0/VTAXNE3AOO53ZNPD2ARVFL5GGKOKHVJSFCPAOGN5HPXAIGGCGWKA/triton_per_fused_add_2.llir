; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_per_fused_add_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr #0 !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !8
  %10 = shl nuw nsw i32 %9, 3, !dbg !9
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %12 = and i32 %11, 30, !dbg !10
  %13 = lshr i32 %11, 5, !dbg !10
  %14 = lshr i32 %11, 4, !dbg !10
  %15 = and i32 %14, 3, !dbg !10
  %16 = shl nuw nsw i32 %11, 2, !dbg !10
  %17 = and i32 %16, 4, !dbg !10
  %18 = and i32 %11, 7, !dbg !10
  %19 = or disjoint i32 %15, %10, !dbg !11
  %20 = or disjoint i32 %17, %10, !dbg !11
  %21 = or disjoint i32 %10, %18, !dbg !11
  %22 = icmp eq i32 %9, 0, !dbg !12
  %23 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !13
  %24 = icmp samesign ult i32 %23, 64, !dbg !14
  %25 = and i32 %16, 60, !dbg !15
  %26 = shl i32 %23, 6, !dbg !16
  %27 = or disjoint i32 %25, %26, !dbg !17
  %28 = shl nuw nsw i32 %19, 12, !dbg !18
  %29 = or disjoint i32 %28, 16384, !dbg !18
  %30 = add i32 %28, %27, !dbg !19
  %31 = add i32 %29, %27, !dbg !19
  %32 = sext i32 %30 to i64, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !20
  %34 = sext i32 %31 to i64, !dbg !20
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !20
  %36 = and i1 %24, %22, !dbg !21
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !22
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %33, i64 %37, i1 %36) #5, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !22
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !22
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %35, i64 %43, i1 %36) #5, !dbg !22
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !22
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !22
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !22
  %49 = shl nuw nsw i32 %11, 5, !dbg !22
  %50 = and i32 %49, 480, !dbg !22
  %51 = or disjoint i32 %50, %15, !dbg !22
  %52 = and i32 %16, 252, !dbg !22
  %53 = lshr exact i32 %50, 1, !dbg !22
  %54 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %53, !dbg !22
  %55 = getelementptr inbounds nuw float, ptr addrspace(3) %54, i32 %51, !dbg !22
  %56 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !22
  store <1 x i32> %56, ptr addrspace(3) %55, align 4, !dbg !22
  %57 = or disjoint i32 %51, 8, !dbg !22
  %58 = lshr i32 %57, 3, !dbg !22
  %59 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %58, !dbg !22
  %60 = getelementptr inbounds nuw float, ptr addrspace(3) %59, i32 %57, !dbg !22
  %61 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !22
  store <1 x i32> %61, ptr addrspace(3) %60, align 4, !dbg !22
  %62 = or disjoint i32 %51, 16, !dbg !22
  %63 = lshr i32 %62, 3, !dbg !22
  %64 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %63, !dbg !22
  %65 = getelementptr inbounds nuw float, ptr addrspace(3) %64, i32 %62, !dbg !22
  %66 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !22
  store <1 x i32> %66, ptr addrspace(3) %65, align 4, !dbg !22
  %67 = or disjoint i32 %51, 24, !dbg !22
  %68 = lshr i32 %67, 3, !dbg !22
  %69 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %68, !dbg !22
  %70 = getelementptr inbounds nuw float, ptr addrspace(3) %69, i32 %67, !dbg !22
  %71 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !22
  store <1 x i32> %71, ptr addrspace(3) %70, align 4, !dbg !22
  %72 = getelementptr inbounds nuw i8, ptr addrspace(3) %55, i32 16, !dbg !22
  %73 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !22
  store <1 x i32> %73, ptr addrspace(3) %72, align 4, !dbg !22
  %74 = or disjoint i32 %51, 12, !dbg !22
  %75 = lshr i32 %74, 3, !dbg !22
  %76 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %75, !dbg !22
  %77 = getelementptr inbounds nuw float, ptr addrspace(3) %76, i32 %74, !dbg !22
  %78 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !22
  store <1 x i32> %78, ptr addrspace(3) %77, align 4, !dbg !22
  %79 = or disjoint i32 %51, 20, !dbg !22
  %80 = lshr i32 %79, 3, !dbg !22
  %81 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %80, !dbg !22
  %82 = getelementptr inbounds nuw float, ptr addrspace(3) %81, i32 %79, !dbg !22
  %83 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !22
  store <1 x i32> %83, ptr addrspace(3) %82, align 4, !dbg !22
  %84 = or disjoint i32 %51, 28, !dbg !22
  %85 = lshr i32 %84, 3, !dbg !22
  %86 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %85, !dbg !22
  %87 = getelementptr inbounds nuw float, ptr addrspace(3) %86, i32 %84, !dbg !22
  %88 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !22
  store <1 x i32> %88, ptr addrspace(3) %87, align 4, !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %89 = lshr i32 %52, 3, !dbg !22
  %90 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %89, !dbg !22
  %91 = getelementptr inbounds nuw float, ptr addrspace(3) %90, i32 %52, !dbg !22
  %92 = or disjoint i32 %52, 256, !dbg !22
  %93 = lshr i32 %92, 3, !dbg !22
  %94 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %93, !dbg !22
  %95 = getelementptr inbounds nuw float, ptr addrspace(3) %94, i32 %92, !dbg !22
  %96 = load float, ptr addrspace(3) %95, align 4, !dbg !22
  %97 = or disjoint i32 %52, 257, !dbg !22
  %98 = lshr i32 %97, 3, !dbg !22
  %99 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %98, !dbg !22
  %100 = getelementptr inbounds nuw float, ptr addrspace(3) %99, i32 %97, !dbg !22
  %101 = load float, ptr addrspace(3) %100, align 4, !dbg !22
  %102 = or disjoint i32 %52, 258, !dbg !22
  %103 = lshr i32 %102, 3, !dbg !22
  %104 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %103, !dbg !22
  %105 = getelementptr inbounds nuw float, ptr addrspace(3) %104, i32 %102, !dbg !22
  %106 = load float, ptr addrspace(3) %105, align 4, !dbg !22
  %107 = or disjoint i32 %52, 259, !dbg !22
  %108 = lshr i32 %107, 3, !dbg !22
  %109 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %108, !dbg !22
  %110 = getelementptr inbounds nuw float, ptr addrspace(3) %109, i32 %107, !dbg !22
  %111 = load float, ptr addrspace(3) %110, align 4, !dbg !22
  %112 = and i32 %16, 248, !dbg !23
  %113 = shl i32 %23, 9, !dbg !24
  %114 = add i32 %20, %113, !dbg !25
  %115 = add i32 %114, %112, !dbg !26
  %116 = add i32 %114, 256, !dbg !25
  %117 = add i32 %116, %112, !dbg !26
  %118 = sext i32 %115 to i64, !dbg !27
  %119 = getelementptr float, ptr addrspace(1) %1, i64 %118, !dbg !27
  %120 = sext i32 %117 to i64, !dbg !27
  %121 = getelementptr float, ptr addrspace(1) %1, i64 %120, !dbg !27
  %122 = load <4 x float>, ptr addrspace(3) %91, align 4, !dbg !22
  %123 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !28
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %119, i64 %123, i1 %36) #5, !dbg !28
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !28
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !28
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !28
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !28
  %129 = insertelement <4 x i32> poison, i32 %125, i64 0, !dbg !28
  %130 = insertelement <4 x i32> %129, i32 %126, i64 1, !dbg !28
  %131 = insertelement <4 x i32> %130, i32 %127, i64 2, !dbg !28
  %132 = insertelement <4 x i32> %131, i32 %128, i64 3, !dbg !28
  %133 = bitcast <4 x i32> %132 to <4 x float>, !dbg !28
  %134 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !28
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %121, i64 %134, i1 %36) #5, !dbg !28
  %136 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !28
  %137 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !28
  %138 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !28
  %139 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !28
  %140 = insertelement <4 x i32> poison, i32 %136, i64 0, !dbg !28
  %141 = insertelement <4 x i32> %140, i32 %137, i64 1, !dbg !28
  %142 = insertelement <4 x i32> %141, i32 %138, i64 2, !dbg !28
  %143 = insertelement <4 x i32> %142, i32 %139, i64 3, !dbg !28
  %144 = bitcast <4 x i32> %143 to <4 x float>, !dbg !28
  %145 = fadd <4 x float> %122, %133, !dbg !29
  %146 = insertelement <4 x float> poison, float %96, i64 0, !dbg !29
  %147 = insertelement <4 x float> %146, float %101, i64 1, !dbg !29
  %148 = insertelement <4 x float> %147, float %106, i64 2, !dbg !29
  %149 = insertelement <4 x float> %148, float %111, i64 3, !dbg !29
  %150 = fadd <4 x float> %149, %144, !dbg !29
  %151 = insertelement <4 x i1> poison, i1 %36, i64 0, !dbg !30
  %152 = shufflevector <4 x i1> %151, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !30
  %153 = select <4 x i1> %152, <4 x float> %145, <4 x float> splat (float 0xFFF0000000000000), !dbg !30
  %154 = select <4 x i1> %152, <4 x float> %150, <4 x float> splat (float 0xFFF0000000000000), !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  %155 = extractelement <4 x float> %153, i64 0, !dbg !35
  %156 = fcmp uno float %155, 0.000000e+00, !dbg !36
  %157 = fcmp ogt <4 x float> %153, %154, !dbg !37
  %158 = extractelement <4 x i1> %157, i64 0, !dbg !38
  %159 = or i1 %156, %158, !dbg !38
  %160 = extractelement <4 x float> %154, i64 0, !dbg !35
  %161 = select i1 %159, float %155, float %160, !dbg !35
  %162 = extractelement <4 x float> %153, i64 1, !dbg !35
  %163 = fcmp uno float %162, 0.000000e+00, !dbg !36
  %164 = extractelement <4 x i1> %157, i64 1, !dbg !38
  %165 = or i1 %163, %164, !dbg !38
  %166 = extractelement <4 x float> %154, i64 1, !dbg !35
  %167 = select i1 %165, float %162, float %166, !dbg !35
  %168 = extractelement <4 x float> %153, i64 2, !dbg !35
  %169 = fcmp uno float %168, 0.000000e+00, !dbg !36
  %170 = extractelement <4 x i1> %157, i64 2, !dbg !38
  %171 = or i1 %169, %170, !dbg !38
  %172 = extractelement <4 x float> %154, i64 2, !dbg !35
  %173 = select i1 %171, float %168, float %172, !dbg !35
  %174 = extractelement <4 x float> %153, i64 3, !dbg !35
  %175 = fcmp uno float %174, 0.000000e+00, !dbg !36
  %176 = extractelement <4 x i1> %157, i64 3, !dbg !38
  %177 = or i1 %175, %176, !dbg !38
  %178 = extractelement <4 x float> %154, i64 3, !dbg !35
  %179 = select i1 %177, float %174, float %178, !dbg !35
  %180 = bitcast float %161 to i32, !dbg !31
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 16, i32 31), !dbg !31
  %182 = bitcast i32 %181 to float, !dbg !31
  %183 = fcmp ogt float %161, %182, !dbg !37
  %184 = fcmp uno float %161, 0.000000e+00, !dbg !36
  %185 = or i1 %183, %184, !dbg !38
  %186 = select i1 %185, float %161, float %182, !dbg !35
  %187 = bitcast float %186 to i32, !dbg !31
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 8, i32 31), !dbg !31
  %189 = bitcast i32 %188 to float, !dbg !31
  %190 = fcmp ogt float %186, %189, !dbg !37
  %191 = fcmp uno float %186, 0.000000e+00, !dbg !36
  %192 = or i1 %190, %191, !dbg !38
  %193 = select i1 %192, float %186, float %189, !dbg !35
  %194 = bitcast float %193 to i32, !dbg !31
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 4, i32 31), !dbg !31
  %196 = bitcast i32 %195 to float, !dbg !31
  %197 = fcmp ogt float %193, %196, !dbg !37
  %198 = fcmp uno float %193, 0.000000e+00, !dbg !36
  %199 = or i1 %197, %198, !dbg !38
  %200 = select i1 %199, float %193, float %196, !dbg !35
  %201 = bitcast float %200 to i32, !dbg !31
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 2, i32 31), !dbg !31
  %203 = bitcast i32 %202 to float, !dbg !31
  %204 = fcmp ogt float %200, %203, !dbg !37
  %205 = fcmp uno float %200, 0.000000e+00, !dbg !36
  %206 = or i1 %204, %205, !dbg !38
  %207 = bitcast float %167 to i32, !dbg !31
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 16, i32 31), !dbg !31
  %209 = bitcast i32 %208 to float, !dbg !31
  %210 = fcmp ogt float %167, %209, !dbg !37
  %211 = fcmp uno float %167, 0.000000e+00, !dbg !36
  %212 = or i1 %210, %211, !dbg !38
  %213 = select i1 %212, float %167, float %209, !dbg !35
  %214 = bitcast float %213 to i32, !dbg !31
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 8, i32 31), !dbg !31
  %216 = bitcast i32 %215 to float, !dbg !31
  %217 = fcmp ogt float %213, %216, !dbg !37
  %218 = fcmp uno float %213, 0.000000e+00, !dbg !36
  %219 = or i1 %217, %218, !dbg !38
  %220 = select i1 %219, float %213, float %216, !dbg !35
  %221 = bitcast float %220 to i32, !dbg !31
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 4, i32 31), !dbg !31
  %223 = bitcast i32 %222 to float, !dbg !31
  %224 = fcmp ogt float %220, %223, !dbg !37
  %225 = fcmp uno float %220, 0.000000e+00, !dbg !36
  %226 = or i1 %224, %225, !dbg !38
  %227 = select i1 %226, float %220, float %223, !dbg !35
  %228 = bitcast float %227 to i32, !dbg !31
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 2, i32 31), !dbg !31
  %230 = bitcast i32 %229 to float, !dbg !31
  %231 = fcmp ogt float %227, %230, !dbg !37
  %232 = fcmp uno float %227, 0.000000e+00, !dbg !36
  %233 = or i1 %231, %232, !dbg !38
  %234 = bitcast float %173 to i32, !dbg !31
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 16, i32 31), !dbg !31
  %236 = bitcast i32 %235 to float, !dbg !31
  %237 = fcmp ogt float %173, %236, !dbg !37
  %238 = fcmp uno float %173, 0.000000e+00, !dbg !36
  %239 = or i1 %238, %237, !dbg !38
  %240 = select i1 %239, float %173, float %236, !dbg !35
  %241 = bitcast float %240 to i32, !dbg !31
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 8, i32 31), !dbg !31
  %243 = bitcast i32 %242 to float, !dbg !31
  %244 = fcmp ogt float %240, %243, !dbg !37
  %245 = fcmp uno float %240, 0.000000e+00, !dbg !36
  %246 = or i1 %244, %245, !dbg !38
  %247 = select i1 %246, float %240, float %243, !dbg !35
  %248 = bitcast float %247 to i32, !dbg !31
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 4, i32 31), !dbg !31
  %250 = bitcast i32 %249 to float, !dbg !31
  %251 = fcmp ogt float %247, %250, !dbg !37
  %252 = fcmp uno float %247, 0.000000e+00, !dbg !36
  %253 = or i1 %251, %252, !dbg !38
  %254 = select i1 %253, float %247, float %250, !dbg !35
  %255 = bitcast float %254 to i32, !dbg !31
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 2, i32 31), !dbg !31
  %257 = bitcast i32 %256 to float, !dbg !31
  %258 = fcmp ogt float %254, %257, !dbg !37
  %259 = fcmp uno float %254, 0.000000e+00, !dbg !36
  %260 = or i1 %258, %259, !dbg !38
  %261 = bitcast float %179 to i32, !dbg !31
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 16, i32 31), !dbg !31
  %263 = bitcast i32 %262 to float, !dbg !31
  %264 = fcmp ogt float %179, %263, !dbg !37
  %265 = fcmp uno float %179, 0.000000e+00, !dbg !36
  %266 = or i1 %265, %264, !dbg !38
  %267 = select i1 %266, float %179, float %263, !dbg !35
  %268 = bitcast float %267 to i32, !dbg !31
  %269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %268, i32 8, i32 31), !dbg !31
  %270 = bitcast i32 %269 to float, !dbg !31
  %271 = fcmp ogt float %267, %270, !dbg !37
  %272 = fcmp uno float %267, 0.000000e+00, !dbg !36
  %273 = or i1 %271, %272, !dbg !38
  %274 = select i1 %273, float %267, float %270, !dbg !35
  %275 = bitcast float %274 to i32, !dbg !31
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 4, i32 31), !dbg !31
  %277 = bitcast i32 %276 to float, !dbg !31
  %278 = fcmp ogt float %274, %277, !dbg !37
  %279 = fcmp uno float %274, 0.000000e+00, !dbg !36
  %280 = or i1 %278, %279, !dbg !38
  %281 = select i1 %280, float %274, float %277, !dbg !35
  %282 = bitcast float %281 to i32, !dbg !31
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 2, i32 31), !dbg !31
  %284 = bitcast i32 %283 to float, !dbg !31
  %285 = fcmp ogt float %281, %284, !dbg !37
  %286 = fcmp uno float %281, 0.000000e+00, !dbg !36
  %287 = or i1 %285, %286, !dbg !38
  %288 = and i32 %13, 1, !dbg !31
  %289 = icmp eq i32 %12, 0, !dbg !31
  %.idx9 = shl nuw nsw i32 %17, 3, !dbg !31
  %290 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx9, !dbg !31
  %291 = getelementptr float, ptr addrspace(3) %290, i32 %288, !dbg !31
  %292 = select i1 %206, i32 %201, i32 %202, !dbg !35
  %293 = insertelement <1 x i32> poison, i32 %292, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %291, <1 x i32> %293, i1 %289) #5, !dbg !31
  %294 = shl nuw nsw i32 %17, 3, !dbg !31
  %295 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %294, !dbg !31
  %296 = getelementptr i8, ptr addrspace(3) %295, i32 8, !dbg !31
  %297 = getelementptr float, ptr addrspace(3) %296, i32 %288, !dbg !31
  %298 = select i1 %233, i32 %228, i32 %229, !dbg !35
  %299 = insertelement <1 x i32> poison, i32 %298, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %299, i1 %289) #5, !dbg !31
  %300 = shl nuw nsw i32 %17, 3, !dbg !31
  %301 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %300, !dbg !31
  %302 = getelementptr i8, ptr addrspace(3) %301, i32 16, !dbg !31
  %303 = getelementptr float, ptr addrspace(3) %302, i32 %288, !dbg !31
  %304 = select i1 %260, i32 %255, i32 %256, !dbg !35
  %305 = insertelement <1 x i32> poison, i32 %304, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %305, i1 %289) #5, !dbg !31
  %306 = shl nuw nsw i32 %17, 3, !dbg !31
  %307 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %306, !dbg !31
  %308 = getelementptr i8, ptr addrspace(3) %307, i32 24, !dbg !31
  %309 = getelementptr float, ptr addrspace(3) %308, i32 %288, !dbg !31
  %310 = select i1 %287, i32 %282, i32 %283, !dbg !35
  %311 = insertelement <1 x i32> poison, i32 %310, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %311, i1 %289) #5, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  %312 = icmp samesign ult i32 %11, 16, !dbg !31
  %313 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !31
  %314 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %313, i1 %312) #5, !dbg !31
  %315 = bitcast i32 %314 to float, !dbg !31
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 1, i32 31), !dbg !31
  %317 = bitcast i32 %316 to float, !dbg !31
  %318 = fcmp ogt float %315, %317, !dbg !37
  %319 = fcmp uno float %315, 0.000000e+00, !dbg !36
  %320 = or i1 %319, %318, !dbg !38
  %321 = and i32 %11, 1009, !dbg !31
  %322 = icmp eq i32 %321, 0, !dbg !31
  %323 = select i1 %320, i32 %314, i32 %316, !dbg !35
  %324 = insertelement <1 x i32> poison, i32 %323, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %313, <1 x i32> %324, i1 %322) #5, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  %325 = load float, ptr addrspace(3) %290, align 16, !dbg !31
  %326 = load float, ptr addrspace(3) %296, align 8, !dbg !31
  %327 = load float, ptr addrspace(3) %302, align 16, !dbg !31
  %328 = load float, ptr addrspace(3) %308, align 8, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  store float %325, ptr addrspace(3) %290, align 16, !dbg !39
  store float %326, ptr addrspace(3) %296, align 8, !dbg !39
  store float %327, ptr addrspace(3) %302, align 16, !dbg !39
  store float %328, ptr addrspace(3) %308, align 8, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  %.idx8 = shl nuw nsw i32 %18, 3, !dbg !39
  %329 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %.idx8, !dbg !39
  %330 = load i32, ptr addrspace(3) %329, align 8, !dbg !39
  %331 = extractelement <4 x float> %145, i64 0, !dbg !40
  %332 = fsub float %331, %325, !dbg !40
  %333 = extractelement <4 x float> %145, i64 1, !dbg !40
  %334 = fsub float %333, %326, !dbg !40
  %335 = extractelement <4 x float> %145, i64 2, !dbg !40
  %336 = fsub float %335, %327, !dbg !40
  %337 = extractelement <4 x float> %145, i64 3, !dbg !40
  %338 = fsub float %337, %328, !dbg !40
  %339 = extractelement <4 x float> %150, i64 0, !dbg !40
  %340 = fsub float %339, %325, !dbg !40
  %341 = extractelement <4 x float> %150, i64 1, !dbg !40
  %342 = fsub float %341, %326, !dbg !40
  %343 = extractelement <4 x float> %150, i64 2, !dbg !40
  %344 = fsub float %343, %327, !dbg !40
  %345 = extractelement <4 x float> %150, i64 3, !dbg !40
  %346 = fsub float %345, %328, !dbg !40
  %347 = fmul float %332, 0x3FF7154760000000, !dbg !41
  %348 = tail call float @llvm.nvvm.ex2.approx.f(float %347), !dbg !41
  %349 = fmul float %334, 0x3FF7154760000000, !dbg !41
  %350 = tail call float @llvm.nvvm.ex2.approx.f(float %349), !dbg !41
  %351 = fmul float %336, 0x3FF7154760000000, !dbg !41
  %352 = tail call float @llvm.nvvm.ex2.approx.f(float %351), !dbg !41
  %353 = fmul float %338, 0x3FF7154760000000, !dbg !41
  %354 = tail call float @llvm.nvvm.ex2.approx.f(float %353), !dbg !41
  %355 = fmul float %340, 0x3FF7154760000000, !dbg !41
  %356 = tail call float @llvm.nvvm.ex2.approx.f(float %355), !dbg !41
  %357 = fmul float %342, 0x3FF7154760000000, !dbg !41
  %358 = tail call float @llvm.nvvm.ex2.approx.f(float %357), !dbg !41
  %359 = fmul float %344, 0x3FF7154760000000, !dbg !41
  %360 = tail call float @llvm.nvvm.ex2.approx.f(float %359), !dbg !41
  %361 = fmul float %346, 0x3FF7154760000000, !dbg !41
  %362 = tail call float @llvm.nvvm.ex2.approx.f(float %361), !dbg !41
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %363 = fadd float %348, %356, !dbg !46
  %364 = select i1 %36, float %363, float 0.000000e+00, !dbg !46
  %365 = fadd float %350, %358, !dbg !46
  %366 = select i1 %36, float %365, float 0.000000e+00, !dbg !46
  %367 = fadd float %352, %360, !dbg !46
  %368 = select i1 %36, float %367, float 0.000000e+00, !dbg !46
  %369 = fadd float %354, %362, !dbg !46
  %370 = select i1 %36, float %369, float 0.000000e+00, !dbg !46
  %371 = bitcast float %364 to i32, !dbg !42
  %372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %371, i32 16, i32 31), !dbg !42
  %373 = bitcast i32 %372 to float, !dbg !42
  %374 = fadd float %364, %373, !dbg !46
  %375 = bitcast float %374 to i32, !dbg !42
  %376 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %375, i32 8, i32 31), !dbg !42
  %377 = bitcast i32 %376 to float, !dbg !42
  %378 = fadd float %374, %377, !dbg !46
  %379 = bitcast float %378 to i32, !dbg !42
  %380 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %379, i32 4, i32 31), !dbg !42
  %381 = bitcast i32 %380 to float, !dbg !42
  %382 = fadd float %378, %381, !dbg !46
  %383 = bitcast float %382 to i32, !dbg !42
  %384 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %383, i32 2, i32 31), !dbg !42
  %385 = bitcast i32 %384 to float, !dbg !42
  %386 = fadd float %382, %385, !dbg !46
  %387 = bitcast float %366 to i32, !dbg !42
  %388 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %387, i32 16, i32 31), !dbg !42
  %389 = bitcast i32 %388 to float, !dbg !42
  %390 = fadd float %366, %389, !dbg !46
  %391 = bitcast float %390 to i32, !dbg !42
  %392 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %391, i32 8, i32 31), !dbg !42
  %393 = bitcast i32 %392 to float, !dbg !42
  %394 = fadd float %390, %393, !dbg !46
  %395 = bitcast float %394 to i32, !dbg !42
  %396 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %395, i32 4, i32 31), !dbg !42
  %397 = bitcast i32 %396 to float, !dbg !42
  %398 = fadd float %394, %397, !dbg !46
  %399 = bitcast float %398 to i32, !dbg !42
  %400 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %399, i32 2, i32 31), !dbg !42
  %401 = bitcast i32 %400 to float, !dbg !42
  %402 = fadd float %398, %401, !dbg !46
  %403 = bitcast float %368 to i32, !dbg !42
  %404 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %403, i32 16, i32 31), !dbg !42
  %405 = bitcast i32 %404 to float, !dbg !42
  %406 = fadd float %368, %405, !dbg !46
  %407 = bitcast float %406 to i32, !dbg !42
  %408 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %407, i32 8, i32 31), !dbg !42
  %409 = bitcast i32 %408 to float, !dbg !42
  %410 = fadd float %406, %409, !dbg !46
  %411 = bitcast float %410 to i32, !dbg !42
  %412 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %411, i32 4, i32 31), !dbg !42
  %413 = bitcast i32 %412 to float, !dbg !42
  %414 = fadd float %410, %413, !dbg !46
  %415 = bitcast float %414 to i32, !dbg !42
  %416 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %415, i32 2, i32 31), !dbg !42
  %417 = bitcast i32 %416 to float, !dbg !42
  %418 = fadd float %414, %417, !dbg !46
  %419 = bitcast float %370 to i32, !dbg !42
  %420 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %419, i32 16, i32 31), !dbg !42
  %421 = bitcast i32 %420 to float, !dbg !42
  %422 = fadd float %370, %421, !dbg !46
  %423 = bitcast float %422 to i32, !dbg !42
  %424 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %423, i32 8, i32 31), !dbg !42
  %425 = bitcast i32 %424 to float, !dbg !42
  %426 = fadd float %422, %425, !dbg !46
  %427 = bitcast float %426 to i32, !dbg !42
  %428 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %427, i32 4, i32 31), !dbg !42
  %429 = bitcast i32 %428 to float, !dbg !42
  %430 = fadd float %426, %429, !dbg !46
  %431 = bitcast float %430 to i32, !dbg !42
  %432 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %431, i32 2, i32 31), !dbg !42
  %433 = bitcast i32 %432 to float, !dbg !42
  %434 = fadd float %430, %433, !dbg !46
  %435 = bitcast float %386 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %291, <1 x i32> %435, i1 %289) #5, !dbg !42
  %436 = bitcast float %402 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %436, i1 %289) #5, !dbg !42
  %437 = bitcast float %418 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %437, i1 %289) #5, !dbg !42
  %438 = bitcast float %434 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %438, i1 %289) #5, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %439 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %313, i1 %312) #5, !dbg !42
  %440 = bitcast i32 %439 to float, !dbg !42
  %441 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %439, i32 1, i32 31), !dbg !42
  %442 = bitcast i32 %441 to float, !dbg !42
  %443 = fadd float %440, %442, !dbg !46
  %444 = bitcast float %443 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %313, <1 x i32> %444, i1 %322) #5, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %445 = load i32, ptr addrspace(3) %290, align 16, !dbg !42
  %446 = load i32, ptr addrspace(3) %296, align 8, !dbg !42
  %447 = load i32, ptr addrspace(3) %302, align 16, !dbg !42
  %448 = load i32, ptr addrspace(3) %308, align 8, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !47
  %449 = insertelement <1 x i32> poison, i32 %445, i64 0, !dbg !47
  store <1 x i32> %449, ptr addrspace(3) %290, align 16, !dbg !47
  %450 = insertelement <1 x i32> poison, i32 %446, i64 0, !dbg !47
  store <1 x i32> %450, ptr addrspace(3) %296, align 8, !dbg !47
  %451 = insertelement <1 x i32> poison, i32 %447, i64 0, !dbg !47
  store <1 x i32> %451, ptr addrspace(3) %302, align 16, !dbg !47
  %452 = insertelement <1 x i32> poison, i32 %448, i64 0, !dbg !47
  store <1 x i32> %452, ptr addrspace(3) %308, align 8, !dbg !47
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !47
  %453 = load i32, ptr addrspace(3) %329, align 8, !dbg !47
  %454 = shl nuw nsw i32 %21, 6, !dbg !48
  %455 = add nuw i32 %454, %23, !dbg !49
  %456 = sext i32 %455 to i64, !dbg !50
  %457 = getelementptr float, ptr addrspace(1) %2, i64 %456, !dbg !50
  %458 = and i32 %11, 56, !dbg !51
  %459 = or i32 %458, %9, !dbg !51
  %460 = icmp eq i32 %459, 0, !dbg !51
  %461 = and i1 %24, %460, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %330, ptr addrspace(1) %457, i1 %461) #5, !dbg !51
  %462 = getelementptr float, ptr addrspace(1) %3, i64 %456, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %453, ptr addrspace(1) %462, i1 %461) #5, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

attributes #0 = { "nvvm.reqntid"="64" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "claemv32fqlvujzqgcxvvvdmn3ith7s5dli5nr6leneidikarcqt.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/la")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "triton_per_fused_add_2", linkageName: "triton_per_fused_add_2", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 25, column: 28, scope: !5)
!9 = !DILocation(line: 25, column: 33, scope: !5)
!10 = !DILocation(line: 26, column: 44, scope: !5)
!11 = !DILocation(line: 26, column: 23, scope: !5)
!12 = !DILocation(line: 27, column: 21, scope: !5)
!13 = !DILocation(line: 28, column: 28, scope: !5)
!14 = !DILocation(line: 30, column: 21, scope: !5)
!15 = !DILocation(line: 31, column: 38, scope: !5)
!16 = !DILocation(line: 39, column: 40, scope: !5)
!17 = !DILocation(line: 39, column: 37, scope: !5)
!18 = !DILocation(line: 39, column: 50, scope: !5)
!19 = !DILocation(line: 39, column: 45, scope: !5)
!20 = !DILocation(line: 39, column: 30, scope: !5)
!21 = !DILocation(line: 39, column: 63, scope: !5)
!22 = !DILocation(line: 39, column: 55, scope: !5)
!23 = !DILocation(line: 40, column: 37, scope: !5)
!24 = !DILocation(line: 40, column: 48, scope: !5)
!25 = !DILocation(line: 40, column: 35, scope: !5)
!26 = !DILocation(line: 40, column: 44, scope: !5)
!27 = !DILocation(line: 40, column: 30, scope: !5)
!28 = !DILocation(line: 40, column: 53, scope: !5)
!29 = !DILocation(line: 41, column: 18, scope: !5)
!30 = !DILocation(line: 44, column: 41, scope: !5)
!31 = !DILocation(line: 124, column: 29, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !5, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 45, column: 37, scope: !5)
!35 = !DILocation(line: 114, column: 29, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 113, column: 21, scope: !32, inlinedAt: !34)
!37 = !DILocation(line: 111, column: 15, scope: !32, inlinedAt: !34)
!38 = !DILocation(line: 113, column: 16, scope: !32, inlinedAt: !34)
!39 = !DILocation(line: 45, column: 40, scope: !5)
!40 = !DILocation(line: 46, column: 18, scope: !5)
!41 = !DILocation(line: 47, column: 24, scope: !5)
!42 = !DILocation(line: 290, column: 36, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !5, file: !44, discriminator: 0)
!44 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!45 = !DILocation(line: 50, column: 26, scope: !5)
!46 = !DILocation(line: 260, column: 15, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 50, column: 29, scope: !5)
!48 = !DILocation(line: 51, column: 33, scope: !5)
!49 = !DILocation(line: 51, column: 30, scope: !5)
!50 = !DILocation(line: 51, column: 25, scope: !5)
!51 = !DILocation(line: 51, column: 44, scope: !5)
!52 = !DILocation(line: 52, column: 25, scope: !5)
!53 = !DILocation(line: 52, column: 45, scope: !5)
!54 = !DILocation(line: 52, column: 4, scope: !5)
