; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_poi_fused__softmax_add_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr #0 !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.z(), !dbg !8
  %10 = shl nuw nsw i32 %9, 3, !dbg !9
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %12 = lshr i32 %11, 3, !dbg !10
  %13 = and i32 %12, 3, !dbg !10
  %14 = lshr i32 %11, 3, !dbg !10
  %15 = and i32 %14, 4, !dbg !10
  %16 = and i32 %11, 1, !dbg !10
  %17 = shl nuw nsw i32 %16, 2, !dbg !10
  %18 = or disjoint i32 %10, %13, !dbg !11
  %19 = or disjoint i32 %18, %15, !dbg !11
  %20 = or disjoint i32 %17, %10, !dbg !11
  %21 = icmp eq i32 %9, 0, !dbg !12
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !13
  %23 = shl nuw nsw i32 %22, 4, !dbg !14
  %24 = and i32 %11, 128, !dbg !15
  %.lobit13 = lshr i32 %11, 6, !dbg !15
  %25 = and i32 %.lobit13, 3, !dbg !15
  %26 = lshr i32 %11, 1, !dbg !15
  %27 = and i32 %26, 15, !dbg !15
  %28 = or disjoint i32 %25, %23, !dbg !16
  %29 = or disjoint i32 %.lobit13, %23, !dbg !16
  %30 = or disjoint i32 %27, %23, !dbg !16
  %31 = icmp samesign ult i32 %22, 4, !dbg !17
  %32 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !18
  %33 = shl i32 %32, 5, !dbg !19
  %34 = shl nuw nsw i32 %11, 2, !dbg !20
  %35 = and i32 %34, 28, !dbg !20
  %36 = lshr i32 %11, 5, !dbg !20
  %37 = and i32 %36, 7, !dbg !20
  %38 = or disjoint i32 %35, %33, !dbg !21
  %39 = or disjoint i32 %37, %33, !dbg !21
  %40 = or disjoint i32 %39, 8, !dbg !21
  %41 = or disjoint i32 %39, 16, !dbg !21
  %42 = or disjoint i32 %39, 24, !dbg !21
  %43 = icmp slt i32 %38, 64, !dbg !22
  %44 = icmp slt i32 %39, 64, !dbg !22
  %45 = icmp slt i32 %40, 64, !dbg !22
  %46 = icmp slt i32 %41, 64, !dbg !22
  %47 = icmp slt i32 %42, 64, !dbg !22
  %48 = shl nuw nsw i32 %28, 6, !dbg !23
  %49 = or disjoint i32 %48, 256, !dbg !23
  %50 = or disjoint i32 %48, 512, !dbg !23
  %51 = shl nuw nsw i32 %29, 6, !dbg !23
  %52 = or i32 %51, 768, !dbg !23
  %53 = shl nuw nsw i32 %19, 12, !dbg !24
  %54 = add i32 %53, %38, !dbg !25
  %55 = add i32 %54, %48, !dbg !26
  %56 = add i32 %54, %49, !dbg !26
  %57 = add i32 %54, %50, !dbg !26
  %58 = add i32 %54, %52, !dbg !26
  %59 = sext i32 %55 to i64, !dbg !27
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !27
  %61 = sext i32 %56 to i64, !dbg !27
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !27
  %63 = sext i32 %57 to i64, !dbg !27
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !27
  %65 = sext i32 %58 to i64, !dbg !27
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !27
  %67 = and i1 %31, %43, !dbg !28
  %68 = and i1 %31, %44, !dbg !28
  %69 = and i1 %31, %45, !dbg !28
  %70 = and i1 %31, %46, !dbg !28
  %71 = and i1 %31, %47, !dbg !28
  %72 = and i1 %21, %67, !dbg !29
  %73 = and i1 %21, %68, !dbg !29
  %74 = and i1 %21, %69, !dbg !29
  %75 = and i1 %21, %70, !dbg !29
  %76 = and i1 %21, %71, !dbg !29
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !30
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$6 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l,b"(ptr addrspace(1) %60, i64 %77, i1 %72) #4, !dbg !30
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !30
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !30
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !30
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !30
  %83 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !30
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$6 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l,b"(ptr addrspace(1) %62, i64 %83, i1 %72) #4, !dbg !30
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !30
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !30
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !30
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !30
  %89 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !30
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$6 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l,b"(ptr addrspace(1) %64, i64 %89, i1 %72) #4, !dbg !30
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !30
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !30
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !30
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !30
  %95 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !30
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$6 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l,b"(ptr addrspace(1) %66, i64 %95, i1 %72) #4, !dbg !30
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !30
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !30
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !30
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !30
  %101 = shl nuw nsw i32 %11, 5, !dbg !30
  %102 = and i32 %101, 224, !dbg !30
  %103 = shl nuw nsw i32 %11, 2, !dbg !30
  %104 = and i32 %103, 256, !dbg !30
  %105 = or disjoint i32 %102, %104, !dbg !30
  %106 = shl nuw nsw i32 %24, 2, !dbg !30
  %107 = or disjoint i32 %105, %106, !dbg !30
  %108 = or disjoint i32 %107, %13, !dbg !30
  %109 = or disjoint i32 %108, %15, !dbg !30
  %110 = shl nuw nsw i32 %11, 7, !dbg !30
  %111 = and i32 %110, 3840, !dbg !30
  %112 = lshr i32 %11, 2, !dbg !30
  %113 = and i32 %112, 24, !dbg !30
  %114 = or disjoint i32 %113, %111, !dbg !30
  %115 = lshr exact i32 %24, 2, !dbg !30
  %116 = or disjoint i32 %114, %115, !dbg !30
  %117 = or disjoint i32 %116, %17, !dbg !30
  %118 = lshr exact i32 %107, 1, !dbg !30
  %119 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %118, !dbg !30
  %120 = getelementptr inbounds nuw float, ptr addrspace(3) %119, i32 %109, !dbg !30
  %121 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !30
  store <1 x i32> %121, ptr addrspace(3) %120, align 4, !dbg !30
  %122 = or disjoint i32 %109, 8, !dbg !30
  %123 = lshr i32 %122, 3, !dbg !30
  %124 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %123, !dbg !30
  %125 = getelementptr inbounds nuw float, ptr addrspace(3) %124, i32 %122, !dbg !30
  %126 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !30
  store <1 x i32> %126, ptr addrspace(3) %125, align 4, !dbg !30
  %127 = or disjoint i32 %109, 16, !dbg !30
  %128 = lshr i32 %127, 3, !dbg !30
  %129 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %128, !dbg !30
  %130 = getelementptr inbounds nuw float, ptr addrspace(3) %129, i32 %127, !dbg !30
  %131 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !30
  store <1 x i32> %131, ptr addrspace(3) %130, align 4, !dbg !30
  %132 = or disjoint i32 %109, 24, !dbg !30
  %133 = lshr i32 %132, 3, !dbg !30
  %134 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %133, !dbg !30
  %135 = getelementptr inbounds nuw float, ptr addrspace(3) %134, i32 %132, !dbg !30
  %136 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !30
  store <1 x i32> %136, ptr addrspace(3) %135, align 4, !dbg !30
  %137 = or disjoint i32 %109, 1024, !dbg !30
  %138 = lshr i32 %137, 3, !dbg !30
  %139 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %138, !dbg !30
  %140 = getelementptr inbounds nuw float, ptr addrspace(3) %139, i32 %137, !dbg !30
  %141 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !30
  store <1 x i32> %141, ptr addrspace(3) %140, align 4, !dbg !30
  %142 = or disjoint i32 %109, 1032, !dbg !30
  %143 = lshr i32 %142, 3, !dbg !30
  %144 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %143, !dbg !30
  %145 = getelementptr inbounds nuw float, ptr addrspace(3) %144, i32 %142, !dbg !30
  %146 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !30
  store <1 x i32> %146, ptr addrspace(3) %145, align 4, !dbg !30
  %147 = or disjoint i32 %109, 1040, !dbg !30
  %148 = lshr i32 %147, 3, !dbg !30
  %149 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %148, !dbg !30
  %150 = getelementptr inbounds nuw float, ptr addrspace(3) %149, i32 %147, !dbg !30
  %151 = insertelement <1 x i32> poison, i32 %87, i64 0, !dbg !30
  store <1 x i32> %151, ptr addrspace(3) %150, align 4, !dbg !30
  %152 = or disjoint i32 %109, 1048, !dbg !30
  %153 = lshr i32 %152, 3, !dbg !30
  %154 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %153, !dbg !30
  %155 = getelementptr inbounds nuw float, ptr addrspace(3) %154, i32 %152, !dbg !30
  %156 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !30
  store <1 x i32> %156, ptr addrspace(3) %155, align 4, !dbg !30
  %157 = or disjoint i32 %109, 2048, !dbg !30
  %158 = lshr i32 %157, 3, !dbg !30
  %159 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %158, !dbg !30
  %160 = getelementptr inbounds nuw float, ptr addrspace(3) %159, i32 %157, !dbg !30
  %161 = insertelement <1 x i32> poison, i32 %91, i64 0, !dbg !30
  store <1 x i32> %161, ptr addrspace(3) %160, align 4, !dbg !30
  %162 = or disjoint i32 %109, 2056, !dbg !30
  %163 = lshr i32 %162, 3, !dbg !30
  %164 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %163, !dbg !30
  %165 = getelementptr inbounds nuw float, ptr addrspace(3) %164, i32 %162, !dbg !30
  %166 = insertelement <1 x i32> poison, i32 %92, i64 0, !dbg !30
  store <1 x i32> %166, ptr addrspace(3) %165, align 4, !dbg !30
  %167 = or disjoint i32 %109, 2064, !dbg !30
  %168 = lshr i32 %167, 3, !dbg !30
  %169 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %168, !dbg !30
  %170 = getelementptr inbounds nuw float, ptr addrspace(3) %169, i32 %167, !dbg !30
  %171 = insertelement <1 x i32> poison, i32 %93, i64 0, !dbg !30
  store <1 x i32> %171, ptr addrspace(3) %170, align 4, !dbg !30
  %172 = or disjoint i32 %109, 2072, !dbg !30
  %173 = lshr i32 %172, 3, !dbg !30
  %174 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %173, !dbg !30
  %175 = getelementptr inbounds nuw float, ptr addrspace(3) %174, i32 %172, !dbg !30
  %176 = insertelement <1 x i32> poison, i32 %94, i64 0, !dbg !30
  store <1 x i32> %176, ptr addrspace(3) %175, align 4, !dbg !30
  %177 = or disjoint i32 %109, 3072, !dbg !30
  %178 = lshr i32 %177, 3, !dbg !30
  %179 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %178, !dbg !30
  %180 = getelementptr inbounds nuw float, ptr addrspace(3) %179, i32 %177, !dbg !30
  %181 = insertelement <1 x i32> poison, i32 %97, i64 0, !dbg !30
  store <1 x i32> %181, ptr addrspace(3) %180, align 4, !dbg !30
  %182 = or disjoint i32 %109, 3080, !dbg !30
  %183 = lshr i32 %182, 3, !dbg !30
  %184 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %183, !dbg !30
  %185 = getelementptr inbounds nuw float, ptr addrspace(3) %184, i32 %182, !dbg !30
  %186 = insertelement <1 x i32> poison, i32 %98, i64 0, !dbg !30
  store <1 x i32> %186, ptr addrspace(3) %185, align 4, !dbg !30
  %187 = or disjoint i32 %109, 3088, !dbg !30
  %188 = lshr i32 %187, 3, !dbg !30
  %189 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %188, !dbg !30
  %190 = getelementptr inbounds nuw float, ptr addrspace(3) %189, i32 %187, !dbg !30
  %191 = insertelement <1 x i32> poison, i32 %99, i64 0, !dbg !30
  store <1 x i32> %191, ptr addrspace(3) %190, align 4, !dbg !30
  %192 = or disjoint i32 %109, 3096, !dbg !30
  %193 = lshr i32 %192, 3, !dbg !30
  %194 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %193, !dbg !30
  %195 = getelementptr inbounds nuw float, ptr addrspace(3) %194, i32 %192, !dbg !30
  %196 = insertelement <1 x i32> poison, i32 %100, i64 0, !dbg !30
  store <1 x i32> %196, ptr addrspace(3) %195, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  %197 = lshr exact i32 %116, 1, !dbg !30
  %198 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %197, !dbg !30
  %199 = getelementptr inbounds nuw float, ptr addrspace(3) %198, i32 %117, !dbg !30
  %200 = load float, ptr addrspace(3) %199, align 4, !dbg !30
  %201 = getelementptr inbounds nuw i8, ptr addrspace(3) %199, i32 4, !dbg !30
  %202 = load float, ptr addrspace(3) %201, align 4, !dbg !30
  %203 = getelementptr inbounds nuw i8, ptr addrspace(3) %199, i32 8, !dbg !30
  %204 = load float, ptr addrspace(3) %203, align 4, !dbg !30
  %205 = getelementptr inbounds nuw i8, ptr addrspace(3) %199, i32 12, !dbg !30
  %206 = load float, ptr addrspace(3) %205, align 4, !dbg !30
  %207 = or disjoint i32 %117, 64, !dbg !30
  %208 = lshr i32 %207, 3, !dbg !30
  %209 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %208, !dbg !30
  %210 = getelementptr inbounds nuw float, ptr addrspace(3) %209, i32 %207, !dbg !30
  %211 = load float, ptr addrspace(3) %210, align 4, !dbg !30
  %212 = or disjoint i32 %117, 65, !dbg !30
  %213 = lshr i32 %212, 3, !dbg !30
  %214 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %213, !dbg !30
  %215 = getelementptr inbounds nuw float, ptr addrspace(3) %214, i32 %212, !dbg !30
  %216 = load float, ptr addrspace(3) %215, align 4, !dbg !30
  %217 = or disjoint i32 %117, 66, !dbg !30
  %218 = lshr i32 %217, 3, !dbg !30
  %219 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %218, !dbg !30
  %220 = getelementptr inbounds nuw float, ptr addrspace(3) %219, i32 %217, !dbg !30
  %221 = load float, ptr addrspace(3) %220, align 4, !dbg !30
  %222 = or disjoint i32 %117, 67, !dbg !30
  %223 = lshr i32 %222, 3, !dbg !30
  %224 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %223, !dbg !30
  %225 = getelementptr inbounds nuw float, ptr addrspace(3) %224, i32 %222, !dbg !30
  %226 = load float, ptr addrspace(3) %225, align 4, !dbg !30
  %227 = or disjoint i32 %117, 128, !dbg !30
  %228 = lshr i32 %227, 3, !dbg !30
  %229 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %228, !dbg !30
  %230 = getelementptr inbounds nuw float, ptr addrspace(3) %229, i32 %227, !dbg !30
  %231 = load float, ptr addrspace(3) %230, align 4, !dbg !30
  %232 = or disjoint i32 %117, 129, !dbg !30
  %233 = lshr i32 %232, 3, !dbg !30
  %234 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %233, !dbg !30
  %235 = getelementptr inbounds nuw float, ptr addrspace(3) %234, i32 %232, !dbg !30
  %236 = load float, ptr addrspace(3) %235, align 4, !dbg !30
  %237 = or disjoint i32 %117, 130, !dbg !30
  %238 = lshr i32 %237, 3, !dbg !30
  %239 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %238, !dbg !30
  %240 = getelementptr inbounds nuw float, ptr addrspace(3) %239, i32 %237, !dbg !30
  %241 = load float, ptr addrspace(3) %240, align 4, !dbg !30
  %242 = or disjoint i32 %117, 131, !dbg !30
  %243 = lshr i32 %242, 3, !dbg !30
  %244 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %243, !dbg !30
  %245 = getelementptr inbounds nuw float, ptr addrspace(3) %244, i32 %242, !dbg !30
  %246 = load float, ptr addrspace(3) %245, align 4, !dbg !30
  %247 = or disjoint i32 %117, 192, !dbg !30
  %248 = lshr i32 %247, 3, !dbg !30
  %249 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %248, !dbg !30
  %250 = getelementptr inbounds nuw float, ptr addrspace(3) %249, i32 %247, !dbg !30
  %251 = load float, ptr addrspace(3) %250, align 4, !dbg !30
  %252 = or disjoint i32 %117, 193, !dbg !30
  %253 = lshr i32 %252, 3, !dbg !30
  %254 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %253, !dbg !30
  %255 = getelementptr inbounds nuw float, ptr addrspace(3) %254, i32 %252, !dbg !30
  %256 = load float, ptr addrspace(3) %255, align 4, !dbg !30
  %257 = or disjoint i32 %117, 194, !dbg !30
  %258 = lshr i32 %257, 3, !dbg !30
  %259 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %258, !dbg !30
  %260 = getelementptr inbounds nuw float, ptr addrspace(3) %259, i32 %257, !dbg !30
  %261 = load float, ptr addrspace(3) %260, align 4, !dbg !30
  %262 = or disjoint i32 %117, 195, !dbg !30
  %263 = lshr i32 %262, 3, !dbg !30
  %264 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %263, !dbg !30
  %265 = getelementptr inbounds nuw float, ptr addrspace(3) %264, i32 %262, !dbg !30
  %266 = load float, ptr addrspace(3) %265, align 4, !dbg !30
  %267 = shl i32 %39, 3, !dbg !31
  %268 = shl i32 %40, 3, !dbg !31
  %269 = shl i32 %41, 3, !dbg !31
  %270 = shl i32 %42, 3, !dbg !31
  %271 = shl nuw nsw i32 %30, 9, !dbg !32
  %272 = add nuw nsw i32 %271, %20, !dbg !33
  %273 = add i32 %272, %267, !dbg !34
  %274 = add i32 %272, %268, !dbg !34
  %275 = add i32 %272, %269, !dbg !34
  %276 = add i32 %272, %270, !dbg !34
  %277 = sext i32 %273 to i64, !dbg !35
  %278 = getelementptr float, ptr addrspace(1) %1, i64 %277, !dbg !35
  %279 = sext i32 %274 to i64, !dbg !35
  %280 = getelementptr float, ptr addrspace(1) %1, i64 %279, !dbg !35
  %281 = sext i32 %275 to i64, !dbg !35
  %282 = getelementptr float, ptr addrspace(1) %1, i64 %281, !dbg !35
  %283 = sext i32 %276 to i64, !dbg !35
  %284 = getelementptr float, ptr addrspace(1) %1, i64 %283, !dbg !35
  %285 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !36
  %286 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$6 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l,b"(ptr addrspace(1) %278, i64 %285, i1 %73) #4, !dbg !36
  %287 = extractvalue { i32, i32, i32, i32 } %286, 0, !dbg !36
  %288 = extractvalue { i32, i32, i32, i32 } %286, 1, !dbg !36
  %289 = extractvalue { i32, i32, i32, i32 } %286, 2, !dbg !36
  %290 = extractvalue { i32, i32, i32, i32 } %286, 3, !dbg !36
  %291 = bitcast i32 %287 to float, !dbg !36
  %292 = bitcast i32 %288 to float, !dbg !36
  %293 = bitcast i32 %289 to float, !dbg !36
  %294 = bitcast i32 %290 to float, !dbg !36
  %295 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !36
  %296 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$6 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l,b"(ptr addrspace(1) %280, i64 %295, i1 %74) #4, !dbg !36
  %297 = extractvalue { i32, i32, i32, i32 } %296, 0, !dbg !36
  %298 = extractvalue { i32, i32, i32, i32 } %296, 1, !dbg !36
  %299 = extractvalue { i32, i32, i32, i32 } %296, 2, !dbg !36
  %300 = extractvalue { i32, i32, i32, i32 } %296, 3, !dbg !36
  %301 = bitcast i32 %297 to float, !dbg !36
  %302 = bitcast i32 %298 to float, !dbg !36
  %303 = bitcast i32 %299 to float, !dbg !36
  %304 = bitcast i32 %300 to float, !dbg !36
  %305 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !36
  %306 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$6 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l,b"(ptr addrspace(1) %282, i64 %305, i1 %75) #4, !dbg !36
  %307 = extractvalue { i32, i32, i32, i32 } %306, 0, !dbg !36
  %308 = extractvalue { i32, i32, i32, i32 } %306, 1, !dbg !36
  %309 = extractvalue { i32, i32, i32, i32 } %306, 2, !dbg !36
  %310 = extractvalue { i32, i32, i32, i32 } %306, 3, !dbg !36
  %311 = bitcast i32 %307 to float, !dbg !36
  %312 = bitcast i32 %308 to float, !dbg !36
  %313 = bitcast i32 %309 to float, !dbg !36
  %314 = bitcast i32 %310 to float, !dbg !36
  %315 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !36
  %316 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$6 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l,b"(ptr addrspace(1) %284, i64 %315, i1 %76) #4, !dbg !36
  %317 = extractvalue { i32, i32, i32, i32 } %316, 0, !dbg !36
  %318 = extractvalue { i32, i32, i32, i32 } %316, 1, !dbg !36
  %319 = extractvalue { i32, i32, i32, i32 } %316, 2, !dbg !36
  %320 = extractvalue { i32, i32, i32, i32 } %316, 3, !dbg !36
  %321 = bitcast i32 %317 to float, !dbg !36
  %322 = bitcast i32 %318 to float, !dbg !36
  %323 = bitcast i32 %319 to float, !dbg !36
  %324 = bitcast i32 %320 to float, !dbg !36
  %325 = shl nuw nsw i32 %20, 6, !dbg !37
  %326 = or disjoint i32 %325, 64, !dbg !37
  %327 = or disjoint i32 %325, 128, !dbg !37
  %328 = or disjoint i32 %325, 192, !dbg !37
  %329 = add nuw nsw i32 %325, %30, !dbg !38
  %330 = add nuw nsw i32 %326, %30, !dbg !38
  %331 = add nuw nsw i32 %327, %30, !dbg !38
  %332 = add nuw nsw i32 %328, %30, !dbg !38
  %333 = zext nneg i32 %329 to i64, !dbg !39
  %334 = getelementptr float, ptr addrspace(1) %2, i64 %333, !dbg !39
  %335 = zext nneg i32 %330 to i64, !dbg !39
  %336 = getelementptr float, ptr addrspace(1) %2, i64 %335, !dbg !39
  %337 = zext nneg i32 %331 to i64, !dbg !39
  %338 = getelementptr float, ptr addrspace(1) %2, i64 %337, !dbg !39
  %339 = zext nneg i32 %332 to i64, !dbg !39
  %340 = getelementptr float, ptr addrspace(1) %2, i64 %339, !dbg !39
  %341 = and i1 %31, %21, !dbg !40
  %342 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !41
  %343 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %334, i64 %342, i1 %341) #4, !dbg !41
  %344 = bitcast i32 %343 to float, !dbg !41
  %345 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !41
  %346 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %336, i64 %345, i1 %341) #4, !dbg !41
  %347 = bitcast i32 %346 to float, !dbg !41
  %348 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !41
  %349 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %338, i64 %348, i1 %341) #4, !dbg !41
  %350 = bitcast i32 %349 to float, !dbg !41
  %351 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !41
  %352 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %340, i64 %351, i1 %341) #4, !dbg !41
  %353 = bitcast i32 %352 to float, !dbg !41
  %354 = getelementptr float, ptr addrspace(1) %3, i64 %333, !dbg !42
  %355 = getelementptr float, ptr addrspace(1) %3, i64 %335, !dbg !42
  %356 = getelementptr float, ptr addrspace(1) %3, i64 %337, !dbg !42
  %357 = getelementptr float, ptr addrspace(1) %3, i64 %339, !dbg !42
  %358 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !43
  %359 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %354, i64 %358, i1 %341) #4, !dbg !43
  %360 = bitcast i32 %359 to float, !dbg !43
  %361 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !43
  %362 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %355, i64 %361, i1 %341) #4, !dbg !43
  %363 = bitcast i32 %362 to float, !dbg !43
  %364 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !43
  %365 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %356, i64 %364, i1 %341) #4, !dbg !43
  %366 = bitcast i32 %365 to float, !dbg !43
  %367 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !43
  %368 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %357, i64 %367, i1 %341) #4, !dbg !43
  %369 = bitcast i32 %368 to float, !dbg !43
  %370 = fadd float %200, %291, !dbg !44
  %371 = fadd float %202, %292, !dbg !44
  %372 = fadd float %204, %293, !dbg !44
  %373 = fadd float %206, %294, !dbg !44
  %374 = fadd float %211, %301, !dbg !44
  %375 = fadd float %216, %302, !dbg !44
  %376 = fadd float %221, %303, !dbg !44
  %377 = fadd float %226, %304, !dbg !44
  %378 = fadd float %231, %311, !dbg !44
  %379 = fadd float %236, %312, !dbg !44
  %380 = fadd float %241, %313, !dbg !44
  %381 = fadd float %246, %314, !dbg !44
  %382 = fadd float %251, %321, !dbg !44
  %383 = fadd float %256, %322, !dbg !44
  %384 = fadd float %261, %323, !dbg !44
  %385 = fadd float %266, %324, !dbg !44
  %386 = fsub float %370, %344, !dbg !45
  %387 = fsub float %371, %347, !dbg !45
  %388 = fsub float %372, %350, !dbg !45
  %389 = fsub float %373, %353, !dbg !45
  %390 = fsub float %374, %344, !dbg !45
  %391 = fsub float %375, %347, !dbg !45
  %392 = fsub float %376, %350, !dbg !45
  %393 = fsub float %377, %353, !dbg !45
  %394 = fsub float %378, %344, !dbg !45
  %395 = fsub float %379, %347, !dbg !45
  %396 = fsub float %380, %350, !dbg !45
  %397 = fsub float %381, %353, !dbg !45
  %398 = fsub float %382, %344, !dbg !45
  %399 = fsub float %383, %347, !dbg !45
  %400 = fsub float %384, %350, !dbg !45
  %401 = fsub float %385, %353, !dbg !45
  %402 = fmul float %386, 0x3FF7154760000000, !dbg !46
  %403 = tail call float @llvm.nvvm.ex2.approx.f(float %402), !dbg !46
  %404 = fmul float %387, 0x3FF7154760000000, !dbg !46
  %405 = tail call float @llvm.nvvm.ex2.approx.f(float %404), !dbg !46
  %406 = fmul float %388, 0x3FF7154760000000, !dbg !46
  %407 = tail call float @llvm.nvvm.ex2.approx.f(float %406), !dbg !46
  %408 = fmul float %389, 0x3FF7154760000000, !dbg !46
  %409 = tail call float @llvm.nvvm.ex2.approx.f(float %408), !dbg !46
  %410 = fmul float %390, 0x3FF7154760000000, !dbg !46
  %411 = tail call float @llvm.nvvm.ex2.approx.f(float %410), !dbg !46
  %412 = fmul float %391, 0x3FF7154760000000, !dbg !46
  %413 = tail call float @llvm.nvvm.ex2.approx.f(float %412), !dbg !46
  %414 = fmul float %392, 0x3FF7154760000000, !dbg !46
  %415 = tail call float @llvm.nvvm.ex2.approx.f(float %414), !dbg !46
  %416 = fmul float %393, 0x3FF7154760000000, !dbg !46
  %417 = tail call float @llvm.nvvm.ex2.approx.f(float %416), !dbg !46
  %418 = fmul float %394, 0x3FF7154760000000, !dbg !46
  %419 = tail call float @llvm.nvvm.ex2.approx.f(float %418), !dbg !46
  %420 = fmul float %395, 0x3FF7154760000000, !dbg !46
  %421 = tail call float @llvm.nvvm.ex2.approx.f(float %420), !dbg !46
  %422 = fmul float %396, 0x3FF7154760000000, !dbg !46
  %423 = tail call float @llvm.nvvm.ex2.approx.f(float %422), !dbg !46
  %424 = fmul float %397, 0x3FF7154760000000, !dbg !46
  %425 = tail call float @llvm.nvvm.ex2.approx.f(float %424), !dbg !46
  %426 = fmul float %398, 0x3FF7154760000000, !dbg !46
  %427 = tail call float @llvm.nvvm.ex2.approx.f(float %426), !dbg !46
  %428 = fmul float %399, 0x3FF7154760000000, !dbg !46
  %429 = tail call float @llvm.nvvm.ex2.approx.f(float %428), !dbg !46
  %430 = fmul float %400, 0x3FF7154760000000, !dbg !46
  %431 = tail call float @llvm.nvvm.ex2.approx.f(float %430), !dbg !46
  %432 = fmul float %401, 0x3FF7154760000000, !dbg !46
  %433 = tail call float @llvm.nvvm.ex2.approx.f(float %432), !dbg !46
  %434 = tail call float @llvm.nvvm.div.full(float %403, float %360), !dbg !47
  %435 = tail call float @llvm.nvvm.div.full(float %405, float %363), !dbg !47
  %436 = tail call float @llvm.nvvm.div.full(float %407, float %366), !dbg !47
  %437 = tail call float @llvm.nvvm.div.full(float %409, float %369), !dbg !47
  %438 = tail call float @llvm.nvvm.div.full(float %411, float %360), !dbg !47
  %439 = tail call float @llvm.nvvm.div.full(float %413, float %363), !dbg !47
  %440 = tail call float @llvm.nvvm.div.full(float %415, float %366), !dbg !47
  %441 = tail call float @llvm.nvvm.div.full(float %417, float %369), !dbg !47
  %442 = tail call float @llvm.nvvm.div.full(float %419, float %360), !dbg !47
  %443 = tail call float @llvm.nvvm.div.full(float %421, float %363), !dbg !47
  %444 = tail call float @llvm.nvvm.div.full(float %423, float %366), !dbg !47
  %445 = tail call float @llvm.nvvm.div.full(float %425, float %369), !dbg !47
  %446 = tail call float @llvm.nvvm.div.full(float %427, float %360), !dbg !47
  %447 = tail call float @llvm.nvvm.div.full(float %429, float %363), !dbg !47
  %448 = tail call float @llvm.nvvm.div.full(float %431, float %366), !dbg !47
  %449 = tail call float @llvm.nvvm.div.full(float %433, float %369), !dbg !47
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !48
  %450 = shl nuw nsw i32 %16, 11, !dbg !49
  %451 = shl nuw nsw i32 %11, 4, !dbg !49
  %452 = and i32 %451, 480, !dbg !49
  %453 = or disjoint i32 %450, %452, !dbg !49
  %454 = or disjoint i32 %37, %453, !dbg !49
  %455 = shl nuw nsw i32 %11, 6, !dbg !49
  %456 = and i32 %455, 3584, !dbg !49
  %457 = and i32 %26, 96, !dbg !49
  %458 = or disjoint i32 %457, %456, !dbg !49
  %459 = or disjoint i32 %458, %35, !dbg !49
  %460 = lshr exact i32 %453, 1, !dbg !49
  %461 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %460, !dbg !49
  %462 = getelementptr inbounds nuw float, ptr addrspace(3) %461, i32 %454, !dbg !49
  store float %434, ptr addrspace(3) %462, align 4, !dbg !49
  %463 = or disjoint i32 %454, 512, !dbg !49
  %464 = lshr i32 %463, 3, !dbg !49
  %465 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %464, !dbg !49
  %466 = getelementptr inbounds nuw float, ptr addrspace(3) %465, i32 %463, !dbg !49
  store float %435, ptr addrspace(3) %466, align 4, !dbg !49
  %467 = or disjoint i32 %454, 1024, !dbg !49
  %468 = lshr i32 %467, 3, !dbg !49
  %469 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %468, !dbg !49
  %470 = getelementptr inbounds nuw float, ptr addrspace(3) %469, i32 %467, !dbg !49
  store float %436, ptr addrspace(3) %470, align 4, !dbg !49
  %471 = or disjoint i32 %454, 1536, !dbg !49
  %472 = lshr i32 %471, 3, !dbg !49
  %473 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %472, !dbg !49
  %474 = getelementptr inbounds nuw float, ptr addrspace(3) %473, i32 %471, !dbg !49
  store float %437, ptr addrspace(3) %474, align 4, !dbg !49
  %475 = getelementptr inbounds nuw i8, ptr addrspace(3) %462, i32 32, !dbg !49
  store float %438, ptr addrspace(3) %475, align 4, !dbg !49
  %476 = or disjoint i32 %454, 520, !dbg !49
  %477 = lshr i32 %476, 3, !dbg !49
  %478 = and i32 %477, 268435324, !dbg !49
  %479 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %478, !dbg !49
  %480 = getelementptr inbounds nuw float, ptr addrspace(3) %479, i32 %476, !dbg !49
  store float %439, ptr addrspace(3) %480, align 4, !dbg !49
  %481 = or disjoint i32 %454, 1032, !dbg !49
  %482 = lshr i32 %481, 3, !dbg !49
  %483 = and i32 %482, 268435388, !dbg !49
  %484 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %483, !dbg !49
  %485 = getelementptr inbounds nuw float, ptr addrspace(3) %484, i32 %481, !dbg !49
  store float %440, ptr addrspace(3) %485, align 4, !dbg !49
  %486 = or disjoint i32 %454, 1544, !dbg !49
  %487 = lshr i32 %486, 3, !dbg !49
  %488 = and i32 %487, 268435452, !dbg !49
  %489 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %488, !dbg !49
  %490 = getelementptr inbounds nuw float, ptr addrspace(3) %489, i32 %486, !dbg !49
  store float %441, ptr addrspace(3) %490, align 4, !dbg !49
  %491 = getelementptr inbounds nuw i8, ptr addrspace(3) %462, i32 64, !dbg !49
  store float %442, ptr addrspace(3) %491, align 4, !dbg !49
  %492 = or disjoint i32 %454, 528, !dbg !49
  %493 = lshr i32 %492, 3, !dbg !49
  %494 = and i32 %493, 268435324, !dbg !49
  %495 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %494, !dbg !49
  %496 = getelementptr inbounds nuw float, ptr addrspace(3) %495, i32 %492, !dbg !49
  store float %443, ptr addrspace(3) %496, align 4, !dbg !49
  %497 = or disjoint i32 %454, 1040, !dbg !49
  %498 = lshr i32 %497, 3, !dbg !49
  %499 = and i32 %498, 268435388, !dbg !49
  %500 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %499, !dbg !49
  %501 = getelementptr inbounds nuw float, ptr addrspace(3) %500, i32 %497, !dbg !49
  store float %444, ptr addrspace(3) %501, align 4, !dbg !49
  %502 = or disjoint i32 %454, 1552, !dbg !49
  %503 = lshr i32 %502, 3, !dbg !49
  %504 = and i32 %503, 268435452, !dbg !49
  %505 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %504, !dbg !49
  %506 = getelementptr inbounds nuw float, ptr addrspace(3) %505, i32 %502, !dbg !49
  store float %445, ptr addrspace(3) %506, align 4, !dbg !49
  %507 = getelementptr inbounds nuw i8, ptr addrspace(3) %462, i32 96, !dbg !49
  store float %446, ptr addrspace(3) %507, align 4, !dbg !49
  %508 = or disjoint i32 %454, 536, !dbg !49
  %509 = lshr i32 %508, 3, !dbg !49
  %510 = and i32 %509, 268435324, !dbg !49
  %511 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %510, !dbg !49
  %512 = getelementptr inbounds nuw float, ptr addrspace(3) %511, i32 %508, !dbg !49
  store float %447, ptr addrspace(3) %512, align 4, !dbg !49
  %513 = or disjoint i32 %454, 1048, !dbg !49
  %514 = lshr i32 %513, 3, !dbg !49
  %515 = and i32 %514, 268435388, !dbg !49
  %516 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %515, !dbg !49
  %517 = getelementptr inbounds nuw float, ptr addrspace(3) %516, i32 %513, !dbg !49
  store float %448, ptr addrspace(3) %517, align 4, !dbg !49
  %518 = or disjoint i32 %454, 1560, !dbg !49
  %519 = lshr i32 %518, 3, !dbg !49
  %520 = and i32 %519, 268435452, !dbg !49
  %521 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %520, !dbg !49
  %522 = getelementptr inbounds nuw float, ptr addrspace(3) %521, i32 %518, !dbg !49
  store float %449, ptr addrspace(3) %522, align 4, !dbg !49
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !49
  %523 = lshr exact i32 %458, 1, !dbg !49
  %524 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %523, !dbg !49
  %525 = getelementptr inbounds nuw float, ptr addrspace(3) %524, i32 %459, !dbg !49
  %526 = or disjoint i32 %459, 128, !dbg !49
  %527 = lshr i32 %526, 3, !dbg !49
  %528 = and i32 %527, 476, !dbg !49
  %529 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %528, !dbg !49
  %530 = getelementptr inbounds nuw float, ptr addrspace(3) %529, i32 %526, !dbg !49
  %531 = load <4 x i32>, ptr addrspace(3) %530, align 16, !dbg !49
  %532 = or disjoint i32 %459, 256, !dbg !49
  %533 = lshr i32 %532, 3, !dbg !49
  %534 = and i32 %533, 492, !dbg !49
  %535 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %534, !dbg !49
  %536 = getelementptr inbounds nuw float, ptr addrspace(3) %535, i32 %532, !dbg !49
  %537 = load <4 x i32>, ptr addrspace(3) %536, align 16, !dbg !49
  %538 = or disjoint i32 %459, 384, !dbg !49
  %539 = lshr i32 %538, 3, !dbg !49
  %540 = and i32 %539, 508, !dbg !49
  %541 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %540, !dbg !49
  %542 = getelementptr inbounds nuw float, ptr addrspace(3) %541, i32 %538, !dbg !49
  %543 = load <4 x i32>, ptr addrspace(3) %542, align 16, !dbg !49
  %.extract = load i32, ptr addrspace(3) %525, align 16, !dbg !49
  %544 = getelementptr inbounds nuw i8, ptr addrspace(3) %525, i32 4, !dbg !49
  %.extract24 = load i32, ptr addrspace(3) %544, align 4, !dbg !49
  %545 = getelementptr inbounds nuw i8, ptr addrspace(3) %525, i32 8, !dbg !49
  %.extract25 = load i32, ptr addrspace(3) %545, align 8, !dbg !49
  %546 = getelementptr inbounds nuw i8, ptr addrspace(3) %525, i32 12, !dbg !49
  %.extract26 = load i32, ptr addrspace(3) %546, align 4, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %60, i1 %72) #4, !dbg !49
  %.extract27 = extractelement <4 x i32> %531, i64 0, !dbg !49
  %.extract28 = extractelement <4 x i32> %531, i64 1, !dbg !49
  %.extract29 = extractelement <4 x i32> %531, i64 2, !dbg !49
  %.extract30 = extractelement <4 x i32> %531, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %62, i1 %72) #4, !dbg !49
  %.extract31 = extractelement <4 x i32> %537, i64 0, !dbg !49
  %.extract32 = extractelement <4 x i32> %537, i64 1, !dbg !49
  %.extract33 = extractelement <4 x i32> %537, i64 2, !dbg !49
  %.extract34 = extractelement <4 x i32> %537, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %64, i1 %72) #4, !dbg !49
  %.extract35 = extractelement <4 x i32> %543, i64 0, !dbg !49
  %.extract36 = extractelement <4 x i32> %543, i64 1, !dbg !49
  %.extract37 = extractelement <4 x i32> %543, i64 2, !dbg !49
  %.extract38 = extractelement <4 x i32> %543, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract35, i32 %.extract36, i32 %.extract37, i32 %.extract38, ptr addrspace(1) %66, i1 %72) #4, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.z() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { "nvvm.reqntid"="256" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "cbnwmtvai6eyv2vnbx5a5dqsz4avapf4xfblx6js3upepstdpxwj.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/bn")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "triton_poi_fused__softmax_add_3", linkageName: "triton_poi_fused__softmax_add_3", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 22, column: 28, scope: !5)
!9 = !DILocation(line: 22, column: 33, scope: !5)
!10 = !DILocation(line: 23, column: 44, scope: !5)
!11 = !DILocation(line: 23, column: 23, scope: !5)
!12 = !DILocation(line: 24, column: 21, scope: !5)
!13 = !DILocation(line: 25, column: 28, scope: !5)
!14 = !DILocation(line: 25, column: 33, scope: !5)
!15 = !DILocation(line: 26, column: 44, scope: !5)
!16 = !DILocation(line: 26, column: 23, scope: !5)
!17 = !DILocation(line: 27, column: 21, scope: !5)
!18 = !DILocation(line: 28, column: 28, scope: !5)
!19 = !DILocation(line: 28, column: 33, scope: !5)
!20 = !DILocation(line: 29, column: 44, scope: !5)
!21 = !DILocation(line: 29, column: 23, scope: !5)
!22 = !DILocation(line: 30, column: 21, scope: !5)
!23 = !DILocation(line: 34, column: 42, scope: !5)
!24 = !DILocation(line: 34, column: 52, scope: !5)
!25 = !DILocation(line: 34, column: 39, scope: !5)
!26 = !DILocation(line: 34, column: 47, scope: !5)
!27 = !DILocation(line: 34, column: 34, scope: !5)
!28 = !DILocation(line: 34, column: 65, scope: !5)
!29 = !DILocation(line: 34, column: 73, scope: !5)
!30 = !DILocation(line: 34, column: 57, scope: !5)
!31 = !DILocation(line: 35, column: 37, scope: !5)
!32 = !DILocation(line: 35, column: 46, scope: !5)
!33 = !DILocation(line: 35, column: 35, scope: !5)
!34 = !DILocation(line: 35, column: 42, scope: !5)
!35 = !DILocation(line: 35, column: 30, scope: !5)
!36 = !DILocation(line: 35, column: 51, scope: !5)
!37 = !DILocation(line: 36, column: 38, scope: !5)
!38 = !DILocation(line: 36, column: 35, scope: !5)
!39 = !DILocation(line: 36, column: 30, scope: !5)
!40 = !DILocation(line: 36, column: 51, scope: !5)
!41 = !DILocation(line: 36, column: 43, scope: !5)
!42 = !DILocation(line: 37, column: 30, scope: !5)
!43 = !DILocation(line: 37, column: 43, scope: !5)
!44 = !DILocation(line: 38, column: 18, scope: !5)
!45 = !DILocation(line: 39, column: 18, scope: !5)
!46 = !DILocation(line: 40, column: 23, scope: !5)
!47 = !DILocation(line: 41, column: 19, scope: !5)
!48 = !DILocation(line: 42, column: 4, scope: !5)
!49 = !DILocation(line: 43, column: 57, scope: !5)
!50 = !DILocation(line: 43, column: 4, scope: !5)
