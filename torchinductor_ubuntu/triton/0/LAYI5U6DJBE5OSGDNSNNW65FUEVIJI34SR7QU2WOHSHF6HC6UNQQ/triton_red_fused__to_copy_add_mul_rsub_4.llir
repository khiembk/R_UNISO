; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [121 x i8] c"/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/ci/ccisb2yra76ab2haychl3vkjloggui7jornx4qodogdjo7v6y64e.py\00"
@assertMessage_0 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp27 < 32\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !5 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_mul_rsub_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr #1 !dbg !9 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !10
  %10 = shl i32 %9, 3, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = and i32 %11, 256, !dbg !12
  %14 = lshr i32 %11, 6, !dbg !12
  %15 = and i32 %14, 7, !dbg !12
  %.lobit = lshr exact i32 %13, 8, !dbg !12
  %16 = or disjoint i32 %10, %12, !dbg !13
  %17 = or disjoint i32 %15, %10, !dbg !13
  %18 = icmp slt i32 %16, 10368, !dbg !14
  %19 = icmp slt i32 %17, 10368, !dbg !14
  %20 = lshr i32 %11, 3, !dbg !15
  %21 = and i32 %20, 31, !dbg !15
  %22 = lshr exact i32 %13, 3, !dbg !15
  %23 = or disjoint i32 %21, %22, !dbg !15
  %24 = shl nuw nsw i32 %11, 2, !dbg !15
  %25 = and i32 %24, 252, !dbg !15
  %26 = or disjoint i32 %25, 2, !dbg !15
  %27 = and i32 %11, 255, !dbg !15
  %28 = or disjoint i32 %.lobit, %10, !dbg !13
  %29 = or disjoint i32 %28, 2, !dbg !13
  %30 = or disjoint i32 %28, 4, !dbg !13
  %31 = or disjoint i32 %28, 6, !dbg !13
  %32 = insertelement <4 x i32> poison, i32 %28, i64 0, !dbg !14
  %33 = insertelement <4 x i32> %32, i32 %29, i64 1, !dbg !14
  %34 = insertelement <4 x i32> %33, i32 %30, i64 2, !dbg !14
  %35 = insertelement <4 x i32> %34, i32 %31, i64 3, !dbg !14
  %36 = icmp slt <4 x i32> %35, splat (i32 10368), !dbg !14
  %37 = srem <4 x i32> %35, splat (i32 324), !dbg !16
  %38 = sdiv i32 %17, 324, !dbg !17
  %39 = sdiv i32 %28, 324, !dbg !17
  %40 = sdiv i32 %29, 324, !dbg !17
  %41 = sdiv i32 %30, 324, !dbg !17
  %42 = sdiv i32 %31, 324, !dbg !17
  %43 = srem i32 %39, 8, !dbg !18
  %44 = srem i32 %40, 8, !dbg !18
  %45 = srem i32 %41, 8, !dbg !18
  %46 = srem i32 %42, 8, !dbg !18
  %47 = sdiv i32 %17, 2592, !dbg !19
  %48 = mul nsw i32 %47, 324, !dbg !20
  %49 = mul i32 %17, 324, !dbg !21
  %50 = sext i32 %43 to i64, !dbg !22
  %51 = sext i32 %44 to i64, !dbg !22
  %52 = sext i32 %45 to i64, !dbg !22
  %53 = sext i32 %46 to i64, !dbg !22
  %54 = add nsw i32 %48, %26
  %invariant.gep = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !23
  %invariant.gep117 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !23
  %invariant.gep119 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !23
  %invariant.gep121 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !23
  %55 = and i32 %24, 2044
  %56 = shl nuw nsw i32 %11, 8
  %57 = and i32 %56, 1792
  %58 = or disjoint i32 %57, %21
  %59 = or disjoint i32 %58, %22
  %60 = lshr i32 %11, 4
  %61 = and i32 %60, 28
  %62 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %61
  %63 = getelementptr inbounds nuw float, ptr addrspace(3) %62, i32 %55
  %64 = lshr exact i32 %57, 4
  %65 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %64
  %66 = getelementptr inbounds nuw float, ptr addrspace(3) %65, i32 %59
  %67 = or disjoint i32 %59, 64
  %68 = getelementptr inbounds nuw float, ptr addrspace(3) %65, i32 %67
  %69 = or disjoint i32 %59, 128
  %70 = getelementptr inbounds nuw float, ptr addrspace(3) %65, i32 %69
  %71 = or disjoint i32 %59, 192
  %72 = getelementptr inbounds nuw float, ptr addrspace(3) %65, i32 %71
  %73 = and i32 %11, 511
  %74 = lshr i32 %73, 8
  %75 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %74
  %76 = getelementptr inbounds nuw i64, ptr addrspace(3) %75, i32 %73
  %77 = or i32 %11, 512
  %78 = lshr i32 %77, 8
  %79 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %78
  %80 = getelementptr inbounds nuw i64, ptr addrspace(3) %79, i32 %77
  %81 = or disjoint i32 %73, 1024
  %82 = lshr i32 %81, 8
  %83 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %82
  %84 = getelementptr inbounds nuw i64, ptr addrspace(3) %83, i32 %81
  %85 = or i32 %11, 1536
  %86 = lshr i32 %85, 8
  %87 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %86
  %88 = getelementptr inbounds nuw i64, ptr addrspace(3) %87, i32 %85
  %89 = lshr exact i32 %57, 5
  %90 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %89
  %91 = getelementptr inbounds nuw i64, ptr addrspace(3) %90, i32 %59
  %92 = getelementptr inbounds nuw i64, ptr addrspace(3) %90, i32 %67
  %93 = getelementptr inbounds nuw i64, ptr addrspace(3) %90, i32 %69
  %94 = getelementptr inbounds nuw i64, ptr addrspace(3) %90, i32 %71
  %95 = mul i32 %17, 324
  %96 = shl nsw i32 %38, 4
  %97 = add i32 %96, %95
  %98 = sext i32 %54 to i64, !dbg !23
  %99 = zext nneg i32 %27 to i64, !dbg !23
  %100 = sext <4 x i32> %37 to <4 x i64>, !dbg !23
  %101 = zext nneg i32 %25 to i64, !dbg !23
  %102 = sext i32 %48 to i64, !dbg !23
  %103 = zext nneg i32 %23 to i64, !dbg !23
  %invariant.gep147 = getelementptr i64, ptr addrspace(1) %1, i64 %102, !dbg !23
  %invariant.gep149 = getelementptr i64, ptr addrspace(1) %1, i64 %98, !dbg !23
  %104 = getelementptr inbounds nuw i8, ptr addrspace(3) %63, i32 4
  %105 = getelementptr inbounds nuw i8, ptr addrspace(3) %63, i32 8
  %106 = getelementptr inbounds nuw i8, ptr addrspace(3) %63, i32 12
  %107 = insertelement <4 x i1> poison, i1 %18, i64 0, !dbg !24
  %108 = insertelement <2 x i1> poison, i1 %18, i64 0, !dbg !25
  br label %109, !dbg !23

109:                                              ; preds = %8, %374
  %110 = phi i1 [ true, %8 ], [ false, %374 ]
  %indvars.iv = phi i64 [ 0, %8 ], [ 256, %374 ]
  %111 = phi float [ 0.000000e+00, %8 ], [ %517, %374 ]
  %112 = phi float [ 0.000000e+00, %8 ], [ %519, %374 ]
  %113 = phi float [ 0xFFF0000000000000, %8 ], [ %513, %374 ]
  %114 = phi float [ 0xFFF0000000000000, %8 ], [ %516, %374 ]
  %115 = phi <4 x i1> [ zeroinitializer, %8 ], [ %448, %374 ]
  %116 = phi <2 x float> [ zeroinitializer, %8 ], [ %518, %374 ]
  %117 = phi <2 x float> [ splat (float 0xFFF0000000000000), %8 ], [ %515, %374 ]
  %118 = or disjoint i64 %indvars.iv, %101, !dbg !26
  %119 = or disjoint i64 %indvars.iv, %99, !dbg !26
  %120 = icmp samesign ult i64 %118, 324, !dbg !27
  %121 = icmp samesign ult i64 %119, 324, !dbg !27
  %gep148 = getelementptr i64, ptr addrspace(1) %invariant.gep147, i64 %118, !dbg !28
  %gep150 = getelementptr i64, ptr addrspace(1) %invariant.gep149, i64 %indvars.iv, !dbg !28
  %122 = and i1 %19, %120, !dbg !29
  %123 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !30
  %124 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$4 ld.global.L1::evict_last.L2::cache_hint.v2.b64 { $0, $1 }, [ $2 + 0 ], $3;", "=l,=l,l,l,b"(ptr addrspace(1) %gep148, i64 %123, i1 %122) #8, !dbg !30
  %125 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !30
  %126 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$4 ld.global.L1::evict_last.L2::cache_hint.v2.b64 { $0, $1 }, [ $2 + 0 ], $3;", "=l,=l,l,l,b"(ptr addrspace(1) %gep150, i64 %125, i1 %122) #8, !dbg !30
  %127 = trunc nuw nsw i64 %118 to i32, !dbg !31
  %128 = add i32 %49, %127, !dbg !31
  %129 = sext i32 %128 to i64, !dbg !32
  %130 = getelementptr float, ptr addrspace(1) %2, i64 %129, !dbg !32
  %131 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !33
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %130, i64 %131, i1 %122) #8, !dbg !33
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !33
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !33
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !33
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !33
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !33
  %137 = insertelement <4 x i32> poison, i32 %133, i64 0, !dbg !33
  %138 = insertelement <4 x i32> %137, i32 %134, i64 1, !dbg !33
  %139 = insertelement <4 x i32> %138, i32 %135, i64 2, !dbg !33
  %140 = insertelement <4 x i32> %139, i32 %136, i64 3, !dbg !33
  store <4 x i32> %140, ptr addrspace(3) %63, align 16, !dbg !33
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !33
  %141 = load float, ptr addrspace(3) %66, align 4, !dbg !33
  %142 = load float, ptr addrspace(3) %68, align 4, !dbg !33
  %143 = load float, ptr addrspace(3) %70, align 4, !dbg !33
  %144 = load float, ptr addrspace(3) %72, align 4, !dbg !33
  %145 = insertelement <4 x i64> poison, i64 %119, i64 0, !dbg !34
  %146 = shufflevector <4 x i64> %145, <4 x i64> poison, <4 x i32> zeroinitializer, !dbg !34
  %147 = sub nsw <4 x i64> %146, %100, !dbg !34
  %148 = icmp sgt <4 x i64> %147, zeroinitializer, !dbg !35
  %149 = select <4 x i1> %148, <4 x i64> splat (i64 16), <4 x i64> zeroinitializer, !dbg !36
  %150 = trunc nsw <4 x i64> %147 to <4 x i32>, !dbg !37
  %151 = tail call <4 x i32> @llvm.abs.v4i32(<4 x i32> %150, i1 false), !dbg !37
  %152 = sext <4 x i32> %151 to <4 x i64>, !dbg !38
  %153 = icmp slt <4 x i32> %151, splat (i32 8), !dbg !38
  %154 = extractelement <4 x i32> %151, i64 0, !dbg !39
  %155 = sitofp i32 %154 to float, !dbg !39
  %156 = extractelement <4 x i32> %151, i64 1, !dbg !39
  %157 = sitofp i32 %156 to float, !dbg !39
  %158 = extractelement <4 x i32> %151, i64 2, !dbg !39
  %159 = sitofp i32 %158 to float, !dbg !39
  %160 = extractelement <4 x i32> %151, i64 3, !dbg !39
  %161 = sitofp i32 %160 to float, !dbg !39
  %162 = fmul float %155, 1.250000e-01, !dbg !40
  %163 = fmul float %157, 1.250000e-01, !dbg !40
  %164 = fmul float %159, 1.250000e-01, !dbg !40
  %165 = fmul float %161, 1.250000e-01, !dbg !40
  %166 = fcmp olt float %162, 0x3810000000000000, !dbg !41
  %167 = fmul float %162, 0x4160000000000000, !dbg !41
  %.02.i = select i1 %166, float %167, float %162, !dbg !41
  %i.i.0.i = select i1 %166, float -2.300000e+01, float 0.000000e+00, !dbg !41
  %168 = bitcast float %.02.i to i32, !dbg !41
  %169 = add i32 %168, -1059760811, !dbg !41
  %170 = and i32 %169, -8388608, !dbg !41
  %171 = sub i32 %168, %170, !dbg !41
  %172 = bitcast i32 %171 to float, !dbg !41
  %173 = sitofp i32 %170 to float, !dbg !41
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not.i = icmp eq i32 %174, 0, !dbg !41
  %175 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %173, float 0x3E80000000000000, float %i.i.0.i) #8, !dbg !41
  %176 = tail call float @llvm.nvvm.fma.rn.f(float %173, float 0x3E80000000000000, float %i.i.0.i) #8, !dbg !41
  %.08.i = select i1 %.not.i, float %176, float %175, !dbg !41
  %177 = fadd float %172, -1.000000e+00, !dbg !41
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not1.i = icmp eq i32 %178, 0, !dbg !41
  %179 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %177, float 0x3FC2073EC0000000) #8, !dbg !41
  %180 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %177, float 0x3FC2073EC0000000) #8, !dbg !41
  %.010.i = select i1 %.not1.i, float %180, float %179, !dbg !41
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not2.i = icmp eq i32 %181, 0, !dbg !41
  %182 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %177, float 0xBFBF19B980000000) #8, !dbg !41
  %183 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %177, float 0xBFBF19B980000000) #8, !dbg !41
  %.011.i = select i1 %.not2.i, float %183, float %182, !dbg !41
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not3.i = icmp eq i32 %184, 0, !dbg !41
  %185 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %177, float 0x3FC1E52AA0000000) #8, !dbg !41
  %186 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %177, float 0x3FC1E52AA0000000) #8, !dbg !41
  %.012.i = select i1 %.not3.i, float %186, float %185, !dbg !41
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not4.i = icmp eq i32 %187, 0, !dbg !41
  %188 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %177, float 0xBFC55B1720000000) #8, !dbg !41
  %189 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %177, float 0xBFC55B1720000000) #8, !dbg !41
  %.09.i = select i1 %.not4.i, float %189, float %188, !dbg !41
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not5.i = icmp eq i32 %190, 0, !dbg !41
  %191 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %177, float 0x3FC99DA160000000) #8, !dbg !41
  %192 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %177, float 0x3FC99DA160000000) #8, !dbg !41
  %.05.i = select i1 %.not5.i, float %192, float %191, !dbg !41
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not6.i = icmp eq i32 %193, 0, !dbg !41
  %194 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %177, float 0xBFCFFFE440000000) #8, !dbg !41
  %195 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %177, float 0xBFCFFFE440000000) #8, !dbg !41
  %.01.i = select i1 %.not6.i, float %195, float %194, !dbg !41
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not7.i = icmp eq i32 %196, 0, !dbg !41
  %197 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %177, float 0x3FD5554F00000000) #8, !dbg !41
  %198 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %177, float 0x3FD5554F00000000) #8, !dbg !41
  %.0.i = select i1 %.not7.i, float %198, float %197, !dbg !41
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not8.i = icmp eq i32 %199, 0, !dbg !41
  %200 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %177, float -5.000000e-01) #8, !dbg !41
  %201 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %177, float -5.000000e-01) #8, !dbg !41
  %.07.i = select i1 %.not8.i, float %201, float %200, !dbg !41
  %202 = fmul float %177, %.07.i, !dbg !41
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not9.i = icmp eq i32 %203, 0, !dbg !41
  %204 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %202, float %177, float %177) #8, !dbg !41
  %205 = tail call float @llvm.nvvm.fma.rn.f(float %202, float %177, float %177) #8, !dbg !41
  %.06.i = select i1 %.not9.i, float %205, float %204, !dbg !41
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not10.i = icmp eq i32 %206, 0, !dbg !41
  %207 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #8, !dbg !41
  %208 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #8, !dbg !41
  %.04.i = select i1 %.not10.i, float %208, float %207, !dbg !41
  %209 = icmp ugt i32 %168, 2139095039, !dbg !41
  br i1 %209, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !41

__nv_fmaf_rn.exit.i.i:                            ; preds = %109
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not11.i = icmp eq i32 %210, 0, !dbg !41
  %211 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !41
  %212 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !41
  %.03.i = select i1 %.not11.i, float %212, float %211, !dbg !41
  br label %__nv_logf.exit, !dbg !41

__nv_logf.exit:                                   ; preds = %109, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %109 ], !dbg !41
  %213 = fcmp olt float %163, 0x3810000000000000, !dbg !41
  %214 = fmul float %163, 0x4160000000000000, !dbg !41
  %.02.i22 = select i1 %213, float %214, float %163, !dbg !41
  %i.i.0.i23 = select i1 %213, float -2.300000e+01, float 0.000000e+00, !dbg !41
  %215 = bitcast float %.02.i22 to i32, !dbg !41
  %216 = add i32 %215, -1059760811, !dbg !41
  %217 = and i32 %216, -8388608, !dbg !41
  %218 = sub i32 %215, %217, !dbg !41
  %219 = bitcast i32 %218 to float, !dbg !41
  %220 = sitofp i32 %217 to float, !dbg !41
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not.i24 = icmp eq i32 %221, 0, !dbg !41
  %222 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %220, float 0x3E80000000000000, float %i.i.0.i23) #8, !dbg !41
  %223 = tail call float @llvm.nvvm.fma.rn.f(float %220, float 0x3E80000000000000, float %i.i.0.i23) #8, !dbg !41
  %.08.i25 = select i1 %.not.i24, float %223, float %222, !dbg !41
  %224 = fadd float %219, -1.000000e+00, !dbg !41
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not1.i26 = icmp eq i32 %225, 0, !dbg !41
  %226 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %224, float 0x3FC2073EC0000000) #8, !dbg !41
  %227 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %224, float 0x3FC2073EC0000000) #8, !dbg !41
  %.010.i27 = select i1 %.not1.i26, float %227, float %226, !dbg !41
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not2.i28 = icmp eq i32 %228, 0, !dbg !41
  %229 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i27, float %224, float 0xBFBF19B980000000) #8, !dbg !41
  %230 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i27, float %224, float 0xBFBF19B980000000) #8, !dbg !41
  %.011.i29 = select i1 %.not2.i28, float %230, float %229, !dbg !41
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not3.i30 = icmp eq i32 %231, 0, !dbg !41
  %232 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i29, float %224, float 0x3FC1E52AA0000000) #8, !dbg !41
  %233 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i29, float %224, float 0x3FC1E52AA0000000) #8, !dbg !41
  %.012.i31 = select i1 %.not3.i30, float %233, float %232, !dbg !41
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not4.i32 = icmp eq i32 %234, 0, !dbg !41
  %235 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i31, float %224, float 0xBFC55B1720000000) #8, !dbg !41
  %236 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i31, float %224, float 0xBFC55B1720000000) #8, !dbg !41
  %.09.i33 = select i1 %.not4.i32, float %236, float %235, !dbg !41
  %237 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not5.i34 = icmp eq i32 %237, 0, !dbg !41
  %238 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i33, float %224, float 0x3FC99DA160000000) #8, !dbg !41
  %239 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i33, float %224, float 0x3FC99DA160000000) #8, !dbg !41
  %.05.i35 = select i1 %.not5.i34, float %239, float %238, !dbg !41
  %240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not6.i36 = icmp eq i32 %240, 0, !dbg !41
  %241 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i35, float %224, float 0xBFCFFFE440000000) #8, !dbg !41
  %242 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i35, float %224, float 0xBFCFFFE440000000) #8, !dbg !41
  %.01.i37 = select i1 %.not6.i36, float %242, float %241, !dbg !41
  %243 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not7.i38 = icmp eq i32 %243, 0, !dbg !41
  %244 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i37, float %224, float 0x3FD5554F00000000) #8, !dbg !41
  %245 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i37, float %224, float 0x3FD5554F00000000) #8, !dbg !41
  %.0.i39 = select i1 %.not7.i38, float %245, float %244, !dbg !41
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not8.i40 = icmp eq i32 %246, 0, !dbg !41
  %247 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i39, float %224, float -5.000000e-01) #8, !dbg !41
  %248 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i39, float %224, float -5.000000e-01) #8, !dbg !41
  %.07.i41 = select i1 %.not8.i40, float %248, float %247, !dbg !41
  %249 = fmul float %224, %.07.i41, !dbg !41
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not9.i42 = icmp eq i32 %250, 0, !dbg !41
  %251 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %249, float %224, float %224) #8, !dbg !41
  %252 = tail call float @llvm.nvvm.fma.rn.f(float %249, float %224, float %224) #8, !dbg !41
  %.06.i43 = select i1 %.not9.i42, float %252, float %251, !dbg !41
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not10.i44 = icmp eq i32 %253, 0, !dbg !41
  %254 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i25, float 0x3FE62E4300000000, float %.06.i43) #8, !dbg !41
  %255 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i25, float 0x3FE62E4300000000, float %.06.i43) #8, !dbg !41
  %.04.i45 = select i1 %.not10.i44, float %255, float %254, !dbg !41
  %256 = icmp ugt i32 %215, 2139095039, !dbg !41
  br i1 %256, label %__nv_fmaf_rn.exit.i.i48, label %__nv_logf.exit51, !dbg !41

__nv_fmaf_rn.exit.i.i48:                          ; preds = %__nv_logf.exit
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not11.i49 = icmp eq i32 %257, 0, !dbg !41
  %258 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i22, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !41
  %259 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i22, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !41
  %.03.i50 = select i1 %.not11.i49, float %259, float %258, !dbg !41
  br label %__nv_logf.exit51, !dbg !41

__nv_logf.exit51:                                 ; preds = %__nv_logf.exit, %__nv_fmaf_rn.exit.i.i48
  %r.i.0.i46 = phi float [ %.03.i50, %__nv_fmaf_rn.exit.i.i48 ], [ %.04.i45, %__nv_logf.exit ], !dbg !41
  %260 = fcmp olt float %164, 0x3810000000000000, !dbg !41
  %261 = fmul float %164, 0x4160000000000000, !dbg !41
  %.02.i52 = select i1 %260, float %261, float %164, !dbg !41
  %i.i.0.i53 = select i1 %260, float -2.300000e+01, float 0.000000e+00, !dbg !41
  %262 = bitcast float %.02.i52 to i32, !dbg !41
  %263 = add i32 %262, -1059760811, !dbg !41
  %264 = and i32 %263, -8388608, !dbg !41
  %265 = sub i32 %262, %264, !dbg !41
  %266 = bitcast i32 %265 to float, !dbg !41
  %267 = sitofp i32 %264 to float, !dbg !41
  %268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not.i54 = icmp eq i32 %268, 0, !dbg !41
  %269 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %267, float 0x3E80000000000000, float %i.i.0.i53) #8, !dbg !41
  %270 = tail call float @llvm.nvvm.fma.rn.f(float %267, float 0x3E80000000000000, float %i.i.0.i53) #8, !dbg !41
  %.08.i55 = select i1 %.not.i54, float %270, float %269, !dbg !41
  %271 = fadd float %266, -1.000000e+00, !dbg !41
  %272 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not1.i56 = icmp eq i32 %272, 0, !dbg !41
  %273 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %271, float 0x3FC2073EC0000000) #8, !dbg !41
  %274 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %271, float 0x3FC2073EC0000000) #8, !dbg !41
  %.010.i57 = select i1 %.not1.i56, float %274, float %273, !dbg !41
  %275 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not2.i58 = icmp eq i32 %275, 0, !dbg !41
  %276 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i57, float %271, float 0xBFBF19B980000000) #8, !dbg !41
  %277 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i57, float %271, float 0xBFBF19B980000000) #8, !dbg !41
  %.011.i59 = select i1 %.not2.i58, float %277, float %276, !dbg !41
  %278 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not3.i60 = icmp eq i32 %278, 0, !dbg !41
  %279 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i59, float %271, float 0x3FC1E52AA0000000) #8, !dbg !41
  %280 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i59, float %271, float 0x3FC1E52AA0000000) #8, !dbg !41
  %.012.i61 = select i1 %.not3.i60, float %280, float %279, !dbg !41
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not4.i62 = icmp eq i32 %281, 0, !dbg !41
  %282 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i61, float %271, float 0xBFC55B1720000000) #8, !dbg !41
  %283 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i61, float %271, float 0xBFC55B1720000000) #8, !dbg !41
  %.09.i63 = select i1 %.not4.i62, float %283, float %282, !dbg !41
  %284 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not5.i64 = icmp eq i32 %284, 0, !dbg !41
  %285 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i63, float %271, float 0x3FC99DA160000000) #8, !dbg !41
  %286 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i63, float %271, float 0x3FC99DA160000000) #8, !dbg !41
  %.05.i65 = select i1 %.not5.i64, float %286, float %285, !dbg !41
  %287 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not6.i66 = icmp eq i32 %287, 0, !dbg !41
  %288 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i65, float %271, float 0xBFCFFFE440000000) #8, !dbg !41
  %289 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i65, float %271, float 0xBFCFFFE440000000) #8, !dbg !41
  %.01.i67 = select i1 %.not6.i66, float %289, float %288, !dbg !41
  %290 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not7.i68 = icmp eq i32 %290, 0, !dbg !41
  %291 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i67, float %271, float 0x3FD5554F00000000) #8, !dbg !41
  %292 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i67, float %271, float 0x3FD5554F00000000) #8, !dbg !41
  %.0.i69 = select i1 %.not7.i68, float %292, float %291, !dbg !41
  %293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not8.i70 = icmp eq i32 %293, 0, !dbg !41
  %294 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i69, float %271, float -5.000000e-01) #8, !dbg !41
  %295 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i69, float %271, float -5.000000e-01) #8, !dbg !41
  %.07.i71 = select i1 %.not8.i70, float %295, float %294, !dbg !41
  %296 = fmul float %271, %.07.i71, !dbg !41
  %297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not9.i72 = icmp eq i32 %297, 0, !dbg !41
  %298 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %296, float %271, float %271) #8, !dbg !41
  %299 = tail call float @llvm.nvvm.fma.rn.f(float %296, float %271, float %271) #8, !dbg !41
  %.06.i73 = select i1 %.not9.i72, float %299, float %298, !dbg !41
  %300 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not10.i74 = icmp eq i32 %300, 0, !dbg !41
  %301 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i55, float 0x3FE62E4300000000, float %.06.i73) #8, !dbg !41
  %302 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i55, float 0x3FE62E4300000000, float %.06.i73) #8, !dbg !41
  %.04.i75 = select i1 %.not10.i74, float %302, float %301, !dbg !41
  %303 = icmp ugt i32 %262, 2139095039, !dbg !41
  br i1 %303, label %__nv_fmaf_rn.exit.i.i78, label %__nv_logf.exit81, !dbg !41

__nv_fmaf_rn.exit.i.i78:                          ; preds = %__nv_logf.exit51
  %304 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not11.i79 = icmp eq i32 %304, 0, !dbg !41
  %305 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i52, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !41
  %306 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i52, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !41
  %.03.i80 = select i1 %.not11.i79, float %306, float %305, !dbg !41
  br label %__nv_logf.exit81, !dbg !41

__nv_logf.exit81:                                 ; preds = %__nv_logf.exit51, %__nv_fmaf_rn.exit.i.i78
  %r.i.0.i76 = phi float [ %.03.i80, %__nv_fmaf_rn.exit.i.i78 ], [ %.04.i75, %__nv_logf.exit51 ], !dbg !41
  %307 = fcmp olt float %165, 0x3810000000000000, !dbg !41
  %308 = fmul float %165, 0x4160000000000000, !dbg !41
  %.02.i82 = select i1 %307, float %308, float %165, !dbg !41
  %i.i.0.i83 = select i1 %307, float -2.300000e+01, float 0.000000e+00, !dbg !41
  %309 = bitcast float %.02.i82 to i32, !dbg !41
  %310 = add i32 %309, -1059760811, !dbg !41
  %311 = and i32 %310, -8388608, !dbg !41
  %312 = sub i32 %309, %311, !dbg !41
  %313 = bitcast i32 %312 to float, !dbg !41
  %314 = sitofp i32 %311 to float, !dbg !41
  %315 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not.i84 = icmp eq i32 %315, 0, !dbg !41
  %316 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %314, float 0x3E80000000000000, float %i.i.0.i83) #8, !dbg !41
  %317 = tail call float @llvm.nvvm.fma.rn.f(float %314, float 0x3E80000000000000, float %i.i.0.i83) #8, !dbg !41
  %.08.i85 = select i1 %.not.i84, float %317, float %316, !dbg !41
  %318 = fadd float %313, -1.000000e+00, !dbg !41
  %319 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not1.i86 = icmp eq i32 %319, 0, !dbg !41
  %320 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %318, float 0x3FC2073EC0000000) #8, !dbg !41
  %321 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %318, float 0x3FC2073EC0000000) #8, !dbg !41
  %.010.i87 = select i1 %.not1.i86, float %321, float %320, !dbg !41
  %322 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not2.i88 = icmp eq i32 %322, 0, !dbg !41
  %323 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i87, float %318, float 0xBFBF19B980000000) #8, !dbg !41
  %324 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i87, float %318, float 0xBFBF19B980000000) #8, !dbg !41
  %.011.i89 = select i1 %.not2.i88, float %324, float %323, !dbg !41
  %325 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not3.i90 = icmp eq i32 %325, 0, !dbg !41
  %326 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i89, float %318, float 0x3FC1E52AA0000000) #8, !dbg !41
  %327 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i89, float %318, float 0x3FC1E52AA0000000) #8, !dbg !41
  %.012.i91 = select i1 %.not3.i90, float %327, float %326, !dbg !41
  %328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not4.i92 = icmp eq i32 %328, 0, !dbg !41
  %329 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i91, float %318, float 0xBFC55B1720000000) #8, !dbg !41
  %330 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i91, float %318, float 0xBFC55B1720000000) #8, !dbg !41
  %.09.i93 = select i1 %.not4.i92, float %330, float %329, !dbg !41
  %331 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not5.i94 = icmp eq i32 %331, 0, !dbg !41
  %332 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i93, float %318, float 0x3FC99DA160000000) #8, !dbg !41
  %333 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i93, float %318, float 0x3FC99DA160000000) #8, !dbg !41
  %.05.i95 = select i1 %.not5.i94, float %333, float %332, !dbg !41
  %334 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not6.i96 = icmp eq i32 %334, 0, !dbg !41
  %335 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i95, float %318, float 0xBFCFFFE440000000) #8, !dbg !41
  %336 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i95, float %318, float 0xBFCFFFE440000000) #8, !dbg !41
  %.01.i97 = select i1 %.not6.i96, float %336, float %335, !dbg !41
  %337 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not7.i98 = icmp eq i32 %337, 0, !dbg !41
  %338 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i97, float %318, float 0x3FD5554F00000000) #8, !dbg !41
  %339 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i97, float %318, float 0x3FD5554F00000000) #8, !dbg !41
  %.0.i99 = select i1 %.not7.i98, float %339, float %338, !dbg !41
  %340 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not8.i100 = icmp eq i32 %340, 0, !dbg !41
  %341 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i99, float %318, float -5.000000e-01) #8, !dbg !41
  %342 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i99, float %318, float -5.000000e-01) #8, !dbg !41
  %.07.i101 = select i1 %.not8.i100, float %342, float %341, !dbg !41
  %343 = fmul float %318, %.07.i101, !dbg !41
  %344 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not9.i102 = icmp eq i32 %344, 0, !dbg !41
  %345 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %343, float %318, float %318) #8, !dbg !41
  %346 = tail call float @llvm.nvvm.fma.rn.f(float %343, float %318, float %318) #8, !dbg !41
  %.06.i103 = select i1 %.not9.i102, float %346, float %345, !dbg !41
  %347 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not10.i104 = icmp eq i32 %347, 0, !dbg !41
  %348 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i85, float 0x3FE62E4300000000, float %.06.i103) #8, !dbg !41
  %349 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i85, float 0x3FE62E4300000000, float %.06.i103) #8, !dbg !41
  %.04.i105 = select i1 %.not10.i104, float %349, float %348, !dbg !41
  %350 = icmp ugt i32 %309, 2139095039, !dbg !41
  br i1 %350, label %__nv_fmaf_rn.exit.i.i108, label %__nv_logf.exit111, !dbg !41

__nv_fmaf_rn.exit.i.i108:                         ; preds = %__nv_logf.exit81
  %351 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not11.i109 = icmp eq i32 %351, 0, !dbg !41
  %352 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i82, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !41
  %353 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i82, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !41
  %.03.i110 = select i1 %.not11.i109, float %353, float %352, !dbg !41
  br label %__nv_logf.exit111, !dbg !41

__nv_logf.exit111:                                ; preds = %__nv_logf.exit81, %__nv_fmaf_rn.exit.i.i108
  %r.i.0.i106 = phi float [ %.03.i110, %__nv_fmaf_rn.exit.i.i108 ], [ %.04.i105, %__nv_logf.exit81 ], !dbg !41
  %354 = insertelement <4 x float> poison, float %r.i.0.i, i64 0, !dbg !42
  %355 = insertelement <4 x float> %354, float %r.i.0.i46, i64 1, !dbg !42
  %356 = insertelement <4 x float> %355, float %r.i.0.i76, i64 2, !dbg !42
  %357 = insertelement <4 x float> %356, float %r.i.0.i106, i64 3, !dbg !42
  %358 = fmul <4 x float> %357, splat (float 0x3FD7154760000000), !dbg !42
  %359 = fmul <4 x float> %358, splat (float 8.000000e+00), !dbg !43
  %360 = fptosi <4 x float> %359 to <4 x i64>, !dbg !44
  %361 = add <4 x i64> %360, splat (i64 8), !dbg !45
  %362 = tail call <4 x i64> @llvm.smin.v4i64(<4 x i64> %361, <4 x i64> splat (i64 15)), !dbg !46
  %363 = select <4 x i1> %153, <4 x i64> %152, <4 x i64> %362, !dbg !50
  %364 = add nsw <4 x i64> %363, %149, !dbg !51
  %365 = lshr <4 x i64> %364, splat (i64 58), !dbg !52
  %366 = and <4 x i64> %365, splat (i64 32), !dbg !52
  %367 = add nsw <4 x i64> %366, %364, !dbg !52
  %368 = icmp ugt <4 x i64> %367, splat (i64 31), !dbg !53
  %369 = and <4 x i1> %36, %368, !dbg !54
  %370 = bitcast <4 x i1> %369 to i4, !dbg !55
  %371 = icmp ne i4 %370, 0, !dbg !55
  %372 = and i1 %121, %371, !dbg !55
  br i1 %372, label %373, label %374, !dbg !55

373:                                              ; preds = %__nv_logf.exit111
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 73, ptr nonnull @assertFunc_0, i64 1), !dbg !55
  unreachable, !dbg !55

374:                                              ; preds = %__nv_logf.exit111
  %375 = extractvalue { i64, i64 } %126, 1, !dbg !30
  %376 = extractvalue { i64, i64 } %126, 0, !dbg !30
  %377 = extractvalue { i64, i64 } %124, 1, !dbg !30
  %378 = extractvalue { i64, i64 } %124, 0, !dbg !30
  %379 = or disjoint i64 %indvars.iv, %103, !dbg !26
  %380 = or disjoint i64 %379, 192, !dbg !26
  %381 = icmp samesign ult i64 %380, 324, !dbg !27
  %382 = and i1 %18, %381, !dbg !29
  %383 = or disjoint i64 %379, 128, !dbg !26
  %384 = icmp samesign ult i64 %383, 324, !dbg !27
  %385 = and i1 %18, %384, !dbg !29
  %386 = or disjoint i64 %379, 64, !dbg !26
  %387 = icmp samesign ult i64 %386, 324, !dbg !27
  %388 = and i1 %18, %387, !dbg !29
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !55
  %389 = extractelement <4 x i64> %367, i64 0, !dbg !56
  %.idx = shl i64 %389, 5, !dbg !56
  %gep = getelementptr i8, ptr addrspace(1) %invariant.gep, i64 %.idx, !dbg !56
  %390 = extractelement <4 x i64> %367, i64 1, !dbg !56
  %.idx13 = shl i64 %390, 5, !dbg !56
  %gep118 = getelementptr i8, ptr addrspace(1) %invariant.gep117, i64 %.idx13, !dbg !56
  %391 = extractelement <4 x i64> %367, i64 2, !dbg !56
  %.idx14 = shl i64 %391, 5, !dbg !56
  %gep120 = getelementptr i8, ptr addrspace(1) %invariant.gep119, i64 %.idx14, !dbg !56
  %392 = extractelement <4 x i64> %367, i64 3, !dbg !56
  %.idx15 = shl i64 %392, 5, !dbg !56
  %gep122 = getelementptr i8, ptr addrspace(1) %invariant.gep121, i64 %.idx15, !dbg !56
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !57
  %393 = ptrtoint ptr addrspace(1) %gep to i64, !dbg !57
  %394 = ptrtoint ptr addrspace(1) %gep118 to i64, !dbg !57
  %395 = ptrtoint ptr addrspace(1) %gep120 to i64, !dbg !57
  %396 = ptrtoint ptr addrspace(1) %gep122 to i64, !dbg !57
  %397 = insertelement <1 x i64> poison, i64 %393, i64 0, !dbg !57
  store <1 x i64> %397, ptr addrspace(3) %76, align 8, !dbg !57
  %398 = insertelement <1 x i64> poison, i64 %394, i64 0, !dbg !57
  store <1 x i64> %398, ptr addrspace(3) %80, align 8, !dbg !57
  %399 = insertelement <1 x i64> poison, i64 %395, i64 0, !dbg !57
  store <1 x i64> %399, ptr addrspace(3) %84, align 8, !dbg !57
  %400 = insertelement <1 x i64> poison, i64 %396, i64 0, !dbg !57
  store <1 x i64> %400, ptr addrspace(3) %88, align 8, !dbg !57
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !57
  %401 = load i64, ptr addrspace(3) %91, align 8, !dbg !57
  %402 = load i64, ptr addrspace(3) %92, align 8, !dbg !57
  %403 = load i64, ptr addrspace(3) %93, align 8, !dbg !57
  %404 = load i64, ptr addrspace(3) %94, align 8, !dbg !57
  %405 = inttoptr i64 %401 to ptr addrspace(1), !dbg !57
  %406 = inttoptr i64 %402 to ptr addrspace(1), !dbg !57
  %407 = inttoptr i64 %403 to ptr addrspace(1), !dbg !57
  %408 = inttoptr i64 %404 to ptr addrspace(1), !dbg !57
  %409 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !57
  %410 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %405, i64 %409, i1 %18) #8, !dbg !57
  %411 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !57
  %412 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %406, i64 %411, i1 %388) #8, !dbg !57
  %413 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !57
  %414 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %407, i64 %413, i1 %385) #8, !dbg !57
  %415 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !57
  %416 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %408, i64 %415, i1 %382) #8, !dbg !57
  %417 = insertelement <4 x i64> poison, i64 %378, i64 0, !dbg !58
  %418 = insertelement <4 x i64> %417, i64 %377, i64 1, !dbg !58
  %419 = insertelement <4 x i64> %418, i64 %376, i64 2, !dbg !58
  %420 = insertelement <4 x i64> %419, i64 %375, i64 3, !dbg !58
  %421 = sitofp <4 x i64> %420 to <4 x float>, !dbg !58
  %422 = fsub <4 x float> splat (float 1.000000e+00), %421, !dbg !59
  %423 = fmul <4 x float> %422, splat (float 0xC7EFFFFFE0000000), !dbg !60
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !60
  store <4 x float> %423, ptr addrspace(3) %63, align 16, !dbg !60
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !60
  %424 = load float, ptr addrspace(3) %66, align 4, !dbg !60
  %425 = load float, ptr addrspace(3) %68, align 4, !dbg !60
  %426 = load float, ptr addrspace(3) %70, align 4, !dbg !60
  %427 = load float, ptr addrspace(3) %72, align 4, !dbg !60
  %428 = insertelement <4 x i32> poison, i32 %410, i64 0, !dbg !57
  %429 = insertelement <4 x i32> %428, i32 %412, i64 1, !dbg !57
  %430 = insertelement <4 x i32> %429, i32 %414, i64 2, !dbg !57
  %431 = insertelement <4 x i32> %430, i32 %416, i64 3, !dbg !57
  %432 = bitcast <4 x i32> %431 to <4 x float>, !dbg !57
  %433 = insertelement <4 x float> poison, float %424, i64 0, !dbg !61
  %434 = insertelement <4 x float> %433, float %425, i64 1, !dbg !61
  %435 = insertelement <4 x float> %434, float %426, i64 2, !dbg !61
  %436 = insertelement <4 x float> %435, float %427, i64 3, !dbg !61
  %437 = fadd <4 x float> %436, %432, !dbg !61
  %438 = insertelement <4 x float> poison, float %141, i64 0, !dbg !62
  %439 = insertelement <4 x float> %438, float %142, i64 1, !dbg !62
  %440 = insertelement <4 x float> %439, float %143, i64 2, !dbg !62
  %441 = insertelement <4 x float> %440, float %144, i64 3, !dbg !62
  %442 = fadd <4 x float> %441, %437, !dbg !62
  %443 = fcmp une <4 x float> %442, splat (float 0xFFF0000000000000), !dbg !63
  %444 = insertelement <4 x i1> %107, i1 %388, i64 1, !dbg !24
  %445 = insertelement <4 x i1> %444, i1 %385, i64 2, !dbg !24
  %446 = insertelement <4 x i1> %445, i1 %382, i64 3, !dbg !24
  %447 = select <4 x i1> %446, <4 x i1> %443, <4 x i1> zeroinitializer, !dbg !24
  %448 = or <4 x i1> %115, %447, !dbg !24
  %449 = extractelement <4 x float> %442, i64 0, !dbg !64
  %450 = extractelement <4 x float> %442, i64 1, !dbg !64
  %451 = fcmp ogt float %113, %450, !dbg !66
  %452 = extractelement <4 x float> %442, i64 2, !dbg !64
  %453 = extractelement <4 x float> %442, i64 3, !dbg !64
  %454 = fcmp ogt float %114, %453, !dbg !66
  %455 = fcmp uno <2 x float> %117, zeroinitializer, !dbg !67
  %456 = fcmp uno float %113, 0.000000e+00, !dbg !67
  %457 = fcmp uno float %114, 0.000000e+00, !dbg !67
  %458 = or i1 %456, %451, !dbg !68
  %459 = or i1 %457, %454, !dbg !68
  %460 = select i1 %458, float %113, float %450, !dbg !69
  %461 = select i1 %459, float %114, float %453, !dbg !69
  %462 = fcmp oeq float %460, 0xFFF0000000000000, !dbg !70
  %463 = fcmp oeq float %461, 0xFFF0000000000000, !dbg !70
  %464 = fsub float %113, %460, !dbg !71
  %465 = fsub float %114, %461, !dbg !71
  %466 = fmul float %464, 0x3FF7154760000000, !dbg !72
  %467 = tail call float @llvm.nvvm.ex2.approx.f(float %466), !dbg !72
  %468 = fmul float %465, 0x3FF7154760000000, !dbg !72
  %469 = tail call float @llvm.nvvm.ex2.approx.f(float %468), !dbg !72
  %470 = select i1 %462, float 1.000000e+00, float %467, !dbg !73
  %471 = select i1 %463, float 1.000000e+00, float %469, !dbg !73
  %472 = fsub float %450, %460, !dbg !64
  %473 = fsub float %453, %461, !dbg !64
  %474 = fmul float %472, 0x3FF7154760000000, !dbg !72
  %475 = tail call float @llvm.nvvm.ex2.approx.f(float %474), !dbg !72
  %476 = fmul float %473, 0x3FF7154760000000, !dbg !72
  %477 = tail call float @llvm.nvvm.ex2.approx.f(float %476), !dbg !72
  %478 = select i1 %462, float 1.000000e+00, float %475, !dbg !74
  %479 = select i1 %463, float 1.000000e+00, float %477, !dbg !74
  %480 = fmul float %111, %470, !dbg !75
  %481 = fmul float %112, %471, !dbg !75
  %482 = fadd float %480, %478, !dbg !76
  %483 = shufflevector <4 x float> %442, <4 x float> poison, <2 x i32> <i32 0, i32 2>, !dbg !66
  %484 = fcmp ogt <2 x float> %117, %483, !dbg !66
  %485 = or <2 x i1> %455, %484, !dbg !68
  %486 = select <2 x i1> %485, <2 x float> %117, <2 x float> %483, !dbg !69
  %487 = fcmp oeq <2 x float> %486, splat (float 0xFFF0000000000000), !dbg !70
  %488 = extractelement <2 x float> %486, i64 0, !dbg !64
  %489 = fsub <2 x float> %117, %486, !dbg !71
  %490 = extractelement <2 x float> %489, i64 0, !dbg !71
  %491 = extractelement <2 x float> %486, i64 1, !dbg !64
  %492 = fsub <2 x float> %117, %486, !dbg !71
  %493 = extractelement <2 x float> %492, i64 1, !dbg !71
  %494 = fmul float %490, 0x3FF7154760000000, !dbg !72
  %495 = tail call float @llvm.nvvm.ex2.approx.f(float %494), !dbg !72
  %496 = fmul float %493, 0x3FF7154760000000, !dbg !72
  %497 = tail call float @llvm.nvvm.ex2.approx.f(float %496), !dbg !72
  %498 = insertelement <2 x float> poison, float %495, i64 0, !dbg !73
  %499 = insertelement <2 x float> %498, float %497, i64 1, !dbg !73
  %500 = select <2 x i1> %487, <2 x float> splat (float 1.000000e+00), <2 x float> %499, !dbg !73
  %501 = fsub float %449, %488, !dbg !64
  %502 = fsub float %452, %491, !dbg !64
  %503 = fmul float %501, 0x3FF7154760000000, !dbg !72
  %504 = tail call float @llvm.nvvm.ex2.approx.f(float %503), !dbg !72
  %505 = fmul float %502, 0x3FF7154760000000, !dbg !72
  %506 = tail call float @llvm.nvvm.ex2.approx.f(float %505), !dbg !72
  %507 = insertelement <2 x float> poison, float %504, i64 0, !dbg !74
  %508 = insertelement <2 x float> %507, float %506, i64 1, !dbg !74
  %509 = select <2 x i1> %487, <2 x float> splat (float 1.000000e+00), <2 x float> %508, !dbg !74
  %510 = fmul <2 x float> %116, %500, !dbg !75
  %511 = fadd <2 x float> %510, %509, !dbg !76
  %512 = fadd float %481, %479, !dbg !76
  %513 = select i1 %388, float %460, float %113, !dbg !25
  %514 = insertelement <2 x i1> %108, i1 %385, i64 1, !dbg !25
  %515 = select <2 x i1> %514, <2 x float> %486, <2 x float> %117, !dbg !25
  %516 = select i1 %382, float %461, float %114, !dbg !25
  %517 = select i1 %388, float %482, float %111, !dbg !77
  %518 = select <2 x i1> %514, <2 x float> %511, <2 x float> %116, !dbg !77
  %519 = select i1 %382, float %512, float %112, !dbg !77
  %520 = add i32 %97, %127, !dbg !78
  %521 = sext i32 %520 to i64, !dbg !79
  %522 = getelementptr float, ptr addrspace(1) %3, i64 %521, !dbg !79
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !80
  %523 = extractelement <4 x float> %437, i64 0, !dbg !80
  store float %523, ptr addrspace(3) %66, align 4, !dbg !80
  %524 = extractelement <4 x float> %437, i64 1, !dbg !80
  store float %524, ptr addrspace(3) %68, align 4, !dbg !80
  %525 = extractelement <4 x float> %437, i64 2, !dbg !80
  store float %525, ptr addrspace(3) %70, align 4, !dbg !80
  %526 = extractelement <4 x float> %437, i64 3, !dbg !80
  store float %526, ptr addrspace(3) %72, align 4, !dbg !80
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !80
  %.extract = load i32, ptr addrspace(3) %63, align 16, !dbg !80
  %.extract19 = load i32, ptr addrspace(3) %104, align 4, !dbg !80
  %.extract20 = load i32, ptr addrspace(3) %105, align 8, !dbg !80
  %.extract21 = load i32, ptr addrspace(3) %106, align 4, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %522, i1 %122) #8, !dbg !80
  br i1 %110, label %109, label %527, !dbg !23

527:                                              ; preds = %374
  %528 = lshr i32 %11, 5, !dbg !12
  %529 = and i32 %11, 24, !dbg !12
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !81
  %530 = bitcast <4 x i1> %448 to i4, !dbg !83
  %531 = icmp ne i4 %530, 0, !dbg !83
  %532 = zext i1 %531 to i8, !dbg !83
  %533 = zext i1 %531 to i32, !dbg !81
  %534 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %533, i32 16, i32 31), !dbg !81
  %535 = trunc i32 %534 to i8, !dbg !81
  %536 = or i8 %535, %532, !dbg !83
  %537 = zext i8 %536 to i32, !dbg !81
  %538 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %537, i32 8, i32 31), !dbg !81
  %539 = trunc i32 %538 to i8, !dbg !81
  %540 = or i8 %536, %539, !dbg !83
  %541 = and i32 %528, 15, !dbg !81
  %542 = icmp eq i32 %529, 0, !dbg !81
  %543 = shl nuw nsw i32 %12, 4, !dbg !81
  %544 = or disjoint i32 %543, %541, !dbg !81
  %545 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %544, !dbg !81
  %546 = insertelement <1 x i8> poison, i8 %540, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %545, <1 x i8> %546, i1 %542) #8, !dbg !81
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !81
  %547 = icmp samesign ult i32 %11, 128, !dbg !81
  %548 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %11, !dbg !81
  %549 = tail call i8 asm sideeffect "@$2 ld.shared.b8 $0, [ $1 + 0 ];", "=h,r,b"(ptr addrspace(3) %548, i1 %547) #8, !dbg !81
  %550 = zext i8 %549 to i32, !dbg !81
  %551 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %550, i32 8, i32 31), !dbg !81
  %552 = trunc i32 %551 to i8, !dbg !81
  %553 = or i8 %549, %552, !dbg !83
  %554 = zext i8 %553 to i32, !dbg !81
  %555 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %554, i32 4, i32 31), !dbg !81
  %556 = trunc i32 %555 to i8, !dbg !81
  %557 = or i8 %553, %556, !dbg !83
  %558 = zext i8 %557 to i32, !dbg !81
  %559 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %558, i32 2, i32 31), !dbg !81
  %560 = trunc i32 %559 to i8, !dbg !81
  %561 = or i8 %557, %560, !dbg !83
  %562 = zext i8 %561 to i32, !dbg !81
  %563 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %562, i32 1, i32 31), !dbg !81
  %564 = trunc i32 %563 to i8, !dbg !81
  %565 = or i8 %561, %564, !dbg !83
  %566 = and i32 %11, 911, !dbg !81
  %567 = icmp eq i32 %566, 0, !dbg !81
  %568 = insertelement <1 x i8> poison, i8 %565, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %548, <1 x i8> %568, i1 %567) #8, !dbg !81
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !81
  %569 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %543, !dbg !81
  %570 = load i8, ptr addrspace(3) %569, align 16, !dbg !81
  %.not7 = icmp eq i8 %570, 0, !dbg !84
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !85
  %571 = extractelement <2 x float> %515, i64 0, !dbg !87
  %572 = fcmp ogt float %571, %513, !dbg !87
  %573 = fcmp uno float %571, 0.000000e+00, !dbg !88
  %574 = or i1 %572, %573, !dbg !89
  %575 = select i1 %574, float %571, float %513, !dbg !90
  %576 = extractelement <2 x float> %515, i64 1, !dbg !87
  %577 = fcmp ogt float %575, %576, !dbg !87
  %578 = fcmp uno float %575, 0.000000e+00, !dbg !88
  %579 = or i1 %577, %578, !dbg !89
  %580 = select i1 %579, float %575, float %576, !dbg !90
  %581 = fcmp ogt float %580, %516, !dbg !87
  %582 = fcmp uno float %580, 0.000000e+00, !dbg !88
  %583 = or i1 %581, %582, !dbg !89
  %584 = select i1 %583, float %580, float %516, !dbg !90
  %585 = bitcast float %584 to i32, !dbg !85
  %586 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %585, i32 16, i32 31), !dbg !85
  %587 = bitcast i32 %586 to float, !dbg !85
  %588 = fcmp ogt float %584, %587, !dbg !87
  %589 = fcmp uno float %584, 0.000000e+00, !dbg !88
  %590 = or i1 %589, %588, !dbg !89
  %591 = select i1 %590, float %584, float %587, !dbg !90
  %592 = bitcast float %591 to i32, !dbg !85
  %593 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %592, i32 8, i32 31), !dbg !85
  %594 = bitcast i32 %593 to float, !dbg !85
  %595 = fcmp ogt float %591, %594, !dbg !87
  %596 = fcmp uno float %591, 0.000000e+00, !dbg !88
  %597 = or i1 %595, %596, !dbg !89
  %598 = getelementptr float, ptr addrspace(3) @global_smem, i32 %544, !dbg !85
  %599 = select i1 %597, i32 %592, i32 %593, !dbg !90
  %600 = insertelement <1 x i32> poison, i32 %599, i64 0, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %598, <1 x i32> %600, i1 %542) #8, !dbg !85
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !85
  %601 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !85
  %602 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %601, i1 %547) #8, !dbg !85
  %603 = bitcast i32 %602 to float, !dbg !85
  %604 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %602, i32 8, i32 31), !dbg !85
  %605 = bitcast i32 %604 to float, !dbg !85
  %606 = fcmp ogt float %603, %605, !dbg !87
  %607 = fcmp uno float %603, 0.000000e+00, !dbg !88
  %608 = or i1 %607, %606, !dbg !89
  %609 = select i1 %608, float %603, float %605, !dbg !90
  %610 = bitcast float %609 to i32, !dbg !85
  %611 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %610, i32 4, i32 31), !dbg !85
  %612 = bitcast i32 %611 to float, !dbg !85
  %613 = fcmp ogt float %609, %612, !dbg !87
  %614 = fcmp uno float %609, 0.000000e+00, !dbg !88
  %615 = or i1 %613, %614, !dbg !89
  %616 = select i1 %615, float %609, float %612, !dbg !90
  %617 = bitcast float %616 to i32, !dbg !85
  %618 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %617, i32 2, i32 31), !dbg !85
  %619 = bitcast i32 %618 to float, !dbg !85
  %620 = fcmp ogt float %616, %619, !dbg !87
  %621 = fcmp uno float %616, 0.000000e+00, !dbg !88
  %622 = or i1 %620, %621, !dbg !89
  %623 = select i1 %622, float %616, float %619, !dbg !90
  %624 = bitcast float %623 to i32, !dbg !85
  %625 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %624, i32 1, i32 31), !dbg !85
  %626 = bitcast i32 %625 to float, !dbg !85
  %627 = fcmp ogt float %623, %626, !dbg !87
  %628 = fcmp uno float %623, 0.000000e+00, !dbg !88
  %629 = or i1 %627, %628, !dbg !89
  %630 = select i1 %629, i32 %624, i32 %625, !dbg !90
  %631 = insertelement <1 x i32> poison, i32 %630, i64 0, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %601, <1 x i32> %631, i1 %567) #8, !dbg !85
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !85
  %632 = getelementptr float, ptr addrspace(3) @global_smem, i32 %543, !dbg !85
  %633 = load float, ptr addrspace(3) %632, align 16, !dbg !85
  %634 = fcmp oeq float %633, 0xFFF0000000000000, !dbg !91
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !92
  %635 = shl nuw nsw i32 %12, 1, !dbg !92
  %636 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %635, !dbg !92
  store float %633, ptr addrspace(3) %636, align 8, !dbg !92
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !92
  %637 = shl nuw nsw i32 %15, 1, !dbg !92
  %638 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %637, !dbg !92
  %639 = load float, ptr addrspace(3) %638, align 8, !dbg !92
  %640 = fsub float %571, %633, !dbg !92
  %641 = fsub float %513, %633, !dbg !92
  %642 = fsub float %576, %633, !dbg !92
  %643 = fsub float %516, %633, !dbg !92
  %644 = fmul float %640, 0x3FF7154760000000, !dbg !93
  %645 = select i1 %634, float 0.000000e+00, float %644, !dbg !94
  %646 = tail call float @llvm.nvvm.ex2.approx.f(float %645), !dbg !93
  %647 = fmul float %641, 0x3FF7154760000000, !dbg !93
  %648 = select i1 %634, float 0.000000e+00, float %647, !dbg !94
  %649 = tail call float @llvm.nvvm.ex2.approx.f(float %648), !dbg !93
  %650 = fmul float %642, 0x3FF7154760000000, !dbg !93
  %651 = select i1 %634, float 0.000000e+00, float %650, !dbg !94
  %652 = tail call float @llvm.nvvm.ex2.approx.f(float %651), !dbg !93
  %653 = fmul float %643, 0x3FF7154760000000, !dbg !93
  %654 = select i1 %634, float 0.000000e+00, float %653, !dbg !94
  %655 = tail call float @llvm.nvvm.ex2.approx.f(float %654), !dbg !93
  %656 = fmul float %517, %649, !dbg !95
  %657 = insertelement <2 x float> poison, float %646, i64 0, !dbg !95
  %658 = insertelement <2 x float> %657, float %652, i64 1, !dbg !95
  %659 = fmul <2 x float> %518, %658, !dbg !95
  %660 = fmul float %519, %655, !dbg !95
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !96
  %661 = extractelement <2 x float> %659, i64 0, !dbg !99
  %662 = fadd float %661, %656, !dbg !99
  %663 = extractelement <2 x float> %659, i64 1, !dbg !99
  %664 = fadd float %662, %663, !dbg !99
  %665 = fadd float %664, %660, !dbg !99
  %666 = bitcast float %665 to i32, !dbg !96
  %667 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %666, i32 16, i32 31), !dbg !96
  %668 = bitcast i32 %667 to float, !dbg !96
  %669 = fadd float %665, %668, !dbg !99
  %670 = bitcast float %669 to i32, !dbg !96
  %671 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %670, i32 8, i32 31), !dbg !96
  %672 = bitcast i32 %671 to float, !dbg !96
  %673 = fadd float %669, %672, !dbg !99
  %674 = bitcast float %673 to <1 x i32>, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %598, <1 x i32> %674, i1 %542) #8, !dbg !96
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !96
  %675 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %601, i1 %547) #8, !dbg !96
  %676 = bitcast i32 %675 to float, !dbg !96
  %677 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %675, i32 8, i32 31), !dbg !96
  %678 = bitcast i32 %677 to float, !dbg !96
  %679 = fadd float %676, %678, !dbg !99
  %680 = bitcast float %679 to i32, !dbg !96
  %681 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %680, i32 4, i32 31), !dbg !96
  %682 = bitcast i32 %681 to float, !dbg !96
  %683 = fadd float %679, %682, !dbg !99
  %684 = bitcast float %683 to i32, !dbg !96
  %685 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %684, i32 2, i32 31), !dbg !96
  %686 = bitcast i32 %685 to float, !dbg !96
  %687 = fadd float %683, %686, !dbg !99
  %688 = bitcast float %687 to i32, !dbg !96
  %689 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %688, i32 1, i32 31), !dbg !96
  %690 = bitcast i32 %689 to float, !dbg !96
  %691 = fadd float %687, %690, !dbg !99
  %692 = bitcast float %691 to <1 x i32>, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %601, <1 x i32> %692, i1 %567) #8, !dbg !96
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !96
  %693 = load i32, ptr addrspace(3) %632, align 16, !dbg !96
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !100
  %694 = insertelement <1 x i32> poison, i32 %693, i64 0, !dbg !100
  store <1 x i32> %694, ptr addrspace(3) %636, align 8, !dbg !100
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !100
  %695 = load float, ptr addrspace(3) %638, align 8, !dbg !100
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !101
  %696 = zext i1 %.not7 to i8, !dbg !101
  %697 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %635, !dbg !101
  %698 = insertelement <1 x i8> poison, i8 %696, i64 0, !dbg !101
  store <1 x i8> %698, ptr addrspace(3) %697, align 2, !dbg !101
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !101
  %699 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %637, !dbg !101
  %700 = load i8, ptr addrspace(3) %699, align 2, !dbg !101
  %701 = trunc i8 %700 to i1, !dbg !101
  %702 = add i32 %25, %49, !dbg !102
  %703 = sext i32 %702 to i64, !dbg !103
  %704 = getelementptr float, ptr addrspace(1) %2, i64 %703, !dbg !103
  %705 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #8, !dbg !104
  %706 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %704, i64 %705, i1 %19) #8, !dbg !104
  %707 = extractvalue { i32, i32, i32, i32 } %706, 0, !dbg !104
  %708 = extractvalue { i32, i32, i32, i32 } %706, 1, !dbg !104
  %709 = extractvalue { i32, i32, i32, i32 } %706, 2, !dbg !104
  %710 = extractvalue { i32, i32, i32, i32 } %706, 3, !dbg !104
  %711 = bitcast i32 %707 to float, !dbg !104
  %712 = bitcast i32 %708 to float, !dbg !104
  %713 = bitcast i32 %709 to float, !dbg !104
  %714 = bitcast i32 %710 to float, !dbg !104
  %715 = add i32 %97, %25, !dbg !105
  %716 = sext i32 %715 to i64, !dbg !106
  %717 = getelementptr float, ptr addrspace(1) %3, i64 %716, !dbg !106
  %718 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #8, !dbg !107
  %719 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %717, i64 %718, i1 %19) #8, !dbg !107
  %720 = extractvalue { i32, i32, i32, i32 } %719, 0, !dbg !107
  %721 = extractvalue { i32, i32, i32, i32 } %719, 1, !dbg !107
  %722 = extractvalue { i32, i32, i32, i32 } %719, 2, !dbg !107
  %723 = extractvalue { i32, i32, i32, i32 } %719, 3, !dbg !107
  %724 = bitcast i32 %720 to float, !dbg !107
  %725 = bitcast i32 %721 to float, !dbg !107
  %726 = bitcast i32 %722 to float, !dbg !107
  %727 = bitcast i32 %723 to float, !dbg !107
  %728 = fadd float %711, %724, !dbg !108
  %729 = fadd float %712, %725, !dbg !108
  %730 = fadd float %713, %726, !dbg !108
  %731 = fadd float %714, %727, !dbg !108
  %732 = fsub float %728, %639, !dbg !109
  %733 = fsub float %729, %639, !dbg !109
  %734 = fsub float %730, %639, !dbg !109
  %735 = fsub float %731, %639, !dbg !109
  %736 = fmul float %732, 0x3FF7154760000000, !dbg !110
  %737 = tail call float @llvm.nvvm.ex2.approx.f(float %736), !dbg !110
  %738 = fmul float %733, 0x3FF7154760000000, !dbg !110
  %739 = tail call float @llvm.nvvm.ex2.approx.f(float %738), !dbg !110
  %740 = fmul float %734, 0x3FF7154760000000, !dbg !110
  %741 = tail call float @llvm.nvvm.ex2.approx.f(float %740), !dbg !110
  %742 = fmul float %735, 0x3FF7154760000000, !dbg !110
  %743 = tail call float @llvm.nvvm.ex2.approx.f(float %742), !dbg !110
  %744 = tail call float @llvm.nvvm.div.full(float %737, float %695), !dbg !100
  %745 = tail call float @llvm.nvvm.div.full(float %739, float %695), !dbg !100
  %746 = tail call float @llvm.nvvm.div.full(float %741, float %695), !dbg !100
  %747 = tail call float @llvm.nvvm.div.full(float %743, float %695), !dbg !100
  %748 = getelementptr float, ptr addrspace(1) %4, i64 %716, !dbg !111
  %749 = bitcast float %744 to i32, !dbg !112
  %750 = select i1 %701, i32 0, i32 %749, !dbg !101
  %751 = bitcast float %745 to i32, !dbg !112
  %752 = select i1 %701, i32 0, i32 %751, !dbg !101
  %753 = bitcast float %746 to i32, !dbg !112
  %754 = select i1 %701, i32 0, i32 %753, !dbg !101
  %755 = bitcast float %747 to i32, !dbg !112
  %756 = select i1 %701, i32 0, i32 %755, !dbg !101
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %750, i32 %752, i32 %754, i32 %756, ptr addrspace(1) %748, i1 %19) #8, !dbg !112
  %757 = or disjoint i64 %101, 256, !dbg !113
  %758 = icmp samesign ult i64 %757, 324, !dbg !114
  %759 = trunc nuw nsw i64 %757 to i32, !dbg !102
  %760 = add i32 %49, %759, !dbg !102
  %761 = sext i32 %760 to i64, !dbg !103
  %762 = getelementptr float, ptr addrspace(1) %2, i64 %761, !dbg !103
  %763 = and i1 %19, %758, !dbg !115
  %764 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #8, !dbg !104
  %765 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %762, i64 %764, i1 %763) #8, !dbg !104
  %766 = extractvalue { i32, i32, i32, i32 } %765, 0, !dbg !104
  %767 = extractvalue { i32, i32, i32, i32 } %765, 1, !dbg !104
  %768 = extractvalue { i32, i32, i32, i32 } %765, 2, !dbg !104
  %769 = extractvalue { i32, i32, i32, i32 } %765, 3, !dbg !104
  %770 = bitcast i32 %766 to float, !dbg !104
  %771 = bitcast i32 %767 to float, !dbg !104
  %772 = bitcast i32 %768 to float, !dbg !104
  %773 = bitcast i32 %769 to float, !dbg !104
  %774 = add i32 %97, %759, !dbg !105
  %775 = sext i32 %774 to i64, !dbg !106
  %776 = getelementptr float, ptr addrspace(1) %3, i64 %775, !dbg !106
  %777 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #8, !dbg !107
  %778 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %776, i64 %777, i1 %763) #8, !dbg !107
  %779 = extractvalue { i32, i32, i32, i32 } %778, 0, !dbg !107
  %780 = extractvalue { i32, i32, i32, i32 } %778, 1, !dbg !107
  %781 = extractvalue { i32, i32, i32, i32 } %778, 2, !dbg !107
  %782 = extractvalue { i32, i32, i32, i32 } %778, 3, !dbg !107
  %783 = bitcast i32 %779 to float, !dbg !107
  %784 = bitcast i32 %780 to float, !dbg !107
  %785 = bitcast i32 %781 to float, !dbg !107
  %786 = bitcast i32 %782 to float, !dbg !107
  %787 = fadd float %770, %783, !dbg !108
  %788 = fadd float %771, %784, !dbg !108
  %789 = fadd float %772, %785, !dbg !108
  %790 = fadd float %773, %786, !dbg !108
  %791 = fsub float %787, %639, !dbg !109
  %792 = fsub float %788, %639, !dbg !109
  %793 = fsub float %789, %639, !dbg !109
  %794 = fsub float %790, %639, !dbg !109
  %795 = fmul float %791, 0x3FF7154760000000, !dbg !110
  %796 = tail call float @llvm.nvvm.ex2.approx.f(float %795), !dbg !110
  %797 = fmul float %792, 0x3FF7154760000000, !dbg !110
  %798 = tail call float @llvm.nvvm.ex2.approx.f(float %797), !dbg !110
  %799 = fmul float %793, 0x3FF7154760000000, !dbg !110
  %800 = tail call float @llvm.nvvm.ex2.approx.f(float %799), !dbg !110
  %801 = fmul float %794, 0x3FF7154760000000, !dbg !110
  %802 = tail call float @llvm.nvvm.ex2.approx.f(float %801), !dbg !110
  %803 = tail call float @llvm.nvvm.div.full(float %796, float %695), !dbg !100
  %804 = tail call float @llvm.nvvm.div.full(float %798, float %695), !dbg !100
  %805 = tail call float @llvm.nvvm.div.full(float %800, float %695), !dbg !100
  %806 = tail call float @llvm.nvvm.div.full(float %802, float %695), !dbg !100
  %807 = getelementptr float, ptr addrspace(1) %4, i64 %775, !dbg !111
  %808 = bitcast float %803 to i32, !dbg !112
  %809 = select i1 %701, i32 0, i32 %808, !dbg !101
  %810 = bitcast float %804 to i32, !dbg !112
  %811 = select i1 %701, i32 0, i32 %810, !dbg !101
  %812 = bitcast float %805 to i32, !dbg !112
  %813 = select i1 %701, i32 0, i32 %812, !dbg !101
  %814 = bitcast float %806 to i32, !dbg !112
  %815 = select i1 %701, i32 0, i32 %814, !dbg !101
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %809, i32 %811, i32 %813, i32 %815, ptr addrspace(1) %807, i1 %763) #8, !dbg !112
  ret void, !dbg !116
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #5

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x i32> @llvm.abs.v4i32(<4 x i32>, i1 immarg) #7

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x i64> @llvm.smin.v4i64(<4 x i64>, <4 x i64>) #7

attributes #0 = { noreturn }
attributes #1 = { "nvvm.reqntid"="512" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #8 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "ccisb2yra76ab2haychl3vkjloggui7jornx4qodogdjo7v6y64e.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/ci")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !6, file: !6, type: !7, spFlags: DISPFlagOptimized)
!6 = !DIFile(filename: "<unknown>", directory: "")
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mul_rsub_4", linkageName: "triton_red_fused__to_copy_add_mul_rsub_4", scope: !1, file: !1, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!10 = !DILocation(line: 23, column: 28, scope: !9)
!11 = !DILocation(line: 23, column: 33, scope: !9)
!12 = !DILocation(line: 24, column: 44, scope: !9)
!13 = !DILocation(line: 24, column: 23, scope: !9)
!14 = !DILocation(line: 25, column: 21, scope: !9)
!15 = !DILocation(line: 26, column: 37, scope: !9)
!16 = !DILocation(line: 28, column: 19, scope: !9)
!17 = !DILocation(line: 29, column: 21, scope: !9)
!18 = !DILocation(line: 29, column: 28, scope: !9)
!19 = !DILocation(line: 30, column: 19, scope: !9)
!20 = !DILocation(line: 43, column: 46, scope: !9)
!21 = !DILocation(line: 44, column: 46, scope: !9)
!22 = !DILocation(line: 74, column: 40, scope: !9)
!23 = !DILocation(line: 37, column: 40, scope: !9)
!24 = !DILocation(line: 89, column: 50, scope: !9)
!25 = !DILocation(line: 96, column: 64, scope: !9)
!26 = !DILocation(line: 38, column: 31, scope: !9)
!27 = !DILocation(line: 39, column: 29, scope: !9)
!28 = !DILocation(line: 43, column: 35, scope: !9)
!29 = !DILocation(line: 43, column: 61, scope: !9)
!30 = !DILocation(line: 43, column: 51, scope: !9)
!31 = !DILocation(line: 44, column: 42, scope: !9)
!32 = !DILocation(line: 44, column: 35, scope: !9)
!33 = !DILocation(line: 44, column: 51, scope: !9)
!34 = !DILocation(line: 45, column: 23, scope: !9)
!35 = !DILocation(line: 47, column: 22, scope: !9)
!36 = !DILocation(line: 50, column: 22, scope: !9)
!37 = !DILocation(line: 52, column: 27, scope: !9)
!38 = !DILocation(line: 54, column: 22, scope: !9)
!39 = !DILocation(line: 55, column: 24, scope: !9)
!40 = !DILocation(line: 57, column: 24, scope: !9)
!41 = !DILocation(line: 58, column: 28, scope: !9)
!42 = !DILocation(line: 60, column: 24, scope: !9)
!43 = !DILocation(line: 62, column: 24, scope: !9)
!44 = !DILocation(line: 63, column: 25, scope: !9)
!45 = !DILocation(line: 64, column: 24, scope: !9)
!46 = !DILocation(line: 106, column: 29, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !9, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 66, column: 46, scope: !9)
!50 = !DILocation(line: 67, column: 37, scope: !9)
!51 = !DILocation(line: 68, column: 23, scope: !9)
!52 = !DILocation(line: 72, column: 39, scope: !9)
!53 = !DILocation(line: 73, column: 42, scope: !9)
!54 = !DILocation(line: 73, column: 57, scope: !9)
!55 = !DILocation(line: 73, column: 77, scope: !9)
!56 = !DILocation(line: 74, column: 35, scope: !9)
!57 = !DILocation(line: 74, column: 50, scope: !9)
!58 = !DILocation(line: 75, column: 25, scope: !9)
!59 = !DILocation(line: 77, column: 24, scope: !9)
!60 = !DILocation(line: 79, column: 24, scope: !9)
!61 = !DILocation(line: 80, column: 24, scope: !9)
!62 = !DILocation(line: 81, column: 24, scope: !9)
!63 = !DILocation(line: 83, column: 25, scope: !9)
!64 = !DILocation(line: 200, column: 53, scope: !47, inlinedAt: !65)
!65 = !DILocation(line: 93, column: 43, scope: !9)
!66 = !DILocation(line: 111, column: 15, scope: !47, inlinedAt: !65)
!67 = !DILocation(line: 113, column: 21, scope: !47, inlinedAt: !65)
!68 = !DILocation(line: 113, column: 16, scope: !47, inlinedAt: !65)
!69 = !DILocation(line: 114, column: 29, scope: !47, inlinedAt: !65)
!70 = !DILocation(line: 197, column: 19, scope: !47, inlinedAt: !65)
!71 = !DILocation(line: 197, column: 53, scope: !47, inlinedAt: !65)
!72 = !DILocation(line: 174, column: 24, scope: !47, inlinedAt: !65)
!73 = !DILocation(line: 197, column: 39, scope: !47, inlinedAt: !65)
!74 = !DILocation(line: 200, column: 39, scope: !47, inlinedAt: !65)
!75 = !DILocation(line: 206, column: 24, scope: !47, inlinedAt: !65)
!76 = !DILocation(line: 206, column: 36, scope: !47, inlinedAt: !65)
!77 = !DILocation(line: 97, column: 64, scope: !9)
!78 = !DILocation(line: 98, column: 45, scope: !9)
!79 = !DILocation(line: 98, column: 29, scope: !9)
!80 = !DILocation(line: 98, column: 64, scope: !9)
!81 = !DILocation(line: 266, column: 29, scope: !47, inlinedAt: !82)
!82 = !DILocation(line: 99, column: 51, scope: !9)
!83 = !DILocation(line: 261, column: 15, scope: !47, inlinedAt: !82)
!84 = !DILocation(line: 99, column: 66, scope: !9)
!85 = !DILocation(line: 124, column: 29, scope: !47, inlinedAt: !86)
!86 = !DILocation(line: 102, column: 35, scope: !9)
!87 = !DILocation(line: 111, column: 15, scope: !47, inlinedAt: !86)
!88 = !DILocation(line: 113, column: 21, scope: !47, inlinedAt: !86)
!89 = !DILocation(line: 113, column: 16, scope: !47, inlinedAt: !86)
!90 = !DILocation(line: 114, column: 29, scope: !47, inlinedAt: !86)
!91 = !DILocation(line: 181, column: 40, scope: !47, inlinedAt: !86)
!92 = !DILocation(line: 181, column: 68, scope: !47, inlinedAt: !86)
!93 = !DILocation(line: 174, column: 24, scope: !47, inlinedAt: !86)
!94 = !DILocation(line: 181, column: 58, scope: !47, inlinedAt: !86)
!95 = !DILocation(line: 182, column: 31, scope: !47, inlinedAt: !86)
!96 = !DILocation(line: 290, column: 36, scope: !97, inlinedAt: !86)
!97 = distinct !DILexicalBlockFile(scope: !9, file: !98, discriminator: 0)
!98 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!99 = !DILocation(line: 260, column: 15, scope: !97, inlinedAt: !86)
!100 = !DILocation(line: 119, column: 25, scope: !9)
!101 = !DILocation(line: 121, column: 39, scope: !9)
!102 = !DILocation(line: 113, column: 42, scope: !9)
!103 = !DILocation(line: 113, column: 35, scope: !9)
!104 = !DILocation(line: 113, column: 51, scope: !9)
!105 = !DILocation(line: 114, column: 52, scope: !9)
!106 = !DILocation(line: 114, column: 36, scope: !9)
!107 = !DILocation(line: 114, column: 64, scope: !9)
!108 = !DILocation(line: 116, column: 24, scope: !9)
!109 = !DILocation(line: 117, column: 24, scope: !9)
!110 = !DILocation(line: 118, column: 28, scope: !9)
!111 = !DILocation(line: 122, column: 29, scope: !9)
!112 = !DILocation(line: 122, column: 64, scope: !9)
!113 = !DILocation(line: 108, column: 31, scope: !9)
!114 = !DILocation(line: 109, column: 29, scope: !9)
!115 = !DILocation(line: 113, column: 61, scope: !9)
!116 = !DILocation(line: 107, column: 4, scope: !9)
