; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_poi_fused__softmax_add_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr #0 !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.z(), !dbg !8
  %10 = shl nuw nsw i32 %9, 3, !dbg !9
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %12 = lshr i32 %11, 1, !dbg !10
  %.lobit = and i32 %12, 1, !dbg !10
  %13 = and i32 %12, 2, !dbg !10
  %14 = and i32 %12, 4, !dbg !10
  %15 = and i32 %12, 7, !dbg !10
  %16 = and i32 %11, 1, !dbg !10
  %17 = shl nuw nsw i32 %16, 2, !dbg !10
  %18 = and i32 %11, 32, !dbg !10
  %19 = and i32 %11, 64, !dbg !10
  %20 = and i32 %11, 128, !dbg !10
  %21 = lshr i32 %11, 5, !dbg !10
  %22 = and i32 %21, 7, !dbg !10
  %23 = or disjoint i32 %15, %10, !dbg !11
  %24 = or disjoint i32 %17, %10, !dbg !11
  %25 = or disjoint i32 %22, %10, !dbg !11
  %26 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !12
  %27 = shl nuw nsw i32 %26, 6, !dbg !13
  %28 = and i32 %11, 16, !dbg !14
  %29 = lshr i32 %11, 4, !dbg !14
  %30 = and i32 %29, 7, !dbg !14
  %31 = lshr exact i32 %20, 4, !dbg !14
  %32 = or disjoint i32 %30, %31, !dbg !14
  %33 = lshr exact i32 %28, 1, !dbg !14
  %34 = lshr exact i32 %18, 1, !dbg !14
  %35 = lshr exact i32 %19, 1, !dbg !14
  %36 = shl nuw nsw i32 %11, 1, !dbg !14
  %37 = and i32 %36, 62, !dbg !14
  %38 = or disjoint i32 %32, %27, !dbg !15
  %39 = or disjoint i32 %34, %33, !dbg !14
  %40 = or disjoint i32 %39, %27, !dbg !14
  %41 = or disjoint i32 %40, %15, !dbg !14
  %42 = or disjoint i32 %41, %35, !dbg !15
  %43 = or disjoint i32 %37, %27, !dbg !15
  %44 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !16
  %45 = shl i32 %44, 3, !dbg !17
  %.lobit7 = lshr exact i32 %20, 7, !dbg !18
  %46 = or disjoint i32 %17, %45, !dbg !19
  %47 = or disjoint i32 %.lobit7, %45, !dbg !19
  %48 = or disjoint i32 %47, 2, !dbg !19
  %49 = or disjoint i32 %47, 4, !dbg !19
  %50 = or disjoint i32 %47, 6, !dbg !19
  %51 = icmp slt i32 %46, 64, !dbg !20
  %52 = icmp slt i32 %47, 64, !dbg !20
  %53 = icmp slt i32 %48, 64, !dbg !20
  %54 = icmp slt i32 %49, 64, !dbg !20
  %55 = icmp slt i32 %50, 64, !dbg !20
  %56 = shl nuw nsw i32 %38, 6, !dbg !21
  %57 = or disjoint i32 %56, 1024, !dbg !21
  %58 = or disjoint i32 %56, 2048, !dbg !21
  %59 = or disjoint i32 %56, 3072, !dbg !21
  %60 = shl nuw nsw i32 %23, 12, !dbg !22
  %61 = add i32 %60, %46, !dbg !23
  %62 = add i32 %61, %56, !dbg !24
  %63 = add i32 %61, %57, !dbg !24
  %64 = add i32 %61, %58, !dbg !24
  %65 = add i32 %61, %59, !dbg !24
  %66 = sext i32 %62 to i64, !dbg !25
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !25
  %68 = sext i32 %63 to i64, !dbg !25
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !25
  %70 = sext i32 %64 to i64, !dbg !25
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !25
  %72 = sext i32 %65 to i64, !dbg !25
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !25
  %74 = or i32 %9, %26, !dbg !26
  %75 = icmp eq i32 %74, 0, !dbg !26
  %76 = and i1 %75, %51, !dbg !26
  %77 = and i1 %75, %52, !dbg !26
  %78 = and i1 %75, %53, !dbg !26
  %79 = and i1 %75, %54, !dbg !26
  %80 = and i1 %75, %55, !dbg !26
  %81 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !27
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$6 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l,b"(ptr addrspace(1) %67, i64 %81, i1 %76) #4, !dbg !27
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !27
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !27
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !27
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !27
  %87 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !27
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$6 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l,b"(ptr addrspace(1) %69, i64 %87, i1 %76) #4, !dbg !27
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !27
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !27
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !27
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !27
  %93 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !27
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$6 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l,b"(ptr addrspace(1) %71, i64 %93, i1 %76) #4, !dbg !27
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !27
  %96 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !27
  %97 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !27
  %98 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !27
  %99 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !27
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$6 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l,b"(ptr addrspace(1) %73, i64 %99, i1 %76) #4, !dbg !27
  %101 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !27
  %102 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !27
  %103 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !27
  %104 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !27
  %105 = shl nuw nsw i32 %16, 5, !dbg !27
  %106 = shl nuw nsw i32 %28, 2, !dbg !27
  %107 = or disjoint i32 %105, %106, !dbg !27
  %108 = or disjoint i32 %107, %.lobit, !dbg !27
  %109 = or disjoint i32 %108, %13, !dbg !27
  %110 = or disjoint i32 %109, %14, !dbg !27
  %111 = shl nuw nsw i32 %18, 2, !dbg !27
  %112 = shl nuw nsw i32 %19, 2, !dbg !27
  %113 = shl nuw nsw i32 %20, 2, !dbg !27
  %114 = or disjoint i32 %112, %111, !dbg !27
  %115 = or disjoint i32 %114, %113, !dbg !27
  %116 = xor i32 %115, %110, !dbg !27
  %117 = shl nuw nsw i32 %11, 5, !dbg !27
  %118 = and i32 %117, 4032, !dbg !27
  %119 = or disjoint i32 %118, %17, !dbg !27
  %120 = or disjoint i32 %119, %31, !dbg !27
  %121 = lshr i32 %116, 3, !dbg !27
  %122 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %121, !dbg !27
  %123 = getelementptr inbounds nuw float, ptr addrspace(3) %122, i32 %116, !dbg !27
  %124 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !27
  store <1 x i32> %124, ptr addrspace(3) %123, align 4, !dbg !27
  %125 = xor i32 %116, 8, !dbg !27
  %126 = lshr i32 %125, 3, !dbg !27
  %127 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %126, !dbg !27
  %128 = getelementptr inbounds nuw float, ptr addrspace(3) %127, i32 %125, !dbg !27
  %129 = insertelement <1 x i32> poison, i32 %84, i64 0, !dbg !27
  store <1 x i32> %129, ptr addrspace(3) %128, align 4, !dbg !27
  %130 = xor i32 %116, 16, !dbg !27
  %131 = lshr i32 %130, 3, !dbg !27
  %132 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %131, !dbg !27
  %133 = getelementptr inbounds nuw float, ptr addrspace(3) %132, i32 %130, !dbg !27
  %134 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !27
  store <1 x i32> %134, ptr addrspace(3) %133, align 4, !dbg !27
  %135 = xor i32 %116, 24, !dbg !27
  %136 = lshr i32 %135, 3, !dbg !27
  %137 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %136, !dbg !27
  %138 = getelementptr inbounds nuw float, ptr addrspace(3) %137, i32 %135, !dbg !27
  %139 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !27
  store <1 x i32> %139, ptr addrspace(3) %138, align 4, !dbg !27
  %140 = xor i32 %116, 1024, !dbg !27
  %141 = lshr i32 %140, 3, !dbg !27
  %142 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %141, !dbg !27
  %143 = getelementptr inbounds nuw float, ptr addrspace(3) %142, i32 %140, !dbg !27
  %144 = insertelement <1 x i32> poison, i32 %89, i64 0, !dbg !27
  store <1 x i32> %144, ptr addrspace(3) %143, align 4, !dbg !27
  %145 = xor i32 %116, 1032, !dbg !27
  %146 = lshr i32 %145, 3, !dbg !27
  %147 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %146, !dbg !27
  %148 = getelementptr inbounds nuw float, ptr addrspace(3) %147, i32 %145, !dbg !27
  %149 = insertelement <1 x i32> poison, i32 %90, i64 0, !dbg !27
  store <1 x i32> %149, ptr addrspace(3) %148, align 4, !dbg !27
  %150 = xor i32 %116, 1040, !dbg !27
  %151 = lshr i32 %150, 3, !dbg !27
  %152 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %151, !dbg !27
  %153 = getelementptr inbounds nuw float, ptr addrspace(3) %152, i32 %150, !dbg !27
  %154 = insertelement <1 x i32> poison, i32 %91, i64 0, !dbg !27
  store <1 x i32> %154, ptr addrspace(3) %153, align 4, !dbg !27
  %155 = xor i32 %116, 1048, !dbg !27
  %156 = lshr i32 %155, 3, !dbg !27
  %157 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %156, !dbg !27
  %158 = getelementptr inbounds nuw float, ptr addrspace(3) %157, i32 %155, !dbg !27
  %159 = insertelement <1 x i32> poison, i32 %92, i64 0, !dbg !27
  store <1 x i32> %159, ptr addrspace(3) %158, align 4, !dbg !27
  %160 = xor i32 %116, 2048, !dbg !27
  %161 = lshr i32 %160, 3, !dbg !27
  %162 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %161, !dbg !27
  %163 = getelementptr inbounds nuw float, ptr addrspace(3) %162, i32 %160, !dbg !27
  %164 = insertelement <1 x i32> poison, i32 %95, i64 0, !dbg !27
  store <1 x i32> %164, ptr addrspace(3) %163, align 4, !dbg !27
  %165 = xor i32 %116, 2056, !dbg !27
  %166 = lshr i32 %165, 3, !dbg !27
  %167 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %166, !dbg !27
  %168 = getelementptr inbounds nuw float, ptr addrspace(3) %167, i32 %165, !dbg !27
  %169 = insertelement <1 x i32> poison, i32 %96, i64 0, !dbg !27
  store <1 x i32> %169, ptr addrspace(3) %168, align 4, !dbg !27
  %170 = xor i32 %116, 2064, !dbg !27
  %171 = lshr i32 %170, 3, !dbg !27
  %172 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %171, !dbg !27
  %173 = getelementptr inbounds nuw float, ptr addrspace(3) %172, i32 %170, !dbg !27
  %174 = insertelement <1 x i32> poison, i32 %97, i64 0, !dbg !27
  store <1 x i32> %174, ptr addrspace(3) %173, align 4, !dbg !27
  %175 = xor i32 %116, 2072, !dbg !27
  %176 = lshr i32 %175, 3, !dbg !27
  %177 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %176, !dbg !27
  %178 = getelementptr inbounds nuw float, ptr addrspace(3) %177, i32 %175, !dbg !27
  %179 = insertelement <1 x i32> poison, i32 %98, i64 0, !dbg !27
  store <1 x i32> %179, ptr addrspace(3) %178, align 4, !dbg !27
  %180 = xor i32 %116, 3072, !dbg !27
  %181 = lshr i32 %180, 3, !dbg !27
  %182 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %181, !dbg !27
  %183 = getelementptr inbounds nuw float, ptr addrspace(3) %182, i32 %180, !dbg !27
  %184 = insertelement <1 x i32> poison, i32 %101, i64 0, !dbg !27
  store <1 x i32> %184, ptr addrspace(3) %183, align 4, !dbg !27
  %185 = xor i32 %116, 3080, !dbg !27
  %186 = lshr i32 %185, 3, !dbg !27
  %187 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %186, !dbg !27
  %188 = getelementptr inbounds nuw float, ptr addrspace(3) %187, i32 %185, !dbg !27
  %189 = insertelement <1 x i32> poison, i32 %102, i64 0, !dbg !27
  store <1 x i32> %189, ptr addrspace(3) %188, align 4, !dbg !27
  %190 = xor i32 %116, 3088, !dbg !27
  %191 = lshr i32 %190, 3, !dbg !27
  %192 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %191, !dbg !27
  %193 = getelementptr inbounds nuw float, ptr addrspace(3) %192, i32 %190, !dbg !27
  %194 = insertelement <1 x i32> poison, i32 %103, i64 0, !dbg !27
  store <1 x i32> %194, ptr addrspace(3) %193, align 4, !dbg !27
  %195 = xor i32 %116, 3096, !dbg !27
  %196 = lshr i32 %195, 3, !dbg !27
  %197 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %196, !dbg !27
  %198 = getelementptr inbounds nuw float, ptr addrspace(3) %197, i32 %195, !dbg !27
  %199 = insertelement <1 x i32> poison, i32 %104, i64 0, !dbg !27
  store <1 x i32> %199, ptr addrspace(3) %198, align 4, !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !27
  %200 = lshr i32 %120, 3, !dbg !27
  %201 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %200, !dbg !27
  %202 = getelementptr inbounds nuw float, ptr addrspace(3) %201, i32 %120, !dbg !27
  %203 = load float, ptr addrspace(3) %202, align 4, !dbg !27
  %204 = getelementptr inbounds nuw i8, ptr addrspace(3) %202, i32 4, !dbg !27
  %205 = load float, ptr addrspace(3) %204, align 4, !dbg !27
  %206 = getelementptr inbounds nuw i8, ptr addrspace(3) %202, i32 8, !dbg !27
  %207 = load float, ptr addrspace(3) %206, align 4, !dbg !27
  %208 = getelementptr inbounds nuw i8, ptr addrspace(3) %202, i32 12, !dbg !27
  %209 = load float, ptr addrspace(3) %208, align 4, !dbg !27
  %210 = or disjoint i32 %120, 16, !dbg !27
  %211 = lshr i32 %210, 3, !dbg !27
  %212 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %211, !dbg !27
  %213 = getelementptr inbounds nuw float, ptr addrspace(3) %212, i32 %210, !dbg !27
  %214 = load float, ptr addrspace(3) %213, align 4, !dbg !27
  %215 = or disjoint i32 %120, 17, !dbg !27
  %216 = lshr i32 %215, 3, !dbg !27
  %217 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %216, !dbg !27
  %218 = getelementptr inbounds nuw float, ptr addrspace(3) %217, i32 %215, !dbg !27
  %219 = load float, ptr addrspace(3) %218, align 4, !dbg !27
  %220 = or disjoint i32 %120, 18, !dbg !27
  %221 = lshr i32 %220, 3, !dbg !27
  %222 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %221, !dbg !27
  %223 = getelementptr inbounds nuw float, ptr addrspace(3) %222, i32 %220, !dbg !27
  %224 = load float, ptr addrspace(3) %223, align 4, !dbg !27
  %225 = or disjoint i32 %120, 19, !dbg !27
  %226 = lshr i32 %225, 3, !dbg !27
  %227 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %226, !dbg !27
  %228 = getelementptr inbounds nuw float, ptr addrspace(3) %227, i32 %225, !dbg !27
  %229 = load float, ptr addrspace(3) %228, align 4, !dbg !27
  %230 = or disjoint i32 %120, 32, !dbg !27
  %231 = lshr i32 %230, 3, !dbg !27
  %232 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %231, !dbg !27
  %233 = getelementptr inbounds nuw float, ptr addrspace(3) %232, i32 %230, !dbg !27
  %234 = load float, ptr addrspace(3) %233, align 4, !dbg !27
  %235 = or disjoint i32 %120, 33, !dbg !27
  %236 = lshr i32 %235, 3, !dbg !27
  %237 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %236, !dbg !27
  %238 = getelementptr inbounds nuw float, ptr addrspace(3) %237, i32 %235, !dbg !27
  %239 = load float, ptr addrspace(3) %238, align 4, !dbg !27
  %240 = or disjoint i32 %120, 34, !dbg !27
  %241 = lshr i32 %240, 3, !dbg !27
  %242 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %241, !dbg !27
  %243 = getelementptr inbounds nuw float, ptr addrspace(3) %242, i32 %240, !dbg !27
  %244 = load float, ptr addrspace(3) %243, align 4, !dbg !27
  %245 = or disjoint i32 %120, 35, !dbg !27
  %246 = lshr i32 %245, 3, !dbg !27
  %247 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %246, !dbg !27
  %248 = getelementptr inbounds nuw float, ptr addrspace(3) %247, i32 %245, !dbg !27
  %249 = load float, ptr addrspace(3) %248, align 4, !dbg !27
  %250 = or disjoint i32 %120, 48, !dbg !27
  %251 = lshr i32 %250, 3, !dbg !27
  %252 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %251, !dbg !27
  %253 = getelementptr inbounds nuw float, ptr addrspace(3) %252, i32 %250, !dbg !27
  %254 = load float, ptr addrspace(3) %253, align 4, !dbg !27
  %255 = or disjoint i32 %120, 49, !dbg !27
  %256 = lshr i32 %255, 3, !dbg !27
  %257 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %256, !dbg !27
  %258 = getelementptr inbounds nuw float, ptr addrspace(3) %257, i32 %255, !dbg !27
  %259 = load float, ptr addrspace(3) %258, align 4, !dbg !27
  %260 = or disjoint i32 %120, 50, !dbg !27
  %261 = lshr i32 %260, 3, !dbg !27
  %262 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %261, !dbg !27
  %263 = getelementptr inbounds nuw float, ptr addrspace(3) %262, i32 %260, !dbg !27
  %264 = load float, ptr addrspace(3) %263, align 4, !dbg !27
  %265 = or disjoint i32 %120, 51, !dbg !27
  %266 = lshr i32 %265, 3, !dbg !27
  %267 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %266, !dbg !27
  %268 = getelementptr inbounds nuw float, ptr addrspace(3) %267, i32 %265, !dbg !27
  %269 = load float, ptr addrspace(3) %268, align 4, !dbg !27
  %270 = shl i32 %47, 3, !dbg !28
  %271 = shl i32 %48, 3, !dbg !28
  %272 = shl i32 %49, 3, !dbg !28
  %273 = shl i32 %50, 3, !dbg !28
  %274 = shl nuw nsw i32 %42, 9, !dbg !29
  %275 = add nuw i32 %274, %24, !dbg !30
  %276 = add i32 %275, %270, !dbg !31
  %277 = add i32 %275, %271, !dbg !31
  %278 = add i32 %275, %272, !dbg !31
  %279 = add i32 %275, %273, !dbg !31
  %280 = sext i32 %276 to i64, !dbg !32
  %281 = getelementptr float, ptr addrspace(1) %1, i64 %280, !dbg !32
  %282 = sext i32 %277 to i64, !dbg !32
  %283 = getelementptr float, ptr addrspace(1) %1, i64 %282, !dbg !32
  %284 = sext i32 %278 to i64, !dbg !32
  %285 = getelementptr float, ptr addrspace(1) %1, i64 %284, !dbg !32
  %286 = sext i32 %279 to i64, !dbg !32
  %287 = getelementptr float, ptr addrspace(1) %1, i64 %286, !dbg !32
  %288 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !33
  %289 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$6 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l,b"(ptr addrspace(1) %281, i64 %288, i1 %77) #4, !dbg !33
  %290 = extractvalue { i32, i32, i32, i32 } %289, 0, !dbg !33
  %291 = extractvalue { i32, i32, i32, i32 } %289, 1, !dbg !33
  %292 = extractvalue { i32, i32, i32, i32 } %289, 2, !dbg !33
  %293 = extractvalue { i32, i32, i32, i32 } %289, 3, !dbg !33
  %294 = bitcast i32 %290 to float, !dbg !33
  %295 = bitcast i32 %291 to float, !dbg !33
  %296 = bitcast i32 %292 to float, !dbg !33
  %297 = bitcast i32 %293 to float, !dbg !33
  %298 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !33
  %299 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$6 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l,b"(ptr addrspace(1) %283, i64 %298, i1 %78) #4, !dbg !33
  %300 = extractvalue { i32, i32, i32, i32 } %299, 0, !dbg !33
  %301 = extractvalue { i32, i32, i32, i32 } %299, 1, !dbg !33
  %302 = extractvalue { i32, i32, i32, i32 } %299, 2, !dbg !33
  %303 = extractvalue { i32, i32, i32, i32 } %299, 3, !dbg !33
  %304 = bitcast i32 %300 to float, !dbg !33
  %305 = bitcast i32 %301 to float, !dbg !33
  %306 = bitcast i32 %302 to float, !dbg !33
  %307 = bitcast i32 %303 to float, !dbg !33
  %308 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !33
  %309 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$6 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l,b"(ptr addrspace(1) %285, i64 %308, i1 %79) #4, !dbg !33
  %310 = extractvalue { i32, i32, i32, i32 } %309, 0, !dbg !33
  %311 = extractvalue { i32, i32, i32, i32 } %309, 1, !dbg !33
  %312 = extractvalue { i32, i32, i32, i32 } %309, 2, !dbg !33
  %313 = extractvalue { i32, i32, i32, i32 } %309, 3, !dbg !33
  %314 = bitcast i32 %310 to float, !dbg !33
  %315 = bitcast i32 %311 to float, !dbg !33
  %316 = bitcast i32 %312 to float, !dbg !33
  %317 = bitcast i32 %313 to float, !dbg !33
  %318 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !33
  %319 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$6 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l,b"(ptr addrspace(1) %287, i64 %318, i1 %80) #4, !dbg !33
  %320 = extractvalue { i32, i32, i32, i32 } %319, 0, !dbg !33
  %321 = extractvalue { i32, i32, i32, i32 } %319, 1, !dbg !33
  %322 = extractvalue { i32, i32, i32, i32 } %319, 2, !dbg !33
  %323 = extractvalue { i32, i32, i32, i32 } %319, 3, !dbg !33
  %324 = bitcast i32 %320 to float, !dbg !33
  %325 = bitcast i32 %321 to float, !dbg !33
  %326 = bitcast i32 %322 to float, !dbg !33
  %327 = bitcast i32 %323 to float, !dbg !33
  %328 = shl nuw nsw i32 %25, 6, !dbg !34
  %329 = add nuw nsw i32 %43, %328, !dbg !35
  %330 = zext nneg i32 %329 to i64, !dbg !36
  %331 = getelementptr float, ptr addrspace(1) %2, i64 %330, !dbg !36
  %332 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !37
  %333 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$4 ld.global.L1::evict_last.L2::cache_hint.v2.b32 { $0, $1 }, [ $2 + 0 ], $3;", "=r,=r,l,l,b"(ptr addrspace(1) %331, i64 %332, i1 %75) #4, !dbg !37
  %334 = extractvalue { i32, i32 } %333, 0, !dbg !37
  %335 = extractvalue { i32, i32 } %333, 1, !dbg !37
  %336 = bitcast i32 %334 to float, !dbg !37
  %337 = bitcast i32 %335 to float, !dbg !37
  %338 = getelementptr float, ptr addrspace(1) %3, i64 %330, !dbg !38
  %339 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !39
  %340 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$4 ld.global.L1::evict_last.L2::cache_hint.v2.b32 { $0, $1 }, [ $2 + 0 ], $3;", "=r,=r,l,l,b"(ptr addrspace(1) %338, i64 %339, i1 %75) #4, !dbg !39
  %341 = extractvalue { i32, i32 } %340, 0, !dbg !39
  %342 = extractvalue { i32, i32 } %340, 1, !dbg !39
  %343 = bitcast i32 %341 to float, !dbg !39
  %344 = bitcast i32 %342 to float, !dbg !39
  %345 = fadd float %203, %294, !dbg !40
  %346 = fadd float %205, %295, !dbg !40
  %347 = fadd float %207, %296, !dbg !40
  %348 = fadd float %209, %297, !dbg !40
  %349 = fadd float %214, %304, !dbg !40
  %350 = fadd float %219, %305, !dbg !40
  %351 = fadd float %224, %306, !dbg !40
  %352 = fadd float %229, %307, !dbg !40
  %353 = fadd float %234, %314, !dbg !40
  %354 = fadd float %239, %315, !dbg !40
  %355 = fadd float %244, %316, !dbg !40
  %356 = fadd float %249, %317, !dbg !40
  %357 = fadd float %254, %324, !dbg !40
  %358 = fadd float %259, %325, !dbg !40
  %359 = fadd float %264, %326, !dbg !40
  %360 = fadd float %269, %327, !dbg !40
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !40
  %361 = shl nuw nsw i32 %16, 9, !dbg !40
  %362 = or disjoint i32 %361, %.lobit, !dbg !40
  %363 = or disjoint i32 %362, %13, !dbg !40
  %364 = or disjoint i32 %363, %14, !dbg !40
  %365 = or disjoint i32 %364, %33, !dbg !40
  %366 = or disjoint i32 %365, %34, !dbg !40
  %367 = lshr exact i32 %20, 1, !dbg !40
  %368 = or disjoint i32 %367, %35, !dbg !40
  %369 = xor i32 %368, %366, !dbg !40
  %370 = or disjoint i32 %37, %111, !dbg !40
  %371 = or disjoint i32 %370, %112, !dbg !40
  %372 = or disjoint i32 %371, %113, !dbg !40
  %373 = lshr i32 %369, 6, !dbg !40
  %374 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %373, !dbg !40
  %375 = getelementptr inbounds nuw float, ptr addrspace(3) %374, i32 %369, !dbg !40
  store float %345, ptr addrspace(3) %375, align 4, !dbg !40
  %376 = xor i32 %369, 128, !dbg !40
  %377 = lshr i32 %376, 6, !dbg !40
  %378 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %377, !dbg !40
  %379 = getelementptr inbounds nuw float, ptr addrspace(3) %378, i32 %376, !dbg !40
  store float %346, ptr addrspace(3) %379, align 4, !dbg !40
  %380 = xor i32 %369, 256, !dbg !40
  %381 = lshr i32 %380, 6, !dbg !40
  %382 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %381, !dbg !40
  %383 = getelementptr inbounds nuw float, ptr addrspace(3) %382, i32 %380, !dbg !40
  store float %347, ptr addrspace(3) %383, align 4, !dbg !40
  %384 = xor i32 %369, 384, !dbg !40
  %385 = lshr i32 %384, 6, !dbg !40
  %386 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %385, !dbg !40
  %387 = getelementptr inbounds nuw float, ptr addrspace(3) %386, i32 %384, !dbg !40
  store float %348, ptr addrspace(3) %387, align 4, !dbg !40
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !40
  %388 = lshr i32 %372, 6, !dbg !40
  %389 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %388, !dbg !40
  %390 = getelementptr inbounds nuw float, ptr addrspace(3) %389, i32 %372, !dbg !40
  %391 = load float, ptr addrspace(3) %390, align 4, !dbg !40
  %392 = getelementptr inbounds nuw i8, ptr addrspace(3) %390, i32 4, !dbg !40
  %393 = load float, ptr addrspace(3) %392, align 4, !dbg !40
  %394 = or disjoint i32 %372, 64, !dbg !40
  %395 = lshr i32 %394, 6, !dbg !40
  %396 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %395, !dbg !40
  %397 = getelementptr inbounds nuw float, ptr addrspace(3) %396, i32 %394, !dbg !40
  %398 = load float, ptr addrspace(3) %397, align 4, !dbg !40
  %399 = or disjoint i32 %372, 65, !dbg !40
  %400 = lshr i32 %399, 6, !dbg !40
  %401 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %400, !dbg !40
  %402 = getelementptr inbounds nuw float, ptr addrspace(3) %401, i32 %399, !dbg !40
  %403 = load float, ptr addrspace(3) %402, align 8, !dbg !40
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !40
  store float %349, ptr addrspace(3) %375, align 4, !dbg !40
  store float %350, ptr addrspace(3) %379, align 4, !dbg !40
  store float %351, ptr addrspace(3) %383, align 4, !dbg !40
  store float %352, ptr addrspace(3) %387, align 4, !dbg !40
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !40
  %404 = load float, ptr addrspace(3) %390, align 4, !dbg !40
  %405 = load float, ptr addrspace(3) %392, align 4, !dbg !40
  %406 = load float, ptr addrspace(3) %397, align 4, !dbg !40
  %407 = load float, ptr addrspace(3) %402, align 8, !dbg !40
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !40
  store float %353, ptr addrspace(3) %375, align 4, !dbg !40
  store float %354, ptr addrspace(3) %379, align 4, !dbg !40
  store float %355, ptr addrspace(3) %383, align 4, !dbg !40
  store float %356, ptr addrspace(3) %387, align 4, !dbg !40
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !40
  %408 = load float, ptr addrspace(3) %390, align 4, !dbg !40
  %409 = load float, ptr addrspace(3) %392, align 4, !dbg !40
  %410 = load float, ptr addrspace(3) %397, align 4, !dbg !40
  %411 = load float, ptr addrspace(3) %402, align 8, !dbg !40
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !40
  store float %357, ptr addrspace(3) %375, align 4, !dbg !40
  store float %358, ptr addrspace(3) %379, align 4, !dbg !40
  store float %359, ptr addrspace(3) %383, align 4, !dbg !40
  store float %360, ptr addrspace(3) %387, align 4, !dbg !40
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !40
  %412 = load float, ptr addrspace(3) %390, align 4, !dbg !40
  %413 = load float, ptr addrspace(3) %392, align 4, !dbg !40
  %414 = load float, ptr addrspace(3) %397, align 4, !dbg !40
  %415 = load float, ptr addrspace(3) %402, align 8, !dbg !40
  %416 = fsub float %391, %336, !dbg !41
  %417 = fsub float %393, %337, !dbg !41
  %418 = fsub float %398, %336, !dbg !41
  %419 = fsub float %403, %337, !dbg !41
  %420 = fsub float %404, %336, !dbg !41
  %421 = fsub float %405, %337, !dbg !41
  %422 = fsub float %406, %336, !dbg !41
  %423 = fsub float %407, %337, !dbg !41
  %424 = fsub float %408, %336, !dbg !41
  %425 = fsub float %409, %337, !dbg !41
  %426 = fsub float %410, %336, !dbg !41
  %427 = fsub float %411, %337, !dbg !41
  %428 = fsub float %412, %336, !dbg !41
  %429 = fsub float %413, %337, !dbg !41
  %430 = fsub float %414, %336, !dbg !41
  %431 = fsub float %415, %337, !dbg !41
  %432 = fmul float %416, 0x3FF7154760000000, !dbg !42
  %433 = tail call float @llvm.nvvm.ex2.approx.f(float %432), !dbg !42
  %434 = fmul float %417, 0x3FF7154760000000, !dbg !42
  %435 = tail call float @llvm.nvvm.ex2.approx.f(float %434), !dbg !42
  %436 = fmul float %418, 0x3FF7154760000000, !dbg !42
  %437 = tail call float @llvm.nvvm.ex2.approx.f(float %436), !dbg !42
  %438 = fmul float %419, 0x3FF7154760000000, !dbg !42
  %439 = tail call float @llvm.nvvm.ex2.approx.f(float %438), !dbg !42
  %440 = fmul float %420, 0x3FF7154760000000, !dbg !42
  %441 = tail call float @llvm.nvvm.ex2.approx.f(float %440), !dbg !42
  %442 = fmul float %421, 0x3FF7154760000000, !dbg !42
  %443 = tail call float @llvm.nvvm.ex2.approx.f(float %442), !dbg !42
  %444 = fmul float %422, 0x3FF7154760000000, !dbg !42
  %445 = tail call float @llvm.nvvm.ex2.approx.f(float %444), !dbg !42
  %446 = fmul float %423, 0x3FF7154760000000, !dbg !42
  %447 = tail call float @llvm.nvvm.ex2.approx.f(float %446), !dbg !42
  %448 = fmul float %424, 0x3FF7154760000000, !dbg !42
  %449 = tail call float @llvm.nvvm.ex2.approx.f(float %448), !dbg !42
  %450 = fmul float %425, 0x3FF7154760000000, !dbg !42
  %451 = tail call float @llvm.nvvm.ex2.approx.f(float %450), !dbg !42
  %452 = fmul float %426, 0x3FF7154760000000, !dbg !42
  %453 = tail call float @llvm.nvvm.ex2.approx.f(float %452), !dbg !42
  %454 = fmul float %427, 0x3FF7154760000000, !dbg !42
  %455 = tail call float @llvm.nvvm.ex2.approx.f(float %454), !dbg !42
  %456 = fmul float %428, 0x3FF7154760000000, !dbg !42
  %457 = tail call float @llvm.nvvm.ex2.approx.f(float %456), !dbg !42
  %458 = fmul float %429, 0x3FF7154760000000, !dbg !42
  %459 = tail call float @llvm.nvvm.ex2.approx.f(float %458), !dbg !42
  %460 = fmul float %430, 0x3FF7154760000000, !dbg !42
  %461 = tail call float @llvm.nvvm.ex2.approx.f(float %460), !dbg !42
  %462 = fmul float %431, 0x3FF7154760000000, !dbg !42
  %463 = tail call float @llvm.nvvm.ex2.approx.f(float %462), !dbg !42
  %464 = tail call float @llvm.nvvm.div.full(float %433, float %343), !dbg !43
  %465 = tail call float @llvm.nvvm.div.full(float %435, float %344), !dbg !43
  %466 = tail call float @llvm.nvvm.div.full(float %437, float %343), !dbg !43
  %467 = tail call float @llvm.nvvm.div.full(float %439, float %344), !dbg !43
  %468 = tail call float @llvm.nvvm.div.full(float %441, float %343), !dbg !43
  %469 = tail call float @llvm.nvvm.div.full(float %443, float %344), !dbg !43
  %470 = tail call float @llvm.nvvm.div.full(float %445, float %343), !dbg !43
  %471 = tail call float @llvm.nvvm.div.full(float %447, float %344), !dbg !43
  %472 = tail call float @llvm.nvvm.div.full(float %449, float %343), !dbg !43
  %473 = tail call float @llvm.nvvm.div.full(float %451, float %344), !dbg !43
  %474 = tail call float @llvm.nvvm.div.full(float %453, float %343), !dbg !43
  %475 = tail call float @llvm.nvvm.div.full(float %455, float %344), !dbg !43
  %476 = tail call float @llvm.nvvm.div.full(float %457, float %343), !dbg !43
  %477 = tail call float @llvm.nvvm.div.full(float %459, float %344), !dbg !43
  %478 = tail call float @llvm.nvvm.div.full(float %461, float %343), !dbg !43
  %479 = tail call float @llvm.nvvm.div.full(float %463, float %344), !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !44
  %480 = shl nuw nsw i32 %11, 4, !dbg !45
  %481 = and i32 %480, 4080, !dbg !45
  %482 = shl nuw nsw i32 %11, 8, !dbg !45
  %483 = and i32 %482, 3584, !dbg !45
  %484 = or disjoint i32 %33, %483, !dbg !45
  %485 = or disjoint i32 %484, %34, !dbg !45
  %486 = or disjoint i32 %485, %17, !dbg !45
  %487 = or disjoint i32 %486, %35, !dbg !45
  %488 = xor i32 %487, %367, !dbg !45
  %489 = lshr exact i32 %481, 1, !dbg !45
  %490 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %489, !dbg !45
  %491 = getelementptr inbounds nuw float, ptr addrspace(3) %490, i32 %481, !dbg !45
  store float %464, ptr addrspace(3) %491, align 16, !dbg !45
  %492 = or disjoint i32 %481, 8, !dbg !45
  %493 = lshr exact i32 %492, 1, !dbg !45
  %494 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %493, !dbg !45
  %495 = getelementptr inbounds nuw float, ptr addrspace(3) %494, i32 %492, !dbg !45
  store float %465, ptr addrspace(3) %495, align 16, !dbg !45
  %496 = getelementptr inbounds nuw i8, ptr addrspace(3) %491, i32 4, !dbg !45
  store float %466, ptr addrspace(3) %496, align 4, !dbg !45
  %497 = or disjoint i32 %481, 9, !dbg !45
  %498 = lshr i32 %497, 1, !dbg !45
  %499 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %498, !dbg !45
  %500 = getelementptr inbounds nuw float, ptr addrspace(3) %499, i32 %497, !dbg !45
  store float %467, ptr addrspace(3) %500, align 4, !dbg !45
  %501 = getelementptr inbounds nuw i8, ptr addrspace(3) %491, i32 8, !dbg !45
  store float %468, ptr addrspace(3) %501, align 8, !dbg !45
  %502 = or disjoint i32 %481, 10, !dbg !45
  %503 = lshr exact i32 %502, 1, !dbg !45
  %504 = and i32 %503, 2044, !dbg !45
  %505 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %504, !dbg !45
  %506 = getelementptr inbounds nuw float, ptr addrspace(3) %505, i32 %502, !dbg !45
  store float %469, ptr addrspace(3) %506, align 8, !dbg !45
  %507 = getelementptr inbounds nuw i8, ptr addrspace(3) %491, i32 12, !dbg !45
  store float %470, ptr addrspace(3) %507, align 4, !dbg !45
  %508 = or disjoint i32 %481, 11, !dbg !45
  %509 = lshr i32 %508, 1, !dbg !45
  %510 = and i32 %509, 2044, !dbg !45
  %511 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %510, !dbg !45
  %512 = getelementptr inbounds nuw float, ptr addrspace(3) %511, i32 %508, !dbg !45
  store float %471, ptr addrspace(3) %512, align 4, !dbg !45
  %513 = getelementptr inbounds nuw i8, ptr addrspace(3) %491, i32 16, !dbg !45
  store float %472, ptr addrspace(3) %513, align 16, !dbg !45
  %514 = or disjoint i32 %481, 12, !dbg !45
  %515 = lshr exact i32 %514, 1, !dbg !45
  %516 = and i32 %515, 2044, !dbg !45
  %517 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %516, !dbg !45
  %518 = getelementptr inbounds nuw float, ptr addrspace(3) %517, i32 %514, !dbg !45
  store float %473, ptr addrspace(3) %518, align 16, !dbg !45
  %519 = getelementptr inbounds nuw i8, ptr addrspace(3) %491, i32 20, !dbg !45
  store float %474, ptr addrspace(3) %519, align 4, !dbg !45
  %520 = or disjoint i32 %481, 13, !dbg !45
  %521 = lshr i32 %520, 1, !dbg !45
  %522 = and i32 %521, 2044, !dbg !45
  %523 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %522, !dbg !45
  %524 = getelementptr inbounds nuw float, ptr addrspace(3) %523, i32 %520, !dbg !45
  store float %475, ptr addrspace(3) %524, align 4, !dbg !45
  %525 = getelementptr inbounds nuw i8, ptr addrspace(3) %491, i32 24, !dbg !45
  store float %476, ptr addrspace(3) %525, align 8, !dbg !45
  %526 = or disjoint i32 %481, 14, !dbg !45
  %527 = lshr exact i32 %526, 1, !dbg !45
  %528 = and i32 %527, 2044, !dbg !45
  %529 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %528, !dbg !45
  %530 = getelementptr inbounds nuw float, ptr addrspace(3) %529, i32 %526, !dbg !45
  store float %477, ptr addrspace(3) %530, align 8, !dbg !45
  %531 = getelementptr inbounds nuw i8, ptr addrspace(3) %491, i32 28, !dbg !45
  store float %478, ptr addrspace(3) %531, align 4, !dbg !45
  %532 = or disjoint i32 %481, 15, !dbg !45
  %533 = lshr i32 %532, 1, !dbg !45
  %534 = and i32 %533, 2044, !dbg !45
  %535 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %534, !dbg !45
  %536 = getelementptr inbounds nuw float, ptr addrspace(3) %535, i32 %532, !dbg !45
  store float %479, ptr addrspace(3) %536, align 4, !dbg !45
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !45
  %537 = lshr exact i32 %488, 1, !dbg !45
  %538 = and i32 %537, 2147483644, !dbg !45
  %539 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %538, !dbg !45
  %540 = getelementptr inbounds nuw float, ptr addrspace(3) %539, i32 %488, !dbg !45
  %541 = xor i32 %488, 128, !dbg !45
  %542 = lshr i32 %541, 1, !dbg !45
  %543 = and i32 %542, 2147483644, !dbg !45
  %544 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %543, !dbg !45
  %545 = getelementptr inbounds nuw float, ptr addrspace(3) %544, i32 %541, !dbg !45
  %546 = load <4 x i32>, ptr addrspace(3) %545, align 16, !dbg !45
  %547 = xor i32 %488, 256, !dbg !45
  %548 = lshr i32 %547, 1, !dbg !45
  %549 = and i32 %548, 2147483644, !dbg !45
  %550 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %549, !dbg !45
  %551 = getelementptr inbounds nuw float, ptr addrspace(3) %550, i32 %547, !dbg !45
  %552 = load <4 x i32>, ptr addrspace(3) %551, align 16, !dbg !45
  %553 = xor i32 %488, 384, !dbg !45
  %554 = lshr i32 %553, 1, !dbg !45
  %555 = and i32 %554, 2147483644, !dbg !45
  %556 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %555, !dbg !45
  %557 = getelementptr inbounds nuw float, ptr addrspace(3) %556, i32 %553, !dbg !45
  %558 = load <4 x i32>, ptr addrspace(3) %557, align 16, !dbg !45
  %.extract = load i32, ptr addrspace(3) %540, align 16, !dbg !45
  %559 = getelementptr inbounds nuw i8, ptr addrspace(3) %540, i32 4, !dbg !45
  %.extract24 = load i32, ptr addrspace(3) %559, align 4, !dbg !45
  %560 = getelementptr inbounds nuw i8, ptr addrspace(3) %540, i32 8, !dbg !45
  %.extract25 = load i32, ptr addrspace(3) %560, align 8, !dbg !45
  %561 = getelementptr inbounds nuw i8, ptr addrspace(3) %540, i32 12, !dbg !45
  %.extract26 = load i32, ptr addrspace(3) %561, align 4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %67, i1 %76) #4, !dbg !45
  %.extract27 = extractelement <4 x i32> %546, i64 0, !dbg !45
  %.extract28 = extractelement <4 x i32> %546, i64 1, !dbg !45
  %.extract29 = extractelement <4 x i32> %546, i64 2, !dbg !45
  %.extract30 = extractelement <4 x i32> %546, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %69, i1 %76) #4, !dbg !45
  %.extract31 = extractelement <4 x i32> %552, i64 0, !dbg !45
  %.extract32 = extractelement <4 x i32> %552, i64 1, !dbg !45
  %.extract33 = extractelement <4 x i32> %552, i64 2, !dbg !45
  %.extract34 = extractelement <4 x i32> %552, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %71, i1 %76) #4, !dbg !45
  %.extract35 = extractelement <4 x i32> %558, i64 0, !dbg !45
  %.extract36 = extractelement <4 x i32> %558, i64 1, !dbg !45
  %.extract37 = extractelement <4 x i32> %558, i64 2, !dbg !45
  %.extract38 = extractelement <4 x i32> %558, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract35, i32 %.extract36, i32 %.extract37, i32 %.extract38, ptr addrspace(1) %73, i1 %76) #4, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.z() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { "nvvm.reqntid"="256" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "c7fydtvgc2ryykzkj4wnk3cmbeju5cyfoey5m4w2sv6riksngfma.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/7f")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "triton_poi_fused__softmax_add_4", linkageName: "triton_poi_fused__softmax_add_4", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 22, column: 28, scope: !5)
!9 = !DILocation(line: 22, column: 33, scope: !5)
!10 = !DILocation(line: 23, column: 44, scope: !5)
!11 = !DILocation(line: 23, column: 23, scope: !5)
!12 = !DILocation(line: 25, column: 28, scope: !5)
!13 = !DILocation(line: 25, column: 33, scope: !5)
!14 = !DILocation(line: 26, column: 44, scope: !5)
!15 = !DILocation(line: 26, column: 23, scope: !5)
!16 = !DILocation(line: 28, column: 28, scope: !5)
!17 = !DILocation(line: 28, column: 33, scope: !5)
!18 = !DILocation(line: 29, column: 44, scope: !5)
!19 = !DILocation(line: 29, column: 23, scope: !5)
!20 = !DILocation(line: 30, column: 21, scope: !5)
!21 = !DILocation(line: 34, column: 42, scope: !5)
!22 = !DILocation(line: 34, column: 52, scope: !5)
!23 = !DILocation(line: 34, column: 39, scope: !5)
!24 = !DILocation(line: 34, column: 47, scope: !5)
!25 = !DILocation(line: 34, column: 34, scope: !5)
!26 = !DILocation(line: 34, column: 73, scope: !5)
!27 = !DILocation(line: 34, column: 57, scope: !5)
!28 = !DILocation(line: 35, column: 37, scope: !5)
!29 = !DILocation(line: 35, column: 46, scope: !5)
!30 = !DILocation(line: 35, column: 35, scope: !5)
!31 = !DILocation(line: 35, column: 42, scope: !5)
!32 = !DILocation(line: 35, column: 30, scope: !5)
!33 = !DILocation(line: 35, column: 51, scope: !5)
!34 = !DILocation(line: 36, column: 38, scope: !5)
!35 = !DILocation(line: 36, column: 35, scope: !5)
!36 = !DILocation(line: 36, column: 30, scope: !5)
!37 = !DILocation(line: 36, column: 43, scope: !5)
!38 = !DILocation(line: 37, column: 30, scope: !5)
!39 = !DILocation(line: 37, column: 43, scope: !5)
!40 = !DILocation(line: 38, column: 18, scope: !5)
!41 = !DILocation(line: 39, column: 18, scope: !5)
!42 = !DILocation(line: 40, column: 23, scope: !5)
!43 = !DILocation(line: 41, column: 19, scope: !5)
!44 = !DILocation(line: 42, column: 4, scope: !5)
!45 = !DILocation(line: 43, column: 57, scope: !5)
!46 = !DILocation(line: 43, column: 4, scope: !5)
