; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [121 x i8] c"/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/ci/ccisb2yra76ab2haychl3vkjloggui7jornx4qodogdjo7v6y64e.py\00"
@assertMessage_0 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp27 < 32\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !5 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_mul_rsub_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr #1 !dbg !9 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = and i32 %11, 63, !dbg !12
  %14 = lshr i32 %11, 1, !dbg !12
  %15 = and i32 %14, 63, !dbg !12
  %16 = lshr i32 %11, 3, !dbg !12
  %17 = and i32 %16, 15, !dbg !12
  %18 = or disjoint i32 %10, %13, !dbg !13
  %19 = or disjoint i32 %15, %10, !dbg !13
  %20 = icmp slt i32 %18, 10368, !dbg !14
  %21 = icmp slt i32 %19, 10368, !dbg !14
  %22 = lshr i32 %11, 6, !dbg !15
  %.lobit = and i32 %22, 1, !dbg !15
  %23 = shl nuw nsw i32 %11, 2, !dbg !15
  %24 = and i32 %23, 4, !dbg !15
  %25 = or disjoint i32 %24, 2, !dbg !15
  %26 = or disjoint i32 %17, %10, !dbg !13
  %27 = or disjoint i32 %26, 16, !dbg !13
  %28 = or disjoint i32 %26, 32, !dbg !13
  %29 = or disjoint i32 %26, 48, !dbg !13
  %30 = insertelement <4 x i32> poison, i32 %26, i64 0, !dbg !14
  %31 = insertelement <4 x i32> %30, i32 %27, i64 1, !dbg !14
  %32 = insertelement <4 x i32> %31, i32 %28, i64 2, !dbg !14
  %33 = insertelement <4 x i32> %32, i32 %29, i64 3, !dbg !14
  %34 = icmp slt <4 x i32> %33, splat (i32 10368), !dbg !14
  %35 = srem <4 x i32> %33, splat (i32 324), !dbg !16
  %36 = sdiv i32 %19, 324, !dbg !17
  %37 = sdiv i32 %26, 324, !dbg !17
  %38 = sdiv i32 %27, 324, !dbg !17
  %39 = sdiv i32 %28, 324, !dbg !17
  %40 = sdiv i32 %29, 324, !dbg !17
  %41 = srem i32 %37, 8, !dbg !18
  %42 = srem i32 %38, 8, !dbg !18
  %43 = srem i32 %39, 8, !dbg !18
  %44 = srem i32 %40, 8, !dbg !18
  %45 = sdiv i32 %19, 2592, !dbg !19
  %46 = mul nsw i32 %45, 324, !dbg !20
  %47 = mul i32 %19, 324, !dbg !21
  %48 = sext i32 %41 to i64, !dbg !22
  %49 = sext i32 %42 to i64, !dbg !22
  %50 = sext i32 %43 to i64, !dbg !22
  %51 = sext i32 %44 to i64, !dbg !22
  %52 = add nsw i32 %46, %25
  %invariant.gep = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !23
  %invariant.gep117 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !23
  %invariant.gep119 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !23
  %invariant.gep121 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !23
  %53 = and i32 %23, 508
  %54 = shl nuw nsw i32 %11, 3
  %55 = and i32 %54, 504
  %56 = or disjoint i32 %55, %.lobit
  %57 = shl nuw nsw i32 %11, 1
  %58 = and i32 %57, 252
  %59 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %58
  %60 = getelementptr inbounds nuw float, ptr addrspace(3) %59, i32 %53
  %61 = lshr exact i32 %55, 1
  %62 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %61
  %63 = getelementptr inbounds nuw float, ptr addrspace(3) %62, i32 %56
  %64 = or disjoint i32 %56, 2
  %65 = getelementptr inbounds nuw float, ptr addrspace(3) %62, i32 %64
  %66 = or disjoint i32 %56, 4
  %67 = getelementptr inbounds nuw float, ptr addrspace(3) %62, i32 %66
  %68 = or disjoint i32 %56, 6
  %69 = getelementptr inbounds nuw float, ptr addrspace(3) %62, i32 %68
  %70 = and i32 %11, 127
  %71 = lshr i32 %70, 3
  %72 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %71
  %73 = getelementptr inbounds nuw i64, ptr addrspace(3) %72, i32 %70
  %74 = or disjoint i32 %70, 128
  %75 = lshr i32 %74, 3
  %76 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %75
  %77 = getelementptr inbounds nuw i64, ptr addrspace(3) %76, i32 %74
  %78 = or disjoint i32 %70, 256
  %79 = lshr i32 %78, 3
  %80 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %79
  %81 = getelementptr inbounds nuw i64, ptr addrspace(3) %80, i32 %78
  %82 = or disjoint i32 %70, 384
  %83 = lshr i32 %82, 3
  %84 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %83
  %85 = getelementptr inbounds nuw i64, ptr addrspace(3) %84, i32 %82
  %86 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %55
  %87 = getelementptr inbounds nuw i64, ptr addrspace(3) %86, i32 %56
  %88 = getelementptr inbounds nuw i64, ptr addrspace(3) %86, i32 %64
  %89 = getelementptr inbounds nuw i64, ptr addrspace(3) %86, i32 %66
  %90 = getelementptr inbounds nuw i64, ptr addrspace(3) %86, i32 %68
  %91 = mul i32 %19, 324
  %92 = shl nsw i32 %36, 4
  %93 = add i32 %92, %91
  %94 = sext i32 %52 to i64, !dbg !23
  %95 = zext nneg i32 %12 to i64, !dbg !23
  %96 = sext <4 x i32> %35 to <4 x i64>, !dbg !23
  %97 = zext nneg i32 %24 to i64, !dbg !23
  %98 = sext i32 %46 to i64, !dbg !23
  %invariant.gep147 = getelementptr i64, ptr addrspace(1) %1, i64 %98, !dbg !23
  %invariant.gep149 = getelementptr i64, ptr addrspace(1) %1, i64 %94, !dbg !23
  %99 = getelementptr inbounds nuw i8, ptr addrspace(3) %60, i32 4
  %100 = getelementptr inbounds nuw i8, ptr addrspace(3) %60, i32 8
  %101 = getelementptr inbounds nuw i8, ptr addrspace(3) %60, i32 12
  %102 = insertelement <4 x i1> poison, i1 %20, i64 0, !dbg !24
  %103 = insertelement <2 x i1> poison, i1 %20, i64 0, !dbg !25
  %104 = shufflevector <2 x i1> %103, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !25
  br label %105, !dbg !23

105:                                              ; preds = %8, %367
  %indvars.iv = phi i64 [ 0, %8 ], [ %indvars.iv.next, %367 ]
  %106 = phi <4 x i1> [ zeroinitializer, %8 ], [ %433, %367 ]
  %107 = phi <2 x float> [ zeroinitializer, %8 ], [ %503, %367 ]
  %108 = phi <2 x float> [ splat (float 0xFFF0000000000000), %8 ], [ %501, %367 ]
  %109 = phi <2 x float> [ zeroinitializer, %8 ], [ %502, %367 ]
  %110 = phi <2 x float> [ splat (float 0xFFF0000000000000), %8 ], [ %498, %367 ]
  %111 = or disjoint i64 %indvars.iv, %97, !dbg !26
  %112 = or disjoint i64 %indvars.iv, %95, !dbg !26
  %113 = icmp samesign ult i64 %111, 324, !dbg !27
  %114 = icmp samesign ult i64 %112, 324, !dbg !27
  %gep148 = getelementptr i64, ptr addrspace(1) %invariant.gep147, i64 %111, !dbg !28
  %gep150 = getelementptr i64, ptr addrspace(1) %invariant.gep149, i64 %indvars.iv, !dbg !28
  %115 = and i1 %21, %113, !dbg !29
  %116 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !30
  %117 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$4 ld.global.L1::evict_last.L2::cache_hint.v2.b64 { $0, $1 }, [ $2 + 0 ], $3;", "=l,=l,l,l,b"(ptr addrspace(1) %gep148, i64 %116, i1 %115) #8, !dbg !30
  %118 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !30
  %119 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$4 ld.global.L1::evict_last.L2::cache_hint.v2.b64 { $0, $1 }, [ $2 + 0 ], $3;", "=l,=l,l,l,b"(ptr addrspace(1) %gep150, i64 %118, i1 %115) #8, !dbg !30
  %120 = trunc nuw nsw i64 %111 to i32, !dbg !31
  %121 = add i32 %47, %120, !dbg !31
  %122 = sext i32 %121 to i64, !dbg !32
  %123 = getelementptr float, ptr addrspace(1) %2, i64 %122, !dbg !32
  %124 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !33
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %123, i64 %124, i1 %115) #8, !dbg !33
  %126 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !33
  %127 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !33
  %128 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !33
  %129 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !33
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !33
  %130 = insertelement <4 x i32> poison, i32 %126, i64 0, !dbg !33
  %131 = insertelement <4 x i32> %130, i32 %127, i64 1, !dbg !33
  %132 = insertelement <4 x i32> %131, i32 %128, i64 2, !dbg !33
  %133 = insertelement <4 x i32> %132, i32 %129, i64 3, !dbg !33
  store <4 x i32> %133, ptr addrspace(3) %60, align 16, !dbg !33
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !33
  %134 = load float, ptr addrspace(3) %63, align 4, !dbg !33
  %135 = load float, ptr addrspace(3) %65, align 4, !dbg !33
  %136 = load float, ptr addrspace(3) %67, align 4, !dbg !33
  %137 = load float, ptr addrspace(3) %69, align 4, !dbg !33
  %138 = insertelement <4 x i64> poison, i64 %112, i64 0, !dbg !34
  %139 = shufflevector <4 x i64> %138, <4 x i64> poison, <4 x i32> zeroinitializer, !dbg !34
  %140 = sub nsw <4 x i64> %139, %96, !dbg !34
  %141 = icmp sgt <4 x i64> %140, zeroinitializer, !dbg !35
  %142 = select <4 x i1> %141, <4 x i64> splat (i64 16), <4 x i64> zeroinitializer, !dbg !36
  %143 = trunc <4 x i64> %140 to <4 x i32>, !dbg !37
  %144 = tail call <4 x i32> @llvm.abs.v4i32(<4 x i32> %143, i1 false), !dbg !37
  %145 = sext <4 x i32> %144 to <4 x i64>, !dbg !38
  %146 = icmp slt <4 x i32> %144, splat (i32 8), !dbg !38
  %147 = extractelement <4 x i32> %144, i64 0, !dbg !39
  %148 = sitofp i32 %147 to float, !dbg !39
  %149 = extractelement <4 x i32> %144, i64 1, !dbg !39
  %150 = sitofp i32 %149 to float, !dbg !39
  %151 = extractelement <4 x i32> %144, i64 2, !dbg !39
  %152 = sitofp i32 %151 to float, !dbg !39
  %153 = extractelement <4 x i32> %144, i64 3, !dbg !39
  %154 = sitofp i32 %153 to float, !dbg !39
  %155 = fmul float %148, 1.250000e-01, !dbg !40
  %156 = fmul float %150, 1.250000e-01, !dbg !40
  %157 = fmul float %152, 1.250000e-01, !dbg !40
  %158 = fmul float %154, 1.250000e-01, !dbg !40
  %159 = fcmp olt float %155, 0x3810000000000000, !dbg !41
  %160 = fmul float %155, 0x4160000000000000, !dbg !41
  %.02.i = select i1 %159, float %160, float %155, !dbg !41
  %i.i.0.i = select i1 %159, float -2.300000e+01, float 0.000000e+00, !dbg !41
  %161 = bitcast float %.02.i to i32, !dbg !41
  %162 = add i32 %161, -1059760811, !dbg !41
  %163 = and i32 %162, -8388608, !dbg !41
  %164 = sub i32 %161, %163, !dbg !41
  %165 = bitcast i32 %164 to float, !dbg !41
  %166 = sitofp i32 %163 to float, !dbg !41
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not.i = icmp eq i32 %167, 0, !dbg !41
  %168 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %166, float 0x3E80000000000000, float %i.i.0.i) #8, !dbg !41
  %169 = tail call float @llvm.nvvm.fma.rn.f(float %166, float 0x3E80000000000000, float %i.i.0.i) #8, !dbg !41
  %.08.i = select i1 %.not.i, float %169, float %168, !dbg !41
  %170 = fadd float %165, -1.000000e+00, !dbg !41
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not1.i = icmp eq i32 %171, 0, !dbg !41
  %172 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %170, float 0x3FC2073EC0000000) #8, !dbg !41
  %173 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %170, float 0x3FC2073EC0000000) #8, !dbg !41
  %.010.i = select i1 %.not1.i, float %173, float %172, !dbg !41
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not2.i = icmp eq i32 %174, 0, !dbg !41
  %175 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %170, float 0xBFBF19B980000000) #8, !dbg !41
  %176 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %170, float 0xBFBF19B980000000) #8, !dbg !41
  %.011.i = select i1 %.not2.i, float %176, float %175, !dbg !41
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not3.i = icmp eq i32 %177, 0, !dbg !41
  %178 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %170, float 0x3FC1E52AA0000000) #8, !dbg !41
  %179 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %170, float 0x3FC1E52AA0000000) #8, !dbg !41
  %.012.i = select i1 %.not3.i, float %179, float %178, !dbg !41
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not4.i = icmp eq i32 %180, 0, !dbg !41
  %181 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %170, float 0xBFC55B1720000000) #8, !dbg !41
  %182 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %170, float 0xBFC55B1720000000) #8, !dbg !41
  %.09.i = select i1 %.not4.i, float %182, float %181, !dbg !41
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not5.i = icmp eq i32 %183, 0, !dbg !41
  %184 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %170, float 0x3FC99DA160000000) #8, !dbg !41
  %185 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %170, float 0x3FC99DA160000000) #8, !dbg !41
  %.05.i = select i1 %.not5.i, float %185, float %184, !dbg !41
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not6.i = icmp eq i32 %186, 0, !dbg !41
  %187 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %170, float 0xBFCFFFE440000000) #8, !dbg !41
  %188 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %170, float 0xBFCFFFE440000000) #8, !dbg !41
  %.01.i = select i1 %.not6.i, float %188, float %187, !dbg !41
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not7.i = icmp eq i32 %189, 0, !dbg !41
  %190 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %170, float 0x3FD5554F00000000) #8, !dbg !41
  %191 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %170, float 0x3FD5554F00000000) #8, !dbg !41
  %.0.i = select i1 %.not7.i, float %191, float %190, !dbg !41
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not8.i = icmp eq i32 %192, 0, !dbg !41
  %193 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %170, float -5.000000e-01) #8, !dbg !41
  %194 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %170, float -5.000000e-01) #8, !dbg !41
  %.07.i = select i1 %.not8.i, float %194, float %193, !dbg !41
  %195 = fmul float %170, %.07.i, !dbg !41
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not9.i = icmp eq i32 %196, 0, !dbg !41
  %197 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %195, float %170, float %170) #8, !dbg !41
  %198 = tail call float @llvm.nvvm.fma.rn.f(float %195, float %170, float %170) #8, !dbg !41
  %.06.i = select i1 %.not9.i, float %198, float %197, !dbg !41
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not10.i = icmp eq i32 %199, 0, !dbg !41
  %200 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #8, !dbg !41
  %201 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #8, !dbg !41
  %.04.i = select i1 %.not10.i, float %201, float %200, !dbg !41
  %202 = icmp ugt i32 %161, 2139095039, !dbg !41
  br i1 %202, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !41

__nv_fmaf_rn.exit.i.i:                            ; preds = %105
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not11.i = icmp eq i32 %203, 0, !dbg !41
  %204 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !41
  %205 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !41
  %.03.i = select i1 %.not11.i, float %205, float %204, !dbg !41
  br label %__nv_logf.exit, !dbg !41

__nv_logf.exit:                                   ; preds = %105, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %105 ], !dbg !41
  %206 = fcmp olt float %156, 0x3810000000000000, !dbg !41
  %207 = fmul float %156, 0x4160000000000000, !dbg !41
  %.02.i22 = select i1 %206, float %207, float %156, !dbg !41
  %i.i.0.i23 = select i1 %206, float -2.300000e+01, float 0.000000e+00, !dbg !41
  %208 = bitcast float %.02.i22 to i32, !dbg !41
  %209 = add i32 %208, -1059760811, !dbg !41
  %210 = and i32 %209, -8388608, !dbg !41
  %211 = sub i32 %208, %210, !dbg !41
  %212 = bitcast i32 %211 to float, !dbg !41
  %213 = sitofp i32 %210 to float, !dbg !41
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not.i24 = icmp eq i32 %214, 0, !dbg !41
  %215 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %213, float 0x3E80000000000000, float %i.i.0.i23) #8, !dbg !41
  %216 = tail call float @llvm.nvvm.fma.rn.f(float %213, float 0x3E80000000000000, float %i.i.0.i23) #8, !dbg !41
  %.08.i25 = select i1 %.not.i24, float %216, float %215, !dbg !41
  %217 = fadd float %212, -1.000000e+00, !dbg !41
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not1.i26 = icmp eq i32 %218, 0, !dbg !41
  %219 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %217, float 0x3FC2073EC0000000) #8, !dbg !41
  %220 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %217, float 0x3FC2073EC0000000) #8, !dbg !41
  %.010.i27 = select i1 %.not1.i26, float %220, float %219, !dbg !41
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not2.i28 = icmp eq i32 %221, 0, !dbg !41
  %222 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i27, float %217, float 0xBFBF19B980000000) #8, !dbg !41
  %223 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i27, float %217, float 0xBFBF19B980000000) #8, !dbg !41
  %.011.i29 = select i1 %.not2.i28, float %223, float %222, !dbg !41
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not3.i30 = icmp eq i32 %224, 0, !dbg !41
  %225 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i29, float %217, float 0x3FC1E52AA0000000) #8, !dbg !41
  %226 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i29, float %217, float 0x3FC1E52AA0000000) #8, !dbg !41
  %.012.i31 = select i1 %.not3.i30, float %226, float %225, !dbg !41
  %227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not4.i32 = icmp eq i32 %227, 0, !dbg !41
  %228 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i31, float %217, float 0xBFC55B1720000000) #8, !dbg !41
  %229 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i31, float %217, float 0xBFC55B1720000000) #8, !dbg !41
  %.09.i33 = select i1 %.not4.i32, float %229, float %228, !dbg !41
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not5.i34 = icmp eq i32 %230, 0, !dbg !41
  %231 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i33, float %217, float 0x3FC99DA160000000) #8, !dbg !41
  %232 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i33, float %217, float 0x3FC99DA160000000) #8, !dbg !41
  %.05.i35 = select i1 %.not5.i34, float %232, float %231, !dbg !41
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not6.i36 = icmp eq i32 %233, 0, !dbg !41
  %234 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i35, float %217, float 0xBFCFFFE440000000) #8, !dbg !41
  %235 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i35, float %217, float 0xBFCFFFE440000000) #8, !dbg !41
  %.01.i37 = select i1 %.not6.i36, float %235, float %234, !dbg !41
  %236 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not7.i38 = icmp eq i32 %236, 0, !dbg !41
  %237 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i37, float %217, float 0x3FD5554F00000000) #8, !dbg !41
  %238 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i37, float %217, float 0x3FD5554F00000000) #8, !dbg !41
  %.0.i39 = select i1 %.not7.i38, float %238, float %237, !dbg !41
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not8.i40 = icmp eq i32 %239, 0, !dbg !41
  %240 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i39, float %217, float -5.000000e-01) #8, !dbg !41
  %241 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i39, float %217, float -5.000000e-01) #8, !dbg !41
  %.07.i41 = select i1 %.not8.i40, float %241, float %240, !dbg !41
  %242 = fmul float %217, %.07.i41, !dbg !41
  %243 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not9.i42 = icmp eq i32 %243, 0, !dbg !41
  %244 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %242, float %217, float %217) #8, !dbg !41
  %245 = tail call float @llvm.nvvm.fma.rn.f(float %242, float %217, float %217) #8, !dbg !41
  %.06.i43 = select i1 %.not9.i42, float %245, float %244, !dbg !41
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not10.i44 = icmp eq i32 %246, 0, !dbg !41
  %247 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i25, float 0x3FE62E4300000000, float %.06.i43) #8, !dbg !41
  %248 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i25, float 0x3FE62E4300000000, float %.06.i43) #8, !dbg !41
  %.04.i45 = select i1 %.not10.i44, float %248, float %247, !dbg !41
  %249 = icmp ugt i32 %208, 2139095039, !dbg !41
  br i1 %249, label %__nv_fmaf_rn.exit.i.i48, label %__nv_logf.exit51, !dbg !41

__nv_fmaf_rn.exit.i.i48:                          ; preds = %__nv_logf.exit
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not11.i49 = icmp eq i32 %250, 0, !dbg !41
  %251 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i22, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !41
  %252 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i22, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !41
  %.03.i50 = select i1 %.not11.i49, float %252, float %251, !dbg !41
  br label %__nv_logf.exit51, !dbg !41

__nv_logf.exit51:                                 ; preds = %__nv_logf.exit, %__nv_fmaf_rn.exit.i.i48
  %r.i.0.i46 = phi float [ %.03.i50, %__nv_fmaf_rn.exit.i.i48 ], [ %.04.i45, %__nv_logf.exit ], !dbg !41
  %253 = fcmp olt float %157, 0x3810000000000000, !dbg !41
  %254 = fmul float %157, 0x4160000000000000, !dbg !41
  %.02.i52 = select i1 %253, float %254, float %157, !dbg !41
  %i.i.0.i53 = select i1 %253, float -2.300000e+01, float 0.000000e+00, !dbg !41
  %255 = bitcast float %.02.i52 to i32, !dbg !41
  %256 = add i32 %255, -1059760811, !dbg !41
  %257 = and i32 %256, -8388608, !dbg !41
  %258 = sub i32 %255, %257, !dbg !41
  %259 = bitcast i32 %258 to float, !dbg !41
  %260 = sitofp i32 %257 to float, !dbg !41
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not.i54 = icmp eq i32 %261, 0, !dbg !41
  %262 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %260, float 0x3E80000000000000, float %i.i.0.i53) #8, !dbg !41
  %263 = tail call float @llvm.nvvm.fma.rn.f(float %260, float 0x3E80000000000000, float %i.i.0.i53) #8, !dbg !41
  %.08.i55 = select i1 %.not.i54, float %263, float %262, !dbg !41
  %264 = fadd float %259, -1.000000e+00, !dbg !41
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not1.i56 = icmp eq i32 %265, 0, !dbg !41
  %266 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %264, float 0x3FC2073EC0000000) #8, !dbg !41
  %267 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %264, float 0x3FC2073EC0000000) #8, !dbg !41
  %.010.i57 = select i1 %.not1.i56, float %267, float %266, !dbg !41
  %268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not2.i58 = icmp eq i32 %268, 0, !dbg !41
  %269 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i57, float %264, float 0xBFBF19B980000000) #8, !dbg !41
  %270 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i57, float %264, float 0xBFBF19B980000000) #8, !dbg !41
  %.011.i59 = select i1 %.not2.i58, float %270, float %269, !dbg !41
  %271 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not3.i60 = icmp eq i32 %271, 0, !dbg !41
  %272 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i59, float %264, float 0x3FC1E52AA0000000) #8, !dbg !41
  %273 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i59, float %264, float 0x3FC1E52AA0000000) #8, !dbg !41
  %.012.i61 = select i1 %.not3.i60, float %273, float %272, !dbg !41
  %274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not4.i62 = icmp eq i32 %274, 0, !dbg !41
  %275 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i61, float %264, float 0xBFC55B1720000000) #8, !dbg !41
  %276 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i61, float %264, float 0xBFC55B1720000000) #8, !dbg !41
  %.09.i63 = select i1 %.not4.i62, float %276, float %275, !dbg !41
  %277 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not5.i64 = icmp eq i32 %277, 0, !dbg !41
  %278 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i63, float %264, float 0x3FC99DA160000000) #8, !dbg !41
  %279 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i63, float %264, float 0x3FC99DA160000000) #8, !dbg !41
  %.05.i65 = select i1 %.not5.i64, float %279, float %278, !dbg !41
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not6.i66 = icmp eq i32 %280, 0, !dbg !41
  %281 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i65, float %264, float 0xBFCFFFE440000000) #8, !dbg !41
  %282 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i65, float %264, float 0xBFCFFFE440000000) #8, !dbg !41
  %.01.i67 = select i1 %.not6.i66, float %282, float %281, !dbg !41
  %283 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not7.i68 = icmp eq i32 %283, 0, !dbg !41
  %284 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i67, float %264, float 0x3FD5554F00000000) #8, !dbg !41
  %285 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i67, float %264, float 0x3FD5554F00000000) #8, !dbg !41
  %.0.i69 = select i1 %.not7.i68, float %285, float %284, !dbg !41
  %286 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not8.i70 = icmp eq i32 %286, 0, !dbg !41
  %287 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i69, float %264, float -5.000000e-01) #8, !dbg !41
  %288 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i69, float %264, float -5.000000e-01) #8, !dbg !41
  %.07.i71 = select i1 %.not8.i70, float %288, float %287, !dbg !41
  %289 = fmul float %264, %.07.i71, !dbg !41
  %290 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not9.i72 = icmp eq i32 %290, 0, !dbg !41
  %291 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %289, float %264, float %264) #8, !dbg !41
  %292 = tail call float @llvm.nvvm.fma.rn.f(float %289, float %264, float %264) #8, !dbg !41
  %.06.i73 = select i1 %.not9.i72, float %292, float %291, !dbg !41
  %293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not10.i74 = icmp eq i32 %293, 0, !dbg !41
  %294 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i55, float 0x3FE62E4300000000, float %.06.i73) #8, !dbg !41
  %295 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i55, float 0x3FE62E4300000000, float %.06.i73) #8, !dbg !41
  %.04.i75 = select i1 %.not10.i74, float %295, float %294, !dbg !41
  %296 = icmp ugt i32 %255, 2139095039, !dbg !41
  br i1 %296, label %__nv_fmaf_rn.exit.i.i78, label %__nv_logf.exit81, !dbg !41

__nv_fmaf_rn.exit.i.i78:                          ; preds = %__nv_logf.exit51
  %297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not11.i79 = icmp eq i32 %297, 0, !dbg !41
  %298 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i52, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !41
  %299 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i52, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !41
  %.03.i80 = select i1 %.not11.i79, float %299, float %298, !dbg !41
  br label %__nv_logf.exit81, !dbg !41

__nv_logf.exit81:                                 ; preds = %__nv_logf.exit51, %__nv_fmaf_rn.exit.i.i78
  %r.i.0.i76 = phi float [ %.03.i80, %__nv_fmaf_rn.exit.i.i78 ], [ %.04.i75, %__nv_logf.exit51 ], !dbg !41
  %300 = fcmp olt float %158, 0x3810000000000000, !dbg !41
  %301 = fmul float %158, 0x4160000000000000, !dbg !41
  %.02.i82 = select i1 %300, float %301, float %158, !dbg !41
  %i.i.0.i83 = select i1 %300, float -2.300000e+01, float 0.000000e+00, !dbg !41
  %302 = bitcast float %.02.i82 to i32, !dbg !41
  %303 = add i32 %302, -1059760811, !dbg !41
  %304 = and i32 %303, -8388608, !dbg !41
  %305 = sub i32 %302, %304, !dbg !41
  %306 = bitcast i32 %305 to float, !dbg !41
  %307 = sitofp i32 %304 to float, !dbg !41
  %308 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not.i84 = icmp eq i32 %308, 0, !dbg !41
  %309 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %307, float 0x3E80000000000000, float %i.i.0.i83) #8, !dbg !41
  %310 = tail call float @llvm.nvvm.fma.rn.f(float %307, float 0x3E80000000000000, float %i.i.0.i83) #8, !dbg !41
  %.08.i85 = select i1 %.not.i84, float %310, float %309, !dbg !41
  %311 = fadd float %306, -1.000000e+00, !dbg !41
  %312 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not1.i86 = icmp eq i32 %312, 0, !dbg !41
  %313 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %311, float 0x3FC2073EC0000000) #8, !dbg !41
  %314 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %311, float 0x3FC2073EC0000000) #8, !dbg !41
  %.010.i87 = select i1 %.not1.i86, float %314, float %313, !dbg !41
  %315 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not2.i88 = icmp eq i32 %315, 0, !dbg !41
  %316 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i87, float %311, float 0xBFBF19B980000000) #8, !dbg !41
  %317 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i87, float %311, float 0xBFBF19B980000000) #8, !dbg !41
  %.011.i89 = select i1 %.not2.i88, float %317, float %316, !dbg !41
  %318 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not3.i90 = icmp eq i32 %318, 0, !dbg !41
  %319 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i89, float %311, float 0x3FC1E52AA0000000) #8, !dbg !41
  %320 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i89, float %311, float 0x3FC1E52AA0000000) #8, !dbg !41
  %.012.i91 = select i1 %.not3.i90, float %320, float %319, !dbg !41
  %321 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not4.i92 = icmp eq i32 %321, 0, !dbg !41
  %322 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i91, float %311, float 0xBFC55B1720000000) #8, !dbg !41
  %323 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i91, float %311, float 0xBFC55B1720000000) #8, !dbg !41
  %.09.i93 = select i1 %.not4.i92, float %323, float %322, !dbg !41
  %324 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not5.i94 = icmp eq i32 %324, 0, !dbg !41
  %325 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i93, float %311, float 0x3FC99DA160000000) #8, !dbg !41
  %326 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i93, float %311, float 0x3FC99DA160000000) #8, !dbg !41
  %.05.i95 = select i1 %.not5.i94, float %326, float %325, !dbg !41
  %327 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not6.i96 = icmp eq i32 %327, 0, !dbg !41
  %328 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i95, float %311, float 0xBFCFFFE440000000) #8, !dbg !41
  %329 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i95, float %311, float 0xBFCFFFE440000000) #8, !dbg !41
  %.01.i97 = select i1 %.not6.i96, float %329, float %328, !dbg !41
  %330 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not7.i98 = icmp eq i32 %330, 0, !dbg !41
  %331 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i97, float %311, float 0x3FD5554F00000000) #8, !dbg !41
  %332 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i97, float %311, float 0x3FD5554F00000000) #8, !dbg !41
  %.0.i99 = select i1 %.not7.i98, float %332, float %331, !dbg !41
  %333 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not8.i100 = icmp eq i32 %333, 0, !dbg !41
  %334 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i99, float %311, float -5.000000e-01) #8, !dbg !41
  %335 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i99, float %311, float -5.000000e-01) #8, !dbg !41
  %.07.i101 = select i1 %.not8.i100, float %335, float %334, !dbg !41
  %336 = fmul float %311, %.07.i101, !dbg !41
  %337 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not9.i102 = icmp eq i32 %337, 0, !dbg !41
  %338 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %336, float %311, float %311) #8, !dbg !41
  %339 = tail call float @llvm.nvvm.fma.rn.f(float %336, float %311, float %311) #8, !dbg !41
  %.06.i103 = select i1 %.not9.i102, float %339, float %338, !dbg !41
  %340 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not10.i104 = icmp eq i32 %340, 0, !dbg !41
  %341 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i85, float 0x3FE62E4300000000, float %.06.i103) #8, !dbg !41
  %342 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i85, float 0x3FE62E4300000000, float %.06.i103) #8, !dbg !41
  %.04.i105 = select i1 %.not10.i104, float %342, float %341, !dbg !41
  %343 = icmp ugt i32 %302, 2139095039, !dbg !41
  br i1 %343, label %__nv_fmaf_rn.exit.i.i108, label %__nv_logf.exit111, !dbg !41

__nv_fmaf_rn.exit.i.i108:                         ; preds = %__nv_logf.exit81
  %344 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !41
  %.not11.i109 = icmp eq i32 %344, 0, !dbg !41
  %345 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i82, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !41
  %346 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i82, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !41
  %.03.i110 = select i1 %.not11.i109, float %346, float %345, !dbg !41
  br label %__nv_logf.exit111, !dbg !41

__nv_logf.exit111:                                ; preds = %__nv_logf.exit81, %__nv_fmaf_rn.exit.i.i108
  %r.i.0.i106 = phi float [ %.03.i110, %__nv_fmaf_rn.exit.i.i108 ], [ %.04.i105, %__nv_logf.exit81 ], !dbg !41
  %347 = insertelement <4 x float> poison, float %r.i.0.i, i64 0, !dbg !42
  %348 = insertelement <4 x float> %347, float %r.i.0.i46, i64 1, !dbg !42
  %349 = insertelement <4 x float> %348, float %r.i.0.i76, i64 2, !dbg !42
  %350 = insertelement <4 x float> %349, float %r.i.0.i106, i64 3, !dbg !42
  %351 = fmul <4 x float> %350, splat (float 0x3FD7154760000000), !dbg !42
  %352 = fmul <4 x float> %351, splat (float 8.000000e+00), !dbg !43
  %353 = fptosi <4 x float> %352 to <4 x i64>, !dbg !44
  %354 = add <4 x i64> %353, splat (i64 8), !dbg !45
  %355 = tail call <4 x i64> @llvm.smin.v4i64(<4 x i64> %354, <4 x i64> splat (i64 15)), !dbg !46
  %356 = select <4 x i1> %146, <4 x i64> %145, <4 x i64> %355, !dbg !50
  %357 = add nsw <4 x i64> %356, %142, !dbg !51
  %358 = lshr <4 x i64> %357, splat (i64 58), !dbg !52
  %359 = and <4 x i64> %358, splat (i64 32), !dbg !52
  %360 = add nsw <4 x i64> %359, %357, !dbg !52
  %361 = icmp ugt <4 x i64> %360, splat (i64 31), !dbg !53
  %362 = and <4 x i1> %34, %361, !dbg !54
  %363 = bitcast <4 x i1> %362 to i4, !dbg !55
  %364 = icmp ne i4 %363, 0, !dbg !55
  %365 = and i1 %114, %364, !dbg !55
  br i1 %365, label %366, label %367, !dbg !55

366:                                              ; preds = %__nv_logf.exit111
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 73, ptr nonnull @assertFunc_0, i64 1), !dbg !55
  unreachable, !dbg !55

367:                                              ; preds = %__nv_logf.exit111
  %368 = extractvalue { i64, i64 } %119, 1, !dbg !30
  %369 = extractvalue { i64, i64 } %119, 0, !dbg !30
  %370 = extractvalue { i64, i64 } %117, 1, !dbg !30
  %371 = extractvalue { i64, i64 } %117, 0, !dbg !30
  %372 = or disjoint i64 %indvars.iv, 4, !dbg !26
  %373 = icmp samesign ult i64 %372, 324, !dbg !27
  %374 = and i1 %20, %373, !dbg !29
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !55
  %375 = extractelement <4 x i64> %360, i64 0, !dbg !56
  %.idx = shl i64 %375, 5, !dbg !56
  %gep = getelementptr i8, ptr addrspace(1) %invariant.gep, i64 %.idx, !dbg !56
  %376 = extractelement <4 x i64> %360, i64 1, !dbg !56
  %.idx13 = shl i64 %376, 5, !dbg !56
  %gep118 = getelementptr i8, ptr addrspace(1) %invariant.gep117, i64 %.idx13, !dbg !56
  %377 = extractelement <4 x i64> %360, i64 2, !dbg !56
  %.idx14 = shl i64 %377, 5, !dbg !56
  %gep120 = getelementptr i8, ptr addrspace(1) %invariant.gep119, i64 %.idx14, !dbg !56
  %378 = extractelement <4 x i64> %360, i64 3, !dbg !56
  %.idx15 = shl i64 %378, 5, !dbg !56
  %gep122 = getelementptr i8, ptr addrspace(1) %invariant.gep121, i64 %.idx15, !dbg !56
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !57
  %379 = ptrtoint ptr addrspace(1) %gep to i64, !dbg !57
  %380 = ptrtoint ptr addrspace(1) %gep118 to i64, !dbg !57
  %381 = ptrtoint ptr addrspace(1) %gep120 to i64, !dbg !57
  %382 = ptrtoint ptr addrspace(1) %gep122 to i64, !dbg !57
  %383 = insertelement <1 x i64> poison, i64 %379, i64 0, !dbg !57
  store <1 x i64> %383, ptr addrspace(3) %73, align 8, !dbg !57
  %384 = insertelement <1 x i64> poison, i64 %380, i64 0, !dbg !57
  store <1 x i64> %384, ptr addrspace(3) %77, align 8, !dbg !57
  %385 = insertelement <1 x i64> poison, i64 %381, i64 0, !dbg !57
  store <1 x i64> %385, ptr addrspace(3) %81, align 8, !dbg !57
  %386 = insertelement <1 x i64> poison, i64 %382, i64 0, !dbg !57
  store <1 x i64> %386, ptr addrspace(3) %85, align 8, !dbg !57
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !57
  %387 = load i64, ptr addrspace(3) %87, align 8, !dbg !57
  %388 = load i64, ptr addrspace(3) %88, align 8, !dbg !57
  %389 = load i64, ptr addrspace(3) %89, align 8, !dbg !57
  %390 = load i64, ptr addrspace(3) %90, align 8, !dbg !57
  %391 = inttoptr i64 %387 to ptr addrspace(1), !dbg !57
  %392 = inttoptr i64 %388 to ptr addrspace(1), !dbg !57
  %393 = inttoptr i64 %389 to ptr addrspace(1), !dbg !57
  %394 = inttoptr i64 %390 to ptr addrspace(1), !dbg !57
  %395 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !57
  %396 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %391, i64 %395, i1 %20) #8, !dbg !57
  %397 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !57
  %398 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %392, i64 %397, i1 %20) #8, !dbg !57
  %399 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !57
  %400 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %393, i64 %399, i1 %374) #8, !dbg !57
  %401 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !57
  %402 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %394, i64 %401, i1 %374) #8, !dbg !57
  %403 = insertelement <4 x i64> poison, i64 %371, i64 0, !dbg !58
  %404 = insertelement <4 x i64> %403, i64 %370, i64 1, !dbg !58
  %405 = insertelement <4 x i64> %404, i64 %369, i64 2, !dbg !58
  %406 = insertelement <4 x i64> %405, i64 %368, i64 3, !dbg !58
  %407 = sitofp <4 x i64> %406 to <4 x float>, !dbg !58
  %408 = fsub <4 x float> splat (float 1.000000e+00), %407, !dbg !59
  %409 = fmul <4 x float> %408, splat (float 0xC7EFFFFFE0000000), !dbg !60
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !60
  store <4 x float> %409, ptr addrspace(3) %60, align 16, !dbg !60
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !60
  %410 = load float, ptr addrspace(3) %63, align 4, !dbg !60
  %411 = load float, ptr addrspace(3) %65, align 4, !dbg !60
  %412 = load float, ptr addrspace(3) %67, align 4, !dbg !60
  %413 = load float, ptr addrspace(3) %69, align 4, !dbg !60
  %414 = insertelement <4 x i32> poison, i32 %396, i64 0, !dbg !57
  %415 = insertelement <4 x i32> %414, i32 %398, i64 1, !dbg !57
  %416 = insertelement <4 x i32> %415, i32 %400, i64 2, !dbg !57
  %417 = insertelement <4 x i32> %416, i32 %402, i64 3, !dbg !57
  %418 = bitcast <4 x i32> %417 to <4 x float>, !dbg !57
  %419 = insertelement <4 x float> poison, float %410, i64 0, !dbg !61
  %420 = insertelement <4 x float> %419, float %411, i64 1, !dbg !61
  %421 = insertelement <4 x float> %420, float %412, i64 2, !dbg !61
  %422 = insertelement <4 x float> %421, float %413, i64 3, !dbg !61
  %423 = fadd <4 x float> %422, %418, !dbg !61
  %424 = insertelement <4 x float> poison, float %134, i64 0, !dbg !62
  %425 = insertelement <4 x float> %424, float %135, i64 1, !dbg !62
  %426 = insertelement <4 x float> %425, float %136, i64 2, !dbg !62
  %427 = insertelement <4 x float> %426, float %137, i64 3, !dbg !62
  %428 = fadd <4 x float> %427, %423, !dbg !62
  %429 = fcmp une <4 x float> %428, splat (float 0xFFF0000000000000), !dbg !63
  %430 = insertelement <4 x i1> %102, i1 %374, i64 1, !dbg !24
  %431 = shufflevector <4 x i1> %430, <4 x i1> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>, !dbg !24
  %432 = select <4 x i1> %431, <4 x i1> %429, <4 x i1> zeroinitializer, !dbg !24
  %433 = or <4 x i1> %106, %432, !dbg !24
  %434 = extractelement <4 x float> %428, i64 0, !dbg !64
  %435 = extractelement <4 x float> %428, i64 1, !dbg !64
  %436 = extractelement <4 x float> %428, i64 2, !dbg !64
  %437 = extractelement <4 x float> %428, i64 3, !dbg !64
  %438 = fcmp uno <2 x float> %110, zeroinitializer, !dbg !66
  %439 = fcmp uno <2 x float> %108, zeroinitializer, !dbg !66
  %440 = shufflevector <4 x float> %428, <4 x float> poison, <2 x i32> <i32 0, i32 1>, !dbg !67
  %441 = fcmp ogt <2 x float> %110, %440, !dbg !67
  %442 = or <2 x i1> %438, %441, !dbg !68
  %443 = select <2 x i1> %442, <2 x float> %110, <2 x float> %440, !dbg !69
  %444 = fcmp oeq <2 x float> %443, splat (float 0xFFF0000000000000), !dbg !70
  %445 = extractelement <2 x float> %443, i64 0, !dbg !64
  %446 = fsub <2 x float> %110, %443, !dbg !71
  %447 = extractelement <2 x float> %446, i64 0, !dbg !71
  %448 = extractelement <2 x float> %443, i64 1, !dbg !64
  %449 = fsub <2 x float> %110, %443, !dbg !71
  %450 = extractelement <2 x float> %449, i64 1, !dbg !71
  %451 = fmul float %447, 0x3FF7154760000000, !dbg !72
  %452 = tail call float @llvm.nvvm.ex2.approx.f(float %451), !dbg !72
  %453 = fmul float %450, 0x3FF7154760000000, !dbg !72
  %454 = tail call float @llvm.nvvm.ex2.approx.f(float %453), !dbg !72
  %455 = insertelement <2 x float> poison, float %452, i64 0, !dbg !73
  %456 = insertelement <2 x float> %455, float %454, i64 1, !dbg !73
  %457 = select <2 x i1> %444, <2 x float> splat (float 1.000000e+00), <2 x float> %456, !dbg !73
  %458 = fsub float %434, %445, !dbg !64
  %459 = fsub float %435, %448, !dbg !64
  %460 = fmul float %458, 0x3FF7154760000000, !dbg !72
  %461 = tail call float @llvm.nvvm.ex2.approx.f(float %460), !dbg !72
  %462 = fmul float %459, 0x3FF7154760000000, !dbg !72
  %463 = tail call float @llvm.nvvm.ex2.approx.f(float %462), !dbg !72
  %464 = insertelement <2 x float> poison, float %461, i64 0, !dbg !74
  %465 = insertelement <2 x float> %464, float %463, i64 1, !dbg !74
  %466 = select <2 x i1> %444, <2 x float> splat (float 1.000000e+00), <2 x float> %465, !dbg !74
  %467 = fmul <2 x float> %109, %457, !dbg !75
  %468 = fadd <2 x float> %467, %466, !dbg !76
  %469 = shufflevector <4 x float> %428, <4 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !67
  %470 = fcmp ogt <2 x float> %108, %469, !dbg !67
  %471 = or <2 x i1> %439, %470, !dbg !68
  %472 = select <2 x i1> %471, <2 x float> %108, <2 x float> %469, !dbg !69
  %473 = fcmp oeq <2 x float> %472, splat (float 0xFFF0000000000000), !dbg !70
  %474 = extractelement <2 x float> %472, i64 0, !dbg !64
  %475 = fsub <2 x float> %108, %472, !dbg !71
  %476 = extractelement <2 x float> %475, i64 0, !dbg !71
  %477 = extractelement <2 x float> %472, i64 1, !dbg !64
  %478 = fsub <2 x float> %108, %472, !dbg !71
  %479 = extractelement <2 x float> %478, i64 1, !dbg !71
  %480 = fmul float %476, 0x3FF7154760000000, !dbg !72
  %481 = tail call float @llvm.nvvm.ex2.approx.f(float %480), !dbg !72
  %482 = fmul float %479, 0x3FF7154760000000, !dbg !72
  %483 = tail call float @llvm.nvvm.ex2.approx.f(float %482), !dbg !72
  %484 = insertelement <2 x float> poison, float %481, i64 0, !dbg !73
  %485 = insertelement <2 x float> %484, float %483, i64 1, !dbg !73
  %486 = select <2 x i1> %473, <2 x float> splat (float 1.000000e+00), <2 x float> %485, !dbg !73
  %487 = fsub float %436, %474, !dbg !64
  %488 = fsub float %437, %477, !dbg !64
  %489 = fmul float %487, 0x3FF7154760000000, !dbg !72
  %490 = tail call float @llvm.nvvm.ex2.approx.f(float %489), !dbg !72
  %491 = fmul float %488, 0x3FF7154760000000, !dbg !72
  %492 = tail call float @llvm.nvvm.ex2.approx.f(float %491), !dbg !72
  %493 = insertelement <2 x float> poison, float %490, i64 0, !dbg !74
  %494 = insertelement <2 x float> %493, float %492, i64 1, !dbg !74
  %495 = select <2 x i1> %473, <2 x float> splat (float 1.000000e+00), <2 x float> %494, !dbg !74
  %496 = fmul <2 x float> %107, %486, !dbg !75
  %497 = fadd <2 x float> %496, %495, !dbg !76
  %498 = select <2 x i1> %104, <2 x float> %443, <2 x float> %110, !dbg !25
  %499 = insertelement <2 x i1> poison, i1 %374, i64 0, !dbg !25
  %500 = shufflevector <2 x i1> %499, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !25
  %501 = select <2 x i1> %500, <2 x float> %472, <2 x float> %108, !dbg !25
  %502 = select <2 x i1> %104, <2 x float> %468, <2 x float> %109, !dbg !77
  %503 = select <2 x i1> %500, <2 x float> %497, <2 x float> %107, !dbg !77
  %504 = add i32 %93, %120, !dbg !78
  %505 = sext i32 %504 to i64, !dbg !79
  %506 = getelementptr float, ptr addrspace(1) %3, i64 %505, !dbg !79
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !80
  %507 = extractelement <4 x float> %423, i64 0, !dbg !80
  store float %507, ptr addrspace(3) %63, align 4, !dbg !80
  %508 = extractelement <4 x float> %423, i64 1, !dbg !80
  store float %508, ptr addrspace(3) %65, align 4, !dbg !80
  %509 = extractelement <4 x float> %423, i64 2, !dbg !80
  store float %509, ptr addrspace(3) %67, align 4, !dbg !80
  %510 = extractelement <4 x float> %423, i64 3, !dbg !80
  store float %510, ptr addrspace(3) %69, align 4, !dbg !80
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !80
  %.extract = load i32, ptr addrspace(3) %60, align 16, !dbg !80
  %.extract19 = load i32, ptr addrspace(3) %99, align 4, !dbg !80
  %.extract20 = load i32, ptr addrspace(3) %100, align 8, !dbg !80
  %.extract21 = load i32, ptr addrspace(3) %101, align 4, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %506, i1 %115) #8, !dbg !80
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !23
  %511 = icmp samesign ult i64 %indvars.iv, 316, !dbg !23
  br i1 %511, label %105, label %512, !dbg !23

512:                                              ; preds = %367
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !81
  %513 = bitcast <4 x i1> %433 to i4, !dbg !83
  %514 = icmp ne i4 %513, 0, !dbg !83
  %515 = zext i1 %514 to i8, !dbg !83
  %516 = shl nuw nsw i32 %13, 1, !dbg !81
  %517 = or disjoint i32 %516, %.lobit, !dbg !81
  %518 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %517, !dbg !81
  %519 = insertelement <1 x i8> poison, i8 %515, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %518, <1 x i8> %519, i1 true) #8, !dbg !81
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !81
  %520 = icmp samesign ult i32 %11, 128, !dbg !81
  %521 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %11, !dbg !81
  %522 = tail call i8 asm sideeffect "@$2 ld.shared.b8 $0, [ $1 + 0 ];", "=h,r,b"(ptr addrspace(3) %521, i1 %520) #8, !dbg !81
  %523 = zext i8 %522 to i32, !dbg !81
  %524 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %523, i32 1, i32 31), !dbg !81
  %525 = trunc i32 %524 to i8, !dbg !81
  %526 = or i8 %522, %525, !dbg !83
  %527 = and i32 %11, 897, !dbg !81
  %528 = icmp eq i32 %527, 0, !dbg !81
  %529 = insertelement <1 x i8> poison, i8 %526, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %521, <1 x i8> %529, i1 %528) #8, !dbg !81
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !81
  %530 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %516, !dbg !81
  %531 = load i8, ptr addrspace(3) %530, align 2, !dbg !81
  %.not7 = icmp eq i8 %531, 0, !dbg !84
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !85
  %532 = extractelement <2 x float> %498, i64 0, !dbg !87
  %533 = extractelement <2 x float> %498, i64 1, !dbg !87
  %534 = fcmp ogt float %532, %533, !dbg !87
  %535 = fcmp uno float %532, 0.000000e+00, !dbg !88
  %536 = or i1 %534, %535, !dbg !89
  %537 = select i1 %536, float %532, float %533, !dbg !90
  %538 = extractelement <2 x float> %501, i64 0, !dbg !87
  %539 = fcmp ogt float %537, %538, !dbg !87
  %540 = fcmp uno float %537, 0.000000e+00, !dbg !88
  %541 = or i1 %539, %540, !dbg !89
  %542 = select i1 %541, float %537, float %538, !dbg !90
  %543 = extractelement <2 x float> %501, i64 1, !dbg !87
  %544 = fcmp ogt float %542, %543, !dbg !87
  %545 = fcmp uno float %542, 0.000000e+00, !dbg !88
  %546 = or i1 %544, %545, !dbg !89
  %547 = select i1 %546, float %542, float %543, !dbg !90
  %548 = getelementptr float, ptr addrspace(3) @global_smem, i32 %517, !dbg !85
  %549 = bitcast float %547 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %548, <1 x i32> %549, i1 true) #8, !dbg !85
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !85
  %550 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !85
  %551 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %550, i1 %520) #8, !dbg !85
  %552 = bitcast i32 %551 to float, !dbg !85
  %553 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %551, i32 1, i32 31), !dbg !85
  %554 = bitcast i32 %553 to float, !dbg !85
  %555 = fcmp ogt float %552, %554, !dbg !87
  %556 = fcmp uno float %552, 0.000000e+00, !dbg !88
  %557 = or i1 %556, %555, !dbg !89
  %558 = select i1 %557, i32 %551, i32 %553, !dbg !90
  %559 = insertelement <1 x i32> poison, i32 %558, i64 0, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %550, <1 x i32> %559, i1 %528) #8, !dbg !85
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !85
  %560 = getelementptr float, ptr addrspace(3) @global_smem, i32 %516, !dbg !85
  %561 = load float, ptr addrspace(3) %560, align 8, !dbg !85
  %562 = fcmp oeq float %561, 0xFFF0000000000000, !dbg !91
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !92
  store float %561, ptr addrspace(3) %560, align 8, !dbg !92
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !92
  %563 = shl nuw nsw i32 %15, 1, !dbg !92
  %564 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %563, !dbg !92
  %565 = load float, ptr addrspace(3) %564, align 8, !dbg !92
  %566 = fsub float %532, %561, !dbg !92
  %567 = fsub float %533, %561, !dbg !92
  %568 = fsub float %538, %561, !dbg !92
  %569 = fsub float %543, %561, !dbg !92
  %570 = fmul float %566, 0x3FF7154760000000, !dbg !93
  %571 = select i1 %562, float 0.000000e+00, float %570, !dbg !94
  %572 = tail call float @llvm.nvvm.ex2.approx.f(float %571), !dbg !93
  %573 = fmul float %567, 0x3FF7154760000000, !dbg !93
  %574 = select i1 %562, float 0.000000e+00, float %573, !dbg !94
  %575 = tail call float @llvm.nvvm.ex2.approx.f(float %574), !dbg !93
  %576 = fmul float %568, 0x3FF7154760000000, !dbg !93
  %577 = select i1 %562, float 0.000000e+00, float %576, !dbg !94
  %578 = tail call float @llvm.nvvm.ex2.approx.f(float %577), !dbg !93
  %579 = fmul float %569, 0x3FF7154760000000, !dbg !93
  %580 = select i1 %562, float 0.000000e+00, float %579, !dbg !94
  %581 = tail call float @llvm.nvvm.ex2.approx.f(float %580), !dbg !93
  %582 = insertelement <2 x float> poison, float %572, i64 0, !dbg !95
  %583 = insertelement <2 x float> %582, float %575, i64 1, !dbg !95
  %584 = fmul <2 x float> %502, %583, !dbg !95
  %585 = insertelement <2 x float> poison, float %578, i64 0, !dbg !95
  %586 = insertelement <2 x float> %585, float %581, i64 1, !dbg !95
  %587 = fmul <2 x float> %503, %586, !dbg !95
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !96
  %shift = shufflevector <2 x float> %584, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !99
  %588 = fadd <2 x float> %584, %shift, !dbg !99
  %589 = fadd <2 x float> %588, %587, !dbg !99
  %shift162 = shufflevector <2 x float> %587, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !99
  %590 = fadd <2 x float> %589, %shift162, !dbg !99
  %591 = extractelement <2 x float> %590, i64 0, !dbg !99
  %592 = bitcast float %591 to <1 x i32>, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %548, <1 x i32> %592, i1 true) #8, !dbg !96
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !96
  %593 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %550, i1 %520) #8, !dbg !96
  %594 = bitcast i32 %593 to float, !dbg !96
  %595 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %593, i32 1, i32 31), !dbg !96
  %596 = bitcast i32 %595 to float, !dbg !96
  %597 = fadd float %594, %596, !dbg !99
  %598 = bitcast float %597 to <1 x i32>, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %550, <1 x i32> %598, i1 %528) #8, !dbg !96
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !96
  %599 = load i32, ptr addrspace(3) %560, align 8, !dbg !96
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !100
  %600 = insertelement <1 x i32> poison, i32 %599, i64 0, !dbg !100
  store <1 x i32> %600, ptr addrspace(3) %560, align 8, !dbg !100
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !100
  %601 = load float, ptr addrspace(3) %564, align 8, !dbg !100
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !101
  %602 = zext i1 %.not7 to i8, !dbg !101
  %603 = insertelement <1 x i8> poison, i8 %602, i64 0, !dbg !101
  store <1 x i8> %603, ptr addrspace(3) %530, align 2, !dbg !101
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !101
  %604 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %563, !dbg !101
  %605 = load i8, ptr addrspace(3) %604, align 2, !dbg !101
  %606 = trunc i8 %605 to i1, !dbg !101
  br label %607, !dbg !102

607:                                              ; preds = %512, %607
  %indvars.iv134 = phi i64 [ 0, %512 ], [ %indvars.iv.next135, %607 ]
  %608 = or disjoint i64 %indvars.iv134, %97, !dbg !103
  %609 = icmp samesign ult i64 %608, 324, !dbg !104
  %610 = trunc nuw nsw i64 %608 to i32, !dbg !105
  %611 = add i32 %47, %610, !dbg !105
  %612 = sext i32 %611 to i64, !dbg !106
  %613 = getelementptr float, ptr addrspace(1) %2, i64 %612, !dbg !106
  %614 = and i1 %21, %609, !dbg !107
  %615 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #8, !dbg !108
  %616 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %613, i64 %615, i1 %614) #8, !dbg !108
  %617 = extractvalue { i32, i32, i32, i32 } %616, 0, !dbg !108
  %618 = extractvalue { i32, i32, i32, i32 } %616, 1, !dbg !108
  %619 = extractvalue { i32, i32, i32, i32 } %616, 2, !dbg !108
  %620 = extractvalue { i32, i32, i32, i32 } %616, 3, !dbg !108
  %621 = bitcast i32 %617 to float, !dbg !108
  %622 = bitcast i32 %618 to float, !dbg !108
  %623 = bitcast i32 %619 to float, !dbg !108
  %624 = bitcast i32 %620 to float, !dbg !108
  %625 = add i32 %93, %610, !dbg !109
  %626 = sext i32 %625 to i64, !dbg !110
  %627 = getelementptr float, ptr addrspace(1) %3, i64 %626, !dbg !110
  %628 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #8, !dbg !111
  %629 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %627, i64 %628, i1 %614) #8, !dbg !111
  %630 = extractvalue { i32, i32, i32, i32 } %629, 0, !dbg !111
  %631 = extractvalue { i32, i32, i32, i32 } %629, 1, !dbg !111
  %632 = extractvalue { i32, i32, i32, i32 } %629, 2, !dbg !111
  %633 = extractvalue { i32, i32, i32, i32 } %629, 3, !dbg !111
  %634 = bitcast i32 %630 to float, !dbg !111
  %635 = bitcast i32 %631 to float, !dbg !111
  %636 = bitcast i32 %632 to float, !dbg !111
  %637 = bitcast i32 %633 to float, !dbg !111
  %638 = fadd float %621, %634, !dbg !112
  %639 = fadd float %622, %635, !dbg !112
  %640 = fadd float %623, %636, !dbg !112
  %641 = fadd float %624, %637, !dbg !112
  %642 = fsub float %638, %565, !dbg !113
  %643 = fsub float %639, %565, !dbg !113
  %644 = fsub float %640, %565, !dbg !113
  %645 = fsub float %641, %565, !dbg !113
  %646 = fmul float %642, 0x3FF7154760000000, !dbg !114
  %647 = tail call float @llvm.nvvm.ex2.approx.f(float %646), !dbg !114
  %648 = fmul float %643, 0x3FF7154760000000, !dbg !114
  %649 = tail call float @llvm.nvvm.ex2.approx.f(float %648), !dbg !114
  %650 = fmul float %644, 0x3FF7154760000000, !dbg !114
  %651 = tail call float @llvm.nvvm.ex2.approx.f(float %650), !dbg !114
  %652 = fmul float %645, 0x3FF7154760000000, !dbg !114
  %653 = tail call float @llvm.nvvm.ex2.approx.f(float %652), !dbg !114
  %654 = tail call float @llvm.nvvm.div.full(float %647, float %601), !dbg !100
  %655 = tail call float @llvm.nvvm.div.full(float %649, float %601), !dbg !100
  %656 = tail call float @llvm.nvvm.div.full(float %651, float %601), !dbg !100
  %657 = tail call float @llvm.nvvm.div.full(float %653, float %601), !dbg !100
  %658 = getelementptr float, ptr addrspace(1) %4, i64 %626, !dbg !115
  %659 = bitcast float %654 to i32, !dbg !116
  %660 = select i1 %606, i32 0, i32 %659, !dbg !101
  %661 = bitcast float %655 to i32, !dbg !116
  %662 = select i1 %606, i32 0, i32 %661, !dbg !101
  %663 = bitcast float %656 to i32, !dbg !116
  %664 = select i1 %606, i32 0, i32 %663, !dbg !101
  %665 = bitcast float %657 to i32, !dbg !116
  %666 = select i1 %606, i32 0, i32 %665, !dbg !101
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %660, i32 %662, i32 %664, i32 %666, ptr addrspace(1) %658, i1 %614) #8, !dbg !116
  %indvars.iv.next135 = add nuw nsw i64 %indvars.iv134, 8, !dbg !102
  %667 = icmp samesign ult i64 %indvars.iv134, 316, !dbg !102
  br i1 %667, label %607, label %668, !dbg !102

668:                                              ; preds = %607
  ret void, !dbg !117
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #5

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x i32> @llvm.abs.v4i32(<4 x i32>, i1 immarg) #7

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x i64> @llvm.smin.v4i64(<4 x i64>, <4 x i64>) #7

attributes #0 = { noreturn }
attributes #1 = { "nvvm.reqntid"="128" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #8 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "ccisb2yra76ab2haychl3vkjloggui7jornx4qodogdjo7v6y64e.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/ci")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !6, file: !6, type: !7, spFlags: DISPFlagOptimized)
!6 = !DIFile(filename: "<unknown>", directory: "")
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mul_rsub_4", linkageName: "triton_red_fused__to_copy_add_mul_rsub_4", scope: !1, file: !1, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!10 = !DILocation(line: 23, column: 28, scope: !9)
!11 = !DILocation(line: 23, column: 33, scope: !9)
!12 = !DILocation(line: 24, column: 44, scope: !9)
!13 = !DILocation(line: 24, column: 23, scope: !9)
!14 = !DILocation(line: 25, column: 21, scope: !9)
!15 = !DILocation(line: 26, column: 37, scope: !9)
!16 = !DILocation(line: 28, column: 19, scope: !9)
!17 = !DILocation(line: 29, column: 21, scope: !9)
!18 = !DILocation(line: 29, column: 28, scope: !9)
!19 = !DILocation(line: 30, column: 19, scope: !9)
!20 = !DILocation(line: 43, column: 46, scope: !9)
!21 = !DILocation(line: 44, column: 46, scope: !9)
!22 = !DILocation(line: 74, column: 40, scope: !9)
!23 = !DILocation(line: 37, column: 40, scope: !9)
!24 = !DILocation(line: 89, column: 50, scope: !9)
!25 = !DILocation(line: 96, column: 64, scope: !9)
!26 = !DILocation(line: 38, column: 31, scope: !9)
!27 = !DILocation(line: 39, column: 29, scope: !9)
!28 = !DILocation(line: 43, column: 35, scope: !9)
!29 = !DILocation(line: 43, column: 61, scope: !9)
!30 = !DILocation(line: 43, column: 51, scope: !9)
!31 = !DILocation(line: 44, column: 42, scope: !9)
!32 = !DILocation(line: 44, column: 35, scope: !9)
!33 = !DILocation(line: 44, column: 51, scope: !9)
!34 = !DILocation(line: 45, column: 23, scope: !9)
!35 = !DILocation(line: 47, column: 22, scope: !9)
!36 = !DILocation(line: 50, column: 22, scope: !9)
!37 = !DILocation(line: 52, column: 27, scope: !9)
!38 = !DILocation(line: 54, column: 22, scope: !9)
!39 = !DILocation(line: 55, column: 24, scope: !9)
!40 = !DILocation(line: 57, column: 24, scope: !9)
!41 = !DILocation(line: 58, column: 28, scope: !9)
!42 = !DILocation(line: 60, column: 24, scope: !9)
!43 = !DILocation(line: 62, column: 24, scope: !9)
!44 = !DILocation(line: 63, column: 25, scope: !9)
!45 = !DILocation(line: 64, column: 24, scope: !9)
!46 = !DILocation(line: 106, column: 29, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !9, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 66, column: 46, scope: !9)
!50 = !DILocation(line: 67, column: 37, scope: !9)
!51 = !DILocation(line: 68, column: 23, scope: !9)
!52 = !DILocation(line: 72, column: 39, scope: !9)
!53 = !DILocation(line: 73, column: 42, scope: !9)
!54 = !DILocation(line: 73, column: 57, scope: !9)
!55 = !DILocation(line: 73, column: 77, scope: !9)
!56 = !DILocation(line: 74, column: 35, scope: !9)
!57 = !DILocation(line: 74, column: 50, scope: !9)
!58 = !DILocation(line: 75, column: 25, scope: !9)
!59 = !DILocation(line: 77, column: 24, scope: !9)
!60 = !DILocation(line: 79, column: 24, scope: !9)
!61 = !DILocation(line: 80, column: 24, scope: !9)
!62 = !DILocation(line: 81, column: 24, scope: !9)
!63 = !DILocation(line: 83, column: 25, scope: !9)
!64 = !DILocation(line: 200, column: 53, scope: !47, inlinedAt: !65)
!65 = !DILocation(line: 93, column: 43, scope: !9)
!66 = !DILocation(line: 113, column: 21, scope: !47, inlinedAt: !65)
!67 = !DILocation(line: 111, column: 15, scope: !47, inlinedAt: !65)
!68 = !DILocation(line: 113, column: 16, scope: !47, inlinedAt: !65)
!69 = !DILocation(line: 114, column: 29, scope: !47, inlinedAt: !65)
!70 = !DILocation(line: 197, column: 19, scope: !47, inlinedAt: !65)
!71 = !DILocation(line: 197, column: 53, scope: !47, inlinedAt: !65)
!72 = !DILocation(line: 174, column: 24, scope: !47, inlinedAt: !65)
!73 = !DILocation(line: 197, column: 39, scope: !47, inlinedAt: !65)
!74 = !DILocation(line: 200, column: 39, scope: !47, inlinedAt: !65)
!75 = !DILocation(line: 206, column: 24, scope: !47, inlinedAt: !65)
!76 = !DILocation(line: 206, column: 36, scope: !47, inlinedAt: !65)
!77 = !DILocation(line: 97, column: 64, scope: !9)
!78 = !DILocation(line: 98, column: 45, scope: !9)
!79 = !DILocation(line: 98, column: 29, scope: !9)
!80 = !DILocation(line: 98, column: 64, scope: !9)
!81 = !DILocation(line: 266, column: 29, scope: !47, inlinedAt: !82)
!82 = !DILocation(line: 99, column: 51, scope: !9)
!83 = !DILocation(line: 261, column: 15, scope: !47, inlinedAt: !82)
!84 = !DILocation(line: 99, column: 66, scope: !9)
!85 = !DILocation(line: 124, column: 29, scope: !47, inlinedAt: !86)
!86 = !DILocation(line: 102, column: 35, scope: !9)
!87 = !DILocation(line: 111, column: 15, scope: !47, inlinedAt: !86)
!88 = !DILocation(line: 113, column: 21, scope: !47, inlinedAt: !86)
!89 = !DILocation(line: 113, column: 16, scope: !47, inlinedAt: !86)
!90 = !DILocation(line: 114, column: 29, scope: !47, inlinedAt: !86)
!91 = !DILocation(line: 181, column: 40, scope: !47, inlinedAt: !86)
!92 = !DILocation(line: 181, column: 68, scope: !47, inlinedAt: !86)
!93 = !DILocation(line: 174, column: 24, scope: !47, inlinedAt: !86)
!94 = !DILocation(line: 181, column: 58, scope: !47, inlinedAt: !86)
!95 = !DILocation(line: 182, column: 31, scope: !47, inlinedAt: !86)
!96 = !DILocation(line: 290, column: 36, scope: !97, inlinedAt: !86)
!97 = distinct !DILexicalBlockFile(scope: !9, file: !98, discriminator: 0)
!98 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!99 = !DILocation(line: 260, column: 15, scope: !97, inlinedAt: !86)
!100 = !DILocation(line: 119, column: 25, scope: !9)
!101 = !DILocation(line: 121, column: 39, scope: !9)
!102 = !DILocation(line: 107, column: 40, scope: !9)
!103 = !DILocation(line: 108, column: 31, scope: !9)
!104 = !DILocation(line: 109, column: 29, scope: !9)
!105 = !DILocation(line: 113, column: 42, scope: !9)
!106 = !DILocation(line: 113, column: 35, scope: !9)
!107 = !DILocation(line: 113, column: 61, scope: !9)
!108 = !DILocation(line: 113, column: 51, scope: !9)
!109 = !DILocation(line: 114, column: 52, scope: !9)
!110 = !DILocation(line: 114, column: 36, scope: !9)
!111 = !DILocation(line: 114, column: 64, scope: !9)
!112 = !DILocation(line: 116, column: 24, scope: !9)
!113 = !DILocation(line: 117, column: 24, scope: !9)
!114 = !DILocation(line: 118, column: 28, scope: !9)
!115 = !DILocation(line: 122, column: 29, scope: !9)
!116 = !DILocation(line: 122, column: 64, scope: !9)
!117 = !DILocation(line: 107, column: 4, scope: !9)
