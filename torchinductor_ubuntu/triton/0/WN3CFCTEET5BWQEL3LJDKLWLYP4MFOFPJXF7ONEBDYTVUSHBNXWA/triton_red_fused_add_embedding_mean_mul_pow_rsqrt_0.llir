; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [121 x i8] c"/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/kz/ckzqi7x2at4m3jxs6zdc46t47t6lw6nmlhnn2rg6szev4wipvslb.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 32128\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !5 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused_add_embedding_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr #1 !dbg !9 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !10
  %9 = shl i32 %8, 6, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 1, !dbg !12
  %12 = and i32 %11, 63, !dbg !12
  %13 = lshr i32 %10, 3, !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = or disjoint i32 %12, %9, !dbg !13
  %16 = icmp slt i32 %15, 1296, !dbg !14
  %17 = shl nuw nsw i32 %10, 2, !dbg !15
  %18 = and i32 %17, 4, !dbg !15
  %19 = sext i32 %15 to i64, !dbg !16
  %20 = getelementptr i64, ptr addrspace(1) %0, i64 %19, !dbg !16
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %20, i64 %21, i1 %16) #7, !dbg !17
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %20, i64 %23, i1 %16) #7, !dbg !17
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %20, i64 %25, i1 %16) #7, !dbg !17
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %20, i64 %27, i1 %16) #7, !dbg !17
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %30 = add i64 %28, 32128, !dbg !18
  %31 = icmp slt i64 %28, 0, !dbg !19
  %32 = select i1 %31, i64 %30, i64 %28, !dbg !20
  %33 = or disjoint i32 %14, %9, !dbg !13
  %34 = or disjoint i32 %33, 16, !dbg !13
  %35 = or disjoint i32 %33, 32, !dbg !13
  %36 = or disjoint i32 %33, 48, !dbg !13
  %37 = insertelement <4 x i32> poison, i32 %33, i64 0, !dbg !14
  %38 = insertelement <4 x i32> %37, i32 %34, i64 1, !dbg !14
  %39 = insertelement <4 x i32> %38, i32 %35, i64 2, !dbg !14
  %40 = insertelement <4 x i32> %39, i32 %36, i64 3, !dbg !14
  %41 = icmp slt <4 x i32> %40, splat (i32 1296), !dbg !14
  %42 = sext i32 %33 to i64, !dbg !16
  %43 = getelementptr i64, ptr addrspace(1) %0, i64 %42, !dbg !16
  %44 = sext i32 %34 to i64, !dbg !16
  %45 = getelementptr i64, ptr addrspace(1) %0, i64 %44, !dbg !16
  %46 = sext i32 %35 to i64, !dbg !16
  %47 = getelementptr i64, ptr addrspace(1) %0, i64 %46, !dbg !16
  %48 = sext i32 %36 to i64, !dbg !16
  %49 = getelementptr i64, ptr addrspace(1) %0, i64 %48, !dbg !16
  %50 = extractelement <4 x i1> %41, i64 0, !dbg !17
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %43, i64 %29, i1 %50) #7, !dbg !17
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %53 = extractelement <4 x i1> %41, i64 1, !dbg !17
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %45, i64 %52, i1 %53) #7, !dbg !17
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %56 = extractelement <4 x i1> %41, i64 2, !dbg !17
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %47, i64 %55, i1 %56) #7, !dbg !17
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %59 = extractelement <4 x i1> %41, i64 3, !dbg !17
  %60 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %49, i64 %58, i1 %59) #7, !dbg !17
  %61 = insertelement <4 x i64> poison, i64 %51, i64 0, !dbg !18
  %62 = insertelement <4 x i64> %61, i64 %54, i64 1, !dbg !18
  %63 = insertelement <4 x i64> %62, i64 %57, i64 2, !dbg !18
  %64 = insertelement <4 x i64> %63, i64 %60, i64 3, !dbg !18
  %65 = add <4 x i64> %64, splat (i64 32128), !dbg !18
  %66 = icmp slt <4 x i64> %64, zeroinitializer, !dbg !19
  %67 = select <4 x i1> %66, <4 x i64> %65, <4 x i64> %64, !dbg !20
  %68 = icmp ugt <4 x i64> %67, splat (i64 32127)
  %69 = and <4 x i1> %68, %41
  %70 = bitcast <4 x i1> %69 to i4
  %71 = icmp eq i4 %70, 0
  %.idx = mul i64 %32, 1536
  %72 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx
  br i1 %71, label %.split.preheader, label %92, !dbg !21

.split.preheader:                                 ; preds = %7
  %73 = zext nneg i32 %18 to i64, !dbg !22
  %invariant.gep = getelementptr float, ptr addrspace(1) %72, i64 %73, !dbg !22
  %74 = insertelement <4 x i1> poison, i1 %16, i64 0, !dbg !23
  %75 = shufflevector <4 x i1> %74, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !23
  br label %.split, !dbg !22

.split:                                           ; preds = %.split.preheader, %.split
  %indvars.iv = phi i64 [ 0, %.split.preheader ], [ %indvars.iv.next, %.split ]
  %76 = phi <4 x float> [ zeroinitializer, %.split.preheader ], [ %90, %.split ]
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !21
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %indvars.iv, !dbg !24
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !25
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %gep, i64 %77, i1 %16) #7, !dbg !25
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !25
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !25
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !25
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !25
  %83 = insertelement <4 x i32> poison, i32 %79, i64 0, !dbg !25
  %84 = insertelement <4 x i32> %83, i32 %80, i64 1, !dbg !25
  %85 = insertelement <4 x i32> %84, i32 %81, i64 2, !dbg !25
  %86 = insertelement <4 x i32> %85, i32 %82, i64 3, !dbg !25
  %87 = bitcast <4 x i32> %86 to <4 x float>, !dbg !25
  %88 = fmul <4 x float> %87, %87, !dbg !26
  %89 = fadd <4 x float> %76, %88, !dbg !27
  %90 = select <4 x i1> %75, <4 x float> %89, <4 x float> %76, !dbg !23
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !22
  %91 = icmp samesign ult i64 %indvars.iv, 376, !dbg !22
  br i1 %91, label %.split, label %__nv_rsqrtf.exit, !dbg !22

92:                                               ; preds = %7
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 41, ptr nonnull @assertFunc_0, i64 1), !dbg !21
  unreachable, !dbg !21

__nv_rsqrtf.exit:                                 ; preds = %.split
  %shift = shufflevector <4 x float> %90, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !28
  %93 = fadd <4 x float> %90, %shift, !dbg !28
  %shift29 = shufflevector <4 x float> %90, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !28
  %94 = fadd <4 x float> %shift29, %93, !dbg !28
  %shift30 = shufflevector <4 x float> %90, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !28
  %95 = fadd <4 x float> %shift30, %94, !dbg !28
  %96 = extractelement <4 x float> %95, i64 0, !dbg !28
  %97 = bitcast float %96 to i32, !dbg !32
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 1, i32 31), !dbg !32
  %99 = bitcast i32 %98 to float, !dbg !32
  %100 = fadd float %96, %99, !dbg !28
  %101 = tail call float @llvm.nvvm.div.full(float %100, float 3.840000e+02), !dbg !33
  %102 = fadd float %101, 0x3EB0C6F7A0000000, !dbg !34
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !35
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !35
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !35
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !35
  %.not.i14 = icmp eq i32 %106, 0, !dbg !35
  br i1 %.not.i14, label %109, label %107, !dbg !35

107:                                              ; preds = %__nv_rsqrtf.exit
  %108 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %102), !dbg !35
  br label %__nv_rsqrtf.exit16, !dbg !35

109:                                              ; preds = %__nv_rsqrtf.exit
  %110 = tail call float @llvm.nvvm.rsqrt.approx.f(float %102), !dbg !35
  br label %__nv_rsqrtf.exit16, !dbg !35

__nv_rsqrtf.exit16:                               ; preds = %107, %109
  %.0.i15 = phi float [ %108, %107 ], [ %110, %109 ], !dbg !35
  %111 = mul i32 %15, 384, !dbg !36
  %112 = zext nneg i32 %18 to i64, !dbg !37
  br label %113, !dbg !37

113:                                              ; preds = %113, %__nv_rsqrtf.exit16
  %indvars.iv21 = phi i64 [ 0, %__nv_rsqrtf.exit16 ], [ %indvars.iv.next22, %113 ]
  %114 = or disjoint i64 %indvars.iv21, %112, !dbg !38
  %115 = getelementptr float, ptr addrspace(1) %2, i64 %114, !dbg !39
  %116 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !40
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %115, i64 %116, i1 true) #7, !dbg !40
  %118 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !40
  %119 = bitcast i32 %118 to float, !dbg !40
  %120 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !40
  %121 = bitcast i32 %120 to float, !dbg !40
  %122 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !40
  %123 = bitcast i32 %122 to float, !dbg !40
  %124 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !40
  %125 = bitcast i32 %124 to float, !dbg !40
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !41
  %126 = getelementptr float, ptr addrspace(1) %72, i64 %114, !dbg !42
  %127 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #7, !dbg !43
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %126, i64 %127, i1 %16) #7, !dbg !43
  %129 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !43
  %130 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !43
  %131 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !43
  %132 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !43
  %133 = bitcast i32 %129 to float, !dbg !43
  %134 = bitcast i32 %130 to float, !dbg !43
  %135 = bitcast i32 %131 to float, !dbg !43
  %136 = bitcast i32 %132 to float, !dbg !43
  %137 = fmul float %.0.i15, %133, !dbg !44
  %138 = fmul float %.0.i15, %134, !dbg !44
  %139 = fmul float %.0.i15, %135, !dbg !44
  %140 = fmul float %.0.i15, %136, !dbg !44
  %141 = fmul float %137, %125, !dbg !45
  %142 = fmul float %138, %123, !dbg !45
  %143 = fmul float %139, %121, !dbg !45
  %144 = fmul float %140, %119, !dbg !45
  %145 = trunc nuw nsw i64 %114 to i32, !dbg !46
  %146 = add i32 %111, %145, !dbg !46
  %147 = sext i32 %146 to i64, !dbg !47
  %148 = getelementptr float, ptr addrspace(1) %3, i64 %147, !dbg !47
  %149 = bitcast float %141 to i32, !dbg !48
  %150 = bitcast float %142 to i32, !dbg !48
  %151 = bitcast float %143 to i32, !dbg !48
  %152 = bitcast float %144 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %149, i32 %150, i32 %151, i32 %152, ptr addrspace(1) %148, i1 %16) #7, !dbg !48
  %indvars.iv.next22 = add nuw nsw i64 %indvars.iv21, 8, !dbg !37
  %153 = icmp samesign ult i64 %indvars.iv21, 376, !dbg !37
  br i1 %153, label %113, label %154, !dbg !37

154:                                              ; preds = %113
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #5

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { "nvvm.reqntid"="128" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { convergent nocallback nounwind }
attributes #6 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "ckzqi7x2at4m3jxs6zdc46t47t6lw6nmlhnn2rg6szev4wipvslb.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/kz")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !6, file: !6, type: !7, spFlags: DISPFlagOptimized)
!6 = !DIFile(filename: "<unknown>", directory: "")
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = distinct !DISubprogram(name: "triton_red_fused_add_embedding_mean_mul_pow_rsqrt_0", linkageName: "triton_red_fused_add_embedding_mean_mul_pow_rsqrt_0", scope: !1, file: !1, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!10 = !DILocation(line: 23, column: 28, scope: !9)
!11 = !DILocation(line: 23, column: 33, scope: !9)
!12 = !DILocation(line: 24, column: 44, scope: !9)
!13 = !DILocation(line: 24, column: 23, scope: !9)
!14 = !DILocation(line: 25, column: 21, scope: !9)
!15 = !DILocation(line: 26, column: 37, scope: !9)
!16 = !DILocation(line: 29, column: 30, scope: !9)
!17 = !DILocation(line: 29, column: 35, scope: !9)
!18 = !DILocation(line: 38, column: 22, scope: !9)
!19 = !DILocation(line: 39, column: 22, scope: !9)
!20 = !DILocation(line: 40, column: 36, scope: !9)
!21 = !DILocation(line: 41, column: 68, scope: !9)
!22 = !DILocation(line: 31, column: 40, scope: !9)
!23 = !DILocation(line: 46, column: 49, scope: !9)
!24 = !DILocation(line: 42, column: 34, scope: !9)
!25 = !DILocation(line: 42, column: 52, scope: !9)
!26 = !DILocation(line: 43, column: 22, scope: !9)
!27 = !DILocation(line: 45, column: 24, scope: !9)
!28 = !DILocation(line: 260, column: 15, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !9, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!31 = !DILocation(line: 47, column: 25, scope: !9)
!32 = !DILocation(line: 290, column: 36, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 62, column: 24, scope: !9)
!34 = !DILocation(line: 64, column: 24, scope: !9)
!35 = !DILocation(line: 65, column: 32, scope: !9)
!36 = !DILocation(line: 68, column: 40, scope: !9)
!37 = !DILocation(line: 48, column: 40, scope: !9)
!38 = !DILocation(line: 49, column: 31, scope: !9)
!39 = !DILocation(line: 54, column: 35, scope: !9)
!40 = !DILocation(line: 54, column: 42, scope: !9)
!41 = !DILocation(line: 59, column: 70, scope: !9)
!42 = !DILocation(line: 60, column: 35, scope: !9)
!43 = !DILocation(line: 60, column: 54, scope: !9)
!44 = !DILocation(line: 66, column: 24, scope: !9)
!45 = !DILocation(line: 67, column: 24, scope: !9)
!46 = !DILocation(line: 68, column: 36, scope: !9)
!47 = !DILocation(line: 68, column: 29, scope: !9)
!48 = !DILocation(line: 68, column: 52, scope: !9)
!49 = !DILocation(line: 48, column: 4, scope: !9)
