; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_per_fused__softmax_add_10(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr #0 !dbg !5 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %7 = shl i32 %6, 5, !dbg !9
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %9 = lshr i32 %8, 5, !dbg !10
  %10 = and i32 %9, 7, !dbg !10
  %11 = or disjoint i32 %9, %7, !dbg !11
  %12 = shl nuw nsw i32 %8, 1, !dbg !12
  %13 = and i32 %12, 62, !dbg !12
  %14 = icmp samesign ult i32 %13, 50, !dbg !13
  %15 = or disjoint i32 %10, %7, !dbg !11
  %16 = or disjoint i32 %15, 8, !dbg !11
  %17 = or disjoint i32 %15, 16, !dbg !11
  %18 = or i32 %11, 24, !dbg !11
  %19 = insertelement <4 x i32> poison, i32 %18, i64 0, !dbg !14
  %20 = insertelement <4 x i32> %19, i32 %17, i64 1, !dbg !14
  %21 = insertelement <4 x i32> %20, i32 %16, i64 2, !dbg !14
  %22 = insertelement <4 x i32> %21, i32 %15, i64 3, !dbg !14
  %23 = icmp slt <4 x i32> %22, splat (i32 400), !dbg !14
  %24 = sdiv i32 %15, 50, !dbg !15
  %25 = mul i32 %24, 50, !dbg !16
  %.decomposed = sub i32 %15, %25, !dbg !16
  %26 = sdiv i32 %16, 50, !dbg !15
  %27 = mul i32 %26, 50, !dbg !16
  %.decomposed1 = sub i32 %16, %27, !dbg !16
  %28 = sdiv i32 %17, 50, !dbg !15
  %29 = mul i32 %28, 50, !dbg !16
  %.decomposed2 = sub i32 %17, %29, !dbg !16
  %30 = sdiv i32 %18, 50, !dbg !15
  %31 = mul i32 %30, 50, !dbg !16
  %.decomposed3 = sub i32 %18, %31, !dbg !16
  %32 = mul i32 %15, 50, !dbg !17
  %33 = mul i32 %16, 50, !dbg !17
  %34 = mul i32 %17, 50, !dbg !17
  %35 = mul i32 %18, 50, !dbg !17
  %36 = add i32 %32, %13, !dbg !18
  %37 = add i32 %33, %13, !dbg !18
  %38 = add i32 %34, %13, !dbg !18
  %39 = add i32 %35, %13, !dbg !18
  %40 = sext i32 %36 to i64, !dbg !19
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !19
  %42 = sext i32 %37 to i64, !dbg !19
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !19
  %44 = sext i32 %38 to i64, !dbg !19
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !19
  %46 = sext i32 %39 to i64, !dbg !19
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !19
  %48 = insertelement <4 x i1> poison, i1 %14, i64 0, !dbg !20
  %49 = shufflevector <4 x i1> %48, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !20
  %50 = and <4 x i1> %49, %23, !dbg !20
  %51 = extractelement <4 x i1> %50, i64 3, !dbg !21
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %41, i1 %51) #4, !dbg !25
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !25
  %54 = extractvalue { i32, i32 } %52, 1, !dbg !25
  %55 = extractelement <4 x i1> %50, i64 2, !dbg !21
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %43, i1 %55) #4, !dbg !25
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !25
  %58 = extractvalue { i32, i32 } %56, 1, !dbg !25
  %59 = extractelement <4 x i1> %50, i64 1, !dbg !21
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %45, i1 %59) #4, !dbg !25
  %61 = extractvalue { i32, i32 } %60, 0, !dbg !25
  %62 = extractvalue { i32, i32 } %60, 1, !dbg !25
  %63 = extractelement <4 x i1> %50, i64 0, !dbg !21
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %47, i1 %63) #4, !dbg !25
  %65 = extractvalue { i32, i32 } %64, 0, !dbg !25
  %66 = extractvalue { i32, i32 } %64, 1, !dbg !25
  %67 = insertelement <4 x i32> poison, i32 %65, i64 0, !dbg !25
  %68 = insertelement <4 x i32> %67, i32 %61, i64 1, !dbg !25
  %69 = insertelement <4 x i32> %68, i32 %57, i64 2, !dbg !25
  %70 = insertelement <4 x i32> %69, i32 %53, i64 3, !dbg !25
  %71 = bitcast <4 x i32> %70 to <4 x float>, !dbg !25
  %72 = insertelement <4 x i32> poison, i32 %66, i64 0, !dbg !25
  %73 = insertelement <4 x i32> %72, i32 %62, i64 1, !dbg !25
  %74 = insertelement <4 x i32> %73, i32 %58, i64 2, !dbg !25
  %75 = insertelement <4 x i32> %74, i32 %54, i64 3, !dbg !25
  %76 = bitcast <4 x i32> %75 to <4 x float>, !dbg !25
  %77 = mul nsw i32 %.decomposed, 50, !dbg !26
  %78 = mul nsw i32 %.decomposed1, 50, !dbg !26
  %79 = mul nsw i32 %.decomposed2, 50, !dbg !26
  %80 = mul nsw i32 %.decomposed3, 50, !dbg !26
  %81 = add nsw i32 %77, %13, !dbg !27
  %82 = add nsw i32 %78, %13, !dbg !27
  %83 = add nsw i32 %79, %13, !dbg !27
  %84 = add nsw i32 %80, %13, !dbg !27
  %85 = mul i32 %24, 2528, !dbg !28
  %86 = mul i32 %26, 2528, !dbg !28
  %87 = mul i32 %28, 2528, !dbg !28
  %88 = mul i32 %30, 2528, !dbg !28
  %89 = add i32 %81, %85, !dbg !29
  %90 = add i32 %82, %86, !dbg !29
  %91 = add i32 %83, %87, !dbg !29
  %92 = add i32 %84, %88, !dbg !29
  %93 = sext i32 %89 to i64, !dbg !30
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !30
  %95 = sext i32 %90 to i64, !dbg !30
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !30
  %97 = sext i32 %91 to i64, !dbg !30
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !30
  %99 = sext i32 %92 to i64, !dbg !30
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !30
  %101 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %94, i1 %51) #4, !dbg !31
  %102 = extractvalue { i32, i32 } %101, 0, !dbg !31
  %103 = extractvalue { i32, i32 } %101, 1, !dbg !31
  %104 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %96, i1 %55) #4, !dbg !31
  %105 = extractvalue { i32, i32 } %104, 0, !dbg !31
  %106 = extractvalue { i32, i32 } %104, 1, !dbg !31
  %107 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %98, i1 %59) #4, !dbg !31
  %108 = extractvalue { i32, i32 } %107, 0, !dbg !31
  %109 = extractvalue { i32, i32 } %107, 1, !dbg !31
  %110 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %100, i1 %63) #4, !dbg !31
  %111 = extractvalue { i32, i32 } %110, 0, !dbg !31
  %112 = extractvalue { i32, i32 } %110, 1, !dbg !31
  %113 = insertelement <4 x i32> poison, i32 %111, i64 0, !dbg !31
  %114 = insertelement <4 x i32> %113, i32 %108, i64 1, !dbg !31
  %115 = insertelement <4 x i32> %114, i32 %105, i64 2, !dbg !31
  %116 = insertelement <4 x i32> %115, i32 %102, i64 3, !dbg !31
  %117 = bitcast <4 x i32> %116 to <4 x float>, !dbg !31
  %118 = insertelement <4 x i32> poison, i32 %112, i64 0, !dbg !31
  %119 = insertelement <4 x i32> %118, i32 %109, i64 1, !dbg !31
  %120 = insertelement <4 x i32> %119, i32 %106, i64 2, !dbg !31
  %121 = insertelement <4 x i32> %120, i32 %103, i64 3, !dbg !31
  %122 = bitcast <4 x i32> %121 to <4 x float>, !dbg !31
  %123 = fadd <4 x float> %71, %117, !dbg !32
  %124 = fadd <4 x float> %76, %122, !dbg !32
  %125 = select <4 x i1> %50, <4 x float> %123, <4 x float> splat (float 0xFFF0000000000000), !dbg !33
  %126 = select <4 x i1> %50, <4 x float> %124, <4 x float> splat (float 0xFFF0000000000000), !dbg !33
  %127 = extractelement <4 x float> %125, i64 3, !dbg !34
  %128 = fcmp uno float %127, 0.000000e+00, !dbg !38
  %129 = fcmp ogt <4 x float> %125, %126, !dbg !39
  %130 = extractelement <4 x i1> %129, i64 3, !dbg !40
  %131 = or i1 %130, %128, !dbg !40
  %132 = extractelement <4 x float> %126, i64 3, !dbg !34
  %133 = select i1 %131, float %127, float %132, !dbg !34
  %134 = extractelement <4 x float> %125, i64 2, !dbg !34
  %135 = fcmp uno float %134, 0.000000e+00, !dbg !38
  %136 = extractelement <4 x i1> %129, i64 2, !dbg !40
  %137 = or i1 %136, %135, !dbg !40
  %138 = extractelement <4 x float> %126, i64 2, !dbg !34
  %139 = select i1 %137, float %134, float %138, !dbg !34
  %140 = extractelement <4 x float> %125, i64 1, !dbg !34
  %141 = fcmp uno float %140, 0.000000e+00, !dbg !38
  %142 = extractelement <4 x i1> %129, i64 1, !dbg !40
  %143 = or i1 %142, %141, !dbg !40
  %144 = extractelement <4 x float> %126, i64 1, !dbg !34
  %145 = select i1 %143, float %140, float %144, !dbg !34
  %146 = extractelement <4 x float> %125, i64 0, !dbg !34
  %147 = fcmp uno float %146, 0.000000e+00, !dbg !38
  %148 = extractelement <4 x i1> %129, i64 0, !dbg !40
  %149 = or i1 %148, %147, !dbg !40
  %150 = extractelement <4 x float> %126, i64 0, !dbg !34
  %151 = select i1 %149, float %146, float %150, !dbg !34
  %152 = bitcast float %133 to i32, !dbg !41
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 16, i32 31), !dbg !41
  %154 = bitcast i32 %153 to float, !dbg !41
  %155 = fcmp ogt float %133, %154, !dbg !39
  %156 = fcmp uno float %133, 0.000000e+00, !dbg !38
  %157 = or i1 %155, %156, !dbg !40
  %158 = select i1 %157, float %133, float %154, !dbg !34
  %159 = bitcast float %158 to i32, !dbg !41
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 8, i32 31), !dbg !41
  %161 = bitcast i32 %160 to float, !dbg !41
  %162 = fcmp ogt float %158, %161, !dbg !39
  %163 = fcmp uno float %158, 0.000000e+00, !dbg !38
  %164 = or i1 %162, %163, !dbg !40
  %165 = select i1 %164, float %158, float %161, !dbg !34
  %166 = bitcast float %165 to i32, !dbg !41
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 4, i32 31), !dbg !41
  %168 = bitcast i32 %167 to float, !dbg !41
  %169 = fcmp ogt float %165, %168, !dbg !39
  %170 = fcmp uno float %165, 0.000000e+00, !dbg !38
  %171 = or i1 %169, %170, !dbg !40
  %172 = select i1 %171, float %165, float %168, !dbg !34
  %173 = bitcast float %172 to i32, !dbg !41
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 2, i32 31), !dbg !41
  %175 = bitcast i32 %174 to float, !dbg !41
  %176 = fcmp ogt float %172, %175, !dbg !39
  %177 = fcmp uno float %172, 0.000000e+00, !dbg !38
  %178 = or i1 %176, %177, !dbg !40
  %179 = select i1 %178, float %172, float %175, !dbg !34
  %180 = bitcast float %179 to i32, !dbg !41
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 1, i32 31), !dbg !41
  %182 = bitcast i32 %181 to float, !dbg !41
  %183 = fcmp ogt float %179, %182, !dbg !39
  %184 = fcmp uno float %179, 0.000000e+00, !dbg !38
  %185 = or i1 %183, %184, !dbg !40
  %186 = select i1 %185, float %179, float %182, !dbg !34
  %187 = bitcast float %139 to i32, !dbg !41
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 16, i32 31), !dbg !41
  %189 = bitcast i32 %188 to float, !dbg !41
  %190 = fcmp ogt float %139, %189, !dbg !39
  %191 = fcmp uno float %139, 0.000000e+00, !dbg !38
  %192 = or i1 %191, %190, !dbg !40
  %193 = select i1 %192, float %139, float %189, !dbg !34
  %194 = bitcast float %193 to i32, !dbg !41
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 8, i32 31), !dbg !41
  %196 = bitcast i32 %195 to float, !dbg !41
  %197 = fcmp ogt float %193, %196, !dbg !39
  %198 = fcmp uno float %193, 0.000000e+00, !dbg !38
  %199 = or i1 %197, %198, !dbg !40
  %200 = select i1 %199, float %193, float %196, !dbg !34
  %201 = bitcast float %200 to i32, !dbg !41
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 4, i32 31), !dbg !41
  %203 = bitcast i32 %202 to float, !dbg !41
  %204 = fcmp ogt float %200, %203, !dbg !39
  %205 = fcmp uno float %200, 0.000000e+00, !dbg !38
  %206 = or i1 %204, %205, !dbg !40
  %207 = select i1 %206, float %200, float %203, !dbg !34
  %208 = bitcast float %207 to i32, !dbg !41
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 2, i32 31), !dbg !41
  %210 = bitcast i32 %209 to float, !dbg !41
  %211 = fcmp ogt float %207, %210, !dbg !39
  %212 = fcmp uno float %207, 0.000000e+00, !dbg !38
  %213 = or i1 %211, %212, !dbg !40
  %214 = select i1 %213, float %207, float %210, !dbg !34
  %215 = bitcast float %214 to i32, !dbg !41
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 1, i32 31), !dbg !41
  %217 = bitcast i32 %216 to float, !dbg !41
  %218 = fcmp ogt float %214, %217, !dbg !39
  %219 = fcmp uno float %214, 0.000000e+00, !dbg !38
  %220 = or i1 %218, %219, !dbg !40
  %221 = select i1 %220, float %214, float %217, !dbg !34
  %222 = bitcast float %145 to i32, !dbg !41
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 16, i32 31), !dbg !41
  %224 = bitcast i32 %223 to float, !dbg !41
  %225 = fcmp ogt float %145, %224, !dbg !39
  %226 = fcmp uno float %145, 0.000000e+00, !dbg !38
  %227 = or i1 %226, %225, !dbg !40
  %228 = select i1 %227, float %145, float %224, !dbg !34
  %229 = bitcast float %228 to i32, !dbg !41
  %230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %229, i32 8, i32 31), !dbg !41
  %231 = bitcast i32 %230 to float, !dbg !41
  %232 = fcmp ogt float %228, %231, !dbg !39
  %233 = fcmp uno float %228, 0.000000e+00, !dbg !38
  %234 = or i1 %232, %233, !dbg !40
  %235 = select i1 %234, float %228, float %231, !dbg !34
  %236 = bitcast float %235 to i32, !dbg !41
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 4, i32 31), !dbg !41
  %238 = bitcast i32 %237 to float, !dbg !41
  %239 = fcmp ogt float %235, %238, !dbg !39
  %240 = fcmp uno float %235, 0.000000e+00, !dbg !38
  %241 = or i1 %239, %240, !dbg !40
  %242 = select i1 %241, float %235, float %238, !dbg !34
  %243 = bitcast float %242 to i32, !dbg !41
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 2, i32 31), !dbg !41
  %245 = bitcast i32 %244 to float, !dbg !41
  %246 = fcmp ogt float %242, %245, !dbg !39
  %247 = fcmp uno float %242, 0.000000e+00, !dbg !38
  %248 = or i1 %246, %247, !dbg !40
  %249 = select i1 %248, float %242, float %245, !dbg !34
  %250 = bitcast float %249 to i32, !dbg !41
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 1, i32 31), !dbg !41
  %252 = bitcast i32 %251 to float, !dbg !41
  %253 = fcmp ogt float %249, %252, !dbg !39
  %254 = fcmp uno float %249, 0.000000e+00, !dbg !38
  %255 = or i1 %253, %254, !dbg !40
  %256 = select i1 %255, float %249, float %252, !dbg !34
  %257 = bitcast float %151 to i32, !dbg !41
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 16, i32 31), !dbg !41
  %259 = bitcast i32 %258 to float, !dbg !41
  %260 = fcmp ogt float %151, %259, !dbg !39
  %261 = fcmp uno float %151, 0.000000e+00, !dbg !38
  %262 = or i1 %261, %260, !dbg !40
  %263 = select i1 %262, float %151, float %259, !dbg !34
  %264 = bitcast float %263 to i32, !dbg !41
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 8, i32 31), !dbg !41
  %266 = bitcast i32 %265 to float, !dbg !41
  %267 = fcmp ogt float %263, %266, !dbg !39
  %268 = fcmp uno float %263, 0.000000e+00, !dbg !38
  %269 = or i1 %267, %268, !dbg !40
  %270 = select i1 %269, float %263, float %266, !dbg !34
  %271 = bitcast float %270 to i32, !dbg !41
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 4, i32 31), !dbg !41
  %273 = bitcast i32 %272 to float, !dbg !41
  %274 = fcmp ogt float %270, %273, !dbg !39
  %275 = fcmp uno float %270, 0.000000e+00, !dbg !38
  %276 = or i1 %274, %275, !dbg !40
  %277 = select i1 %276, float %270, float %273, !dbg !34
  %278 = bitcast float %277 to i32, !dbg !41
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 2, i32 31), !dbg !41
  %280 = bitcast i32 %279 to float, !dbg !41
  %281 = fcmp ogt float %277, %280, !dbg !39
  %282 = fcmp uno float %277, 0.000000e+00, !dbg !38
  %283 = or i1 %281, %282, !dbg !40
  %284 = select i1 %283, float %277, float %280, !dbg !34
  %285 = bitcast float %284 to i32, !dbg !41
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 1, i32 31), !dbg !41
  %287 = bitcast i32 %286 to float, !dbg !41
  %288 = fcmp ogt float %284, %287, !dbg !39
  %289 = fcmp uno float %284, 0.000000e+00, !dbg !38
  %290 = or i1 %288, %289, !dbg !40
  %291 = select i1 %290, float %284, float %287, !dbg !34
  %292 = extractelement <4 x float> %123, i64 3, !dbg !42
  %293 = fsub float %292, %186, !dbg !42
  %294 = extractelement <4 x float> %124, i64 3, !dbg !42
  %295 = fsub float %294, %186, !dbg !42
  %296 = extractelement <4 x float> %123, i64 2, !dbg !42
  %297 = fsub float %296, %221, !dbg !42
  %298 = extractelement <4 x float> %124, i64 2, !dbg !42
  %299 = fsub float %298, %221, !dbg !42
  %300 = extractelement <4 x float> %123, i64 1, !dbg !42
  %301 = fsub float %300, %256, !dbg !42
  %302 = extractelement <4 x float> %124, i64 1, !dbg !42
  %303 = fsub float %302, %256, !dbg !42
  %304 = extractelement <4 x float> %123, i64 0, !dbg !42
  %305 = fsub float %304, %291, !dbg !42
  %306 = extractelement <4 x float> %124, i64 0, !dbg !42
  %307 = fsub float %306, %291, !dbg !42
  %308 = fmul float %293, 0x3FF7154760000000, !dbg !43
  %309 = tail call float @llvm.nvvm.ex2.approx.f(float %308), !dbg !43
  %310 = fmul float %295, 0x3FF7154760000000, !dbg !43
  %311 = tail call float @llvm.nvvm.ex2.approx.f(float %310), !dbg !43
  %312 = fmul float %297, 0x3FF7154760000000, !dbg !43
  %313 = tail call float @llvm.nvvm.ex2.approx.f(float %312), !dbg !43
  %314 = fmul float %299, 0x3FF7154760000000, !dbg !43
  %315 = tail call float @llvm.nvvm.ex2.approx.f(float %314), !dbg !43
  %316 = fmul float %301, 0x3FF7154760000000, !dbg !43
  %317 = tail call float @llvm.nvvm.ex2.approx.f(float %316), !dbg !43
  %318 = fmul float %303, 0x3FF7154760000000, !dbg !43
  %319 = tail call float @llvm.nvvm.ex2.approx.f(float %318), !dbg !43
  %320 = fmul float %305, 0x3FF7154760000000, !dbg !43
  %321 = tail call float @llvm.nvvm.ex2.approx.f(float %320), !dbg !43
  %322 = fmul float %307, 0x3FF7154760000000, !dbg !43
  %323 = tail call float @llvm.nvvm.ex2.approx.f(float %322), !dbg !43
  %324 = fadd float %309, %311, !dbg !21
  %325 = select i1 %51, float %324, float 0.000000e+00, !dbg !21
  %326 = fadd float %313, %315, !dbg !21
  %327 = select i1 %55, float %326, float 0.000000e+00, !dbg !21
  %328 = fadd float %317, %319, !dbg !21
  %329 = select i1 %59, float %328, float 0.000000e+00, !dbg !21
  %330 = fadd float %321, %323, !dbg !21
  %331 = select i1 %63, float %330, float 0.000000e+00, !dbg !21
  %332 = bitcast float %325 to i32, !dbg !44
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 16, i32 31), !dbg !44
  %334 = bitcast i32 %333 to float, !dbg !44
  %335 = fadd float %325, %334, !dbg !21
  %336 = bitcast float %335 to i32, !dbg !44
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %336, i32 8, i32 31), !dbg !44
  %338 = bitcast i32 %337 to float, !dbg !44
  %339 = fadd float %335, %338, !dbg !21
  %340 = bitcast float %339 to i32, !dbg !44
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 4, i32 31), !dbg !44
  %342 = bitcast i32 %341 to float, !dbg !44
  %343 = fadd float %339, %342, !dbg !21
  %344 = bitcast float %343 to i32, !dbg !44
  %345 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %344, i32 2, i32 31), !dbg !44
  %346 = bitcast i32 %345 to float, !dbg !44
  %347 = fadd float %343, %346, !dbg !21
  %348 = bitcast float %347 to i32, !dbg !44
  %349 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %348, i32 1, i32 31), !dbg !44
  %350 = bitcast i32 %349 to float, !dbg !44
  %351 = fadd float %347, %350, !dbg !21
  %352 = bitcast float %327 to i32, !dbg !44
  %353 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %352, i32 16, i32 31), !dbg !44
  %354 = bitcast i32 %353 to float, !dbg !44
  %355 = fadd float %327, %354, !dbg !21
  %356 = bitcast float %355 to i32, !dbg !44
  %357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 8, i32 31), !dbg !44
  %358 = bitcast i32 %357 to float, !dbg !44
  %359 = fadd float %355, %358, !dbg !21
  %360 = bitcast float %359 to i32, !dbg !44
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 4, i32 31), !dbg !44
  %362 = bitcast i32 %361 to float, !dbg !44
  %363 = fadd float %359, %362, !dbg !21
  %364 = bitcast float %363 to i32, !dbg !44
  %365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 2, i32 31), !dbg !44
  %366 = bitcast i32 %365 to float, !dbg !44
  %367 = fadd float %363, %366, !dbg !21
  %368 = bitcast float %367 to i32, !dbg !44
  %369 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %368, i32 1, i32 31), !dbg !44
  %370 = bitcast i32 %369 to float, !dbg !44
  %371 = fadd float %367, %370, !dbg !21
  %372 = bitcast float %329 to i32, !dbg !44
  %373 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %372, i32 16, i32 31), !dbg !44
  %374 = bitcast i32 %373 to float, !dbg !44
  %375 = fadd float %329, %374, !dbg !21
  %376 = bitcast float %375 to i32, !dbg !44
  %377 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %376, i32 8, i32 31), !dbg !44
  %378 = bitcast i32 %377 to float, !dbg !44
  %379 = fadd float %375, %378, !dbg !21
  %380 = bitcast float %379 to i32, !dbg !44
  %381 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %380, i32 4, i32 31), !dbg !44
  %382 = bitcast i32 %381 to float, !dbg !44
  %383 = fadd float %379, %382, !dbg !21
  %384 = bitcast float %383 to i32, !dbg !44
  %385 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %384, i32 2, i32 31), !dbg !44
  %386 = bitcast i32 %385 to float, !dbg !44
  %387 = fadd float %383, %386, !dbg !21
  %388 = bitcast float %387 to i32, !dbg !44
  %389 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %388, i32 1, i32 31), !dbg !44
  %390 = bitcast i32 %389 to float, !dbg !44
  %391 = fadd float %387, %390, !dbg !21
  %392 = bitcast float %331 to i32, !dbg !44
  %393 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %392, i32 16, i32 31), !dbg !44
  %394 = bitcast i32 %393 to float, !dbg !44
  %395 = fadd float %331, %394, !dbg !21
  %396 = bitcast float %395 to i32, !dbg !44
  %397 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %396, i32 8, i32 31), !dbg !44
  %398 = bitcast i32 %397 to float, !dbg !44
  %399 = fadd float %395, %398, !dbg !21
  %400 = bitcast float %399 to i32, !dbg !44
  %401 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %400, i32 4, i32 31), !dbg !44
  %402 = bitcast i32 %401 to float, !dbg !44
  %403 = fadd float %399, %402, !dbg !21
  %404 = bitcast float %403 to i32, !dbg !44
  %405 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %404, i32 2, i32 31), !dbg !44
  %406 = bitcast i32 %405 to float, !dbg !44
  %407 = fadd float %403, %406, !dbg !21
  %408 = bitcast float %407 to i32, !dbg !44
  %409 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %408, i32 1, i32 31), !dbg !44
  %410 = bitcast i32 %409 to float, !dbg !44
  %411 = fadd float %407, %410, !dbg !21
  %412 = tail call float @llvm.nvvm.div.full(float %309, float %351), !dbg !45
  %413 = tail call float @llvm.nvvm.div.full(float %311, float %351), !dbg !45
  %414 = tail call float @llvm.nvvm.div.full(float %313, float %371), !dbg !45
  %415 = tail call float @llvm.nvvm.div.full(float %315, float %371), !dbg !45
  %416 = tail call float @llvm.nvvm.div.full(float %317, float %391), !dbg !45
  %417 = tail call float @llvm.nvvm.div.full(float %319, float %391), !dbg !45
  %418 = tail call float @llvm.nvvm.div.full(float %321, float %411), !dbg !45
  %419 = tail call float @llvm.nvvm.div.full(float %323, float %411), !dbg !45
  %420 = bitcast float %412 to i32, !dbg !46
  %421 = bitcast float %413 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %420, i32 %421, ptr addrspace(1) %94, i1 %51) #4, !dbg !46
  %422 = bitcast float %414 to i32, !dbg !46
  %423 = bitcast float %415 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %422, i32 %423, ptr addrspace(1) %96, i1 %55) #4, !dbg !46
  %424 = bitcast float %416 to i32, !dbg !46
  %425 = bitcast float %417 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %424, i32 %425, ptr addrspace(1) %98, i1 %59) #4, !dbg !46
  %426 = bitcast float %418 to i32, !dbg !46
  %427 = bitcast float %419 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %426, i32 %427, ptr addrspace(1) %100, i1 %63) #4, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { "nvvm.reqntid"="256" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "cjgujg2s3lvpsqkrlzuzbcldofxrz3zop22m6skn526gjzfe3ddl.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/jg")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "triton_per_fused__softmax_add_10", linkageName: "triton_per_fused__softmax_add_10", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 28, scope: !5)
!9 = !DILocation(line: 24, column: 33, scope: !5)
!10 = !DILocation(line: 25, column: 44, scope: !5)
!11 = !DILocation(line: 25, column: 23, scope: !5)
!12 = !DILocation(line: 27, column: 38, scope: !5)
!13 = !DILocation(line: 29, column: 25, scope: !5)
!14 = !DILocation(line: 26, column: 21, scope: !5)
!15 = !DILocation(line: 35, column: 19, scope: !5)
!16 = !DILocation(line: 34, column: 19, scope: !5)
!17 = !DILocation(line: 36, column: 40, scope: !5)
!18 = !DILocation(line: 36, column: 37, scope: !5)
!19 = !DILocation(line: 36, column: 30, scope: !5)
!20 = !DILocation(line: 36, column: 55, scope: !5)
!21 = !DILocation(line: 260, column: 15, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !5, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!24 = !DILocation(line: 47, column: 26, scope: !5)
!25 = !DILocation(line: 36, column: 45, scope: !5)
!26 = !DILocation(line: 37, column: 44, scope: !5)
!27 = !DILocation(line: 37, column: 41, scope: !5)
!28 = !DILocation(line: 37, column: 54, scope: !5)
!29 = !DILocation(line: 37, column: 49, scope: !5)
!30 = !DILocation(line: 37, column: 34, scope: !5)
!31 = !DILocation(line: 37, column: 59, scope: !5)
!32 = !DILocation(line: 38, column: 18, scope: !5)
!33 = !DILocation(line: 41, column: 43, scope: !5)
!34 = !DILocation(line: 114, column: 29, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !5, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 42, column: 37, scope: !5)
!38 = !DILocation(line: 113, column: 21, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 111, column: 15, scope: !35, inlinedAt: !37)
!40 = !DILocation(line: 113, column: 16, scope: !35, inlinedAt: !37)
!41 = !DILocation(line: 124, column: 29, scope: !35, inlinedAt: !37)
!42 = !DILocation(line: 43, column: 18, scope: !5)
!43 = !DILocation(line: 44, column: 24, scope: !5)
!44 = !DILocation(line: 290, column: 36, scope: !22, inlinedAt: !24)
!45 = !DILocation(line: 50, column: 21, scope: !5)
!46 = !DILocation(line: 51, column: 60, scope: !5)
!47 = !DILocation(line: 51, column: 4, scope: !5)
