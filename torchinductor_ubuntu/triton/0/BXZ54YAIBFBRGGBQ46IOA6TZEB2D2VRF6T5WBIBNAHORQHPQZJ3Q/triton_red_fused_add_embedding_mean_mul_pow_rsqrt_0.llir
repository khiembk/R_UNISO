; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [121 x i8] c"/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/kz/ckzqi7x2at4m3jxs6zdc46t47t6lw6nmlhnn2rg6szev4wipvslb.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 32128\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !5 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused_add_embedding_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr #1 !dbg !9 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !10
  %9 = shl i32 %8, 3, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit1 = lshr i32 %10, 7, !dbg !12
  %11 = and i32 %.lobit1, 3, !dbg !12
  %12 = or i32 %.lobit1, 4, !dbg !12
  %13 = or disjoint i32 %11, %9, !dbg !13
  %14 = or disjoint i32 %12, %9, !dbg !13
  %15 = icmp slt i32 %13, 1296, !dbg !14
  %16 = icmp slt i32 %14, 1296, !dbg !14
  %17 = icmp slt i32 %9, 1296, !dbg !14
  %18 = sext i32 %13 to i64, !dbg !15
  %19 = getelementptr i64, ptr addrspace(1) %0, i64 %18, !dbg !15
  %20 = sext i32 %14 to i64, !dbg !15
  %21 = getelementptr i64, ptr addrspace(1) %0, i64 %20, !dbg !15
  %22 = sext i32 %9 to i64, !dbg !15
  %23 = getelementptr i64, ptr addrspace(1) %0, i64 %22, !dbg !15
  %24 = getelementptr i8, ptr addrspace(1) %23, i64 16, !dbg !15
  %25 = getelementptr i8, ptr addrspace(1) %23, i64 32, !dbg !15
  %26 = getelementptr i8, ptr addrspace(1) %23, i64 48, !dbg !15
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !16
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %19, i64 %27, i1 %15) #7, !dbg !16
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !16
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %19, i64 %29, i1 %15) #7, !dbg !16
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !16
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %19, i64 %31, i1 %15) #7, !dbg !16
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !16
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %19, i64 %33, i1 %15) #7, !dbg !16
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !16
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %21, i64 %35, i1 %16) #7, !dbg !16
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !16
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %21, i64 %37, i1 %16) #7, !dbg !16
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !16
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %21, i64 %39, i1 %16) #7, !dbg !16
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !16
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %21, i64 %41, i1 %16) #7, !dbg !16
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !16
  %44 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$4 ld.global.L1::evict_last.L2::cache_hint.v2.b64 { $0, $1 }, [ $2 + 0 ], $3;", "=l,=l,l,l,b"(ptr addrspace(1) %23, i64 %43, i1 %17) #7, !dbg !16
  %45 = extractvalue { i64, i64 } %44, 0, !dbg !16
  %46 = extractvalue { i64, i64 } %44, 1, !dbg !16
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !16
  %48 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$4 ld.global.L1::evict_last.L2::cache_hint.v2.b64 { $0, $1 }, [ $2 + 0 ], $3;", "=l,=l,l,l,b"(ptr addrspace(1) %24, i64 %47, i1 %17) #7, !dbg !16
  %49 = extractvalue { i64, i64 } %48, 0, !dbg !16
  %50 = extractvalue { i64, i64 } %48, 1, !dbg !16
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !16
  %52 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$4 ld.global.L1::evict_last.L2::cache_hint.v2.b64 { $0, $1 }, [ $2 + 0 ], $3;", "=l,=l,l,l,b"(ptr addrspace(1) %25, i64 %51, i1 %17) #7, !dbg !16
  %53 = extractvalue { i64, i64 } %52, 0, !dbg !16
  %54 = extractvalue { i64, i64 } %52, 1, !dbg !16
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !16
  %56 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$4 ld.global.L1::evict_last.L2::cache_hint.v2.b64 { $0, $1 }, [ $2 + 0 ], $3;", "=l,=l,l,l,b"(ptr addrspace(1) %26, i64 %55, i1 %17) #7, !dbg !16
  %57 = extractvalue { i64, i64 } %56, 0, !dbg !16
  %58 = extractvalue { i64, i64 } %56, 1, !dbg !16
  %59 = insertelement <8 x i64> poison, i64 %45, i64 0, !dbg !17
  %60 = insertelement <8 x i64> %59, i64 %46, i64 1, !dbg !17
  %61 = insertelement <8 x i64> %60, i64 %49, i64 2, !dbg !17
  %62 = insertelement <8 x i64> %61, i64 %50, i64 3, !dbg !17
  %63 = insertelement <8 x i64> %62, i64 %53, i64 4, !dbg !17
  %64 = insertelement <8 x i64> %63, i64 %54, i64 5, !dbg !17
  %65 = insertelement <8 x i64> %64, i64 %57, i64 6, !dbg !17
  %66 = insertelement <8 x i64> %65, i64 %58, i64 7, !dbg !17
  %67 = add <8 x i64> %66, splat (i64 32128), !dbg !17
  %68 = icmp slt <8 x i64> %66, zeroinitializer, !dbg !18
  %69 = select <8 x i1> %68, <8 x i64> %67, <8 x i64> %66, !dbg !19
  %70 = icmp ugt <8 x i64> %69, splat (i64 32127), !dbg !20
  %71 = bitcast <8 x i1> %70 to i8, !dbg !21
  %72 = icmp ne i8 %71, 0, !dbg !21
  %73 = and i1 %17, %72, !dbg !21
  br i1 %73, label %74, label %__nv_rsqrtf.exit, !dbg !21

74:                                               ; preds = %7
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 41, ptr nonnull @assertFunc_0, i64 1), !dbg !21
  unreachable, !dbg !21

__nv_rsqrtf.exit:                                 ; preds = %7
  %75 = icmp slt i64 %42, 0, !dbg !18
  %76 = add i64 %42, 32128, !dbg !17
  %77 = select i1 %75, i64 %76, i64 %42, !dbg !19
  %78 = icmp slt i64 %34, 0, !dbg !18
  %79 = add i64 %34, 32128, !dbg !17
  %80 = select i1 %78, i64 %79, i64 %34, !dbg !19
  %81 = and i32 %10, 511, !dbg !22
  %82 = icmp samesign ult i32 %81, 384, !dbg !23
  %83 = shl nuw nsw i32 %10, 2, !dbg !22
  %84 = and i32 %83, 508, !dbg !22
  %85 = icmp samesign ult i32 %84, 384, !dbg !23
  %86 = lshr i32 %10, 5, !dbg !12
  %87 = and i32 %10, 31, !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !21
  %88 = zext nneg i32 %84 to i64, !dbg !24
  %.idx = mul i64 %80, 1536, !dbg !25
  %89 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx, !dbg !25
  %90 = getelementptr float, ptr addrspace(1) %89, i64 %88, !dbg !25
  %.idx11 = mul i64 %77, 1536, !dbg !25
  %91 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx11, !dbg !25
  %92 = getelementptr float, ptr addrspace(1) %91, i64 %88, !dbg !25
  %93 = and i1 %85, %15, !dbg !26
  %94 = and i1 %85, %16, !dbg !26
  %95 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !27
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %90, i64 %95, i1 %93) #7, !dbg !27
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !27
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !27
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !27
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !27
  %101 = bitcast i32 %97 to float, !dbg !27
  %102 = bitcast i32 %98 to float, !dbg !27
  %103 = bitcast i32 %99 to float, !dbg !27
  %104 = bitcast i32 %100 to float, !dbg !27
  %105 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !27
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %92, i64 %105, i1 %94) #7, !dbg !27
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !27
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !27
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !27
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !27
  %111 = bitcast i32 %107 to float, !dbg !27
  %112 = bitcast i32 %108 to float, !dbg !27
  %113 = bitcast i32 %109 to float, !dbg !27
  %114 = bitcast i32 %110 to float, !dbg !27
  %115 = fmul float %101, %101, !dbg !28
  %116 = fmul float %102, %102, !dbg !28
  %117 = fmul float %103, %103, !dbg !28
  %118 = fmul float %104, %104, !dbg !28
  %119 = fmul float %111, %111, !dbg !28
  %120 = fmul float %112, %112, !dbg !28
  %121 = fmul float %113, %113, !dbg !28
  %122 = fmul float %114, %114, !dbg !28
  %123 = fadd float %115, %116, !dbg !29
  %124 = fadd float %117, %123, !dbg !29
  %125 = fadd float %118, %124, !dbg !29
  %126 = select i1 %93, float %125, float 0.000000e+00, !dbg !29
  %127 = fadd float %119, %120, !dbg !29
  %128 = fadd float %121, %127, !dbg !29
  %129 = fadd float %122, %128, !dbg !29
  %130 = select i1 %94, float %129, float 0.000000e+00, !dbg !29
  %131 = bitcast float %126 to i32, !dbg !33
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 16, i32 31), !dbg !33
  %133 = bitcast i32 %132 to float, !dbg !33
  %134 = fadd float %126, %133, !dbg !29
  %135 = bitcast float %134 to i32, !dbg !33
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 8, i32 31), !dbg !33
  %137 = bitcast i32 %136 to float, !dbg !33
  %138 = fadd float %134, %137, !dbg !29
  %139 = bitcast float %138 to i32, !dbg !33
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 4, i32 31), !dbg !33
  %141 = bitcast i32 %140 to float, !dbg !33
  %142 = fadd float %138, %141, !dbg !29
  %143 = bitcast float %142 to i32, !dbg !33
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 2, i32 31), !dbg !33
  %145 = bitcast i32 %144 to float, !dbg !33
  %146 = fadd float %142, %145, !dbg !29
  %147 = bitcast float %146 to i32, !dbg !33
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 1, i32 31), !dbg !33
  %149 = bitcast i32 %148 to float, !dbg !33
  %150 = fadd float %146, %149, !dbg !29
  %151 = bitcast float %130 to i32, !dbg !33
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 16, i32 31), !dbg !33
  %153 = bitcast i32 %152 to float, !dbg !33
  %154 = fadd float %130, %153, !dbg !29
  %155 = bitcast float %154 to i32, !dbg !33
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 8, i32 31), !dbg !33
  %157 = bitcast i32 %156 to float, !dbg !33
  %158 = fadd float %154, %157, !dbg !29
  %159 = bitcast float %158 to i32, !dbg !33
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 4, i32 31), !dbg !33
  %161 = bitcast i32 %160 to float, !dbg !33
  %162 = fadd float %158, %161, !dbg !29
  %163 = bitcast float %162 to i32, !dbg !33
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 2, i32 31), !dbg !33
  %165 = bitcast i32 %164 to float, !dbg !33
  %166 = fadd float %162, %165, !dbg !29
  %167 = bitcast float %166 to i32, !dbg !33
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 1, i32 31), !dbg !33
  %169 = bitcast i32 %168 to float, !dbg !33
  %170 = fadd float %166, %169, !dbg !29
  %171 = and i32 %86, 3, !dbg !33
  %172 = icmp eq i32 %87, 0, !dbg !33
  %.idx36 = shl nuw nsw i32 %11, 4, !dbg !33
  %173 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx36, !dbg !33
  %174 = getelementptr float, ptr addrspace(3) %173, i32 %171, !dbg !33
  %175 = bitcast float %150 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %175, i1 %172) #7, !dbg !33
  %.idx37 = shl nuw nsw i32 %12, 4, !dbg !33
  %176 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx37, !dbg !33
  %177 = getelementptr float, ptr addrspace(3) %176, i32 %171, !dbg !33
  %178 = bitcast float %170 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %178, i1 %172) #7, !dbg !33
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !33
  %179 = icmp samesign ult i32 %10, 32, !dbg !33
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !33
  %181 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %180, i1 %179) #7, !dbg !33
  %182 = bitcast i32 %181 to float, !dbg !33
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 2, i32 31), !dbg !33
  %184 = bitcast i32 %183 to float, !dbg !33
  %185 = fadd float %182, %184, !dbg !29
  %186 = bitcast float %185 to i32, !dbg !33
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 1, i32 31), !dbg !33
  %188 = bitcast i32 %187 to float, !dbg !33
  %189 = fadd float %185, %188, !dbg !29
  %190 = and i32 %10, 995, !dbg !33
  %191 = icmp eq i32 %190, 0, !dbg !33
  %192 = bitcast float %189 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %192, i1 %191) #7, !dbg !33
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !33
  %193 = load float, ptr addrspace(3) %173, align 16, !dbg !33
  %194 = load float, ptr addrspace(3) %176, align 16, !dbg !33
  %195 = zext nneg i32 %81 to i64, !dbg !34
  %196 = getelementptr float, ptr addrspace(1) %2, i64 %195, !dbg !34
  %197 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !35
  %198 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$4 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $2 + 0 ], $3;", "=r,r,l,l,b"(i32 0, ptr addrspace(1) %196, i64 %197, i1 %82) #7, !dbg !35
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %199 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #7, !dbg !37
  %200 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %90, i64 %199, i1 %93) #7, !dbg !37
  %201 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #7, !dbg !37
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %92, i64 %201, i1 %94) #7, !dbg !37
  %203 = tail call float @llvm.nvvm.div.full(float %193, float 3.840000e+02), !dbg !38
  %204 = tail call float @llvm.nvvm.div.full(float %194, float 3.840000e+02), !dbg !38
  %205 = fadd float %203, 0x3EB0C6F7A0000000, !dbg !39
  %206 = fadd float %204, 0x3EB0C6F7A0000000, !dbg !39
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !40
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !40
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !40
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !40
  %.not.i21 = icmp eq i32 %210, 0, !dbg !40
  br i1 %.not.i21, label %213, label %211, !dbg !40

211:                                              ; preds = %__nv_rsqrtf.exit
  %212 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %205), !dbg !40
  br label %__nv_rsqrtf.exit23, !dbg !40

213:                                              ; preds = %__nv_rsqrtf.exit
  %214 = tail call float @llvm.nvvm.rsqrt.approx.f(float %205), !dbg !40
  br label %__nv_rsqrtf.exit23, !dbg !40

__nv_rsqrtf.exit23:                               ; preds = %211, %213
  %.0.i22 = phi float [ %212, %211 ], [ %214, %213 ], !dbg !40
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !40
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !40
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !40
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !40
  %.not.i33 = icmp eq i32 %218, 0, !dbg !40
  br i1 %.not.i33, label %221, label %219, !dbg !40

219:                                              ; preds = %__nv_rsqrtf.exit23
  %220 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %206), !dbg !40
  br label %__nv_rsqrtf.exit35, !dbg !40

221:                                              ; preds = %__nv_rsqrtf.exit23
  %222 = tail call float @llvm.nvvm.rsqrt.approx.f(float %206), !dbg !40
  br label %__nv_rsqrtf.exit35, !dbg !40

__nv_rsqrtf.exit35:                               ; preds = %219, %221
  %.0.i34 = phi float [ %220, %219 ], [ %222, %221 ], !dbg !40
  %223 = extractvalue { i32, i32, i32, i32 } %202, 3, !dbg !37
  %224 = bitcast i32 %223 to float, !dbg !37
  %225 = extractvalue { i32, i32, i32, i32 } %202, 2, !dbg !37
  %226 = bitcast i32 %225 to float, !dbg !37
  %227 = extractvalue { i32, i32, i32, i32 } %202, 1, !dbg !37
  %228 = bitcast i32 %227 to float, !dbg !37
  %229 = extractvalue { i32, i32, i32, i32 } %202, 0, !dbg !37
  %230 = bitcast i32 %229 to float, !dbg !37
  %231 = extractvalue { i32, i32, i32, i32 } %200, 3, !dbg !37
  %232 = bitcast i32 %231 to float, !dbg !37
  %233 = extractvalue { i32, i32, i32, i32 } %200, 2, !dbg !37
  %234 = bitcast i32 %233 to float, !dbg !37
  %235 = extractvalue { i32, i32, i32, i32 } %200, 1, !dbg !37
  %236 = bitcast i32 %235 to float, !dbg !37
  %237 = extractvalue { i32, i32, i32, i32 } %200, 0, !dbg !37
  %238 = bitcast i32 %237 to float, !dbg !37
  %239 = fmul float %.0.i22, %238, !dbg !41
  %240 = fmul float %.0.i22, %236, !dbg !41
  %241 = fmul float %.0.i22, %234, !dbg !41
  %242 = fmul float %.0.i22, %232, !dbg !41
  %243 = fmul float %.0.i34, %230, !dbg !41
  %244 = fmul float %.0.i34, %228, !dbg !41
  %245 = fmul float %.0.i34, %226, !dbg !41
  %246 = fmul float %.0.i34, %224, !dbg !41
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %247 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %81, !dbg !42
  %248 = insertelement <1 x i32> poison, i32 %198, i64 0, !dbg !42
  store <1 x i32> %248, ptr addrspace(3) %247, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %249 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %84, !dbg !42
  %250 = load float, ptr addrspace(3) %249, align 16, !dbg !42
  %251 = getelementptr inbounds nuw i8, ptr addrspace(3) %249, i32 4, !dbg !42
  %252 = load float, ptr addrspace(3) %251, align 4, !dbg !42
  %253 = getelementptr inbounds nuw i8, ptr addrspace(3) %249, i32 8, !dbg !42
  %254 = load float, ptr addrspace(3) %253, align 8, !dbg !42
  %255 = getelementptr inbounds nuw i8, ptr addrspace(3) %249, i32 12, !dbg !42
  %256 = load float, ptr addrspace(3) %255, align 4, !dbg !42
  %257 = fmul float %239, %250, !dbg !42
  %258 = fmul float %240, %252, !dbg !42
  %259 = fmul float %241, %254, !dbg !42
  %260 = fmul float %242, %256, !dbg !42
  %261 = fmul float %243, %250, !dbg !42
  %262 = fmul float %244, %252, !dbg !42
  %263 = fmul float %245, %254, !dbg !42
  %264 = fmul float %246, %256, !dbg !42
  %265 = mul i32 %13, 384, !dbg !43
  %266 = mul i32 %14, 384, !dbg !43
  %267 = add i32 %265, %84, !dbg !44
  %268 = add i32 %266, %84, !dbg !44
  %269 = sext i32 %267 to i64, !dbg !45
  %270 = getelementptr float, ptr addrspace(1) %3, i64 %269, !dbg !45
  %271 = sext i32 %268 to i64, !dbg !45
  %272 = getelementptr float, ptr addrspace(1) %3, i64 %271, !dbg !45
  %273 = bitcast float %257 to i32, !dbg !46
  %274 = bitcast float %258 to i32, !dbg !46
  %275 = bitcast float %259 to i32, !dbg !46
  %276 = bitcast float %260 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %273, i32 %274, i32 %275, i32 %276, ptr addrspace(1) %270, i1 %93) #7, !dbg !46
  %277 = bitcast float %261 to i32, !dbg !46
  %278 = bitcast float %262 to i32, !dbg !46
  %279 = bitcast float %263 to i32, !dbg !46
  %280 = bitcast float %264 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %277, i32 %278, i32 %279, i32 %280, ptr addrspace(1) %272, i1 %94) #7, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #5

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { noreturn }
attributes #1 = { "nvvm.reqntid"="512" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "ckzqi7x2at4m3jxs6zdc46t47t6lw6nmlhnn2rg6szev4wipvslb.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/kz")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !6, file: !6, type: !7, spFlags: DISPFlagOptimized)
!6 = !DIFile(filename: "<unknown>", directory: "")
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = distinct !DISubprogram(name: "triton_red_fused_add_embedding_mean_mul_pow_rsqrt_0", linkageName: "triton_red_fused_add_embedding_mean_mul_pow_rsqrt_0", scope: !1, file: !1, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!10 = !DILocation(line: 23, column: 28, scope: !9)
!11 = !DILocation(line: 23, column: 33, scope: !9)
!12 = !DILocation(line: 24, column: 44, scope: !9)
!13 = !DILocation(line: 24, column: 23, scope: !9)
!14 = !DILocation(line: 25, column: 21, scope: !9)
!15 = !DILocation(line: 29, column: 30, scope: !9)
!16 = !DILocation(line: 29, column: 35, scope: !9)
!17 = !DILocation(line: 38, column: 22, scope: !9)
!18 = !DILocation(line: 39, column: 22, scope: !9)
!19 = !DILocation(line: 40, column: 36, scope: !9)
!20 = !DILocation(line: 41, column: 41, scope: !9)
!21 = !DILocation(line: 41, column: 68, scope: !9)
!22 = !DILocation(line: 26, column: 37, scope: !9)
!23 = !DILocation(line: 33, column: 29, scope: !9)
!24 = !DILocation(line: 42, column: 41, scope: !9)
!25 = !DILocation(line: 42, column: 34, scope: !9)
!26 = !DILocation(line: 42, column: 62, scope: !9)
!27 = !DILocation(line: 42, column: 52, scope: !9)
!28 = !DILocation(line: 43, column: 22, scope: !9)
!29 = !DILocation(line: 260, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !9, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!32 = !DILocation(line: 47, column: 25, scope: !9)
!33 = !DILocation(line: 290, column: 36, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 54, column: 35, scope: !9)
!35 = !DILocation(line: 54, column: 42, scope: !9)
!36 = !DILocation(line: 59, column: 70, scope: !9)
!37 = !DILocation(line: 60, column: 54, scope: !9)
!38 = !DILocation(line: 62, column: 24, scope: !9)
!39 = !DILocation(line: 64, column: 24, scope: !9)
!40 = !DILocation(line: 65, column: 32, scope: !9)
!41 = !DILocation(line: 66, column: 24, scope: !9)
!42 = !DILocation(line: 67, column: 24, scope: !9)
!43 = !DILocation(line: 68, column: 40, scope: !9)
!44 = !DILocation(line: 68, column: 36, scope: !9)
!45 = !DILocation(line: 68, column: 29, scope: !9)
!46 = !DILocation(line: 68, column: 52, scope: !9)
!47 = !DILocation(line: 48, column: 4, scope: !9)
