; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_per_fused_add_mean_mul_pow_rsqrt_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr #0 !dbg !5 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !9
  %13 = and i32 %12, 31, !dbg !9
  %14 = lshr i32 %12, 5, !dbg !9
  %15 = shl nuw nsw i32 %12, 2, !dbg !9
  %16 = and i32 %15, 508, !dbg !9
  %17 = icmp samesign ult i32 %16, 384, !dbg !10
  %18 = mul i32 %11, 384, !dbg !11
  %19 = add i32 %16, %18, !dbg !12
  %20 = sext i32 %19 to i64, !dbg !13
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !13
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %21, i1 %17) #6, !dbg !14
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !14
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !14
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !14
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !14
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !15
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %27, i1 %17) #6, !dbg !16
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !16
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !16
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !16
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !16
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !17
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %33, i1 %17) #6, !dbg !18
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !18
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !18
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !18
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !18
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !19
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %39, i1 %17) #6, !dbg !20
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !20
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !20
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !20
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !20
  %45 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !21
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %45, i1 %17) #6, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !22
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !22
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !22
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !22
  %51 = zext nneg i32 %16 to i64, !dbg !23
  %52 = getelementptr float, ptr addrspace(1) %5, i64 %51, !dbg !23
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #6, !dbg !24
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %52, i64 %53, i1 %17) #6, !dbg !24
  %55 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !14
  %56 = insertelement <2 x i32> %55, i32 %24, i64 1, !dbg !14
  %57 = bitcast <2 x i32> %56 to <2 x float>, !dbg !14
  %58 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !16
  %59 = insertelement <2 x i32> %58, i32 %30, i64 1, !dbg !16
  %60 = bitcast <2 x i32> %59 to <2 x float>, !dbg !16
  %61 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !18
  %62 = insertelement <2 x i32> %61, i32 %36, i64 1, !dbg !18
  %63 = bitcast <2 x i32> %62 to <2 x float>, !dbg !18
  %64 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !20
  %65 = insertelement <2 x i32> %64, i32 %42, i64 1, !dbg !20
  %66 = bitcast <2 x i32> %65 to <2 x float>, !dbg !20
  %67 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !22
  %68 = insertelement <2 x i32> %67, i32 %48, i64 1, !dbg !22
  %69 = bitcast <2 x i32> %68 to <2 x float>, !dbg !22
  %70 = fadd <2 x float> %57, %60, !dbg !25
  %71 = fadd <2 x float> %70, %63, !dbg !26
  %72 = fadd <2 x float> %71, %66, !dbg !27
  %73 = fadd <2 x float> %72, %69, !dbg !28
  %74 = fmul <2 x float> %73, %73, !dbg !29
  %75 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !14
  %76 = insertelement <2 x i32> %75, i32 %25, i64 1, !dbg !14
  %77 = bitcast <2 x i32> %76 to <2 x float>, !dbg !14
  %78 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !16
  %79 = insertelement <2 x i32> %78, i32 %31, i64 1, !dbg !16
  %80 = bitcast <2 x i32> %79 to <2 x float>, !dbg !16
  %81 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !18
  %82 = insertelement <2 x i32> %81, i32 %37, i64 1, !dbg !18
  %83 = bitcast <2 x i32> %82 to <2 x float>, !dbg !18
  %84 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !20
  %85 = insertelement <2 x i32> %84, i32 %43, i64 1, !dbg !20
  %86 = bitcast <2 x i32> %85 to <2 x float>, !dbg !20
  %87 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !22
  %88 = insertelement <2 x i32> %87, i32 %49, i64 1, !dbg !22
  %89 = bitcast <2 x i32> %88 to <2 x float>, !dbg !22
  %90 = fadd <2 x float> %77, %80, !dbg !25
  %91 = fadd <2 x float> %90, %83, !dbg !26
  %92 = fadd <2 x float> %91, %86, !dbg !27
  %93 = fadd <2 x float> %92, %89, !dbg !28
  %94 = fmul <2 x float> %93, %93, !dbg !29
  %shift = shufflevector <2 x float> %74, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %95 = fadd <2 x float> %74, %shift, !dbg !30
  %shift1 = shufflevector <2 x float> %94, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %96 = fadd <2 x float> %shift1, %95, !dbg !30
  %97 = fadd <2 x float> %94, %96, !dbg !30
  %98 = extractelement <2 x float> %97, i64 0, !dbg !30
  %99 = select i1 %17, float %98, float 0.000000e+00, !dbg !30
  %100 = bitcast float %99 to i32, !dbg !34
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 16, i32 31), !dbg !34
  %102 = bitcast i32 %101 to float, !dbg !34
  %103 = fadd float %99, %102, !dbg !30
  %104 = bitcast float %103 to i32, !dbg !34
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 8, i32 31), !dbg !34
  %106 = bitcast i32 %105 to float, !dbg !34
  %107 = fadd float %103, %106, !dbg !30
  %108 = bitcast float %107 to i32, !dbg !34
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 4, i32 31), !dbg !34
  %110 = bitcast i32 %109 to float, !dbg !34
  %111 = fadd float %107, %110, !dbg !30
  %112 = bitcast float %111 to i32, !dbg !34
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 2, i32 31), !dbg !34
  %114 = bitcast i32 %113 to float, !dbg !34
  %115 = fadd float %111, %114, !dbg !30
  %116 = bitcast float %115 to i32, !dbg !34
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 1, i32 31), !dbg !34
  %118 = bitcast i32 %117 to float, !dbg !34
  %119 = fadd float %115, %118, !dbg !30
  %120 = and i32 %14, 3, !dbg !34
  %121 = icmp eq i32 %13, 0, !dbg !34
  %122 = getelementptr float, ptr addrspace(3) @global_smem, i32 %120, !dbg !34
  %123 = bitcast float %119 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 %121) #6, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !34
  %124 = icmp samesign ult i32 %12, 4, !dbg !34
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !34
  %126 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %125, i1 %124) #6, !dbg !34
  %127 = bitcast i32 %126 to float, !dbg !34
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 2, i32 31), !dbg !34
  %129 = bitcast i32 %128 to float, !dbg !34
  %130 = fadd float %127, %129, !dbg !30
  %131 = bitcast float %130 to i32, !dbg !34
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 1, i32 31), !dbg !34
  %133 = bitcast i32 %132 to float, !dbg !34
  %134 = fadd float %130, %133, !dbg !30
  %135 = icmp eq i32 %12, 0, !dbg !34
  %136 = bitcast float %134 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %136, i1 %135) #6, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !34
  %137 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !34
  %138 = fadd float %137, 0.000000e+00, !dbg !35
  %139 = tail call float @llvm.nvvm.div.full(float %138, float 3.840000e+02), !dbg !39
  %140 = fadd float %139, 0x3EB0C6F7A0000000, !dbg !40
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %.not.i = icmp eq i32 %141, 0, !dbg !41
  br i1 %.not.i, label %144, label %142, !dbg !41

142:                                              ; preds = %10
  %143 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %140), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

144:                                              ; preds = %10
  %145 = tail call float @llvm.nvvm.rsqrt.approx.f(float %140), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %142, %144
  %.0.i = phi float [ %143, %142 ], [ %145, %144 ], !dbg !41
  %146 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !24
  %147 = bitcast i32 %146 to float, !dbg !24
  %148 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !24
  %149 = bitcast i32 %148 to float, !dbg !24
  %150 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !24
  %151 = bitcast i32 %150 to float, !dbg !24
  %152 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !24
  %153 = bitcast i32 %152 to float, !dbg !24
  %154 = extractelement <2 x float> %73, i64 0, !dbg !42
  %155 = fmul float %154, %.0.i, !dbg !43
  %156 = extractelement <2 x float> %73, i64 1, !dbg !42
  %157 = fmul float %156, %.0.i, !dbg !43
  %158 = extractelement <2 x float> %93, i64 1, !dbg !42
  %159 = fmul float %158, %.0.i, !dbg !43
  %160 = extractelement <2 x float> %93, i64 0, !dbg !42
  %161 = fmul float %160, %.0.i, !dbg !43
  %162 = fmul float %155, %153, !dbg !44
  %163 = fmul float %157, %151, !dbg !44
  %164 = fmul float %159, %149, !dbg !44
  %165 = fmul float %161, %147, !dbg !44
  %166 = bitcast float %154 to i32, !dbg !42
  %167 = bitcast float %156 to i32, !dbg !42
  %168 = bitcast float %158 to i32, !dbg !42
  %169 = bitcast float %160 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %166, i32 %167, i32 %168, i32 %169, ptr addrspace(1) %27, i1 %17) #6, !dbg !42
  %170 = getelementptr float, ptr addrspace(1) %6, i64 %20, !dbg !45
  %171 = bitcast float %162 to i32, !dbg !46
  %172 = bitcast float %163 to i32, !dbg !46
  %173 = bitcast float %164 to i32, !dbg !46
  %174 = bitcast float %165 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %171, i32 %172, i32 %173, i32 %174, ptr addrspace(1) %170, i1 %17) #6, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "c3wkk7zwxdz6wwmes6mclt77unzxuxc2a4kquhob5euloq4pr5l4.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/3w")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "triton_per_fused_add_mean_mul_pow_rsqrt_8", linkageName: "triton_per_fused_add_mean_mul_pow_rsqrt_8", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 25, column: 28, scope: !5)
!9 = !DILocation(line: 28, column: 28, scope: !5)
!10 = !DILocation(line: 30, column: 25, scope: !5)
!11 = !DILocation(line: 35, column: 41, scope: !5)
!12 = !DILocation(line: 35, column: 37, scope: !5)
!13 = !DILocation(line: 35, column: 30, scope: !5)
!14 = !DILocation(line: 35, column: 46, scope: !5)
!15 = !DILocation(line: 36, column: 34, scope: !5)
!16 = !DILocation(line: 36, column: 50, scope: !5)
!17 = !DILocation(line: 37, column: 30, scope: !5)
!18 = !DILocation(line: 37, column: 46, scope: !5)
!19 = !DILocation(line: 38, column: 30, scope: !5)
!20 = !DILocation(line: 38, column: 46, scope: !5)
!21 = !DILocation(line: 39, column: 30, scope: !5)
!22 = !DILocation(line: 39, column: 46, scope: !5)
!23 = !DILocation(line: 40, column: 31, scope: !5)
!24 = !DILocation(line: 40, column: 38, scope: !5)
!25 = !DILocation(line: 41, column: 18, scope: !5)
!26 = !DILocation(line: 42, column: 18, scope: !5)
!27 = !DILocation(line: 43, column: 18, scope: !5)
!28 = !DILocation(line: 44, column: 18, scope: !5)
!29 = !DILocation(line: 45, column: 18, scope: !5)
!30 = !DILocation(line: 260, column: 15, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !5, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!33 = !DILocation(line: 48, column: 59, scope: !5)
!34 = !DILocation(line: 290, column: 36, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 66, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !5, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 48, column: 45, scope: !5)
!39 = !DILocation(line: 50, column: 21, scope: !5)
!40 = !DILocation(line: 52, column: 20, scope: !5)
!41 = !DILocation(line: 53, column: 28, scope: !5)
!42 = !DILocation(line: 56, column: 50, scope: !5)
!43 = !DILocation(line: 54, column: 19, scope: !5)
!44 = !DILocation(line: 55, column: 20, scope: !5)
!45 = !DILocation(line: 57, column: 25, scope: !5)
!46 = !DILocation(line: 57, column: 48, scope: !5)
!47 = !DILocation(line: 57, column: 4, scope: !5)
