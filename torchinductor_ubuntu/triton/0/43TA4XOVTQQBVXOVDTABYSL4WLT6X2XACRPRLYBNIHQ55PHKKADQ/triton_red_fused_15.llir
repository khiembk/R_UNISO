; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_15(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr #0 !dbg !5 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %7 = shl i32 %6, 3, !dbg !9
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %9 = lshr i32 %8, 6, !dbg !10
  %10 = and i32 %9, 7, !dbg !10
  %11 = or disjoint i32 %10, %7, !dbg !11
  %12 = icmp slt i32 %11, 10368, !dbg !12
  %13 = shl nuw nsw i32 %8, 2, !dbg !13
  %14 = and i32 %13, 252, !dbg !13
  %15 = sdiv i32 %11, 324, !dbg !14
  %16 = mul i32 %11, 324, !dbg !15
  %17 = mul i32 %11, 324
  %18 = shl nsw i32 %15, 4
  %19 = add i32 %18, %17
  %20 = add i32 %14, %16, !dbg !16
  %21 = sext i32 %20 to i64, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !17
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !18
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %22, i64 %23, i1 %12) #5, !dbg !18
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !18
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !18
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !18
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !18
  %29 = add i32 %19, %14, !dbg !19
  %30 = sext i32 %29 to i64, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !20
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !21
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %31, i64 %32, i1 %12) #5, !dbg !21
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !21
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !21
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !21
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !21
  %38 = or disjoint i32 %14, 256, !dbg !22
  %39 = icmp samesign ult i32 %38, 324, !dbg !23
  %40 = add i32 %38, %16, !dbg !16
  %41 = sext i32 %40 to i64, !dbg !17
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !17
  %43 = and i1 %12, %39, !dbg !24
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !18
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %42, i64 %44, i1 %43) #5, !dbg !18
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !18
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !18
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !18
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !18
  %50 = add i32 %19, %38, !dbg !19
  %51 = sext i32 %50 to i64, !dbg !20
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !20
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !21
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %52, i64 %53, i1 %43) #5, !dbg !21
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !21
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !21
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !21
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !21
  %59 = insertelement <8 x i32> poison, i32 %28, i64 0, !dbg !18
  %60 = insertelement <8 x i32> %59, i32 %49, i64 1, !dbg !18
  %61 = insertelement <8 x i32> %60, i32 %27, i64 2, !dbg !18
  %62 = insertelement <8 x i32> %61, i32 %48, i64 3, !dbg !18
  %63 = insertelement <8 x i32> %62, i32 %25, i64 4, !dbg !18
  %64 = insertelement <8 x i32> %63, i32 %46, i64 5, !dbg !18
  %65 = insertelement <8 x i32> %64, i32 %26, i64 6, !dbg !18
  %66 = insertelement <8 x i32> %65, i32 %47, i64 7, !dbg !18
  %67 = bitcast <8 x i32> %66 to <8 x float>, !dbg !18
  %68 = insertelement <8 x i32> poison, i32 %37, i64 0, !dbg !21
  %69 = insertelement <8 x i32> %68, i32 %58, i64 1, !dbg !21
  %70 = insertelement <8 x i32> %69, i32 %36, i64 2, !dbg !21
  %71 = insertelement <8 x i32> %70, i32 %57, i64 3, !dbg !21
  %72 = insertelement <8 x i32> %71, i32 %34, i64 4, !dbg !21
  %73 = insertelement <8 x i32> %72, i32 %55, i64 5, !dbg !21
  %74 = insertelement <8 x i32> %73, i32 %35, i64 6, !dbg !21
  %75 = insertelement <8 x i32> %74, i32 %56, i64 7, !dbg !21
  %76 = bitcast <8 x i32> %75 to <8 x float>, !dbg !21
  %77 = fadd <8 x float> %67, %76, !dbg !25
  %78 = extractelement <8 x float> %77, i64 4, !dbg !26
  %79 = extractelement <8 x float> %77, i64 6, !dbg !26
  %80 = extractelement <8 x float> %77, i64 2, !dbg !26
  %81 = extractelement <8 x float> %77, i64 0, !dbg !26
  %82 = fsub float 0xFFF0000000000000, %78, !dbg !30
  %83 = fsub float 0xFFF0000000000000, %79, !dbg !30
  %84 = fsub float 0xFFF0000000000000, %80, !dbg !30
  %85 = fsub float 0xFFF0000000000000, %81, !dbg !30
  %86 = fmul float %82, 0x3FF7154760000000, !dbg !31
  %87 = tail call float @llvm.nvvm.ex2.approx.f(float %86), !dbg !31
  %88 = fmul float %83, 0x3FF7154760000000, !dbg !31
  %89 = tail call float @llvm.nvvm.ex2.approx.f(float %88), !dbg !31
  %90 = fmul float %84, 0x3FF7154760000000, !dbg !31
  %91 = tail call float @llvm.nvvm.ex2.approx.f(float %90), !dbg !31
  %92 = fmul float %85, 0x3FF7154760000000, !dbg !31
  %93 = tail call float @llvm.nvvm.ex2.approx.f(float %92), !dbg !31
  %94 = fsub float %78, %78, !dbg !32
  %95 = fsub float %79, %79, !dbg !32
  %96 = fsub float %80, %80, !dbg !32
  %97 = fsub float %81, %81, !dbg !32
  %98 = fmul float %94, 0x3FF7154760000000, !dbg !31
  %99 = tail call float @llvm.nvvm.ex2.approx.f(float %98), !dbg !31
  %100 = fmul float %95, 0x3FF7154760000000, !dbg !31
  %101 = tail call float @llvm.nvvm.ex2.approx.f(float %100), !dbg !31
  %102 = fmul float %96, 0x3FF7154760000000, !dbg !31
  %103 = tail call float @llvm.nvvm.ex2.approx.f(float %102), !dbg !31
  %104 = fmul float %97, 0x3FF7154760000000, !dbg !31
  %105 = tail call float @llvm.nvvm.ex2.approx.f(float %104), !dbg !31
  %106 = fcmp une <8 x float> %77, splat (float 0xFFF0000000000000), !dbg !33
  %107 = insertelement <8 x i1> poison, i1 %12, i64 0, !dbg !34
  %108 = insertelement <8 x i1> %107, i1 %43, i64 1, !dbg !34
  %109 = shufflevector <8 x i1> %108, <8 x i1> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !34
  %110 = select <8 x i1> %109, <8 x i1> %106, <8 x i1> zeroinitializer, !dbg !34
  %111 = extractelement <8 x float> %77, i64 5, !dbg !32
  %112 = extractelement <8 x float> %77, i64 7, !dbg !32
  %113 = extractelement <8 x float> %77, i64 3, !dbg !32
  %114 = extractelement <8 x float> %77, i64 1, !dbg !32
  %115 = lshr i32 %8, 5, !dbg !10
  %116 = and i32 %8, 31, !dbg !13
  %117 = bitcast <8 x i1> %110 to i8, !dbg !35
  %118 = icmp ne i8 %117, 0, !dbg !35
  %119 = zext i1 %118 to i32, !dbg !37
  %120 = tail call i32 @llvm.nvvm.redux.sync.or(i32 %119, i32 -1), !dbg !37
  %121 = trunc i32 %120 to i8, !dbg !37
  %122 = and i32 %115, 1, !dbg !37
  %123 = icmp eq i32 %116, 0, !dbg !37
  %124 = shl nuw nsw i32 %10, 1, !dbg !37
  %125 = or disjoint i32 %124, %122, !dbg !37
  %126 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %125, !dbg !37
  %127 = insertelement <1 x i8> poison, i8 %121, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %126, <1 x i8> %127, i1 %123) #5, !dbg !37
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !37
  %128 = icmp samesign ult i32 %8, 16, !dbg !37
  %129 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %8, !dbg !37
  %130 = tail call i8 asm sideeffect "@$2 ld.shared.b8 $0, [ $1 + 0 ];", "=h,r,b"(ptr addrspace(3) %129, i1 %128) #5, !dbg !37
  %131 = zext i8 %130 to i32, !dbg !37
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 1, i32 31), !dbg !37
  %133 = trunc i32 %132 to i8, !dbg !37
  %134 = or i8 %130, %133, !dbg !35
  %135 = and i32 %8, 1009, !dbg !37
  %136 = icmp eq i32 %135, 0, !dbg !37
  %137 = insertelement <1 x i8> poison, i8 %134, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %129, <1 x i8> %137, i1 %136) #5, !dbg !37
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !37
  %138 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %124, !dbg !37
  %139 = load i8, ptr addrspace(3) %138, align 2, !dbg !37
  %.not = icmp eq i8 %139, 0, !dbg !38
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i32 %125, !dbg !39
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !39
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i32 %124, !dbg !39
  %143 = shufflevector <8 x float> %77, <8 x float> poison, <2 x i32> <i32 2, i32 0>, !dbg !26
  %144 = fcmp oeq <2 x float> %143, splat (float 0xFFF0000000000000), !dbg !26
  %145 = insertelement <2 x float> poison, float %91, i64 0, !dbg !41
  %146 = insertelement <2 x float> %145, float %93, i64 1, !dbg !41
  %147 = fmul <2 x float> %146, zeroinitializer, !dbg !41
  %148 = insertelement <2 x float> poison, float %103, i64 0, !dbg !42
  %149 = insertelement <2 x float> %148, float %105, i64 1, !dbg !42
  %150 = fadd <2 x float> %149, %147, !dbg !42
  %151 = select <2 x i1> %144, <2 x float> splat (float 1.000000e+00), <2 x float> %150, !dbg !42
  %152 = insertelement <2 x i1> poison, i1 %12, i64 0, !dbg !43
  %153 = shufflevector <2 x i1> %152, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !43
  %154 = select <2 x i1> %153, <2 x float> %143, <2 x float> splat (float 0xFFF0000000000000), !dbg !43
  %155 = select <2 x i1> %153, <2 x float> %151, <2 x float> zeroinitializer, !dbg !44
  %156 = shufflevector <8 x float> %77, <8 x float> poison, <2 x i32> <i32 3, i32 1>, !dbg !45
  %157 = fcmp ogt <2 x float> %154, %156, !dbg !45
  %158 = fcmp uno <2 x float> %154, zeroinitializer, !dbg !46
  %159 = or <2 x i1> %158, %157, !dbg !47
  %160 = select <2 x i1> %159, <2 x float> %154, <2 x float> %156, !dbg !48
  %161 = fcmp oeq <2 x float> %160, splat (float 0xFFF0000000000000), !dbg !26
  %162 = extractelement <2 x float> %160, i64 0, !dbg !43
  %163 = extractelement <2 x float> %154, i64 0, !dbg !30
  %164 = fsub float %163, %162, !dbg !30
  %165 = extractelement <2 x float> %160, i64 1, !dbg !43
  %166 = extractelement <2 x float> %154, i64 1, !dbg !30
  %167 = fsub float %166, %165, !dbg !30
  %168 = fmul float %164, 0x3FF7154760000000, !dbg !31
  %169 = tail call float @llvm.nvvm.ex2.approx.f(float %168), !dbg !31
  %170 = fmul float %167, 0x3FF7154760000000, !dbg !31
  %171 = tail call float @llvm.nvvm.ex2.approx.f(float %170), !dbg !31
  %172 = insertelement <2 x float> poison, float %169, i64 0, !dbg !49
  %173 = insertelement <2 x float> %172, float %171, i64 1, !dbg !49
  %174 = select <2 x i1> %161, <2 x float> splat (float 1.000000e+00), <2 x float> %173, !dbg !49
  %175 = fsub float %113, %162, !dbg !32
  %176 = fsub float %114, %165, !dbg !32
  %177 = fmul float %175, 0x3FF7154760000000, !dbg !31
  %178 = tail call float @llvm.nvvm.ex2.approx.f(float %177), !dbg !31
  %179 = fmul float %176, 0x3FF7154760000000, !dbg !31
  %180 = tail call float @llvm.nvvm.ex2.approx.f(float %179), !dbg !31
  %181 = insertelement <2 x float> poison, float %178, i64 0, !dbg !50
  %182 = insertelement <2 x float> %181, float %180, i64 1, !dbg !50
  %183 = select <2 x i1> %161, <2 x float> splat (float 1.000000e+00), <2 x float> %182, !dbg !50
  %184 = fmul <2 x float> %155, %174, !dbg !41
  %185 = fadd <2 x float> %183, %184, !dbg !42
  %186 = select i1 %43, float %162, float %163, !dbg !43
  %187 = select i1 %43, float %165, float %166, !dbg !43
  %188 = insertelement <2 x i1> poison, i1 %43, i64 0, !dbg !44
  %189 = shufflevector <2 x i1> %188, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !44
  %190 = select <2 x i1> %189, <2 x float> %185, <2 x float> %155, !dbg !44
  %191 = shufflevector <8 x float> %77, <8 x float> poison, <2 x i32> <i32 4, i32 6>, !dbg !26
  %192 = fcmp oeq <2 x float> %191, splat (float 0xFFF0000000000000), !dbg !26
  %193 = insertelement <2 x float> poison, float %87, i64 0, !dbg !41
  %194 = insertelement <2 x float> %193, float %89, i64 1, !dbg !41
  %195 = fmul <2 x float> %194, zeroinitializer, !dbg !41
  %196 = insertelement <2 x float> poison, float %99, i64 0, !dbg !42
  %197 = insertelement <2 x float> %196, float %101, i64 1, !dbg !42
  %198 = fadd <2 x float> %197, %195, !dbg !42
  %199 = select <2 x i1> %192, <2 x float> splat (float 1.000000e+00), <2 x float> %198, !dbg !42
  %200 = select <2 x i1> %153, <2 x float> %191, <2 x float> splat (float 0xFFF0000000000000), !dbg !43
  %201 = select <2 x i1> %153, <2 x float> %199, <2 x float> zeroinitializer, !dbg !44
  %202 = shufflevector <8 x float> %77, <8 x float> poison, <2 x i32> <i32 5, i32 7>, !dbg !45
  %203 = fcmp ogt <2 x float> %200, %202, !dbg !45
  %204 = fcmp uno <2 x float> %200, zeroinitializer, !dbg !46
  %205 = or <2 x i1> %204, %203, !dbg !47
  %206 = select <2 x i1> %205, <2 x float> %200, <2 x float> %202, !dbg !48
  %207 = fcmp oeq <2 x float> %206, splat (float 0xFFF0000000000000), !dbg !26
  %208 = extractelement <2 x float> %206, i64 0, !dbg !43
  %209 = extractelement <2 x float> %200, i64 0, !dbg !30
  %210 = fsub float %209, %208, !dbg !30
  %211 = extractelement <2 x float> %206, i64 1, !dbg !43
  %212 = extractelement <2 x float> %200, i64 1, !dbg !30
  %213 = fsub float %212, %211, !dbg !30
  %214 = fmul float %210, 0x3FF7154760000000, !dbg !31
  %215 = tail call float @llvm.nvvm.ex2.approx.f(float %214), !dbg !31
  %216 = fmul float %213, 0x3FF7154760000000, !dbg !31
  %217 = tail call float @llvm.nvvm.ex2.approx.f(float %216), !dbg !31
  %218 = insertelement <2 x float> poison, float %215, i64 0, !dbg !49
  %219 = insertelement <2 x float> %218, float %217, i64 1, !dbg !49
  %220 = select <2 x i1> %207, <2 x float> splat (float 1.000000e+00), <2 x float> %219, !dbg !49
  %221 = fsub float %111, %208, !dbg !32
  %222 = fsub float %112, %211, !dbg !32
  %223 = fmul float %221, 0x3FF7154760000000, !dbg !31
  %224 = tail call float @llvm.nvvm.ex2.approx.f(float %223), !dbg !31
  %225 = fmul float %222, 0x3FF7154760000000, !dbg !31
  %226 = tail call float @llvm.nvvm.ex2.approx.f(float %225), !dbg !31
  %227 = insertelement <2 x float> poison, float %224, i64 0, !dbg !50
  %228 = insertelement <2 x float> %227, float %226, i64 1, !dbg !50
  %229 = select <2 x i1> %207, <2 x float> splat (float 1.000000e+00), <2 x float> %228, !dbg !50
  %230 = fmul <2 x float> %201, %220, !dbg !41
  %231 = fadd <2 x float> %229, %230, !dbg !42
  %232 = select i1 %43, float %208, float %209, !dbg !43
  %233 = select i1 %43, float %211, float %212, !dbg !43
  %234 = select <2 x i1> %189, <2 x float> %231, <2 x float> %201, !dbg !44
  %235 = fcmp ogt float %232, %233, !dbg !51
  %236 = fcmp uno float %232, 0.000000e+00, !dbg !52
  %237 = or i1 %235, %236, !dbg !53
  %238 = select i1 %237, float %232, float %233, !dbg !54
  %239 = fcmp uno float %238, 0.000000e+00, !dbg !52
  %240 = fcmp ogt float %238, %186, !dbg !51
  %241 = or i1 %240, %239, !dbg !53
  %242 = select i1 %241, float %238, float %186, !dbg !54
  %243 = fcmp ogt float %242, %187, !dbg !51
  %244 = fcmp uno float %242, 0.000000e+00, !dbg !52
  %245 = or i1 %243, %244, !dbg !53
  %246 = select i1 %245, float %242, float %187, !dbg !54
  %247 = bitcast float %246 to i32, !dbg !39
  %248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 16, i32 31), !dbg !39
  %249 = bitcast i32 %248 to float, !dbg !39
  %250 = fcmp ogt float %246, %249, !dbg !51
  %251 = fcmp uno float %246, 0.000000e+00, !dbg !52
  %252 = or i1 %251, %250, !dbg !53
  %253 = select i1 %252, float %246, float %249, !dbg !54
  %254 = bitcast float %253 to i32, !dbg !39
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 8, i32 31), !dbg !39
  %256 = bitcast i32 %255 to float, !dbg !39
  %257 = fcmp ogt float %253, %256, !dbg !51
  %258 = fcmp uno float %253, 0.000000e+00, !dbg !52
  %259 = or i1 %257, %258, !dbg !53
  %260 = select i1 %259, float %253, float %256, !dbg !54
  %261 = bitcast float %260 to i32, !dbg !39
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 4, i32 31), !dbg !39
  %263 = bitcast i32 %262 to float, !dbg !39
  %264 = fcmp ogt float %260, %263, !dbg !51
  %265 = fcmp uno float %260, 0.000000e+00, !dbg !52
  %266 = or i1 %264, %265, !dbg !53
  %267 = select i1 %266, float %260, float %263, !dbg !54
  %268 = bitcast float %267 to i32, !dbg !39
  %269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %268, i32 2, i32 31), !dbg !39
  %270 = bitcast i32 %269 to float, !dbg !39
  %271 = fcmp ogt float %267, %270, !dbg !51
  %272 = fcmp uno float %267, 0.000000e+00, !dbg !52
  %273 = or i1 %271, %272, !dbg !53
  %274 = select i1 %273, float %267, float %270, !dbg !54
  %275 = bitcast float %274 to i32, !dbg !39
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 1, i32 31), !dbg !39
  %277 = bitcast i32 %276 to float, !dbg !39
  %278 = fcmp ogt float %274, %277, !dbg !51
  %279 = fcmp uno float %274, 0.000000e+00, !dbg !52
  %280 = or i1 %278, %279, !dbg !53
  %281 = select i1 %280, i32 %275, i32 %276, !dbg !54
  %282 = insertelement <1 x i32> poison, i32 %281, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %282, i1 %123) #5, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  %283 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %141, i1 %128) #5, !dbg !39
  %284 = bitcast i32 %283 to float, !dbg !39
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 1, i32 31), !dbg !39
  %286 = bitcast i32 %285 to float, !dbg !39
  %287 = fcmp ogt float %284, %286, !dbg !51
  %288 = fcmp uno float %284, 0.000000e+00, !dbg !52
  %289 = or i1 %288, %287, !dbg !53
  %290 = select i1 %289, i32 %283, i32 %285, !dbg !54
  %291 = insertelement <1 x i32> poison, i32 %290, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %291, i1 %136) #5, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  %292 = load float, ptr addrspace(3) %142, align 8, !dbg !39
  %293 = fcmp oeq float %292, 0xFFF0000000000000, !dbg !55
  %294 = fsub float %232, %292, !dbg !56
  %295 = fsub float %233, %292, !dbg !56
  %296 = fsub float %186, %292, !dbg !56
  %297 = fsub float %187, %292, !dbg !56
  %298 = fmul float %294, 0x3FF7154760000000, !dbg !57
  %299 = select i1 %293, float 0.000000e+00, float %298, !dbg !58
  %300 = tail call float @llvm.nvvm.ex2.approx.f(float %299), !dbg !57
  %301 = fmul float %295, 0x3FF7154760000000, !dbg !57
  %302 = select i1 %293, float 0.000000e+00, float %301, !dbg !58
  %303 = tail call float @llvm.nvvm.ex2.approx.f(float %302), !dbg !57
  %304 = fmul float %296, 0x3FF7154760000000, !dbg !57
  %305 = select i1 %293, float 0.000000e+00, float %304, !dbg !58
  %306 = tail call float @llvm.nvvm.ex2.approx.f(float %305), !dbg !57
  %307 = fmul float %297, 0x3FF7154760000000, !dbg !57
  %308 = select i1 %293, float 0.000000e+00, float %307, !dbg !58
  %309 = tail call float @llvm.nvvm.ex2.approx.f(float %308), !dbg !57
  %310 = insertelement <2 x float> poison, float %300, i64 0, !dbg !59
  %311 = insertelement <2 x float> %310, float %303, i64 1, !dbg !59
  %312 = fmul <2 x float> %234, %311, !dbg !59
  %313 = insertelement <2 x float> poison, float %306, i64 0, !dbg !59
  %314 = insertelement <2 x float> %313, float %309, i64 1, !dbg !59
  %315 = fmul <2 x float> %190, %314, !dbg !59
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !60
  %shift = shufflevector <2 x float> %312, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !63
  %316 = fadd <2 x float> %312, %shift, !dbg !63
  %317 = fadd <2 x float> %316, %315, !dbg !63
  %shift15 = shufflevector <2 x float> %315, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !63
  %318 = fadd <2 x float> %317, %shift15, !dbg !63
  %319 = extractelement <2 x float> %318, i64 0, !dbg !63
  %320 = bitcast float %319 to i32, !dbg !60
  %321 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %320, i32 16, i32 31), !dbg !60
  %322 = bitcast i32 %321 to float, !dbg !60
  %323 = fadd float %319, %322, !dbg !63
  %324 = bitcast float %323 to i32, !dbg !60
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 8, i32 31), !dbg !60
  %326 = bitcast i32 %325 to float, !dbg !60
  %327 = fadd float %323, %326, !dbg !63
  %328 = bitcast float %327 to i32, !dbg !60
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 4, i32 31), !dbg !60
  %330 = bitcast i32 %329 to float, !dbg !60
  %331 = fadd float %327, %330, !dbg !63
  %332 = bitcast float %331 to i32, !dbg !60
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 2, i32 31), !dbg !60
  %334 = bitcast i32 %333 to float, !dbg !60
  %335 = fadd float %331, %334, !dbg !63
  %336 = bitcast float %335 to i32, !dbg !60
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %336, i32 1, i32 31), !dbg !60
  %338 = bitcast i32 %337 to float, !dbg !60
  %339 = fadd float %335, %338, !dbg !63
  %340 = bitcast float %339 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %340, i1 %123) #5, !dbg !60
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !60
  %341 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %141, i1 %128) #5, !dbg !60
  %342 = bitcast i32 %341 to float, !dbg !60
  %343 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %341, i32 1, i32 31), !dbg !60
  %344 = bitcast i32 %343 to float, !dbg !60
  %345 = fadd float %342, %344, !dbg !63
  %346 = bitcast float %345 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %346, i1 %136) #5, !dbg !60
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !60
  %347 = load float, ptr addrspace(3) %142, align 8, !dbg !60
  %348 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #5, !dbg !64
  %349 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %22, i64 %348, i1 %12) #5, !dbg !64
  %350 = extractvalue { i32, i32, i32, i32 } %349, 0, !dbg !64
  %351 = extractvalue { i32, i32, i32, i32 } %349, 1, !dbg !64
  %352 = extractvalue { i32, i32, i32, i32 } %349, 2, !dbg !64
  %353 = extractvalue { i32, i32, i32, i32 } %349, 3, !dbg !64
  %354 = bitcast i32 %350 to float, !dbg !64
  %355 = bitcast i32 %351 to float, !dbg !64
  %356 = bitcast i32 %352 to float, !dbg !64
  %357 = bitcast i32 %353 to float, !dbg !64
  %358 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #5, !dbg !65
  %359 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %31, i64 %358, i1 %12) #5, !dbg !65
  %360 = extractvalue { i32, i32, i32, i32 } %359, 0, !dbg !65
  %361 = extractvalue { i32, i32, i32, i32 } %359, 1, !dbg !65
  %362 = extractvalue { i32, i32, i32, i32 } %359, 2, !dbg !65
  %363 = extractvalue { i32, i32, i32, i32 } %359, 3, !dbg !65
  %364 = bitcast i32 %360 to float, !dbg !65
  %365 = bitcast i32 %361 to float, !dbg !65
  %366 = bitcast i32 %362 to float, !dbg !65
  %367 = bitcast i32 %363 to float, !dbg !65
  %368 = fadd float %354, %364, !dbg !66
  %369 = fadd float %355, %365, !dbg !66
  %370 = fadd float %356, %366, !dbg !66
  %371 = fadd float %357, %367, !dbg !66
  %372 = fsub float %368, %292, !dbg !67
  %373 = fsub float %369, %292, !dbg !67
  %374 = fsub float %370, %292, !dbg !67
  %375 = fsub float %371, %292, !dbg !67
  %376 = fmul float %372, 0x3FF7154760000000, !dbg !68
  %377 = tail call float @llvm.nvvm.ex2.approx.f(float %376), !dbg !68
  %378 = fmul float %373, 0x3FF7154760000000, !dbg !68
  %379 = tail call float @llvm.nvvm.ex2.approx.f(float %378), !dbg !68
  %380 = fmul float %374, 0x3FF7154760000000, !dbg !68
  %381 = tail call float @llvm.nvvm.ex2.approx.f(float %380), !dbg !68
  %382 = fmul float %375, 0x3FF7154760000000, !dbg !68
  %383 = tail call float @llvm.nvvm.ex2.approx.f(float %382), !dbg !68
  %384 = tail call float @llvm.nvvm.div.full(float %377, float %347), !dbg !69
  %385 = tail call float @llvm.nvvm.div.full(float %379, float %347), !dbg !69
  %386 = tail call float @llvm.nvvm.div.full(float %381, float %347), !dbg !69
  %387 = tail call float @llvm.nvvm.div.full(float %383, float %347), !dbg !69
  %388 = bitcast float %384 to i32, !dbg !70
  %389 = select i1 %.not, i32 0, i32 %388, !dbg !71
  %390 = bitcast float %385 to i32, !dbg !70
  %391 = select i1 %.not, i32 0, i32 %390, !dbg !71
  %392 = bitcast float %386 to i32, !dbg !70
  %393 = select i1 %.not, i32 0, i32 %392, !dbg !71
  %394 = bitcast float %387 to i32, !dbg !70
  %395 = select i1 %.not, i32 0, i32 %394, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %389, i32 %391, i32 %393, i32 %395, ptr addrspace(1) %31, i1 %12) #5, !dbg !70
  %396 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #5, !dbg !64
  %397 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %42, i64 %396, i1 %43) #5, !dbg !64
  %398 = extractvalue { i32, i32, i32, i32 } %397, 0, !dbg !64
  %399 = extractvalue { i32, i32, i32, i32 } %397, 1, !dbg !64
  %400 = extractvalue { i32, i32, i32, i32 } %397, 2, !dbg !64
  %401 = extractvalue { i32, i32, i32, i32 } %397, 3, !dbg !64
  %402 = bitcast i32 %398 to float, !dbg !64
  %403 = bitcast i32 %399 to float, !dbg !64
  %404 = bitcast i32 %400 to float, !dbg !64
  %405 = bitcast i32 %401 to float, !dbg !64
  %406 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #5, !dbg !65
  %407 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %52, i64 %406, i1 %43) #5, !dbg !65
  %408 = extractvalue { i32, i32, i32, i32 } %407, 0, !dbg !65
  %409 = extractvalue { i32, i32, i32, i32 } %407, 1, !dbg !65
  %410 = extractvalue { i32, i32, i32, i32 } %407, 2, !dbg !65
  %411 = extractvalue { i32, i32, i32, i32 } %407, 3, !dbg !65
  %412 = bitcast i32 %408 to float, !dbg !65
  %413 = bitcast i32 %409 to float, !dbg !65
  %414 = bitcast i32 %410 to float, !dbg !65
  %415 = bitcast i32 %411 to float, !dbg !65
  %416 = fadd float %402, %412, !dbg !66
  %417 = fadd float %403, %413, !dbg !66
  %418 = fadd float %404, %414, !dbg !66
  %419 = fadd float %405, %415, !dbg !66
  %420 = fsub float %416, %292, !dbg !67
  %421 = fsub float %417, %292, !dbg !67
  %422 = fsub float %418, %292, !dbg !67
  %423 = fsub float %419, %292, !dbg !67
  %424 = fmul float %420, 0x3FF7154760000000, !dbg !68
  %425 = tail call float @llvm.nvvm.ex2.approx.f(float %424), !dbg !68
  %426 = fmul float %421, 0x3FF7154760000000, !dbg !68
  %427 = tail call float @llvm.nvvm.ex2.approx.f(float %426), !dbg !68
  %428 = fmul float %422, 0x3FF7154760000000, !dbg !68
  %429 = tail call float @llvm.nvvm.ex2.approx.f(float %428), !dbg !68
  %430 = fmul float %423, 0x3FF7154760000000, !dbg !68
  %431 = tail call float @llvm.nvvm.ex2.approx.f(float %430), !dbg !68
  %432 = tail call float @llvm.nvvm.div.full(float %425, float %347), !dbg !69
  %433 = tail call float @llvm.nvvm.div.full(float %427, float %347), !dbg !69
  %434 = tail call float @llvm.nvvm.div.full(float %429, float %347), !dbg !69
  %435 = tail call float @llvm.nvvm.div.full(float %431, float %347), !dbg !69
  %436 = bitcast float %432 to i32, !dbg !70
  %437 = select i1 %.not, i32 0, i32 %436, !dbg !71
  %438 = bitcast float %433 to i32, !dbg !70
  %439 = select i1 %.not, i32 0, i32 %438, !dbg !71
  %440 = bitcast float %434 to i32, !dbg !70
  %441 = select i1 %.not, i32 0, i32 %440, !dbg !71
  %442 = bitcast float %435 to i32, !dbg !70
  %443 = select i1 %.not, i32 0, i32 %442, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %437, i32 %439, i32 %441, i32 %443, ptr addrspace(1) %52, i1 %43) #5, !dbg !70
  ret void, !dbg !72
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.redux.sync.or(i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

attributes #0 = { "nvvm.reqntid"="512" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "c3s5rpotgkrxj53byxl6iiai4e64ppfdhf7r5r7xy2iceaf5vzca.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/3s")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "triton_red_fused_15", linkageName: "triton_red_fused_15", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 23, column: 28, scope: !5)
!9 = !DILocation(line: 23, column: 33, scope: !5)
!10 = !DILocation(line: 24, column: 44, scope: !5)
!11 = !DILocation(line: 24, column: 23, scope: !5)
!12 = !DILocation(line: 25, column: 21, scope: !5)
!13 = !DILocation(line: 26, column: 37, scope: !5)
!14 = !DILocation(line: 30, column: 19, scope: !5)
!15 = !DILocation(line: 42, column: 45, scope: !5)
!16 = !DILocation(line: 42, column: 41, scope: !5)
!17 = !DILocation(line: 42, column: 34, scope: !5)
!18 = !DILocation(line: 42, column: 50, scope: !5)
!19 = !DILocation(line: 43, column: 54, scope: !5)
!20 = !DILocation(line: 43, column: 38, scope: !5)
!21 = !DILocation(line: 43, column: 66, scope: !5)
!22 = !DILocation(line: 37, column: 31, scope: !5)
!23 = !DILocation(line: 38, column: 29, scope: !5)
!24 = !DILocation(line: 42, column: 60, scope: !5)
!25 = !DILocation(line: 44, column: 22, scope: !5)
!26 = !DILocation(line: 197, column: 19, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !5, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 56, column: 43, scope: !5)
!30 = !DILocation(line: 197, column: 53, scope: !27, inlinedAt: !29)
!31 = !DILocation(line: 174, column: 24, scope: !27, inlinedAt: !29)
!32 = !DILocation(line: 200, column: 53, scope: !27, inlinedAt: !29)
!33 = !DILocation(line: 46, column: 23, scope: !5)
!34 = !DILocation(line: 52, column: 49, scope: !5)
!35 = !DILocation(line: 261, column: 15, scope: !27, inlinedAt: !36)
!36 = !DILocation(line: 61, column: 49, scope: !5)
!37 = !DILocation(line: 266, column: 29, scope: !27, inlinedAt: !36)
!38 = !DILocation(line: 61, column: 64, scope: !5)
!39 = !DILocation(line: 124, column: 29, scope: !27, inlinedAt: !40)
!40 = !DILocation(line: 64, column: 35, scope: !5)
!41 = !DILocation(line: 206, column: 24, scope: !27, inlinedAt: !29)
!42 = !DILocation(line: 206, column: 36, scope: !27, inlinedAt: !29)
!43 = !DILocation(line: 59, column: 64, scope: !5)
!44 = !DILocation(line: 60, column: 64, scope: !5)
!45 = !DILocation(line: 111, column: 15, scope: !27, inlinedAt: !29)
!46 = !DILocation(line: 113, column: 21, scope: !27, inlinedAt: !29)
!47 = !DILocation(line: 113, column: 16, scope: !27, inlinedAt: !29)
!48 = !DILocation(line: 114, column: 29, scope: !27, inlinedAt: !29)
!49 = !DILocation(line: 197, column: 39, scope: !27, inlinedAt: !29)
!50 = !DILocation(line: 200, column: 39, scope: !27, inlinedAt: !29)
!51 = !DILocation(line: 111, column: 15, scope: !27, inlinedAt: !40)
!52 = !DILocation(line: 113, column: 21, scope: !27, inlinedAt: !40)
!53 = !DILocation(line: 113, column: 16, scope: !27, inlinedAt: !40)
!54 = !DILocation(line: 114, column: 29, scope: !27, inlinedAt: !40)
!55 = !DILocation(line: 181, column: 40, scope: !27, inlinedAt: !40)
!56 = !DILocation(line: 181, column: 68, scope: !27, inlinedAt: !40)
!57 = !DILocation(line: 174, column: 24, scope: !27, inlinedAt: !40)
!58 = !DILocation(line: 181, column: 58, scope: !27, inlinedAt: !40)
!59 = !DILocation(line: 182, column: 31, scope: !27, inlinedAt: !40)
!60 = !DILocation(line: 290, column: 36, scope: !61, inlinedAt: !40)
!61 = distinct !DILexicalBlockFile(scope: !5, file: !62, discriminator: 0)
!62 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!63 = !DILocation(line: 260, column: 15, scope: !61, inlinedAt: !40)
!64 = !DILocation(line: 75, column: 51, scope: !5)
!65 = !DILocation(line: 76, column: 67, scope: !5)
!66 = !DILocation(line: 78, column: 24, scope: !5)
!67 = !DILocation(line: 79, column: 24, scope: !5)
!68 = !DILocation(line: 80, column: 28, scope: !5)
!69 = !DILocation(line: 81, column: 25, scope: !5)
!70 = !DILocation(line: 84, column: 67, scope: !5)
!71 = !DILocation(line: 83, column: 39, scope: !5)
!72 = !DILocation(line: 69, column: 4, scope: !5)
