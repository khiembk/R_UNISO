; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_per_fused__softmax_add_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr #0 !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %8 = shl i32 %7, 3, !dbg !9
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %10 = lshr i32 %9, 5, !dbg !10
  %11 = and i32 %10, 3, !dbg !10
  %12 = or disjoint i32 %11, %8, !dbg !11
  %13 = or disjoint i32 %12, 4, !dbg !11
  %14 = icmp slt i32 %12, 400, !dbg !12
  %15 = icmp slt i32 %13, 400, !dbg !12
  %16 = shl nuw nsw i32 %9, 1, !dbg !13
  %17 = and i32 %16, 62, !dbg !13
  %18 = icmp samesign ult i32 %17, 50, !dbg !14
  %19 = sdiv i32 %12, 50, !dbg !15
  %20 = mul i32 %19, 50, !dbg !16
  %.decomposed = sub i32 %12, %20, !dbg !16
  %21 = sdiv i32 %13, 50, !dbg !15
  %22 = mul i32 %21, 50, !dbg !16
  %.decomposed1 = sub i32 %13, %22, !dbg !16
  %23 = mul i32 %12, 50, !dbg !17
  %24 = mul i32 %13, 50, !dbg !17
  %25 = add i32 %23, %17, !dbg !18
  %26 = add i32 %24, %17, !dbg !18
  %27 = sext i32 %25 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !19
  %29 = sext i32 %26 to i64, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !19
  %31 = and i1 %18, %14, !dbg !20
  %32 = and i1 %18, %15, !dbg !20
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %28, i1 %31) #4, !dbg !21
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !21
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !21
  %36 = bitcast i32 %34 to float, !dbg !21
  %37 = bitcast i32 %35 to float, !dbg !21
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %30, i1 %32) #4, !dbg !21
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !21
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !21
  %41 = bitcast i32 %39 to float, !dbg !21
  %42 = bitcast i32 %40 to float, !dbg !21
  %43 = mul nsw i32 %.decomposed, 50, !dbg !22
  %44 = mul nsw i32 %.decomposed1, 50, !dbg !22
  %45 = add nsw i32 %43, %17, !dbg !23
  %46 = add nsw i32 %44, %17, !dbg !23
  %47 = mul i32 %19, 2528, !dbg !24
  %48 = mul i32 %21, 2528, !dbg !24
  %49 = add i32 %45, %47, !dbg !25
  %50 = add i32 %46, %48, !dbg !25
  %51 = sext i32 %49 to i64, !dbg !26
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !26
  %53 = sext i32 %50 to i64, !dbg !26
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !26
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %52, i1 %31) #4, !dbg !27
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !27
  %57 = extractvalue { i32, i32 } %55, 1, !dbg !27
  %58 = bitcast i32 %56 to float, !dbg !27
  %59 = bitcast i32 %57 to float, !dbg !27
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %54, i1 %32) #4, !dbg !27
  %61 = extractvalue { i32, i32 } %60, 0, !dbg !27
  %62 = extractvalue { i32, i32 } %60, 1, !dbg !27
  %63 = bitcast i32 %61 to float, !dbg !27
  %64 = bitcast i32 %62 to float, !dbg !27
  %65 = fadd float %36, %58, !dbg !28
  %66 = fadd float %37, %59, !dbg !28
  %67 = fadd float %41, %63, !dbg !28
  %68 = fadd float %42, %64, !dbg !28
  %69 = select i1 %31, float %65, float 0xFFF0000000000000, !dbg !29
  %70 = select i1 %31, float %66, float 0xFFF0000000000000, !dbg !29
  %71 = select i1 %32, float %67, float 0xFFF0000000000000, !dbg !29
  %72 = select i1 %32, float %68, float 0xFFF0000000000000, !dbg !29
  %73 = fcmp ogt float %69, %70, !dbg !30
  %74 = fcmp uno float %69, 0.000000e+00, !dbg !34
  %75 = or i1 %73, %74, !dbg !35
  %76 = select i1 %75, float %69, float %70, !dbg !36
  %77 = fcmp ogt float %71, %72, !dbg !30
  %78 = fcmp uno float %71, 0.000000e+00, !dbg !34
  %79 = or i1 %77, %78, !dbg !35
  %80 = select i1 %79, float %71, float %72, !dbg !36
  %81 = bitcast float %76 to i32, !dbg !37
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 16, i32 31), !dbg !37
  %83 = bitcast i32 %82 to float, !dbg !37
  %84 = fcmp ogt float %76, %83, !dbg !30
  %85 = fcmp uno float %76, 0.000000e+00, !dbg !34
  %86 = or i1 %84, %85, !dbg !35
  %87 = select i1 %86, float %76, float %83, !dbg !36
  %88 = bitcast float %87 to i32, !dbg !37
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 8, i32 31), !dbg !37
  %90 = bitcast i32 %89 to float, !dbg !37
  %91 = fcmp ogt float %87, %90, !dbg !30
  %92 = fcmp uno float %87, 0.000000e+00, !dbg !34
  %93 = or i1 %91, %92, !dbg !35
  %94 = select i1 %93, float %87, float %90, !dbg !36
  %95 = bitcast float %94 to i32, !dbg !37
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 4, i32 31), !dbg !37
  %97 = bitcast i32 %96 to float, !dbg !37
  %98 = fcmp ogt float %94, %97, !dbg !30
  %99 = fcmp uno float %94, 0.000000e+00, !dbg !34
  %100 = or i1 %98, %99, !dbg !35
  %101 = select i1 %100, float %94, float %97, !dbg !36
  %102 = bitcast float %101 to i32, !dbg !37
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 2, i32 31), !dbg !37
  %104 = bitcast i32 %103 to float, !dbg !37
  %105 = fcmp ogt float %101, %104, !dbg !30
  %106 = fcmp uno float %101, 0.000000e+00, !dbg !34
  %107 = or i1 %105, %106, !dbg !35
  %108 = select i1 %107, float %101, float %104, !dbg !36
  %109 = bitcast float %108 to i32, !dbg !37
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 1, i32 31), !dbg !37
  %111 = bitcast i32 %110 to float, !dbg !37
  %112 = fcmp ogt float %108, %111, !dbg !30
  %113 = fcmp uno float %108, 0.000000e+00, !dbg !34
  %114 = or i1 %112, %113, !dbg !35
  %115 = select i1 %114, float %108, float %111, !dbg !36
  %116 = bitcast float %80 to i32, !dbg !37
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 16, i32 31), !dbg !37
  %118 = bitcast i32 %117 to float, !dbg !37
  %119 = fcmp ogt float %80, %118, !dbg !30
  %120 = fcmp uno float %80, 0.000000e+00, !dbg !34
  %121 = or i1 %119, %120, !dbg !35
  %122 = select i1 %121, float %80, float %118, !dbg !36
  %123 = bitcast float %122 to i32, !dbg !37
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 8, i32 31), !dbg !37
  %125 = bitcast i32 %124 to float, !dbg !37
  %126 = fcmp ogt float %122, %125, !dbg !30
  %127 = fcmp uno float %122, 0.000000e+00, !dbg !34
  %128 = or i1 %126, %127, !dbg !35
  %129 = select i1 %128, float %122, float %125, !dbg !36
  %130 = bitcast float %129 to i32, !dbg !37
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 4, i32 31), !dbg !37
  %132 = bitcast i32 %131 to float, !dbg !37
  %133 = fcmp ogt float %129, %132, !dbg !30
  %134 = fcmp uno float %129, 0.000000e+00, !dbg !34
  %135 = or i1 %133, %134, !dbg !35
  %136 = select i1 %135, float %129, float %132, !dbg !36
  %137 = bitcast float %136 to i32, !dbg !37
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 2, i32 31), !dbg !37
  %139 = bitcast i32 %138 to float, !dbg !37
  %140 = fcmp ogt float %136, %139, !dbg !30
  %141 = fcmp uno float %136, 0.000000e+00, !dbg !34
  %142 = or i1 %140, %141, !dbg !35
  %143 = select i1 %142, float %136, float %139, !dbg !36
  %144 = bitcast float %143 to i32, !dbg !37
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 1, i32 31), !dbg !37
  %146 = bitcast i32 %145 to float, !dbg !37
  %147 = fcmp ogt float %143, %146, !dbg !30
  %148 = fcmp uno float %143, 0.000000e+00, !dbg !34
  %149 = or i1 %147, %148, !dbg !35
  %150 = select i1 %149, float %143, float %146, !dbg !36
  %151 = fsub float %65, %115, !dbg !38
  %152 = fsub float %66, %115, !dbg !38
  %153 = fsub float %67, %150, !dbg !38
  %154 = fsub float %68, %150, !dbg !38
  %155 = fmul float %151, 0x3FF7154760000000, !dbg !39
  %156 = tail call float @llvm.nvvm.ex2.approx.f(float %155), !dbg !39
  %157 = fmul float %152, 0x3FF7154760000000, !dbg !39
  %158 = tail call float @llvm.nvvm.ex2.approx.f(float %157), !dbg !39
  %159 = fmul float %153, 0x3FF7154760000000, !dbg !39
  %160 = tail call float @llvm.nvvm.ex2.approx.f(float %159), !dbg !39
  %161 = fmul float %154, 0x3FF7154760000000, !dbg !39
  %162 = tail call float @llvm.nvvm.ex2.approx.f(float %161), !dbg !39
  %163 = fadd float %156, %158, !dbg !40
  %164 = select i1 %31, float %163, float 0.000000e+00, !dbg !40
  %165 = fadd float %160, %162, !dbg !40
  %166 = select i1 %32, float %165, float 0.000000e+00, !dbg !40
  %167 = bitcast float %164 to i32, !dbg !44
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 16, i32 31), !dbg !44
  %169 = bitcast i32 %168 to float, !dbg !44
  %170 = fadd float %164, %169, !dbg !40
  %171 = bitcast float %170 to i32, !dbg !44
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 8, i32 31), !dbg !44
  %173 = bitcast i32 %172 to float, !dbg !44
  %174 = fadd float %170, %173, !dbg !40
  %175 = bitcast float %174 to i32, !dbg !44
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 4, i32 31), !dbg !44
  %177 = bitcast i32 %176 to float, !dbg !44
  %178 = fadd float %174, %177, !dbg !40
  %179 = bitcast float %178 to i32, !dbg !44
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 2, i32 31), !dbg !44
  %181 = bitcast i32 %180 to float, !dbg !44
  %182 = fadd float %178, %181, !dbg !40
  %183 = bitcast float %182 to i32, !dbg !44
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 1, i32 31), !dbg !44
  %185 = bitcast i32 %184 to float, !dbg !44
  %186 = fadd float %182, %185, !dbg !40
  %187 = bitcast float %166 to i32, !dbg !44
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 16, i32 31), !dbg !44
  %189 = bitcast i32 %188 to float, !dbg !44
  %190 = fadd float %166, %189, !dbg !40
  %191 = bitcast float %190 to i32, !dbg !44
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 8, i32 31), !dbg !44
  %193 = bitcast i32 %192 to float, !dbg !44
  %194 = fadd float %190, %193, !dbg !40
  %195 = bitcast float %194 to i32, !dbg !44
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 4, i32 31), !dbg !44
  %197 = bitcast i32 %196 to float, !dbg !44
  %198 = fadd float %194, %197, !dbg !40
  %199 = bitcast float %198 to i32, !dbg !44
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 2, i32 31), !dbg !44
  %201 = bitcast i32 %200 to float, !dbg !44
  %202 = fadd float %198, %201, !dbg !40
  %203 = bitcast float %202 to i32, !dbg !44
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 1, i32 31), !dbg !44
  %205 = bitcast i32 %204 to float, !dbg !44
  %206 = fadd float %202, %205, !dbg !40
  %207 = tail call float @llvm.nvvm.div.full(float %156, float %186), !dbg !45
  %208 = tail call float @llvm.nvvm.div.full(float %158, float %186), !dbg !45
  %209 = tail call float @llvm.nvvm.div.full(float %160, float %206), !dbg !45
  %210 = tail call float @llvm.nvvm.div.full(float %162, float %206), !dbg !45
  %211 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !46
  %212 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !46
  %213 = bitcast float %207 to i32, !dbg !47
  %214 = bitcast float %208 to i32, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %213, i32 %214, ptr addrspace(1) %211, i1 %31) #4, !dbg !47
  %215 = bitcast float %209 to i32, !dbg !47
  %216 = bitcast float %210 to i32, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %215, i32 %216, ptr addrspace(1) %212, i1 %32) #4, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "c7mz7vr6bkrwjj5imx4qpkjzm5b35yar4qnwwkujddm3d4utpios.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/7m")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "triton_per_fused__softmax_add_6", linkageName: "triton_per_fused__softmax_add_6", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 28, scope: !5)
!9 = !DILocation(line: 24, column: 33, scope: !5)
!10 = !DILocation(line: 25, column: 44, scope: !5)
!11 = !DILocation(line: 25, column: 23, scope: !5)
!12 = !DILocation(line: 26, column: 21, scope: !5)
!13 = !DILocation(line: 27, column: 38, scope: !5)
!14 = !DILocation(line: 29, column: 25, scope: !5)
!15 = !DILocation(line: 35, column: 19, scope: !5)
!16 = !DILocation(line: 34, column: 19, scope: !5)
!17 = !DILocation(line: 36, column: 40, scope: !5)
!18 = !DILocation(line: 36, column: 37, scope: !5)
!19 = !DILocation(line: 36, column: 30, scope: !5)
!20 = !DILocation(line: 36, column: 55, scope: !5)
!21 = !DILocation(line: 36, column: 45, scope: !5)
!22 = !DILocation(line: 37, column: 40, scope: !5)
!23 = !DILocation(line: 37, column: 37, scope: !5)
!24 = !DILocation(line: 37, column: 50, scope: !5)
!25 = !DILocation(line: 37, column: 45, scope: !5)
!26 = !DILocation(line: 37, column: 30, scope: !5)
!27 = !DILocation(line: 37, column: 55, scope: !5)
!28 = !DILocation(line: 38, column: 18, scope: !5)
!29 = !DILocation(line: 41, column: 43, scope: !5)
!30 = !DILocation(line: 111, column: 15, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !5, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 42, column: 37, scope: !5)
!34 = !DILocation(line: 113, column: 21, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 113, column: 16, scope: !31, inlinedAt: !33)
!36 = !DILocation(line: 114, column: 29, scope: !31, inlinedAt: !33)
!37 = !DILocation(line: 124, column: 29, scope: !31, inlinedAt: !33)
!38 = !DILocation(line: 43, column: 18, scope: !5)
!39 = !DILocation(line: 44, column: 24, scope: !5)
!40 = !DILocation(line: 260, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !5, file: !42, discriminator: 0)
!42 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!43 = !DILocation(line: 47, column: 26, scope: !5)
!44 = !DILocation(line: 290, column: 36, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 50, column: 21, scope: !5)
!46 = !DILocation(line: 51, column: 25, scope: !5)
!47 = !DILocation(line: 51, column: 57, scope: !5)
!48 = !DILocation(line: 51, column: 4, scope: !5)
