; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_red_fused_15(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr #0 !dbg !5 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %7 = shl i32 %6, 6, !dbg !9
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %9 = lshr i32 %8, 2, !dbg !10
  %10 = and i32 %9, 63, !dbg !10
  %11 = or disjoint i32 %10, %7, !dbg !11
  %12 = icmp slt i32 %11, 10368, !dbg !12
  %13 = and i32 %8, 3, !dbg !13
  %14 = sdiv i32 %11, 324, !dbg !14
  %15 = mul i32 %11, 324, !dbg !15
  %16 = mul i32 %11, 324
  %17 = shl nsw i32 %14, 4
  %18 = add i32 %17, %16
  br i1 %12, label %.split.us, label %.split

.split.us:                                        ; preds = %5, %.split.us
  %indvars.iv16 = phi i64 [ %indvars.iv.next17, %.split.us ], [ 0, %5 ]
  %19 = phi float [ %53, %.split.us ], [ 0.000000e+00, %5 ]
  %20 = phi float [ %42, %.split.us ], [ 0xFFF0000000000000, %5 ]
  %21 = phi i1 [ %38, %.split.us ], [ false, %5 ]
  %22 = trunc nuw nsw i64 %indvars.iv16 to i32, !dbg !16
  %23 = or disjoint i32 %13, %22, !dbg !16
  %24 = add i32 %23, %15, !dbg !16
  %25 = sext i32 %24 to i64, !dbg !17
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !17
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !18
  %28 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$4 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $2 + 0 ], $3;", "=r,r,l,l,b"(i32 0, ptr addrspace(1) %26, i64 %27, i1 true) #4, !dbg !18
  %29 = bitcast i32 %28 to float, !dbg !18
  %30 = add i32 %18, %23, !dbg !19
  %31 = sext i32 %30 to i64, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !20
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !21
  %34 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$4 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $2 + 0 ], $3;", "=r,r,l,l,b"(i32 0, ptr addrspace(1) %32, i64 %33, i1 true) #4, !dbg !21
  %35 = bitcast i32 %34 to float, !dbg !21
  %36 = fadd float %29, %35, !dbg !22
  %37 = fcmp une float %36, 0xFFF0000000000000, !dbg !23
  %38 = or i1 %21, %37, !dbg !24
  %39 = fcmp ogt float %20, %36, !dbg !25
  %40 = fcmp uno float %20, 0.000000e+00, !dbg !29
  %41 = or i1 %40, %39, !dbg !30
  %42 = select i1 %41, float %20, float %36, !dbg !31
  %43 = fcmp oeq float %42, 0xFFF0000000000000, !dbg !32
  %44 = fsub float %20, %42, !dbg !33
  %45 = fmul float %44, 0x3FF7154760000000, !dbg !34
  %46 = tail call float @llvm.nvvm.ex2.approx.f(float %45), !dbg !34
  %47 = select i1 %43, float 1.000000e+00, float %46, !dbg !35
  %48 = fsub float %36, %42, !dbg !36
  %49 = fmul float %48, 0x3FF7154760000000, !dbg !34
  %50 = tail call float @llvm.nvvm.ex2.approx.f(float %49), !dbg !34
  %51 = select i1 %43, float 1.000000e+00, float %50, !dbg !37
  %52 = fmul float %19, %47, !dbg !38
  %53 = fadd float %51, %52, !dbg !39
  %indvars.iv.next17 = add nuw nsw i64 %indvars.iv16, 4, !dbg !40
  %54 = icmp samesign ult i64 %indvars.iv16, 320, !dbg !40
  br i1 %54, label %.split.us, label %.split5.us, !dbg !40

.split:                                           ; preds = %5, %.split
  %indvars.iv = phi i64 [ %indvars.iv.next, %.split ], [ 0, %5 ]
  %55 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !16
  %56 = or disjoint i32 %13, %55, !dbg !16
  %57 = add i32 %56, %15, !dbg !16
  %58 = sext i32 %57 to i64, !dbg !17
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !17
  %60 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !18
  %61 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$4 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $2 + 0 ], $3;", "=r,r,l,l,b"(i32 0, ptr addrspace(1) %59, i64 %60, i1 false) #4, !dbg !18
  %62 = add i32 %18, %56, !dbg !19
  %63 = sext i32 %62 to i64, !dbg !20
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !20
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !21
  %66 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$4 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $2 + 0 ], $3;", "=r,r,l,l,b"(i32 0, ptr addrspace(1) %64, i64 %65, i1 false) #4, !dbg !21
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !40
  %67 = icmp samesign ult i64 %indvars.iv, 320, !dbg !40
  br i1 %67, label %.split, label %.split5.us, !dbg !40

.split5.us:                                       ; preds = %.split, %.split.us
  %.us-phi = phi i1 [ %38, %.split.us ], [ false, %.split ], !dbg !41
  %.us-phi6 = phi float [ %42, %.split.us ], [ 0xFFF0000000000000, %.split ], !dbg !41
  %.us-phi7 = phi float [ %53, %.split.us ], [ 0.000000e+00, %.split ], !dbg !41
  %68 = zext i1 %.us-phi to i8, !dbg !41
  %69 = zext i1 %.us-phi to i32, !dbg !42
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 2, i32 31), !dbg !42
  %71 = trunc i32 %70 to i8, !dbg !42
  %72 = or i8 %71, %68, !dbg !44
  %73 = zext i8 %72 to i32, !dbg !42
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 1, i32 31), !dbg !42
  %75 = trunc i32 %74 to i8, !dbg !42
  %76 = or i8 %72, %75, !dbg !44
  %.fr = freeze i8 %76, !dbg !45
  %.not = icmp eq i8 %.fr, 0, !dbg !45
  %77 = bitcast float %.us-phi6 to i32, !dbg !46
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 2, i32 31), !dbg !46
  %79 = bitcast i32 %78 to float, !dbg !46
  %80 = fcmp ogt float %.us-phi6, %79, !dbg !48
  %81 = fcmp uno float %.us-phi6, 0.000000e+00, !dbg !49
  %82 = or i1 %81, %80, !dbg !50
  %83 = select i1 %82, float %.us-phi6, float %79, !dbg !51
  %84 = bitcast float %83 to i32, !dbg !46
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 1, i32 31), !dbg !46
  %86 = bitcast i32 %85 to float, !dbg !46
  %87 = fcmp ogt float %83, %86, !dbg !48
  %88 = fcmp uno float %83, 0.000000e+00, !dbg !49
  %89 = or i1 %87, %88, !dbg !50
  %90 = select i1 %89, float %83, float %86, !dbg !51
  %91 = fcmp oeq float %90, 0xFFF0000000000000, !dbg !52
  %92 = fsub float %.us-phi6, %90, !dbg !53
  %93 = fmul float %92, 0x3FF7154760000000, !dbg !54
  %94 = select i1 %91, float 0.000000e+00, float %93, !dbg !55
  %95 = tail call float @llvm.nvvm.ex2.approx.f(float %94), !dbg !54
  %96 = fmul float %.us-phi7, %95, !dbg !56
  %97 = bitcast float %96 to i32, !dbg !57
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 2, i32 31), !dbg !57
  %99 = bitcast i32 %98 to float, !dbg !57
  %100 = fadd float %96, %99, !dbg !60
  %101 = bitcast float %100 to i32, !dbg !57
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 1, i32 31), !dbg !57
  %103 = bitcast i32 %102 to float, !dbg !57
  %104 = fadd float %100, %103, !dbg !60
  br i1 %.not, label %.split8.us, label %.split8

.split8.us:                                       ; preds = %.split5.us, %.split8.us
  %indvars.iv20 = phi i64 [ %indvars.iv.next21, %.split8.us ], [ 0, %.split5.us ]
  %105 = trunc nuw nsw i64 %indvars.iv20 to i32, !dbg !61
  %106 = or disjoint i32 %13, %105, !dbg !61
  %107 = add i32 %106, %15, !dbg !61
  %108 = sext i32 %107 to i64, !dbg !62
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !62
  %110 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #4, !dbg !63
  %111 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$4 ld.global.L1::evict_first.L2::cache_hint.b32 { $0 }, [ $2 + 0 ], $3;", "=r,r,l,l,b"(i32 0, ptr addrspace(1) %109, i64 %110, i1 %12) #4, !dbg !63
  %112 = add i32 %18, %106, !dbg !64
  %113 = sext i32 %112 to i64, !dbg !65
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !65
  %115 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #4, !dbg !66
  %116 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$4 ld.global.L1::evict_first.L2::cache_hint.b32 { $0 }, [ $2 + 0 ], $3;", "=r,r,l,l,b"(i32 0, ptr addrspace(1) %114, i64 %115, i1 %12) #4, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 0, ptr addrspace(1) %114, i1 %12) #4, !dbg !67
  %indvars.iv.next21 = add nuw nsw i64 %indvars.iv20, 4, !dbg !68
  %117 = icmp samesign ult i64 %indvars.iv20, 320, !dbg !68
  br i1 %117, label %.split8.us, label %.split10.us, !dbg !68

.split8:                                          ; preds = %.split5.us, %.split8
  %indvars.iv18 = phi i64 [ %indvars.iv.next19, %.split8 ], [ 0, %.split5.us ]
  %118 = trunc nuw nsw i64 %indvars.iv18 to i32, !dbg !61
  %119 = or disjoint i32 %13, %118, !dbg !61
  %120 = add i32 %119, %15, !dbg !61
  %121 = sext i32 %120 to i64, !dbg !62
  %122 = getelementptr float, ptr addrspace(1) %1, i64 %121, !dbg !62
  %123 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #4, !dbg !63
  %124 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$4 ld.global.L1::evict_first.L2::cache_hint.b32 { $0 }, [ $2 + 0 ], $3;", "=r,r,l,l,b"(i32 0, ptr addrspace(1) %122, i64 %123, i1 %12) #4, !dbg !63
  %125 = bitcast i32 %124 to float, !dbg !63
  %126 = add i32 %18, %119, !dbg !64
  %127 = sext i32 %126 to i64, !dbg !65
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !65
  %129 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #4, !dbg !66
  %130 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$4 ld.global.L1::evict_first.L2::cache_hint.b32 { $0 }, [ $2 + 0 ], $3;", "=r,r,l,l,b"(i32 0, ptr addrspace(1) %128, i64 %129, i1 %12) #4, !dbg !66
  %131 = bitcast i32 %130 to float, !dbg !66
  %132 = fadd float %125, %131, !dbg !69
  %133 = fsub float %132, %90, !dbg !70
  %134 = fmul float %133, 0x3FF7154760000000, !dbg !71
  %135 = tail call float @llvm.nvvm.ex2.approx.f(float %134), !dbg !71
  %136 = tail call float @llvm.nvvm.div.full(float %135, float %104), !dbg !72
  %137 = bitcast float %136 to i32, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %137, ptr addrspace(1) %128, i1 %12) #4, !dbg !67
  %indvars.iv.next19 = add nuw nsw i64 %indvars.iv18, 4, !dbg !68
  %138 = icmp samesign ult i64 %indvars.iv18, 320, !dbg !68
  br i1 %138, label %.split8, label %.split10.us, !dbg !68

.split10.us:                                      ; preds = %.split8, %.split8.us
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { "nvvm.reqntid"="256" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "c3s5rpotgkrxj53byxl6iiai4e64ppfdhf7r5r7xy2iceaf5vzca.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/3s")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "triton_red_fused_15", linkageName: "triton_red_fused_15", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 23, column: 28, scope: !5)
!9 = !DILocation(line: 23, column: 33, scope: !5)
!10 = !DILocation(line: 24, column: 44, scope: !5)
!11 = !DILocation(line: 24, column: 23, scope: !5)
!12 = !DILocation(line: 25, column: 21, scope: !5)
!13 = !DILocation(line: 26, column: 37, scope: !5)
!14 = !DILocation(line: 30, column: 19, scope: !5)
!15 = !DILocation(line: 42, column: 45, scope: !5)
!16 = !DILocation(line: 42, column: 41, scope: !5)
!17 = !DILocation(line: 42, column: 34, scope: !5)
!18 = !DILocation(line: 42, column: 50, scope: !5)
!19 = !DILocation(line: 43, column: 54, scope: !5)
!20 = !DILocation(line: 43, column: 38, scope: !5)
!21 = !DILocation(line: 43, column: 66, scope: !5)
!22 = !DILocation(line: 44, column: 22, scope: !5)
!23 = !DILocation(line: 46, column: 23, scope: !5)
!24 = !DILocation(line: 52, column: 49, scope: !5)
!25 = !DILocation(line: 111, column: 15, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !5, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 56, column: 43, scope: !5)
!29 = !DILocation(line: 113, column: 21, scope: !26, inlinedAt: !28)
!30 = !DILocation(line: 113, column: 16, scope: !26, inlinedAt: !28)
!31 = !DILocation(line: 114, column: 29, scope: !26, inlinedAt: !28)
!32 = !DILocation(line: 197, column: 19, scope: !26, inlinedAt: !28)
!33 = !DILocation(line: 197, column: 53, scope: !26, inlinedAt: !28)
!34 = !DILocation(line: 174, column: 24, scope: !26, inlinedAt: !28)
!35 = !DILocation(line: 197, column: 39, scope: !26, inlinedAt: !28)
!36 = !DILocation(line: 200, column: 53, scope: !26, inlinedAt: !28)
!37 = !DILocation(line: 200, column: 39, scope: !26, inlinedAt: !28)
!38 = !DILocation(line: 206, column: 24, scope: !26, inlinedAt: !28)
!39 = !DILocation(line: 206, column: 36, scope: !26, inlinedAt: !28)
!40 = !DILocation(line: 36, column: 40, scope: !5)
!41 = !DILocation(line: 61, column: 39, scope: !5)
!42 = !DILocation(line: 266, column: 29, scope: !26, inlinedAt: !43)
!43 = !DILocation(line: 61, column: 49, scope: !5)
!44 = !DILocation(line: 261, column: 15, scope: !26, inlinedAt: !43)
!45 = !DILocation(line: 61, column: 64, scope: !5)
!46 = !DILocation(line: 124, column: 29, scope: !26, inlinedAt: !47)
!47 = !DILocation(line: 64, column: 35, scope: !5)
!48 = !DILocation(line: 111, column: 15, scope: !26, inlinedAt: !47)
!49 = !DILocation(line: 113, column: 21, scope: !26, inlinedAt: !47)
!50 = !DILocation(line: 113, column: 16, scope: !26, inlinedAt: !47)
!51 = !DILocation(line: 114, column: 29, scope: !26, inlinedAt: !47)
!52 = !DILocation(line: 181, column: 40, scope: !26, inlinedAt: !47)
!53 = !DILocation(line: 181, column: 68, scope: !26, inlinedAt: !47)
!54 = !DILocation(line: 174, column: 24, scope: !26, inlinedAt: !47)
!55 = !DILocation(line: 181, column: 58, scope: !26, inlinedAt: !47)
!56 = !DILocation(line: 182, column: 31, scope: !26, inlinedAt: !47)
!57 = !DILocation(line: 290, column: 36, scope: !58, inlinedAt: !47)
!58 = distinct !DILexicalBlockFile(scope: !5, file: !59, discriminator: 0)
!59 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!60 = !DILocation(line: 260, column: 15, scope: !58, inlinedAt: !47)
!61 = !DILocation(line: 75, column: 42, scope: !5)
!62 = !DILocation(line: 75, column: 35, scope: !5)
!63 = !DILocation(line: 75, column: 51, scope: !5)
!64 = !DILocation(line: 76, column: 55, scope: !5)
!65 = !DILocation(line: 76, column: 39, scope: !5)
!66 = !DILocation(line: 76, column: 67, scope: !5)
!67 = !DILocation(line: 84, column: 67, scope: !5)
!68 = !DILocation(line: 69, column: 40, scope: !5)
!69 = !DILocation(line: 78, column: 24, scope: !5)
!70 = !DILocation(line: 79, column: 24, scope: !5)
!71 = !DILocation(line: 80, column: 28, scope: !5)
!72 = !DILocation(line: 81, column: 25, scope: !5)
!73 = !DILocation(line: 69, column: 4, scope: !5)
