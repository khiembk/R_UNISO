; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [121 x i8] c"/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/q3/cq3kxhk6ezre54h5ziwl6hsecpapb2olfiljuaorambagbt7lmwk.py\00"
@assertMessage_0 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp27 < 32\00"
@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !5 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_poi_fused__to_copy_add_mul_rsub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr #1 !dbg !9 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl nuw nsw i32 %8, 1, !dbg !12
  %10 = and i32 %9, 254, !dbg !12
  %11 = and i32 %8, 127, !dbg !12
  %12 = or disjoint i32 %11, 128, !dbg !12
  %13 = or disjoint i32 %10, %7, !dbg !13
  %14 = sdiv i32 %13, 8, !dbg !14
  %15 = srem i32 %14, 64, !dbg !15
  %16 = sext i32 %15 to i64, !dbg !16
  %17 = getelementptr i64, ptr addrspace(1) %1, i64 %16, !dbg !16
  %18 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #6, !dbg !17
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l"(ptr addrspace(1) %17, i64 %18) #6, !dbg !17
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #6, !dbg !17
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l"(ptr addrspace(1) %17, i64 %20) #6, !dbg !17
  %22 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !13
  %23 = insertelement <2 x i32> %22, i32 %7, i64 1, !dbg !13
  %24 = insertelement <2 x i32> poison, i32 %7, i64 0, !dbg !13
  %25 = insertelement <2 x i32> %24, i32 %11, i64 1, !dbg !13
  %26 = or disjoint <2 x i32> %23, %25, !dbg !13
  %27 = sdiv <2 x i32> %26, splat (i32 8), !dbg !14
  %28 = srem <2 x i32> %27, splat (i32 64), !dbg !15
  %29 = sdiv <2 x i32> %26, splat (i32 -512), !dbg !18
  %30 = add nsw <2 x i32> %28, %29, !dbg !19
  %31 = icmp sgt <2 x i32> %30, zeroinitializer, !dbg !20
  %32 = select <2 x i1> %31, <2 x i64> splat (i64 16), <2 x i64> zeroinitializer, !dbg !21
  %33 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %30, i1 true), !dbg !22
  %34 = zext nneg <2 x i32> %33 to <2 x i64>, !dbg !23
  %35 = icmp samesign ult <2 x i32> %33, splat (i32 8), !dbg !23
  %36 = extractelement <2 x i32> %33, i64 1, !dbg !24
  %37 = uitofp nneg i32 %36 to float, !dbg !24
  %38 = extractelement <2 x i32> %33, i64 0, !dbg !24
  %39 = uitofp nneg i32 %38 to float, !dbg !24
  %40 = fmul float %37, 1.250000e-01, !dbg !25
  %41 = fmul float %39, 1.250000e-01, !dbg !25
  %42 = fcmp olt float %40, 0x3810000000000000, !dbg !26
  %43 = fmul float %40, 0x4160000000000000, !dbg !26
  %.02.i = select i1 %42, float %43, float %40, !dbg !26
  %i.i.0.i = select i1 %42, float -2.300000e+01, float 0.000000e+00, !dbg !26
  %44 = bitcast float %.02.i to i32, !dbg !26
  %45 = add nsw i32 %44, -1059760811, !dbg !26
  %46 = and i32 %45, -8388608, !dbg !26
  %47 = sub i32 %44, %46, !dbg !26
  %48 = bitcast i32 %47 to float, !dbg !26
  %49 = sitofp i32 %46 to float, !dbg !26
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not.i = icmp eq i32 %50, 0, !dbg !26
  %51 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %49, float 0x3E80000000000000, float %i.i.0.i) #6, !dbg !26
  %52 = tail call float @llvm.nvvm.fma.rn.f(float %49, float 0x3E80000000000000, float %i.i.0.i) #6, !dbg !26
  %.08.i = select i1 %.not.i, float %52, float %51, !dbg !26
  %53 = fadd float %48, -1.000000e+00, !dbg !26
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not1.i = icmp eq i32 %54, 0, !dbg !26
  %55 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %53, float 0x3FC2073EC0000000) #6, !dbg !26
  %56 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %53, float 0x3FC2073EC0000000) #6, !dbg !26
  %.010.i = select i1 %.not1.i, float %56, float %55, !dbg !26
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not2.i = icmp eq i32 %57, 0, !dbg !26
  %58 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %53, float 0xBFBF19B980000000) #6, !dbg !26
  %59 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %53, float 0xBFBF19B980000000) #6, !dbg !26
  %.011.i = select i1 %.not2.i, float %59, float %58, !dbg !26
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not3.i = icmp eq i32 %60, 0, !dbg !26
  %61 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %53, float 0x3FC1E52AA0000000) #6, !dbg !26
  %62 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %53, float 0x3FC1E52AA0000000) #6, !dbg !26
  %.012.i = select i1 %.not3.i, float %62, float %61, !dbg !26
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not4.i = icmp eq i32 %63, 0, !dbg !26
  %64 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %53, float 0xBFC55B1720000000) #6, !dbg !26
  %65 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %53, float 0xBFC55B1720000000) #6, !dbg !26
  %.09.i = select i1 %.not4.i, float %65, float %64, !dbg !26
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not5.i = icmp eq i32 %66, 0, !dbg !26
  %67 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %53, float 0x3FC99DA160000000) #6, !dbg !26
  %68 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %53, float 0x3FC99DA160000000) #6, !dbg !26
  %.05.i = select i1 %.not5.i, float %68, float %67, !dbg !26
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not6.i = icmp eq i32 %69, 0, !dbg !26
  %70 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %53, float 0xBFCFFFE440000000) #6, !dbg !26
  %71 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %53, float 0xBFCFFFE440000000) #6, !dbg !26
  %.01.i = select i1 %.not6.i, float %71, float %70, !dbg !26
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not7.i = icmp eq i32 %72, 0, !dbg !26
  %73 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %53, float 0x3FD5554F00000000) #6, !dbg !26
  %74 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %53, float 0x3FD5554F00000000) #6, !dbg !26
  %.0.i = select i1 %.not7.i, float %74, float %73, !dbg !26
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not8.i = icmp eq i32 %75, 0, !dbg !26
  %76 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %53, float -5.000000e-01) #6, !dbg !26
  %77 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %53, float -5.000000e-01) #6, !dbg !26
  %.07.i = select i1 %.not8.i, float %77, float %76, !dbg !26
  %78 = fmul float %53, %.07.i, !dbg !26
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not9.i = icmp eq i32 %79, 0, !dbg !26
  %80 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %78, float %53, float %53) #6, !dbg !26
  %81 = tail call float @llvm.nvvm.fma.rn.f(float %78, float %53, float %53) #6, !dbg !26
  %.06.i = select i1 %.not9.i, float %81, float %80, !dbg !26
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not10.i = icmp eq i32 %82, 0, !dbg !26
  %83 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #6, !dbg !26
  %84 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #6, !dbg !26
  %.04.i = select i1 %.not10.i, float %84, float %83, !dbg !26
  %85 = icmp samesign ugt i32 %44, 2139095039, !dbg !26
  br i1 %85, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !26

__nv_fmaf_rn.exit.i.i:                            ; preds = %5
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not11.i = icmp eq i32 %86, 0, !dbg !26
  %87 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #6, !dbg !26
  %88 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #6, !dbg !26
  %.03.i = select i1 %.not11.i, float %88, float %87, !dbg !26
  br label %__nv_logf.exit, !dbg !26

__nv_logf.exit:                                   ; preds = %5, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %5 ], !dbg !26
  %89 = fcmp olt float %41, 0x3810000000000000, !dbg !26
  %90 = fmul float %41, 0x4160000000000000, !dbg !26
  %.02.i3 = select i1 %89, float %90, float %41, !dbg !26
  %i.i.0.i4 = select i1 %89, float -2.300000e+01, float 0.000000e+00, !dbg !26
  %91 = bitcast float %.02.i3 to i32, !dbg !26
  %92 = add nsw i32 %91, -1059760811, !dbg !26
  %93 = and i32 %92, -8388608, !dbg !26
  %94 = sub i32 %91, %93, !dbg !26
  %95 = bitcast i32 %94 to float, !dbg !26
  %96 = sitofp i32 %93 to float, !dbg !26
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not.i5 = icmp eq i32 %97, 0, !dbg !26
  %98 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %96, float 0x3E80000000000000, float %i.i.0.i4) #6, !dbg !26
  %99 = tail call float @llvm.nvvm.fma.rn.f(float %96, float 0x3E80000000000000, float %i.i.0.i4) #6, !dbg !26
  %.08.i6 = select i1 %.not.i5, float %99, float %98, !dbg !26
  %100 = fadd float %95, -1.000000e+00, !dbg !26
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not1.i7 = icmp eq i32 %101, 0, !dbg !26
  %102 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %100, float 0x3FC2073EC0000000) #6, !dbg !26
  %103 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %100, float 0x3FC2073EC0000000) #6, !dbg !26
  %.010.i8 = select i1 %.not1.i7, float %103, float %102, !dbg !26
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not2.i9 = icmp eq i32 %104, 0, !dbg !26
  %105 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i8, float %100, float 0xBFBF19B980000000) #6, !dbg !26
  %106 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i8, float %100, float 0xBFBF19B980000000) #6, !dbg !26
  %.011.i10 = select i1 %.not2.i9, float %106, float %105, !dbg !26
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not3.i11 = icmp eq i32 %107, 0, !dbg !26
  %108 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i10, float %100, float 0x3FC1E52AA0000000) #6, !dbg !26
  %109 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i10, float %100, float 0x3FC1E52AA0000000) #6, !dbg !26
  %.012.i12 = select i1 %.not3.i11, float %109, float %108, !dbg !26
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not4.i13 = icmp eq i32 %110, 0, !dbg !26
  %111 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i12, float %100, float 0xBFC55B1720000000) #6, !dbg !26
  %112 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i12, float %100, float 0xBFC55B1720000000) #6, !dbg !26
  %.09.i14 = select i1 %.not4.i13, float %112, float %111, !dbg !26
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not5.i15 = icmp eq i32 %113, 0, !dbg !26
  %114 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i14, float %100, float 0x3FC99DA160000000) #6, !dbg !26
  %115 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i14, float %100, float 0x3FC99DA160000000) #6, !dbg !26
  %.05.i16 = select i1 %.not5.i15, float %115, float %114, !dbg !26
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not6.i17 = icmp eq i32 %116, 0, !dbg !26
  %117 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i16, float %100, float 0xBFCFFFE440000000) #6, !dbg !26
  %118 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i16, float %100, float 0xBFCFFFE440000000) #6, !dbg !26
  %.01.i18 = select i1 %.not6.i17, float %118, float %117, !dbg !26
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not7.i19 = icmp eq i32 %119, 0, !dbg !26
  %120 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i18, float %100, float 0x3FD5554F00000000) #6, !dbg !26
  %121 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i18, float %100, float 0x3FD5554F00000000) #6, !dbg !26
  %.0.i20 = select i1 %.not7.i19, float %121, float %120, !dbg !26
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not8.i21 = icmp eq i32 %122, 0, !dbg !26
  %123 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i20, float %100, float -5.000000e-01) #6, !dbg !26
  %124 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i20, float %100, float -5.000000e-01) #6, !dbg !26
  %.07.i22 = select i1 %.not8.i21, float %124, float %123, !dbg !26
  %125 = fmul float %100, %.07.i22, !dbg !26
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not9.i23 = icmp eq i32 %126, 0, !dbg !26
  %127 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %125, float %100, float %100) #6, !dbg !26
  %128 = tail call float @llvm.nvvm.fma.rn.f(float %125, float %100, float %100) #6, !dbg !26
  %.06.i24 = select i1 %.not9.i23, float %128, float %127, !dbg !26
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not10.i25 = icmp eq i32 %129, 0, !dbg !26
  %130 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i6, float 0x3FE62E4300000000, float %.06.i24) #6, !dbg !26
  %131 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i6, float 0x3FE62E4300000000, float %.06.i24) #6, !dbg !26
  %.04.i26 = select i1 %.not10.i25, float %131, float %130, !dbg !26
  %132 = icmp samesign ugt i32 %91, 2139095039, !dbg !26
  br i1 %132, label %__nv_fmaf_rn.exit.i.i29, label %__nv_logf.exit32, !dbg !26

__nv_fmaf_rn.exit.i.i29:                          ; preds = %__nv_logf.exit
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !26
  %.not11.i30 = icmp eq i32 %133, 0, !dbg !26
  %134 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i3, float 0x7FF0000000000000, float 0x7FF0000000000000) #6, !dbg !26
  %135 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i3, float 0x7FF0000000000000, float 0x7FF0000000000000) #6, !dbg !26
  %.03.i31 = select i1 %.not11.i30, float %135, float %134, !dbg !26
  br label %__nv_logf.exit32, !dbg !26

__nv_logf.exit32:                                 ; preds = %__nv_logf.exit, %__nv_fmaf_rn.exit.i.i29
  %r.i.0.i27 = phi float [ %.03.i31, %__nv_fmaf_rn.exit.i.i29 ], [ %.04.i26, %__nv_logf.exit ], !dbg !26
  %136 = insertelement <2 x float> poison, float %r.i.0.i27, i64 0, !dbg !27
  %137 = insertelement <2 x float> %136, float %r.i.0.i, i64 1, !dbg !27
  %138 = fmul <2 x float> %137, splat (float 0x3FD7154760000000), !dbg !27
  %139 = fmul <2 x float> %138, splat (float 8.000000e+00), !dbg !28
  %140 = fptosi <2 x float> %139 to <2 x i64>, !dbg !29
  %141 = add <2 x i64> %140, splat (i64 8), !dbg !30
  %142 = tail call <2 x i64> @llvm.smin.v2i64(<2 x i64> %141, <2 x i64> splat (i64 15)), !dbg !31
  %143 = select <2 x i1> %35, <2 x i64> %34, <2 x i64> %142, !dbg !35
  %144 = add nsw <2 x i64> %143, %32, !dbg !36
  %145 = lshr <2 x i64> %144, splat (i64 58), !dbg !37
  %146 = and <2 x i64> %145, splat (i64 32), !dbg !37
  %147 = add nsw <2 x i64> %146, %144, !dbg !37
  %148 = extractelement <2 x i64> %147, i64 0, !dbg !38
  %149 = extractelement <2 x i64> %147, i64 1, !dbg !38
  %150 = or i64 %148, %149, !dbg !38
  %.not = icmp ult i64 %150, 32, !dbg !38
  br i1 %.not, label %152, label %151, !dbg !38

151:                                              ; preds = %__nv_logf.exit32
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 56, ptr nonnull @assertFunc_0, i64 1), !dbg !38
  unreachable, !dbg !38

152:                                              ; preds = %__nv_logf.exit32
  %153 = extractelement <2 x i32> %26, i64 0, !dbg !39
  %154 = srem i32 %153, 8, !dbg !39
  %155 = extractelement <2 x i32> %26, i64 1, !dbg !39
  %156 = srem i32 %155, 8, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !38
  %157 = sext i32 %156 to i64, !dbg !40
  %158 = sext i32 %154 to i64, !dbg !40
  %.idx = shl nuw nsw i64 %149, 5, !dbg !41
  %159 = getelementptr i8, ptr addrspace(1) %0, i64 %.idx, !dbg !41
  %160 = getelementptr float, ptr addrspace(1) %159, i64 %157, !dbg !41
  %.idx2 = shl nuw nsw i64 %148, 5, !dbg !41
  %161 = getelementptr i8, ptr addrspace(1) %0, i64 %.idx2, !dbg !41
  %162 = getelementptr float, ptr addrspace(1) %161, i64 %158, !dbg !41
  %163 = ptrtoint ptr addrspace(1) %160 to i64, !dbg !42
  %164 = ptrtoint ptr addrspace(1) %162 to i64, !dbg !42
  %165 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %11, !dbg !42
  %166 = insertelement <1 x i64> poison, i64 %163, i64 0, !dbg !42
  store <1 x i64> %166, ptr addrspace(3) %165, align 8, !dbg !42
  %167 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %12, !dbg !42
  %168 = insertelement <1 x i64> poison, i64 %164, i64 0, !dbg !42
  store <1 x i64> %168, ptr addrspace(3) %167, align 8, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %169 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %10, !dbg !42
  %170 = load i64, ptr addrspace(3) %169, align 16, !dbg !42
  %171 = getelementptr inbounds nuw i8, ptr addrspace(3) %169, i32 8, !dbg !42
  %172 = load i64, ptr addrspace(3) %171, align 8, !dbg !42
  %173 = inttoptr i64 %170 to ptr addrspace(1), !dbg !42
  %174 = inttoptr i64 %172 to ptr addrspace(1), !dbg !42
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %173) #6, !dbg !42
  %176 = bitcast i32 %175 to float, !dbg !42
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %174) #6, !dbg !42
  %178 = bitcast i32 %177 to float, !dbg !42
  %179 = sitofp i64 %19 to float, !dbg !43
  %180 = sitofp i64 %21 to float, !dbg !43
  %181 = fsub float 1.000000e+00, %179, !dbg !44
  %182 = fsub float 1.000000e+00, %180, !dbg !44
  %183 = fmul float %181, 0x47EFFFFFE0000000, !dbg !45
  %184 = fmul float %182, 0x47EFFFFFE0000000, !dbg !45
  %185 = fsub float %176, %183, !dbg !46
  %186 = fsub float %178, %184, !dbg !46
  %187 = sext i32 %13 to i64, !dbg !47
  %188 = getelementptr float, ptr addrspace(1) %2, i64 %187, !dbg !47
  %189 = bitcast float %185 to i32, !dbg !48
  %190 = bitcast float %186 to i32, !dbg !48
  tail call void asm sideeffect "st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l"(i32 %189, i32 %190, ptr addrspace(1) %188) #6, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x i32> @llvm.abs.v2i32(<2 x i32>, i1 immarg) #5

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x i64> @llvm.smin.v2i64(<2 x i64>, <2 x i64>) #5

attributes #0 = { noreturn }
attributes #1 = { "nvvm.reqntid"="128" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "cq3kxhk6ezre54h5ziwl6hsecpapb2olfiljuaorambagbt7lmwk.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/q3")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !6, file: !6, type: !7, spFlags: DISPFlagOptimized)
!6 = !DIFile(filename: "<unknown>", directory: "")
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = distinct !DISubprogram(name: "triton_poi_fused__to_copy_add_mul_rsub_1", linkageName: "triton_poi_fused__to_copy_add_mul_rsub_1", scope: !1, file: !1, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!10 = !DILocation(line: 20, column: 28, scope: !9)
!11 = !DILocation(line: 20, column: 33, scope: !9)
!12 = !DILocation(line: 21, column: 36, scope: !9)
!13 = !DILocation(line: 21, column: 23, scope: !9)
!14 = !DILocation(line: 23, column: 21, scope: !9)
!15 = !DILocation(line: 23, column: 26, scope: !9)
!16 = !DILocation(line: 27, column: 31, scope: !9)
!17 = !DILocation(line: 27, column: 36, scope: !9)
!18 = !DILocation(line: 24, column: 19, scope: !9)
!19 = !DILocation(line: 28, column: 17, scope: !9)
!20 = !DILocation(line: 30, column: 18, scope: !9)
!21 = !DILocation(line: 33, column: 18, scope: !9)
!22 = !DILocation(line: 35, column: 23, scope: !9)
!23 = !DILocation(line: 37, column: 18, scope: !9)
!24 = !DILocation(line: 38, column: 20, scope: !9)
!25 = !DILocation(line: 40, column: 20, scope: !9)
!26 = !DILocation(line: 41, column: 24, scope: !9)
!27 = !DILocation(line: 43, column: 20, scope: !9)
!28 = !DILocation(line: 45, column: 20, scope: !9)
!29 = !DILocation(line: 46, column: 21, scope: !9)
!30 = !DILocation(line: 47, column: 20, scope: !9)
!31 = !DILocation(line: 106, column: 29, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !9, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 49, column: 42, scope: !9)
!35 = !DILocation(line: 50, column: 33, scope: !9)
!36 = !DILocation(line: 51, column: 19, scope: !9)
!37 = !DILocation(line: 55, column: 35, scope: !9)
!38 = !DILocation(line: 56, column: 50, scope: !9)
!39 = !DILocation(line: 25, column: 19, scope: !9)
!40 = !DILocation(line: 57, column: 36, scope: !9)
!41 = !DILocation(line: 57, column: 31, scope: !9)
!42 = !DILocation(line: 57, column: 46, scope: !9)
!43 = !DILocation(line: 58, column: 21, scope: !9)
!44 = !DILocation(line: 60, column: 20, scope: !9)
!45 = !DILocation(line: 62, column: 20, scope: !9)
!46 = !DILocation(line: 63, column: 20, scope: !9)
!47 = !DILocation(line: 64, column: 25, scope: !9)
!48 = !DILocation(line: 64, column: 37, scope: !9)
!49 = !DILocation(line: 64, column: 4, scope: !9)
