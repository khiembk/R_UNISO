; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [121 x i8] c"/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/ci/ccisb2yra76ab2haychl3vkjloggui7jornx4qodogdjo7v6y64e.py\00"
@assertMessage_0 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp27 < 32\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !5 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_mul_rsub_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr #1 !dbg !9 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 63, !dbg !12
  %13 = lshr i32 %11, 4, !dbg !12
  %14 = and i32 %13, 31, !dbg !12
  %15 = or i32 %13, 32, !dbg !12
  %16 = lshr i32 %11, 6, !dbg !12
  %17 = and i32 %16, 7, !dbg !12
  %18 = insertelement <8 x i32> poison, i32 %16, i64 0, !dbg !12
  %19 = insertelement <8 x i32> %18, i32 %17, i64 1, !dbg !12
  %20 = shufflevector <8 x i32> %19, <8 x i32> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0>, !dbg !12
  %21 = and <8 x i32> %20, <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !12
  %22 = or <8 x i32> %20, <i32 4, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56>, !dbg !12
  %23 = shufflevector <8 x i32> %21, <8 x i32> %22, <8 x i32> <i32 0, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !12
  %24 = or disjoint i32 %10, %12, !dbg !13
  %25 = or disjoint i32 %14, %10, !dbg !13
  %26 = or disjoint i32 %15, %10, !dbg !13
  %27 = shufflevector <8 x i32> %22, <8 x i32> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !13
  %28 = insertelement <8 x i32> %23, i32 %17, i64 0, !dbg !13
  %29 = shufflevector <4 x i32> %27, <4 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !13
  %30 = shufflevector <8 x i32> %28, <8 x i32> %29, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>, !dbg !13
  %31 = insertelement <8 x i32> poison, i32 %10, i64 0, !dbg !13
  %32 = shufflevector <8 x i32> %31, <8 x i32> poison, <8 x i32> zeroinitializer, !dbg !13
  %33 = or disjoint <8 x i32> %30, %32, !dbg !13
  %34 = icmp slt i32 %24, 10368, !dbg !14
  %35 = icmp slt i32 %25, 10368, !dbg !14
  %36 = icmp slt i32 %26, 10368, !dbg !14
  %37 = icmp slt <8 x i32> %33, splat (i32 10368), !dbg !14
  %38 = shl nuw nsw i32 %11, 2, !dbg !15
  %39 = and i32 %38, 60, !dbg !15
  %40 = srem <8 x i32> %33, splat (i32 324), !dbg !16
  %41 = sdiv i32 %25, 324, !dbg !17
  %42 = sdiv i32 %26, 324, !dbg !17
  %43 = extractelement <8 x i32> %33, i64 0, !dbg !17
  %44 = sdiv i32 %43, 324, !dbg !17
  %45 = extractelement <8 x i32> %33, i64 1, !dbg !17
  %46 = sdiv i32 %45, 324, !dbg !17
  %47 = extractelement <8 x i32> %33, i64 2, !dbg !17
  %48 = sdiv i32 %47, 324, !dbg !17
  %49 = extractelement <8 x i32> %33, i64 3, !dbg !17
  %50 = sdiv i32 %49, 324, !dbg !17
  %51 = extractelement <8 x i32> %33, i64 4, !dbg !17
  %52 = sdiv i32 %51, 324, !dbg !17
  %53 = extractelement <8 x i32> %33, i64 5, !dbg !17
  %54 = sdiv i32 %53, 324, !dbg !17
  %55 = extractelement <8 x i32> %33, i64 6, !dbg !17
  %56 = sdiv i32 %55, 324, !dbg !17
  %57 = extractelement <8 x i32> %33, i64 7, !dbg !17
  %58 = sdiv i32 %57, 324, !dbg !17
  %59 = srem i32 %44, 8, !dbg !18
  %60 = srem i32 %46, 8, !dbg !18
  %61 = srem i32 %48, 8, !dbg !18
  %62 = srem i32 %50, 8, !dbg !18
  %63 = srem i32 %52, 8, !dbg !18
  %64 = srem i32 %54, 8, !dbg !18
  %65 = srem i32 %56, 8, !dbg !18
  %66 = srem i32 %58, 8, !dbg !18
  %67 = sdiv i32 %25, 2592, !dbg !19
  %68 = sdiv i32 %26, 2592, !dbg !19
  %69 = mul nsw i32 %67, 324, !dbg !20
  %70 = mul nsw i32 %68, 324, !dbg !20
  %71 = mul i32 %25, 324, !dbg !21
  %72 = mul i32 %26, 324, !dbg !21
  %73 = sext i32 %59 to i64, !dbg !22
  %74 = sext i32 %60 to i64, !dbg !22
  %75 = sext i32 %61 to i64, !dbg !22
  %76 = sext i32 %62 to i64, !dbg !22
  %77 = sext i32 %63 to i64, !dbg !22
  %78 = sext i32 %64 to i64, !dbg !22
  %79 = sext i32 %65 to i64, !dbg !22
  %80 = sext i32 %66 to i64, !dbg !22
  %invariant.gep = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !23
  %invariant.gep251 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !23
  %invariant.gep253 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !23
  %invariant.gep255 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !23
  %invariant.gep257 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !23
  %invariant.gep259 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !23
  %invariant.gep261 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !23
  %invariant.gep263 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !23
  %81 = and i32 %38, 2044
  %82 = shl nuw nsw i32 %11, 6
  %83 = and i32 %82, 4032
  %84 = and i32 %16, 3
  %85 = extractelement <8 x i32> %21, i64 0
  %86 = or disjoint i32 %84, %85
  %87 = or disjoint i32 %86, %83
  %88 = lshr i32 %11, 2
  %89 = and i32 %88, 124
  %90 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %89
  %91 = getelementptr inbounds nuw float, ptr addrspace(3) %90, i32 %81
  %92 = or i32 %38, 2048
  %93 = lshr i32 %92, 4
  %94 = and i32 %93, 252
  %95 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %94
  %96 = getelementptr inbounds nuw float, ptr addrspace(3) %95, i32 %92
  %97 = lshr exact i32 %83, 2
  %98 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %97
  %99 = getelementptr inbounds nuw float, ptr addrspace(3) %98, i32 %87
  %100 = or disjoint i32 %87, 8
  %101 = getelementptr inbounds nuw float, ptr addrspace(3) %98, i32 %100
  %102 = or disjoint i32 %87, 16
  %103 = getelementptr inbounds nuw float, ptr addrspace(3) %98, i32 %102
  %104 = or disjoint i32 %87, 24
  %105 = getelementptr inbounds nuw float, ptr addrspace(3) %98, i32 %104
  %106 = or disjoint i32 %87, 32
  %107 = getelementptr inbounds nuw float, ptr addrspace(3) %98, i32 %106
  %108 = or disjoint i32 %87, 40
  %109 = getelementptr inbounds nuw float, ptr addrspace(3) %98, i32 %108
  %110 = or disjoint i32 %87, 48
  %111 = getelementptr inbounds nuw float, ptr addrspace(3) %98, i32 %110
  %112 = or disjoint i32 %87, 56
  %113 = getelementptr inbounds nuw float, ptr addrspace(3) %98, i32 %112
  %114 = and i32 %11, 511
  %115 = lshr i32 %114, 6
  %116 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %115
  %117 = getelementptr inbounds nuw i64, ptr addrspace(3) %116, i32 %114
  %118 = or i32 %11, 512
  %119 = lshr i32 %118, 6
  %120 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %119
  %121 = getelementptr inbounds nuw i64, ptr addrspace(3) %120, i32 %118
  %122 = or disjoint i32 %114, 1024
  %123 = lshr i32 %122, 6
  %124 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %123
  %125 = getelementptr inbounds nuw i64, ptr addrspace(3) %124, i32 %122
  %126 = or i32 %11, 1536
  %127 = lshr i32 %126, 6
  %128 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %127
  %129 = getelementptr inbounds nuw i64, ptr addrspace(3) %128, i32 %126
  %130 = or disjoint i32 %114, 2048
  %131 = lshr i32 %130, 6
  %132 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %131
  %133 = getelementptr inbounds nuw i64, ptr addrspace(3) %132, i32 %130
  %134 = or i32 %11, 2560
  %135 = lshr i32 %134, 6
  %136 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %135
  %137 = getelementptr inbounds nuw i64, ptr addrspace(3) %136, i32 %134
  %138 = or disjoint i32 %114, 3072
  %139 = lshr i32 %138, 6
  %140 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %139
  %141 = getelementptr inbounds nuw i64, ptr addrspace(3) %140, i32 %138
  %142 = or i32 %11, 3584
  %143 = lshr i32 %142, 6
  %144 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %143
  %145 = getelementptr inbounds nuw i64, ptr addrspace(3) %144, i32 %142
  %146 = lshr exact i32 %83, 3
  %147 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %146
  %148 = getelementptr inbounds nuw i64, ptr addrspace(3) %147, i32 %87
  %149 = getelementptr inbounds nuw i64, ptr addrspace(3) %147, i32 %100
  %150 = getelementptr inbounds nuw i64, ptr addrspace(3) %147, i32 %102
  %151 = getelementptr inbounds nuw i64, ptr addrspace(3) %147, i32 %104
  %152 = getelementptr inbounds nuw i64, ptr addrspace(3) %147, i32 %106
  %153 = getelementptr inbounds nuw i64, ptr addrspace(3) %147, i32 %108
  %154 = getelementptr inbounds nuw i64, ptr addrspace(3) %147, i32 %110
  %155 = getelementptr inbounds nuw i64, ptr addrspace(3) %147, i32 %112
  %156 = mul i32 %25, 324
  %157 = shl nsw i32 %41, 4
  %158 = add i32 %157, %156
  %159 = mul i32 %26, 324
  %160 = shl nsw i32 %42, 4
  %161 = add i32 %160, %159
  %162 = zext nneg i32 %12 to i64, !dbg !23
  %163 = sext <8 x i32> %40 to <8 x i64>, !dbg !23
  %164 = zext nneg i32 %39 to i64, !dbg !23
  %165 = sext i32 %70 to i64, !dbg !23
  %166 = sext i32 %69 to i64, !dbg !23
  %167 = zext nneg <8 x i32> %23 to <8 x i64>, !dbg !23
  %invariant.gep313 = getelementptr i64, ptr addrspace(1) %1, i64 %166, !dbg !23
  %invariant.gep315 = getelementptr i64, ptr addrspace(1) %1, i64 %166, !dbg !23
  %invariant.gep317 = getelementptr i64, ptr addrspace(1) %1, i64 %165, !dbg !23
  %invariant.gep319 = getelementptr i64, ptr addrspace(1) %1, i64 %165, !dbg !23
  %168 = getelementptr inbounds nuw i8, ptr addrspace(3) %91, i32 4
  %169 = getelementptr inbounds nuw i8, ptr addrspace(3) %91, i32 8
  %170 = getelementptr inbounds nuw i8, ptr addrspace(3) %91, i32 12
  %171 = insertelement <8 x i1> poison, i1 %34, i64 0, !dbg !24
  %172 = shufflevector <8 x i1> %171, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !24
  br label %173, !dbg !23

173:                                              ; preds = %8, %666
  %indvars.iv = phi i64 [ 0, %8 ], [ %indvars.iv.next, %666 ]
  %174 = phi <8 x i1> [ zeroinitializer, %8 ], [ %795, %666 ]
  %175 = phi <2 x float> [ zeroinitializer, %8 ], [ %935, %666 ]
  %176 = phi <2 x float> [ splat (float 0xFFF0000000000000), %8 ], [ %931, %666 ]
  %177 = phi <2 x float> [ zeroinitializer, %8 ], [ %934, %666 ]
  %178 = phi <2 x float> [ splat (float 0xFFF0000000000000), %8 ], [ %929, %666 ]
  %179 = phi <2 x float> [ zeroinitializer, %8 ], [ %933, %666 ]
  %180 = phi <2 x float> [ splat (float 0xFFF0000000000000), %8 ], [ %927, %666 ]
  %181 = phi <2 x float> [ zeroinitializer, %8 ], [ %932, %666 ]
  %182 = phi <2 x float> [ splat (float 0xFFF0000000000000), %8 ], [ %925, %666 ]
  %183 = or disjoint i64 %indvars.iv, %164, !dbg !25
  %184 = or disjoint i64 %183, 2, !dbg !25
  %185 = or disjoint i64 %indvars.iv, %162, !dbg !25
  %186 = icmp samesign ult i64 %183, 324, !dbg !26
  %187 = icmp samesign ult i64 %185, 324, !dbg !26
  %gep314 = getelementptr i64, ptr addrspace(1) %invariant.gep313, i64 %183, !dbg !27
  %gep316 = getelementptr i64, ptr addrspace(1) %invariant.gep315, i64 %184, !dbg !27
  %gep318 = getelementptr i64, ptr addrspace(1) %invariant.gep317, i64 %183, !dbg !27
  %gep320 = getelementptr i64, ptr addrspace(1) %invariant.gep319, i64 %184, !dbg !27
  %188 = and i1 %35, %186, !dbg !24
  %189 = and i1 %36, %186, !dbg !24
  %190 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !28
  %191 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$4 ld.global.L1::evict_last.L2::cache_hint.v2.b64 { $0, $1 }, [ $2 + 0 ], $3;", "=l,=l,l,l,b"(ptr addrspace(1) %gep314, i64 %190, i1 %188) #8, !dbg !28
  %192 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !28
  %193 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$4 ld.global.L1::evict_last.L2::cache_hint.v2.b64 { $0, $1 }, [ $2 + 0 ], $3;", "=l,=l,l,l,b"(ptr addrspace(1) %gep316, i64 %192, i1 %188) #8, !dbg !28
  %194 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !28
  %195 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$4 ld.global.L1::evict_last.L2::cache_hint.v2.b64 { $0, $1 }, [ $2 + 0 ], $3;", "=l,=l,l,l,b"(ptr addrspace(1) %gep318, i64 %194, i1 %189) #8, !dbg !28
  %196 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !28
  %197 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$4 ld.global.L1::evict_last.L2::cache_hint.v2.b64 { $0, $1 }, [ $2 + 0 ], $3;", "=l,=l,l,l,b"(ptr addrspace(1) %gep320, i64 %196, i1 %189) #8, !dbg !28
  %198 = trunc nuw nsw i64 %183 to i32, !dbg !29
  %199 = add i32 %71, %198, !dbg !29
  %200 = add i32 %72, %198, !dbg !29
  %201 = sext i32 %199 to i64, !dbg !30
  %202 = getelementptr float, ptr addrspace(1) %2, i64 %201, !dbg !30
  %203 = sext i32 %200 to i64, !dbg !30
  %204 = getelementptr float, ptr addrspace(1) %2, i64 %203, !dbg !30
  %205 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !31
  %206 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %202, i64 %205, i1 %188) #8, !dbg !31
  %207 = extractvalue { i32, i32, i32, i32 } %206, 0, !dbg !31
  %208 = extractvalue { i32, i32, i32, i32 } %206, 1, !dbg !31
  %209 = extractvalue { i32, i32, i32, i32 } %206, 2, !dbg !31
  %210 = extractvalue { i32, i32, i32, i32 } %206, 3, !dbg !31
  %211 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !31
  %212 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %204, i64 %211, i1 %189) #8, !dbg !31
  %213 = extractvalue { i32, i32, i32, i32 } %212, 0, !dbg !31
  %214 = extractvalue { i32, i32, i32, i32 } %212, 1, !dbg !31
  %215 = extractvalue { i32, i32, i32, i32 } %212, 2, !dbg !31
  %216 = extractvalue { i32, i32, i32, i32 } %212, 3, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  %217 = insertelement <4 x i32> poison, i32 %207, i64 0, !dbg !31
  %218 = insertelement <4 x i32> %217, i32 %208, i64 1, !dbg !31
  %219 = insertelement <4 x i32> %218, i32 %209, i64 2, !dbg !31
  %220 = insertelement <4 x i32> %219, i32 %210, i64 3, !dbg !31
  store <4 x i32> %220, ptr addrspace(3) %91, align 16, !dbg !31
  %221 = insertelement <4 x i32> poison, i32 %213, i64 0, !dbg !31
  %222 = insertelement <4 x i32> %221, i32 %214, i64 1, !dbg !31
  %223 = insertelement <4 x i32> %222, i32 %215, i64 2, !dbg !31
  %224 = insertelement <4 x i32> %223, i32 %216, i64 3, !dbg !31
  store <4 x i32> %224, ptr addrspace(3) %96, align 16, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  %225 = load float, ptr addrspace(3) %99, align 4, !dbg !31
  %226 = load float, ptr addrspace(3) %101, align 4, !dbg !31
  %227 = load float, ptr addrspace(3) %103, align 4, !dbg !31
  %228 = load float, ptr addrspace(3) %105, align 4, !dbg !31
  %229 = load float, ptr addrspace(3) %107, align 4, !dbg !31
  %230 = load float, ptr addrspace(3) %109, align 4, !dbg !31
  %231 = load float, ptr addrspace(3) %111, align 4, !dbg !31
  %232 = load float, ptr addrspace(3) %113, align 4, !dbg !31
  %233 = insertelement <8 x i64> poison, i64 %185, i64 0, !dbg !32
  %234 = shufflevector <8 x i64> %233, <8 x i64> poison, <8 x i32> zeroinitializer, !dbg !32
  %235 = sub nsw <8 x i64> %234, %163, !dbg !32
  %236 = icmp sgt <8 x i64> %235, zeroinitializer, !dbg !33
  %237 = select <8 x i1> %236, <8 x i64> splat (i64 16), <8 x i64> zeroinitializer, !dbg !34
  %238 = trunc <8 x i64> %235 to <8 x i32>, !dbg !35
  %239 = tail call <8 x i32> @llvm.abs.v8i32(<8 x i32> %238, i1 false), !dbg !35
  %240 = sext <8 x i32> %239 to <8 x i64>, !dbg !36
  %241 = icmp slt <8 x i32> %239, splat (i32 8), !dbg !36
  %242 = extractelement <8 x i32> %239, i64 0, !dbg !37
  %243 = sitofp i32 %242 to float, !dbg !37
  %244 = extractelement <8 x i32> %239, i64 1, !dbg !37
  %245 = sitofp i32 %244 to float, !dbg !37
  %246 = extractelement <8 x i32> %239, i64 2, !dbg !37
  %247 = sitofp i32 %246 to float, !dbg !37
  %248 = extractelement <8 x i32> %239, i64 3, !dbg !37
  %249 = sitofp i32 %248 to float, !dbg !37
  %250 = extractelement <8 x i32> %239, i64 4, !dbg !37
  %251 = sitofp i32 %250 to float, !dbg !37
  %252 = extractelement <8 x i32> %239, i64 5, !dbg !37
  %253 = sitofp i32 %252 to float, !dbg !37
  %254 = extractelement <8 x i32> %239, i64 6, !dbg !37
  %255 = sitofp i32 %254 to float, !dbg !37
  %256 = extractelement <8 x i32> %239, i64 7, !dbg !37
  %257 = sitofp i32 %256 to float, !dbg !37
  %258 = fmul float %243, 1.250000e-01, !dbg !38
  %259 = fmul float %245, 1.250000e-01, !dbg !38
  %260 = fmul float %247, 1.250000e-01, !dbg !38
  %261 = fmul float %249, 1.250000e-01, !dbg !38
  %262 = fmul float %251, 1.250000e-01, !dbg !38
  %263 = fmul float %253, 1.250000e-01, !dbg !38
  %264 = fmul float %255, 1.250000e-01, !dbg !38
  %265 = fmul float %257, 1.250000e-01, !dbg !38
  %266 = fcmp olt float %258, 0x3810000000000000, !dbg !39
  %267 = fmul float %258, 0x4160000000000000, !dbg !39
  %.02.i = select i1 %266, float %267, float %258, !dbg !39
  %i.i.0.i = select i1 %266, float -2.300000e+01, float 0.000000e+00, !dbg !39
  %268 = bitcast float %.02.i to i32, !dbg !39
  %269 = add i32 %268, -1059760811, !dbg !39
  %270 = and i32 %269, -8388608, !dbg !39
  %271 = sub i32 %268, %270, !dbg !39
  %272 = bitcast i32 %271 to float, !dbg !39
  %273 = sitofp i32 %270 to float, !dbg !39
  %274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not.i = icmp eq i32 %274, 0, !dbg !39
  %275 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %273, float 0x3E80000000000000, float %i.i.0.i) #8, !dbg !39
  %276 = tail call float @llvm.nvvm.fma.rn.f(float %273, float 0x3E80000000000000, float %i.i.0.i) #8, !dbg !39
  %.08.i = select i1 %.not.i, float %276, float %275, !dbg !39
  %277 = fadd float %272, -1.000000e+00, !dbg !39
  %278 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not1.i = icmp eq i32 %278, 0, !dbg !39
  %279 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %277, float 0x3FC2073EC0000000) #8, !dbg !39
  %280 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %277, float 0x3FC2073EC0000000) #8, !dbg !39
  %.010.i = select i1 %.not1.i, float %280, float %279, !dbg !39
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not2.i = icmp eq i32 %281, 0, !dbg !39
  %282 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %277, float 0xBFBF19B980000000) #8, !dbg !39
  %283 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %277, float 0xBFBF19B980000000) #8, !dbg !39
  %.011.i = select i1 %.not2.i, float %283, float %282, !dbg !39
  %284 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not3.i = icmp eq i32 %284, 0, !dbg !39
  %285 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %277, float 0x3FC1E52AA0000000) #8, !dbg !39
  %286 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %277, float 0x3FC1E52AA0000000) #8, !dbg !39
  %.012.i = select i1 %.not3.i, float %286, float %285, !dbg !39
  %287 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not4.i = icmp eq i32 %287, 0, !dbg !39
  %288 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %277, float 0xBFC55B1720000000) #8, !dbg !39
  %289 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %277, float 0xBFC55B1720000000) #8, !dbg !39
  %.09.i = select i1 %.not4.i, float %289, float %288, !dbg !39
  %290 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not5.i = icmp eq i32 %290, 0, !dbg !39
  %291 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %277, float 0x3FC99DA160000000) #8, !dbg !39
  %292 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %277, float 0x3FC99DA160000000) #8, !dbg !39
  %.05.i = select i1 %.not5.i, float %292, float %291, !dbg !39
  %293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not6.i = icmp eq i32 %293, 0, !dbg !39
  %294 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %277, float 0xBFCFFFE440000000) #8, !dbg !39
  %295 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %277, float 0xBFCFFFE440000000) #8, !dbg !39
  %.01.i = select i1 %.not6.i, float %295, float %294, !dbg !39
  %296 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not7.i = icmp eq i32 %296, 0, !dbg !39
  %297 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %277, float 0x3FD5554F00000000) #8, !dbg !39
  %298 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %277, float 0x3FD5554F00000000) #8, !dbg !39
  %.0.i = select i1 %.not7.i, float %298, float %297, !dbg !39
  %299 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not8.i = icmp eq i32 %299, 0, !dbg !39
  %300 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %277, float -5.000000e-01) #8, !dbg !39
  %301 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %277, float -5.000000e-01) #8, !dbg !39
  %.07.i = select i1 %.not8.i, float %301, float %300, !dbg !39
  %302 = fmul float %277, %.07.i, !dbg !39
  %303 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not9.i = icmp eq i32 %303, 0, !dbg !39
  %304 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %302, float %277, float %277) #8, !dbg !39
  %305 = tail call float @llvm.nvvm.fma.rn.f(float %302, float %277, float %277) #8, !dbg !39
  %.06.i = select i1 %.not9.i, float %305, float %304, !dbg !39
  %306 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not10.i = icmp eq i32 %306, 0, !dbg !39
  %307 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #8, !dbg !39
  %308 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #8, !dbg !39
  %.04.i = select i1 %.not10.i, float %308, float %307, !dbg !39
  %309 = icmp ugt i32 %268, 2139095039, !dbg !39
  br i1 %309, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !39

__nv_fmaf_rn.exit.i.i:                            ; preds = %173
  %310 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not11.i = icmp eq i32 %310, 0, !dbg !39
  %311 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !39
  %312 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !39
  %.03.i = select i1 %.not11.i, float %312, float %311, !dbg !39
  br label %__nv_logf.exit, !dbg !39

__nv_logf.exit:                                   ; preds = %173, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %173 ], !dbg !39
  %313 = fcmp olt float %259, 0x3810000000000000, !dbg !39
  %314 = fmul float %259, 0x4160000000000000, !dbg !39
  %.02.i36 = select i1 %313, float %314, float %259, !dbg !39
  %i.i.0.i37 = select i1 %313, float -2.300000e+01, float 0.000000e+00, !dbg !39
  %315 = bitcast float %.02.i36 to i32, !dbg !39
  %316 = add i32 %315, -1059760811, !dbg !39
  %317 = and i32 %316, -8388608, !dbg !39
  %318 = sub i32 %315, %317, !dbg !39
  %319 = bitcast i32 %318 to float, !dbg !39
  %320 = sitofp i32 %317 to float, !dbg !39
  %321 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not.i38 = icmp eq i32 %321, 0, !dbg !39
  %322 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %320, float 0x3E80000000000000, float %i.i.0.i37) #8, !dbg !39
  %323 = tail call float @llvm.nvvm.fma.rn.f(float %320, float 0x3E80000000000000, float %i.i.0.i37) #8, !dbg !39
  %.08.i39 = select i1 %.not.i38, float %323, float %322, !dbg !39
  %324 = fadd float %319, -1.000000e+00, !dbg !39
  %325 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not1.i40 = icmp eq i32 %325, 0, !dbg !39
  %326 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %324, float 0x3FC2073EC0000000) #8, !dbg !39
  %327 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %324, float 0x3FC2073EC0000000) #8, !dbg !39
  %.010.i41 = select i1 %.not1.i40, float %327, float %326, !dbg !39
  %328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not2.i42 = icmp eq i32 %328, 0, !dbg !39
  %329 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i41, float %324, float 0xBFBF19B980000000) #8, !dbg !39
  %330 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i41, float %324, float 0xBFBF19B980000000) #8, !dbg !39
  %.011.i43 = select i1 %.not2.i42, float %330, float %329, !dbg !39
  %331 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not3.i44 = icmp eq i32 %331, 0, !dbg !39
  %332 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i43, float %324, float 0x3FC1E52AA0000000) #8, !dbg !39
  %333 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i43, float %324, float 0x3FC1E52AA0000000) #8, !dbg !39
  %.012.i45 = select i1 %.not3.i44, float %333, float %332, !dbg !39
  %334 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not4.i46 = icmp eq i32 %334, 0, !dbg !39
  %335 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i45, float %324, float 0xBFC55B1720000000) #8, !dbg !39
  %336 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i45, float %324, float 0xBFC55B1720000000) #8, !dbg !39
  %.09.i47 = select i1 %.not4.i46, float %336, float %335, !dbg !39
  %337 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not5.i48 = icmp eq i32 %337, 0, !dbg !39
  %338 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i47, float %324, float 0x3FC99DA160000000) #8, !dbg !39
  %339 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i47, float %324, float 0x3FC99DA160000000) #8, !dbg !39
  %.05.i49 = select i1 %.not5.i48, float %339, float %338, !dbg !39
  %340 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not6.i50 = icmp eq i32 %340, 0, !dbg !39
  %341 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i49, float %324, float 0xBFCFFFE440000000) #8, !dbg !39
  %342 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i49, float %324, float 0xBFCFFFE440000000) #8, !dbg !39
  %.01.i51 = select i1 %.not6.i50, float %342, float %341, !dbg !39
  %343 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not7.i52 = icmp eq i32 %343, 0, !dbg !39
  %344 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i51, float %324, float 0x3FD5554F00000000) #8, !dbg !39
  %345 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i51, float %324, float 0x3FD5554F00000000) #8, !dbg !39
  %.0.i53 = select i1 %.not7.i52, float %345, float %344, !dbg !39
  %346 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not8.i54 = icmp eq i32 %346, 0, !dbg !39
  %347 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i53, float %324, float -5.000000e-01) #8, !dbg !39
  %348 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i53, float %324, float -5.000000e-01) #8, !dbg !39
  %.07.i55 = select i1 %.not8.i54, float %348, float %347, !dbg !39
  %349 = fmul float %324, %.07.i55, !dbg !39
  %350 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not9.i56 = icmp eq i32 %350, 0, !dbg !39
  %351 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %349, float %324, float %324) #8, !dbg !39
  %352 = tail call float @llvm.nvvm.fma.rn.f(float %349, float %324, float %324) #8, !dbg !39
  %.06.i57 = select i1 %.not9.i56, float %352, float %351, !dbg !39
  %353 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not10.i58 = icmp eq i32 %353, 0, !dbg !39
  %354 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i39, float 0x3FE62E4300000000, float %.06.i57) #8, !dbg !39
  %355 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i39, float 0x3FE62E4300000000, float %.06.i57) #8, !dbg !39
  %.04.i59 = select i1 %.not10.i58, float %355, float %354, !dbg !39
  %356 = icmp ugt i32 %315, 2139095039, !dbg !39
  br i1 %356, label %__nv_fmaf_rn.exit.i.i62, label %__nv_logf.exit65, !dbg !39

__nv_fmaf_rn.exit.i.i62:                          ; preds = %__nv_logf.exit
  %357 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not11.i63 = icmp eq i32 %357, 0, !dbg !39
  %358 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i36, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !39
  %359 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i36, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !39
  %.03.i64 = select i1 %.not11.i63, float %359, float %358, !dbg !39
  br label %__nv_logf.exit65, !dbg !39

__nv_logf.exit65:                                 ; preds = %__nv_logf.exit, %__nv_fmaf_rn.exit.i.i62
  %r.i.0.i60 = phi float [ %.03.i64, %__nv_fmaf_rn.exit.i.i62 ], [ %.04.i59, %__nv_logf.exit ], !dbg !39
  %360 = fcmp olt float %260, 0x3810000000000000, !dbg !39
  %361 = fmul float %260, 0x4160000000000000, !dbg !39
  %.02.i66 = select i1 %360, float %361, float %260, !dbg !39
  %i.i.0.i67 = select i1 %360, float -2.300000e+01, float 0.000000e+00, !dbg !39
  %362 = bitcast float %.02.i66 to i32, !dbg !39
  %363 = add i32 %362, -1059760811, !dbg !39
  %364 = and i32 %363, -8388608, !dbg !39
  %365 = sub i32 %362, %364, !dbg !39
  %366 = bitcast i32 %365 to float, !dbg !39
  %367 = sitofp i32 %364 to float, !dbg !39
  %368 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not.i68 = icmp eq i32 %368, 0, !dbg !39
  %369 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %367, float 0x3E80000000000000, float %i.i.0.i67) #8, !dbg !39
  %370 = tail call float @llvm.nvvm.fma.rn.f(float %367, float 0x3E80000000000000, float %i.i.0.i67) #8, !dbg !39
  %.08.i69 = select i1 %.not.i68, float %370, float %369, !dbg !39
  %371 = fadd float %366, -1.000000e+00, !dbg !39
  %372 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not1.i70 = icmp eq i32 %372, 0, !dbg !39
  %373 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %371, float 0x3FC2073EC0000000) #8, !dbg !39
  %374 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %371, float 0x3FC2073EC0000000) #8, !dbg !39
  %.010.i71 = select i1 %.not1.i70, float %374, float %373, !dbg !39
  %375 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not2.i72 = icmp eq i32 %375, 0, !dbg !39
  %376 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i71, float %371, float 0xBFBF19B980000000) #8, !dbg !39
  %377 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i71, float %371, float 0xBFBF19B980000000) #8, !dbg !39
  %.011.i73 = select i1 %.not2.i72, float %377, float %376, !dbg !39
  %378 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not3.i74 = icmp eq i32 %378, 0, !dbg !39
  %379 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i73, float %371, float 0x3FC1E52AA0000000) #8, !dbg !39
  %380 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i73, float %371, float 0x3FC1E52AA0000000) #8, !dbg !39
  %.012.i75 = select i1 %.not3.i74, float %380, float %379, !dbg !39
  %381 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not4.i76 = icmp eq i32 %381, 0, !dbg !39
  %382 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i75, float %371, float 0xBFC55B1720000000) #8, !dbg !39
  %383 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i75, float %371, float 0xBFC55B1720000000) #8, !dbg !39
  %.09.i77 = select i1 %.not4.i76, float %383, float %382, !dbg !39
  %384 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not5.i78 = icmp eq i32 %384, 0, !dbg !39
  %385 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i77, float %371, float 0x3FC99DA160000000) #8, !dbg !39
  %386 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i77, float %371, float 0x3FC99DA160000000) #8, !dbg !39
  %.05.i79 = select i1 %.not5.i78, float %386, float %385, !dbg !39
  %387 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not6.i80 = icmp eq i32 %387, 0, !dbg !39
  %388 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i79, float %371, float 0xBFCFFFE440000000) #8, !dbg !39
  %389 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i79, float %371, float 0xBFCFFFE440000000) #8, !dbg !39
  %.01.i81 = select i1 %.not6.i80, float %389, float %388, !dbg !39
  %390 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not7.i82 = icmp eq i32 %390, 0, !dbg !39
  %391 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i81, float %371, float 0x3FD5554F00000000) #8, !dbg !39
  %392 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i81, float %371, float 0x3FD5554F00000000) #8, !dbg !39
  %.0.i83 = select i1 %.not7.i82, float %392, float %391, !dbg !39
  %393 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not8.i84 = icmp eq i32 %393, 0, !dbg !39
  %394 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i83, float %371, float -5.000000e-01) #8, !dbg !39
  %395 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i83, float %371, float -5.000000e-01) #8, !dbg !39
  %.07.i85 = select i1 %.not8.i84, float %395, float %394, !dbg !39
  %396 = fmul float %371, %.07.i85, !dbg !39
  %397 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not9.i86 = icmp eq i32 %397, 0, !dbg !39
  %398 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %396, float %371, float %371) #8, !dbg !39
  %399 = tail call float @llvm.nvvm.fma.rn.f(float %396, float %371, float %371) #8, !dbg !39
  %.06.i87 = select i1 %.not9.i86, float %399, float %398, !dbg !39
  %400 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not10.i88 = icmp eq i32 %400, 0, !dbg !39
  %401 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i69, float 0x3FE62E4300000000, float %.06.i87) #8, !dbg !39
  %402 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i69, float 0x3FE62E4300000000, float %.06.i87) #8, !dbg !39
  %.04.i89 = select i1 %.not10.i88, float %402, float %401, !dbg !39
  %403 = icmp ugt i32 %362, 2139095039, !dbg !39
  br i1 %403, label %__nv_fmaf_rn.exit.i.i92, label %__nv_logf.exit95, !dbg !39

__nv_fmaf_rn.exit.i.i92:                          ; preds = %__nv_logf.exit65
  %404 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not11.i93 = icmp eq i32 %404, 0, !dbg !39
  %405 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i66, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !39
  %406 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i66, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !39
  %.03.i94 = select i1 %.not11.i93, float %406, float %405, !dbg !39
  br label %__nv_logf.exit95, !dbg !39

__nv_logf.exit95:                                 ; preds = %__nv_logf.exit65, %__nv_fmaf_rn.exit.i.i92
  %r.i.0.i90 = phi float [ %.03.i94, %__nv_fmaf_rn.exit.i.i92 ], [ %.04.i89, %__nv_logf.exit65 ], !dbg !39
  %407 = fcmp olt float %261, 0x3810000000000000, !dbg !39
  %408 = fmul float %261, 0x4160000000000000, !dbg !39
  %.02.i96 = select i1 %407, float %408, float %261, !dbg !39
  %i.i.0.i97 = select i1 %407, float -2.300000e+01, float 0.000000e+00, !dbg !39
  %409 = bitcast float %.02.i96 to i32, !dbg !39
  %410 = add i32 %409, -1059760811, !dbg !39
  %411 = and i32 %410, -8388608, !dbg !39
  %412 = sub i32 %409, %411, !dbg !39
  %413 = bitcast i32 %412 to float, !dbg !39
  %414 = sitofp i32 %411 to float, !dbg !39
  %415 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not.i98 = icmp eq i32 %415, 0, !dbg !39
  %416 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %414, float 0x3E80000000000000, float %i.i.0.i97) #8, !dbg !39
  %417 = tail call float @llvm.nvvm.fma.rn.f(float %414, float 0x3E80000000000000, float %i.i.0.i97) #8, !dbg !39
  %.08.i99 = select i1 %.not.i98, float %417, float %416, !dbg !39
  %418 = fadd float %413, -1.000000e+00, !dbg !39
  %419 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not1.i100 = icmp eq i32 %419, 0, !dbg !39
  %420 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %418, float 0x3FC2073EC0000000) #8, !dbg !39
  %421 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %418, float 0x3FC2073EC0000000) #8, !dbg !39
  %.010.i101 = select i1 %.not1.i100, float %421, float %420, !dbg !39
  %422 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not2.i102 = icmp eq i32 %422, 0, !dbg !39
  %423 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i101, float %418, float 0xBFBF19B980000000) #8, !dbg !39
  %424 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i101, float %418, float 0xBFBF19B980000000) #8, !dbg !39
  %.011.i103 = select i1 %.not2.i102, float %424, float %423, !dbg !39
  %425 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not3.i104 = icmp eq i32 %425, 0, !dbg !39
  %426 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i103, float %418, float 0x3FC1E52AA0000000) #8, !dbg !39
  %427 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i103, float %418, float 0x3FC1E52AA0000000) #8, !dbg !39
  %.012.i105 = select i1 %.not3.i104, float %427, float %426, !dbg !39
  %428 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not4.i106 = icmp eq i32 %428, 0, !dbg !39
  %429 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i105, float %418, float 0xBFC55B1720000000) #8, !dbg !39
  %430 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i105, float %418, float 0xBFC55B1720000000) #8, !dbg !39
  %.09.i107 = select i1 %.not4.i106, float %430, float %429, !dbg !39
  %431 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not5.i108 = icmp eq i32 %431, 0, !dbg !39
  %432 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i107, float %418, float 0x3FC99DA160000000) #8, !dbg !39
  %433 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i107, float %418, float 0x3FC99DA160000000) #8, !dbg !39
  %.05.i109 = select i1 %.not5.i108, float %433, float %432, !dbg !39
  %434 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not6.i110 = icmp eq i32 %434, 0, !dbg !39
  %435 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i109, float %418, float 0xBFCFFFE440000000) #8, !dbg !39
  %436 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i109, float %418, float 0xBFCFFFE440000000) #8, !dbg !39
  %.01.i111 = select i1 %.not6.i110, float %436, float %435, !dbg !39
  %437 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not7.i112 = icmp eq i32 %437, 0, !dbg !39
  %438 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i111, float %418, float 0x3FD5554F00000000) #8, !dbg !39
  %439 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i111, float %418, float 0x3FD5554F00000000) #8, !dbg !39
  %.0.i113 = select i1 %.not7.i112, float %439, float %438, !dbg !39
  %440 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not8.i114 = icmp eq i32 %440, 0, !dbg !39
  %441 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i113, float %418, float -5.000000e-01) #8, !dbg !39
  %442 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i113, float %418, float -5.000000e-01) #8, !dbg !39
  %.07.i115 = select i1 %.not8.i114, float %442, float %441, !dbg !39
  %443 = fmul float %418, %.07.i115, !dbg !39
  %444 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not9.i116 = icmp eq i32 %444, 0, !dbg !39
  %445 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %443, float %418, float %418) #8, !dbg !39
  %446 = tail call float @llvm.nvvm.fma.rn.f(float %443, float %418, float %418) #8, !dbg !39
  %.06.i117 = select i1 %.not9.i116, float %446, float %445, !dbg !39
  %447 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not10.i118 = icmp eq i32 %447, 0, !dbg !39
  %448 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i99, float 0x3FE62E4300000000, float %.06.i117) #8, !dbg !39
  %449 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i99, float 0x3FE62E4300000000, float %.06.i117) #8, !dbg !39
  %.04.i119 = select i1 %.not10.i118, float %449, float %448, !dbg !39
  %450 = icmp ugt i32 %409, 2139095039, !dbg !39
  br i1 %450, label %__nv_fmaf_rn.exit.i.i122, label %__nv_logf.exit125, !dbg !39

__nv_fmaf_rn.exit.i.i122:                         ; preds = %__nv_logf.exit95
  %451 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not11.i123 = icmp eq i32 %451, 0, !dbg !39
  %452 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i96, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !39
  %453 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i96, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !39
  %.03.i124 = select i1 %.not11.i123, float %453, float %452, !dbg !39
  br label %__nv_logf.exit125, !dbg !39

__nv_logf.exit125:                                ; preds = %__nv_logf.exit95, %__nv_fmaf_rn.exit.i.i122
  %r.i.0.i120 = phi float [ %.03.i124, %__nv_fmaf_rn.exit.i.i122 ], [ %.04.i119, %__nv_logf.exit95 ], !dbg !39
  %454 = fcmp olt float %262, 0x3810000000000000, !dbg !39
  %455 = fmul float %262, 0x4160000000000000, !dbg !39
  %.02.i126 = select i1 %454, float %455, float %262, !dbg !39
  %i.i.0.i127 = select i1 %454, float -2.300000e+01, float 0.000000e+00, !dbg !39
  %456 = bitcast float %.02.i126 to i32, !dbg !39
  %457 = add i32 %456, -1059760811, !dbg !39
  %458 = and i32 %457, -8388608, !dbg !39
  %459 = sub i32 %456, %458, !dbg !39
  %460 = bitcast i32 %459 to float, !dbg !39
  %461 = sitofp i32 %458 to float, !dbg !39
  %462 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not.i128 = icmp eq i32 %462, 0, !dbg !39
  %463 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %461, float 0x3E80000000000000, float %i.i.0.i127) #8, !dbg !39
  %464 = tail call float @llvm.nvvm.fma.rn.f(float %461, float 0x3E80000000000000, float %i.i.0.i127) #8, !dbg !39
  %.08.i129 = select i1 %.not.i128, float %464, float %463, !dbg !39
  %465 = fadd float %460, -1.000000e+00, !dbg !39
  %466 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not1.i130 = icmp eq i32 %466, 0, !dbg !39
  %467 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %465, float 0x3FC2073EC0000000) #8, !dbg !39
  %468 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %465, float 0x3FC2073EC0000000) #8, !dbg !39
  %.010.i131 = select i1 %.not1.i130, float %468, float %467, !dbg !39
  %469 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not2.i132 = icmp eq i32 %469, 0, !dbg !39
  %470 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i131, float %465, float 0xBFBF19B980000000) #8, !dbg !39
  %471 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i131, float %465, float 0xBFBF19B980000000) #8, !dbg !39
  %.011.i133 = select i1 %.not2.i132, float %471, float %470, !dbg !39
  %472 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not3.i134 = icmp eq i32 %472, 0, !dbg !39
  %473 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i133, float %465, float 0x3FC1E52AA0000000) #8, !dbg !39
  %474 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i133, float %465, float 0x3FC1E52AA0000000) #8, !dbg !39
  %.012.i135 = select i1 %.not3.i134, float %474, float %473, !dbg !39
  %475 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not4.i136 = icmp eq i32 %475, 0, !dbg !39
  %476 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i135, float %465, float 0xBFC55B1720000000) #8, !dbg !39
  %477 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i135, float %465, float 0xBFC55B1720000000) #8, !dbg !39
  %.09.i137 = select i1 %.not4.i136, float %477, float %476, !dbg !39
  %478 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not5.i138 = icmp eq i32 %478, 0, !dbg !39
  %479 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i137, float %465, float 0x3FC99DA160000000) #8, !dbg !39
  %480 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i137, float %465, float 0x3FC99DA160000000) #8, !dbg !39
  %.05.i139 = select i1 %.not5.i138, float %480, float %479, !dbg !39
  %481 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not6.i140 = icmp eq i32 %481, 0, !dbg !39
  %482 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i139, float %465, float 0xBFCFFFE440000000) #8, !dbg !39
  %483 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i139, float %465, float 0xBFCFFFE440000000) #8, !dbg !39
  %.01.i141 = select i1 %.not6.i140, float %483, float %482, !dbg !39
  %484 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not7.i142 = icmp eq i32 %484, 0, !dbg !39
  %485 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i141, float %465, float 0x3FD5554F00000000) #8, !dbg !39
  %486 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i141, float %465, float 0x3FD5554F00000000) #8, !dbg !39
  %.0.i143 = select i1 %.not7.i142, float %486, float %485, !dbg !39
  %487 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not8.i144 = icmp eq i32 %487, 0, !dbg !39
  %488 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i143, float %465, float -5.000000e-01) #8, !dbg !39
  %489 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i143, float %465, float -5.000000e-01) #8, !dbg !39
  %.07.i145 = select i1 %.not8.i144, float %489, float %488, !dbg !39
  %490 = fmul float %465, %.07.i145, !dbg !39
  %491 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not9.i146 = icmp eq i32 %491, 0, !dbg !39
  %492 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %490, float %465, float %465) #8, !dbg !39
  %493 = tail call float @llvm.nvvm.fma.rn.f(float %490, float %465, float %465) #8, !dbg !39
  %.06.i147 = select i1 %.not9.i146, float %493, float %492, !dbg !39
  %494 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not10.i148 = icmp eq i32 %494, 0, !dbg !39
  %495 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i129, float 0x3FE62E4300000000, float %.06.i147) #8, !dbg !39
  %496 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i129, float 0x3FE62E4300000000, float %.06.i147) #8, !dbg !39
  %.04.i149 = select i1 %.not10.i148, float %496, float %495, !dbg !39
  %497 = icmp ugt i32 %456, 2139095039, !dbg !39
  br i1 %497, label %__nv_fmaf_rn.exit.i.i152, label %__nv_logf.exit155, !dbg !39

__nv_fmaf_rn.exit.i.i152:                         ; preds = %__nv_logf.exit125
  %498 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not11.i153 = icmp eq i32 %498, 0, !dbg !39
  %499 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i126, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !39
  %500 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i126, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !39
  %.03.i154 = select i1 %.not11.i153, float %500, float %499, !dbg !39
  br label %__nv_logf.exit155, !dbg !39

__nv_logf.exit155:                                ; preds = %__nv_logf.exit125, %__nv_fmaf_rn.exit.i.i152
  %r.i.0.i150 = phi float [ %.03.i154, %__nv_fmaf_rn.exit.i.i152 ], [ %.04.i149, %__nv_logf.exit125 ], !dbg !39
  %501 = fcmp olt float %263, 0x3810000000000000, !dbg !39
  %502 = fmul float %263, 0x4160000000000000, !dbg !39
  %.02.i156 = select i1 %501, float %502, float %263, !dbg !39
  %i.i.0.i157 = select i1 %501, float -2.300000e+01, float 0.000000e+00, !dbg !39
  %503 = bitcast float %.02.i156 to i32, !dbg !39
  %504 = add i32 %503, -1059760811, !dbg !39
  %505 = and i32 %504, -8388608, !dbg !39
  %506 = sub i32 %503, %505, !dbg !39
  %507 = bitcast i32 %506 to float, !dbg !39
  %508 = sitofp i32 %505 to float, !dbg !39
  %509 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not.i158 = icmp eq i32 %509, 0, !dbg !39
  %510 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %508, float 0x3E80000000000000, float %i.i.0.i157) #8, !dbg !39
  %511 = tail call float @llvm.nvvm.fma.rn.f(float %508, float 0x3E80000000000000, float %i.i.0.i157) #8, !dbg !39
  %.08.i159 = select i1 %.not.i158, float %511, float %510, !dbg !39
  %512 = fadd float %507, -1.000000e+00, !dbg !39
  %513 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not1.i160 = icmp eq i32 %513, 0, !dbg !39
  %514 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %512, float 0x3FC2073EC0000000) #8, !dbg !39
  %515 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %512, float 0x3FC2073EC0000000) #8, !dbg !39
  %.010.i161 = select i1 %.not1.i160, float %515, float %514, !dbg !39
  %516 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not2.i162 = icmp eq i32 %516, 0, !dbg !39
  %517 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i161, float %512, float 0xBFBF19B980000000) #8, !dbg !39
  %518 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i161, float %512, float 0xBFBF19B980000000) #8, !dbg !39
  %.011.i163 = select i1 %.not2.i162, float %518, float %517, !dbg !39
  %519 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not3.i164 = icmp eq i32 %519, 0, !dbg !39
  %520 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i163, float %512, float 0x3FC1E52AA0000000) #8, !dbg !39
  %521 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i163, float %512, float 0x3FC1E52AA0000000) #8, !dbg !39
  %.012.i165 = select i1 %.not3.i164, float %521, float %520, !dbg !39
  %522 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not4.i166 = icmp eq i32 %522, 0, !dbg !39
  %523 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i165, float %512, float 0xBFC55B1720000000) #8, !dbg !39
  %524 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i165, float %512, float 0xBFC55B1720000000) #8, !dbg !39
  %.09.i167 = select i1 %.not4.i166, float %524, float %523, !dbg !39
  %525 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not5.i168 = icmp eq i32 %525, 0, !dbg !39
  %526 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i167, float %512, float 0x3FC99DA160000000) #8, !dbg !39
  %527 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i167, float %512, float 0x3FC99DA160000000) #8, !dbg !39
  %.05.i169 = select i1 %.not5.i168, float %527, float %526, !dbg !39
  %528 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not6.i170 = icmp eq i32 %528, 0, !dbg !39
  %529 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i169, float %512, float 0xBFCFFFE440000000) #8, !dbg !39
  %530 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i169, float %512, float 0xBFCFFFE440000000) #8, !dbg !39
  %.01.i171 = select i1 %.not6.i170, float %530, float %529, !dbg !39
  %531 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not7.i172 = icmp eq i32 %531, 0, !dbg !39
  %532 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i171, float %512, float 0x3FD5554F00000000) #8, !dbg !39
  %533 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i171, float %512, float 0x3FD5554F00000000) #8, !dbg !39
  %.0.i173 = select i1 %.not7.i172, float %533, float %532, !dbg !39
  %534 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not8.i174 = icmp eq i32 %534, 0, !dbg !39
  %535 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i173, float %512, float -5.000000e-01) #8, !dbg !39
  %536 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i173, float %512, float -5.000000e-01) #8, !dbg !39
  %.07.i175 = select i1 %.not8.i174, float %536, float %535, !dbg !39
  %537 = fmul float %512, %.07.i175, !dbg !39
  %538 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not9.i176 = icmp eq i32 %538, 0, !dbg !39
  %539 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %537, float %512, float %512) #8, !dbg !39
  %540 = tail call float @llvm.nvvm.fma.rn.f(float %537, float %512, float %512) #8, !dbg !39
  %.06.i177 = select i1 %.not9.i176, float %540, float %539, !dbg !39
  %541 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not10.i178 = icmp eq i32 %541, 0, !dbg !39
  %542 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i159, float 0x3FE62E4300000000, float %.06.i177) #8, !dbg !39
  %543 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i159, float 0x3FE62E4300000000, float %.06.i177) #8, !dbg !39
  %.04.i179 = select i1 %.not10.i178, float %543, float %542, !dbg !39
  %544 = icmp ugt i32 %503, 2139095039, !dbg !39
  br i1 %544, label %__nv_fmaf_rn.exit.i.i182, label %__nv_logf.exit185, !dbg !39

__nv_fmaf_rn.exit.i.i182:                         ; preds = %__nv_logf.exit155
  %545 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not11.i183 = icmp eq i32 %545, 0, !dbg !39
  %546 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i156, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !39
  %547 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i156, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !39
  %.03.i184 = select i1 %.not11.i183, float %547, float %546, !dbg !39
  br label %__nv_logf.exit185, !dbg !39

__nv_logf.exit185:                                ; preds = %__nv_logf.exit155, %__nv_fmaf_rn.exit.i.i182
  %r.i.0.i180 = phi float [ %.03.i184, %__nv_fmaf_rn.exit.i.i182 ], [ %.04.i179, %__nv_logf.exit155 ], !dbg !39
  %548 = fcmp olt float %264, 0x3810000000000000, !dbg !39
  %549 = fmul float %264, 0x4160000000000000, !dbg !39
  %.02.i186 = select i1 %548, float %549, float %264, !dbg !39
  %i.i.0.i187 = select i1 %548, float -2.300000e+01, float 0.000000e+00, !dbg !39
  %550 = bitcast float %.02.i186 to i32, !dbg !39
  %551 = add i32 %550, -1059760811, !dbg !39
  %552 = and i32 %551, -8388608, !dbg !39
  %553 = sub i32 %550, %552, !dbg !39
  %554 = bitcast i32 %553 to float, !dbg !39
  %555 = sitofp i32 %552 to float, !dbg !39
  %556 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not.i188 = icmp eq i32 %556, 0, !dbg !39
  %557 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %555, float 0x3E80000000000000, float %i.i.0.i187) #8, !dbg !39
  %558 = tail call float @llvm.nvvm.fma.rn.f(float %555, float 0x3E80000000000000, float %i.i.0.i187) #8, !dbg !39
  %.08.i189 = select i1 %.not.i188, float %558, float %557, !dbg !39
  %559 = fadd float %554, -1.000000e+00, !dbg !39
  %560 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not1.i190 = icmp eq i32 %560, 0, !dbg !39
  %561 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %559, float 0x3FC2073EC0000000) #8, !dbg !39
  %562 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %559, float 0x3FC2073EC0000000) #8, !dbg !39
  %.010.i191 = select i1 %.not1.i190, float %562, float %561, !dbg !39
  %563 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not2.i192 = icmp eq i32 %563, 0, !dbg !39
  %564 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i191, float %559, float 0xBFBF19B980000000) #8, !dbg !39
  %565 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i191, float %559, float 0xBFBF19B980000000) #8, !dbg !39
  %.011.i193 = select i1 %.not2.i192, float %565, float %564, !dbg !39
  %566 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not3.i194 = icmp eq i32 %566, 0, !dbg !39
  %567 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i193, float %559, float 0x3FC1E52AA0000000) #8, !dbg !39
  %568 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i193, float %559, float 0x3FC1E52AA0000000) #8, !dbg !39
  %.012.i195 = select i1 %.not3.i194, float %568, float %567, !dbg !39
  %569 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not4.i196 = icmp eq i32 %569, 0, !dbg !39
  %570 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i195, float %559, float 0xBFC55B1720000000) #8, !dbg !39
  %571 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i195, float %559, float 0xBFC55B1720000000) #8, !dbg !39
  %.09.i197 = select i1 %.not4.i196, float %571, float %570, !dbg !39
  %572 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not5.i198 = icmp eq i32 %572, 0, !dbg !39
  %573 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i197, float %559, float 0x3FC99DA160000000) #8, !dbg !39
  %574 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i197, float %559, float 0x3FC99DA160000000) #8, !dbg !39
  %.05.i199 = select i1 %.not5.i198, float %574, float %573, !dbg !39
  %575 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not6.i200 = icmp eq i32 %575, 0, !dbg !39
  %576 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i199, float %559, float 0xBFCFFFE440000000) #8, !dbg !39
  %577 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i199, float %559, float 0xBFCFFFE440000000) #8, !dbg !39
  %.01.i201 = select i1 %.not6.i200, float %577, float %576, !dbg !39
  %578 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not7.i202 = icmp eq i32 %578, 0, !dbg !39
  %579 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i201, float %559, float 0x3FD5554F00000000) #8, !dbg !39
  %580 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i201, float %559, float 0x3FD5554F00000000) #8, !dbg !39
  %.0.i203 = select i1 %.not7.i202, float %580, float %579, !dbg !39
  %581 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not8.i204 = icmp eq i32 %581, 0, !dbg !39
  %582 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i203, float %559, float -5.000000e-01) #8, !dbg !39
  %583 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i203, float %559, float -5.000000e-01) #8, !dbg !39
  %.07.i205 = select i1 %.not8.i204, float %583, float %582, !dbg !39
  %584 = fmul float %559, %.07.i205, !dbg !39
  %585 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not9.i206 = icmp eq i32 %585, 0, !dbg !39
  %586 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %584, float %559, float %559) #8, !dbg !39
  %587 = tail call float @llvm.nvvm.fma.rn.f(float %584, float %559, float %559) #8, !dbg !39
  %.06.i207 = select i1 %.not9.i206, float %587, float %586, !dbg !39
  %588 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not10.i208 = icmp eq i32 %588, 0, !dbg !39
  %589 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i189, float 0x3FE62E4300000000, float %.06.i207) #8, !dbg !39
  %590 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i189, float 0x3FE62E4300000000, float %.06.i207) #8, !dbg !39
  %.04.i209 = select i1 %.not10.i208, float %590, float %589, !dbg !39
  %591 = icmp ugt i32 %550, 2139095039, !dbg !39
  br i1 %591, label %__nv_fmaf_rn.exit.i.i212, label %__nv_logf.exit215, !dbg !39

__nv_fmaf_rn.exit.i.i212:                         ; preds = %__nv_logf.exit185
  %592 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not11.i213 = icmp eq i32 %592, 0, !dbg !39
  %593 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i186, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !39
  %594 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i186, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !39
  %.03.i214 = select i1 %.not11.i213, float %594, float %593, !dbg !39
  br label %__nv_logf.exit215, !dbg !39

__nv_logf.exit215:                                ; preds = %__nv_logf.exit185, %__nv_fmaf_rn.exit.i.i212
  %r.i.0.i210 = phi float [ %.03.i214, %__nv_fmaf_rn.exit.i.i212 ], [ %.04.i209, %__nv_logf.exit185 ], !dbg !39
  %595 = fcmp olt float %265, 0x3810000000000000, !dbg !39
  %596 = fmul float %265, 0x4160000000000000, !dbg !39
  %.02.i216 = select i1 %595, float %596, float %265, !dbg !39
  %i.i.0.i217 = select i1 %595, float -2.300000e+01, float 0.000000e+00, !dbg !39
  %597 = bitcast float %.02.i216 to i32, !dbg !39
  %598 = add i32 %597, -1059760811, !dbg !39
  %599 = and i32 %598, -8388608, !dbg !39
  %600 = sub i32 %597, %599, !dbg !39
  %601 = bitcast i32 %600 to float, !dbg !39
  %602 = sitofp i32 %599 to float, !dbg !39
  %603 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not.i218 = icmp eq i32 %603, 0, !dbg !39
  %604 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %602, float 0x3E80000000000000, float %i.i.0.i217) #8, !dbg !39
  %605 = tail call float @llvm.nvvm.fma.rn.f(float %602, float 0x3E80000000000000, float %i.i.0.i217) #8, !dbg !39
  %.08.i219 = select i1 %.not.i218, float %605, float %604, !dbg !39
  %606 = fadd float %601, -1.000000e+00, !dbg !39
  %607 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not1.i220 = icmp eq i32 %607, 0, !dbg !39
  %608 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %606, float 0x3FC2073EC0000000) #8, !dbg !39
  %609 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %606, float 0x3FC2073EC0000000) #8, !dbg !39
  %.010.i221 = select i1 %.not1.i220, float %609, float %608, !dbg !39
  %610 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not2.i222 = icmp eq i32 %610, 0, !dbg !39
  %611 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i221, float %606, float 0xBFBF19B980000000) #8, !dbg !39
  %612 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i221, float %606, float 0xBFBF19B980000000) #8, !dbg !39
  %.011.i223 = select i1 %.not2.i222, float %612, float %611, !dbg !39
  %613 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not3.i224 = icmp eq i32 %613, 0, !dbg !39
  %614 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i223, float %606, float 0x3FC1E52AA0000000) #8, !dbg !39
  %615 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i223, float %606, float 0x3FC1E52AA0000000) #8, !dbg !39
  %.012.i225 = select i1 %.not3.i224, float %615, float %614, !dbg !39
  %616 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not4.i226 = icmp eq i32 %616, 0, !dbg !39
  %617 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i225, float %606, float 0xBFC55B1720000000) #8, !dbg !39
  %618 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i225, float %606, float 0xBFC55B1720000000) #8, !dbg !39
  %.09.i227 = select i1 %.not4.i226, float %618, float %617, !dbg !39
  %619 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not5.i228 = icmp eq i32 %619, 0, !dbg !39
  %620 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i227, float %606, float 0x3FC99DA160000000) #8, !dbg !39
  %621 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i227, float %606, float 0x3FC99DA160000000) #8, !dbg !39
  %.05.i229 = select i1 %.not5.i228, float %621, float %620, !dbg !39
  %622 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not6.i230 = icmp eq i32 %622, 0, !dbg !39
  %623 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i229, float %606, float 0xBFCFFFE440000000) #8, !dbg !39
  %624 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i229, float %606, float 0xBFCFFFE440000000) #8, !dbg !39
  %.01.i231 = select i1 %.not6.i230, float %624, float %623, !dbg !39
  %625 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not7.i232 = icmp eq i32 %625, 0, !dbg !39
  %626 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i231, float %606, float 0x3FD5554F00000000) #8, !dbg !39
  %627 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i231, float %606, float 0x3FD5554F00000000) #8, !dbg !39
  %.0.i233 = select i1 %.not7.i232, float %627, float %626, !dbg !39
  %628 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not8.i234 = icmp eq i32 %628, 0, !dbg !39
  %629 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i233, float %606, float -5.000000e-01) #8, !dbg !39
  %630 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i233, float %606, float -5.000000e-01) #8, !dbg !39
  %.07.i235 = select i1 %.not8.i234, float %630, float %629, !dbg !39
  %631 = fmul float %606, %.07.i235, !dbg !39
  %632 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not9.i236 = icmp eq i32 %632, 0, !dbg !39
  %633 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %631, float %606, float %606) #8, !dbg !39
  %634 = tail call float @llvm.nvvm.fma.rn.f(float %631, float %606, float %606) #8, !dbg !39
  %.06.i237 = select i1 %.not9.i236, float %634, float %633, !dbg !39
  %635 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not10.i238 = icmp eq i32 %635, 0, !dbg !39
  %636 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i219, float 0x3FE62E4300000000, float %.06.i237) #8, !dbg !39
  %637 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i219, float 0x3FE62E4300000000, float %.06.i237) #8, !dbg !39
  %.04.i239 = select i1 %.not10.i238, float %637, float %636, !dbg !39
  %638 = icmp ugt i32 %597, 2139095039, !dbg !39
  br i1 %638, label %__nv_fmaf_rn.exit.i.i242, label %__nv_logf.exit245, !dbg !39

__nv_fmaf_rn.exit.i.i242:                         ; preds = %__nv_logf.exit215
  %639 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not11.i243 = icmp eq i32 %639, 0, !dbg !39
  %640 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i216, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !39
  %641 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i216, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !39
  %.03.i244 = select i1 %.not11.i243, float %641, float %640, !dbg !39
  br label %__nv_logf.exit245, !dbg !39

__nv_logf.exit245:                                ; preds = %__nv_logf.exit215, %__nv_fmaf_rn.exit.i.i242
  %r.i.0.i240 = phi float [ %.03.i244, %__nv_fmaf_rn.exit.i.i242 ], [ %.04.i239, %__nv_logf.exit215 ], !dbg !39
  %642 = insertelement <8 x float> poison, float %r.i.0.i, i64 0, !dbg !40
  %643 = insertelement <8 x float> %642, float %r.i.0.i60, i64 1, !dbg !40
  %644 = insertelement <8 x float> %643, float %r.i.0.i90, i64 2, !dbg !40
  %645 = insertelement <8 x float> %644, float %r.i.0.i120, i64 3, !dbg !40
  %646 = insertelement <8 x float> %645, float %r.i.0.i150, i64 4, !dbg !40
  %647 = insertelement <8 x float> %646, float %r.i.0.i180, i64 5, !dbg !40
  %648 = insertelement <8 x float> %647, float %r.i.0.i210, i64 6, !dbg !40
  %649 = insertelement <8 x float> %648, float %r.i.0.i240, i64 7, !dbg !40
  %650 = fmul <8 x float> %649, splat (float 0x3FD7154760000000), !dbg !40
  %651 = fmul <8 x float> %650, splat (float 8.000000e+00), !dbg !41
  %652 = fptosi <8 x float> %651 to <8 x i64>, !dbg !42
  %653 = add <8 x i64> %652, splat (i64 8), !dbg !43
  %654 = tail call <8 x i64> @llvm.smin.v8i64(<8 x i64> %653, <8 x i64> splat (i64 15)), !dbg !44
  %655 = select <8 x i1> %241, <8 x i64> %240, <8 x i64> %654, !dbg !48
  %656 = add nsw <8 x i64> %655, %237, !dbg !49
  %657 = lshr <8 x i64> %656, splat (i64 58), !dbg !50
  %658 = and <8 x i64> %657, splat (i64 32), !dbg !50
  %659 = add nsw <8 x i64> %658, %656, !dbg !50
  %660 = icmp ugt <8 x i64> %659, splat (i64 31), !dbg !51
  %661 = and <8 x i1> %37, %660, !dbg !52
  %662 = bitcast <8 x i1> %661 to i8, !dbg !53
  %663 = icmp ne i8 %662, 0, !dbg !53
  %664 = and i1 %187, %663, !dbg !53
  br i1 %664, label %665, label %666, !dbg !53

665:                                              ; preds = %__nv_logf.exit245
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 73, ptr nonnull @assertFunc_0, i64 1), !dbg !53
  unreachable, !dbg !53

666:                                              ; preds = %__nv_logf.exit245
  %667 = extractvalue { i64, i64 } %197, 1, !dbg !28
  %668 = extractvalue { i64, i64 } %197, 0, !dbg !28
  %669 = extractvalue { i64, i64 } %195, 1, !dbg !28
  %670 = extractvalue { i64, i64 } %195, 0, !dbg !28
  %671 = extractvalue { i64, i64 } %193, 1, !dbg !28
  %672 = extractvalue { i64, i64 } %193, 0, !dbg !28
  %673 = extractvalue { i64, i64 } %191, 1, !dbg !28
  %674 = extractvalue { i64, i64 } %191, 0, !dbg !28
  %675 = insertelement <8 x i64> poison, i64 %indvars.iv, i64 0, !dbg !25
  %676 = shufflevector <8 x i64> %675, <8 x i64> poison, <8 x i32> zeroinitializer, !dbg !25
  %677 = or disjoint <8 x i64> %676, %167, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !53
  %678 = extractelement <8 x i64> %659, i64 0, !dbg !54
  %.idx = shl i64 %678, 5, !dbg !54
  %gep = getelementptr i8, ptr addrspace(1) %invariant.gep, i64 %.idx, !dbg !54
  %679 = extractelement <8 x i64> %659, i64 1, !dbg !54
  %.idx15 = shl i64 %679, 5, !dbg !54
  %gep252 = getelementptr i8, ptr addrspace(1) %invariant.gep251, i64 %.idx15, !dbg !54
  %680 = extractelement <8 x i64> %659, i64 2, !dbg !54
  %.idx16 = shl i64 %680, 5, !dbg !54
  %gep254 = getelementptr i8, ptr addrspace(1) %invariant.gep253, i64 %.idx16, !dbg !54
  %681 = extractelement <8 x i64> %659, i64 3, !dbg !54
  %.idx17 = shl i64 %681, 5, !dbg !54
  %gep256 = getelementptr i8, ptr addrspace(1) %invariant.gep255, i64 %.idx17, !dbg !54
  %682 = extractelement <8 x i64> %659, i64 4, !dbg !54
  %.idx18 = shl i64 %682, 5, !dbg !54
  %gep258 = getelementptr i8, ptr addrspace(1) %invariant.gep257, i64 %.idx18, !dbg !54
  %683 = extractelement <8 x i64> %659, i64 5, !dbg !54
  %.idx19 = shl i64 %683, 5, !dbg !54
  %gep260 = getelementptr i8, ptr addrspace(1) %invariant.gep259, i64 %.idx19, !dbg !54
  %684 = extractelement <8 x i64> %659, i64 6, !dbg !54
  %.idx20 = shl i64 %684, 5, !dbg !54
  %gep262 = getelementptr i8, ptr addrspace(1) %invariant.gep261, i64 %.idx20, !dbg !54
  %685 = extractelement <8 x i64> %659, i64 7, !dbg !54
  %.idx21 = shl i64 %685, 5, !dbg !54
  %gep264 = getelementptr i8, ptr addrspace(1) %invariant.gep263, i64 %.idx21, !dbg !54
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !55
  %686 = ptrtoint ptr addrspace(1) %gep to i64, !dbg !55
  %687 = ptrtoint ptr addrspace(1) %gep252 to i64, !dbg !55
  %688 = ptrtoint ptr addrspace(1) %gep254 to i64, !dbg !55
  %689 = ptrtoint ptr addrspace(1) %gep256 to i64, !dbg !55
  %690 = ptrtoint ptr addrspace(1) %gep258 to i64, !dbg !55
  %691 = ptrtoint ptr addrspace(1) %gep260 to i64, !dbg !55
  %692 = ptrtoint ptr addrspace(1) %gep262 to i64, !dbg !55
  %693 = ptrtoint ptr addrspace(1) %gep264 to i64, !dbg !55
  %694 = insertelement <1 x i64> poison, i64 %686, i64 0, !dbg !55
  store <1 x i64> %694, ptr addrspace(3) %117, align 8, !dbg !55
  %695 = insertelement <1 x i64> poison, i64 %687, i64 0, !dbg !55
  store <1 x i64> %695, ptr addrspace(3) %121, align 8, !dbg !55
  %696 = insertelement <1 x i64> poison, i64 %688, i64 0, !dbg !55
  store <1 x i64> %696, ptr addrspace(3) %125, align 8, !dbg !55
  %697 = insertelement <1 x i64> poison, i64 %689, i64 0, !dbg !55
  store <1 x i64> %697, ptr addrspace(3) %129, align 8, !dbg !55
  %698 = insertelement <1 x i64> poison, i64 %690, i64 0, !dbg !55
  store <1 x i64> %698, ptr addrspace(3) %133, align 8, !dbg !55
  %699 = insertelement <1 x i64> poison, i64 %691, i64 0, !dbg !55
  store <1 x i64> %699, ptr addrspace(3) %137, align 8, !dbg !55
  %700 = insertelement <1 x i64> poison, i64 %692, i64 0, !dbg !55
  store <1 x i64> %700, ptr addrspace(3) %141, align 8, !dbg !55
  %701 = insertelement <1 x i64> poison, i64 %693, i64 0, !dbg !55
  store <1 x i64> %701, ptr addrspace(3) %145, align 8, !dbg !55
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !55
  %702 = load i64, ptr addrspace(3) %148, align 8, !dbg !55
  %703 = load i64, ptr addrspace(3) %149, align 8, !dbg !55
  %704 = load i64, ptr addrspace(3) %150, align 8, !dbg !55
  %705 = load i64, ptr addrspace(3) %151, align 8, !dbg !55
  %706 = load i64, ptr addrspace(3) %152, align 8, !dbg !55
  %707 = load i64, ptr addrspace(3) %153, align 8, !dbg !55
  %708 = load i64, ptr addrspace(3) %154, align 8, !dbg !55
  %709 = load i64, ptr addrspace(3) %155, align 8, !dbg !55
  %710 = inttoptr i64 %702 to ptr addrspace(1), !dbg !55
  %711 = inttoptr i64 %703 to ptr addrspace(1), !dbg !55
  %712 = inttoptr i64 %704 to ptr addrspace(1), !dbg !55
  %713 = inttoptr i64 %705 to ptr addrspace(1), !dbg !55
  %714 = inttoptr i64 %706 to ptr addrspace(1), !dbg !55
  %715 = inttoptr i64 %707 to ptr addrspace(1), !dbg !55
  %716 = inttoptr i64 %708 to ptr addrspace(1), !dbg !55
  %717 = inttoptr i64 %709 to ptr addrspace(1), !dbg !55
  %718 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !55
  %719 = insertelement <4 x i64> poison, i64 %674, i64 0, !dbg !56
  %720 = insertelement <4 x i64> %719, i64 %673, i64 1, !dbg !56
  %721 = insertelement <4 x i64> %720, i64 %672, i64 2, !dbg !56
  %722 = insertelement <4 x i64> %721, i64 %671, i64 3, !dbg !56
  %723 = sitofp <4 x i64> %722 to <4 x float>, !dbg !56
  %724 = fsub <4 x float> splat (float 1.000000e+00), %723, !dbg !57
  %725 = fmul <4 x float> %724, splat (float 0xC7EFFFFFE0000000), !dbg !58
  %726 = insertelement <4 x i64> poison, i64 %670, i64 0, !dbg !56
  %727 = insertelement <4 x i64> %726, i64 %669, i64 1, !dbg !56
  %728 = insertelement <4 x i64> %727, i64 %668, i64 2, !dbg !56
  %729 = insertelement <4 x i64> %728, i64 %667, i64 3, !dbg !56
  %730 = sitofp <4 x i64> %729 to <4 x float>, !dbg !56
  %731 = fsub <4 x float> splat (float 1.000000e+00), %730, !dbg !57
  %732 = fmul <4 x float> %731, splat (float 0xC7EFFFFFE0000000), !dbg !58
  %733 = icmp samesign ult <8 x i64> %677, splat (i64 324), !dbg !26
  %734 = and <8 x i1> %172, %733, !dbg !24
  %735 = extractelement <8 x i1> %734, i64 0, !dbg !59
  %736 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %710, i64 %718, i1 %735) #8, !dbg !55
  %737 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !55
  %738 = extractelement <8 x i1> %734, i64 1, !dbg !59
  %739 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %711, i64 %737, i1 %738) #8, !dbg !55
  %740 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !55
  %741 = extractelement <8 x i1> %734, i64 2, !dbg !59
  %742 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %712, i64 %740, i1 %741) #8, !dbg !55
  %743 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !55
  %744 = extractelement <8 x i1> %734, i64 3, !dbg !59
  %745 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %713, i64 %743, i1 %744) #8, !dbg !55
  %746 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !55
  %747 = extractelement <8 x i1> %734, i64 4, !dbg !59
  %748 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %714, i64 %746, i1 %747) #8, !dbg !55
  %749 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !55
  %750 = extractelement <8 x i1> %734, i64 5, !dbg !59
  %751 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %715, i64 %749, i1 %750) #8, !dbg !55
  %752 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !55
  %753 = extractelement <8 x i1> %734, i64 6, !dbg !59
  %754 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %716, i64 %752, i1 %753) #8, !dbg !55
  %755 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !55
  %756 = extractelement <8 x i1> %734, i64 7, !dbg !59
  %757 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %717, i64 %755, i1 %756) #8, !dbg !55
  %758 = insertelement <8 x i32> poison, i32 %736, i64 0, !dbg !55
  %759 = insertelement <8 x i32> %758, i32 %739, i64 1, !dbg !55
  %760 = insertelement <8 x i32> %759, i32 %742, i64 2, !dbg !55
  %761 = insertelement <8 x i32> %760, i32 %745, i64 3, !dbg !55
  %762 = insertelement <8 x i32> %761, i32 %748, i64 4, !dbg !55
  %763 = insertelement <8 x i32> %762, i32 %751, i64 5, !dbg !55
  %764 = insertelement <8 x i32> %763, i32 %754, i64 6, !dbg !55
  %765 = insertelement <8 x i32> %764, i32 %757, i64 7, !dbg !55
  %766 = bitcast <8 x i32> %765 to <8 x float>, !dbg !55
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !58
  store <4 x float> %725, ptr addrspace(3) %91, align 16, !dbg !58
  store <4 x float> %732, ptr addrspace(3) %96, align 16, !dbg !58
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !58
  %767 = load float, ptr addrspace(3) %99, align 4, !dbg !58
  %768 = load float, ptr addrspace(3) %101, align 4, !dbg !58
  %769 = load float, ptr addrspace(3) %103, align 4, !dbg !58
  %770 = load float, ptr addrspace(3) %105, align 4, !dbg !58
  %771 = load float, ptr addrspace(3) %107, align 4, !dbg !58
  %772 = load float, ptr addrspace(3) %109, align 4, !dbg !58
  %773 = load float, ptr addrspace(3) %111, align 4, !dbg !58
  %774 = load float, ptr addrspace(3) %113, align 4, !dbg !58
  %775 = insertelement <8 x float> poison, float %767, i64 0, !dbg !60
  %776 = insertelement <8 x float> %775, float %768, i64 1, !dbg !60
  %777 = insertelement <8 x float> %776, float %769, i64 2, !dbg !60
  %778 = insertelement <8 x float> %777, float %770, i64 3, !dbg !60
  %779 = insertelement <8 x float> %778, float %771, i64 4, !dbg !60
  %780 = insertelement <8 x float> %779, float %772, i64 5, !dbg !60
  %781 = insertelement <8 x float> %780, float %773, i64 6, !dbg !60
  %782 = insertelement <8 x float> %781, float %774, i64 7, !dbg !60
  %783 = fadd <8 x float> %782, %766, !dbg !60
  %784 = insertelement <8 x float> poison, float %225, i64 0, !dbg !61
  %785 = insertelement <8 x float> %784, float %226, i64 1, !dbg !61
  %786 = insertelement <8 x float> %785, float %227, i64 2, !dbg !61
  %787 = insertelement <8 x float> %786, float %228, i64 3, !dbg !61
  %788 = insertelement <8 x float> %787, float %229, i64 4, !dbg !61
  %789 = insertelement <8 x float> %788, float %230, i64 5, !dbg !61
  %790 = insertelement <8 x float> %789, float %231, i64 6, !dbg !61
  %791 = insertelement <8 x float> %790, float %232, i64 7, !dbg !61
  %792 = fadd <8 x float> %791, %783, !dbg !61
  %793 = fcmp une <8 x float> %792, splat (float 0xFFF0000000000000), !dbg !62
  %794 = select <8 x i1> %734, <8 x i1> %793, <8 x i1> zeroinitializer, !dbg !63
  %795 = or <8 x i1> %174, %794, !dbg !63
  %796 = extractelement <8 x float> %792, i64 0, !dbg !64
  %797 = extractelement <8 x float> %792, i64 1, !dbg !64
  %798 = extractelement <8 x float> %792, i64 2, !dbg !64
  %799 = extractelement <8 x float> %792, i64 3, !dbg !64
  %800 = extractelement <8 x float> %792, i64 4, !dbg !64
  %801 = extractelement <8 x float> %792, i64 5, !dbg !64
  %802 = extractelement <8 x float> %792, i64 6, !dbg !64
  %803 = extractelement <8 x float> %792, i64 7, !dbg !64
  %804 = fcmp uno <2 x float> %182, zeroinitializer, !dbg !66
  %805 = fcmp uno <2 x float> %180, zeroinitializer, !dbg !66
  %806 = fcmp uno <2 x float> %178, zeroinitializer, !dbg !66
  %807 = fcmp uno <2 x float> %176, zeroinitializer, !dbg !66
  %808 = shufflevector <8 x float> %792, <8 x float> poison, <2 x i32> <i32 0, i32 1>, !dbg !67
  %809 = fcmp ogt <2 x float> %182, %808, !dbg !67
  %810 = or <2 x i1> %804, %809, !dbg !68
  %811 = select <2 x i1> %810, <2 x float> %182, <2 x float> %808, !dbg !69
  %812 = fcmp oeq <2 x float> %811, splat (float 0xFFF0000000000000), !dbg !70
  %813 = extractelement <2 x float> %811, i64 0, !dbg !64
  %814 = fsub <2 x float> %182, %811, !dbg !71
  %815 = extractelement <2 x float> %814, i64 0, !dbg !71
  %816 = extractelement <2 x float> %811, i64 1, !dbg !64
  %817 = fsub <2 x float> %182, %811, !dbg !71
  %818 = extractelement <2 x float> %817, i64 1, !dbg !71
  %819 = fmul float %815, 0x3FF7154760000000, !dbg !72
  %820 = tail call float @llvm.nvvm.ex2.approx.f(float %819), !dbg !72
  %821 = fmul float %818, 0x3FF7154760000000, !dbg !72
  %822 = tail call float @llvm.nvvm.ex2.approx.f(float %821), !dbg !72
  %823 = insertelement <2 x float> poison, float %820, i64 0, !dbg !73
  %824 = insertelement <2 x float> %823, float %822, i64 1, !dbg !73
  %825 = select <2 x i1> %812, <2 x float> splat (float 1.000000e+00), <2 x float> %824, !dbg !73
  %826 = fsub float %796, %813, !dbg !64
  %827 = fsub float %797, %816, !dbg !64
  %828 = fmul float %826, 0x3FF7154760000000, !dbg !72
  %829 = tail call float @llvm.nvvm.ex2.approx.f(float %828), !dbg !72
  %830 = fmul float %827, 0x3FF7154760000000, !dbg !72
  %831 = tail call float @llvm.nvvm.ex2.approx.f(float %830), !dbg !72
  %832 = insertelement <2 x float> poison, float %829, i64 0, !dbg !74
  %833 = insertelement <2 x float> %832, float %831, i64 1, !dbg !74
  %834 = select <2 x i1> %812, <2 x float> splat (float 1.000000e+00), <2 x float> %833, !dbg !74
  %835 = fmul <2 x float> %181, %825, !dbg !75
  %836 = fadd <2 x float> %835, %834, !dbg !76
  %837 = shufflevector <8 x float> %792, <8 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !67
  %838 = fcmp ogt <2 x float> %180, %837, !dbg !67
  %839 = or <2 x i1> %805, %838, !dbg !68
  %840 = select <2 x i1> %839, <2 x float> %180, <2 x float> %837, !dbg !69
  %841 = fcmp oeq <2 x float> %840, splat (float 0xFFF0000000000000), !dbg !70
  %842 = extractelement <2 x float> %840, i64 0, !dbg !64
  %843 = fsub <2 x float> %180, %840, !dbg !71
  %844 = extractelement <2 x float> %843, i64 0, !dbg !71
  %845 = extractelement <2 x float> %840, i64 1, !dbg !64
  %846 = fsub <2 x float> %180, %840, !dbg !71
  %847 = extractelement <2 x float> %846, i64 1, !dbg !71
  %848 = fmul float %844, 0x3FF7154760000000, !dbg !72
  %849 = tail call float @llvm.nvvm.ex2.approx.f(float %848), !dbg !72
  %850 = fmul float %847, 0x3FF7154760000000, !dbg !72
  %851 = tail call float @llvm.nvvm.ex2.approx.f(float %850), !dbg !72
  %852 = insertelement <2 x float> poison, float %849, i64 0, !dbg !73
  %853 = insertelement <2 x float> %852, float %851, i64 1, !dbg !73
  %854 = select <2 x i1> %841, <2 x float> splat (float 1.000000e+00), <2 x float> %853, !dbg !73
  %855 = fsub float %798, %842, !dbg !64
  %856 = fsub float %799, %845, !dbg !64
  %857 = fmul float %855, 0x3FF7154760000000, !dbg !72
  %858 = tail call float @llvm.nvvm.ex2.approx.f(float %857), !dbg !72
  %859 = fmul float %856, 0x3FF7154760000000, !dbg !72
  %860 = tail call float @llvm.nvvm.ex2.approx.f(float %859), !dbg !72
  %861 = insertelement <2 x float> poison, float %858, i64 0, !dbg !74
  %862 = insertelement <2 x float> %861, float %860, i64 1, !dbg !74
  %863 = select <2 x i1> %841, <2 x float> splat (float 1.000000e+00), <2 x float> %862, !dbg !74
  %864 = fmul <2 x float> %179, %854, !dbg !75
  %865 = fadd <2 x float> %864, %863, !dbg !76
  %866 = shufflevector <8 x float> %792, <8 x float> poison, <2 x i32> <i32 4, i32 5>, !dbg !67
  %867 = fcmp ogt <2 x float> %178, %866, !dbg !67
  %868 = or <2 x i1> %806, %867, !dbg !68
  %869 = select <2 x i1> %868, <2 x float> %178, <2 x float> %866, !dbg !69
  %870 = fcmp oeq <2 x float> %869, splat (float 0xFFF0000000000000), !dbg !70
  %871 = extractelement <2 x float> %869, i64 0, !dbg !64
  %872 = fsub <2 x float> %178, %869, !dbg !71
  %873 = extractelement <2 x float> %872, i64 0, !dbg !71
  %874 = extractelement <2 x float> %869, i64 1, !dbg !64
  %875 = fsub <2 x float> %178, %869, !dbg !71
  %876 = extractelement <2 x float> %875, i64 1, !dbg !71
  %877 = fmul float %873, 0x3FF7154760000000, !dbg !72
  %878 = tail call float @llvm.nvvm.ex2.approx.f(float %877), !dbg !72
  %879 = fmul float %876, 0x3FF7154760000000, !dbg !72
  %880 = tail call float @llvm.nvvm.ex2.approx.f(float %879), !dbg !72
  %881 = insertelement <2 x float> poison, float %878, i64 0, !dbg !73
  %882 = insertelement <2 x float> %881, float %880, i64 1, !dbg !73
  %883 = select <2 x i1> %870, <2 x float> splat (float 1.000000e+00), <2 x float> %882, !dbg !73
  %884 = fsub float %800, %871, !dbg !64
  %885 = fsub float %801, %874, !dbg !64
  %886 = fmul float %884, 0x3FF7154760000000, !dbg !72
  %887 = tail call float @llvm.nvvm.ex2.approx.f(float %886), !dbg !72
  %888 = fmul float %885, 0x3FF7154760000000, !dbg !72
  %889 = tail call float @llvm.nvvm.ex2.approx.f(float %888), !dbg !72
  %890 = insertelement <2 x float> poison, float %887, i64 0, !dbg !74
  %891 = insertelement <2 x float> %890, float %889, i64 1, !dbg !74
  %892 = select <2 x i1> %870, <2 x float> splat (float 1.000000e+00), <2 x float> %891, !dbg !74
  %893 = fmul <2 x float> %177, %883, !dbg !75
  %894 = fadd <2 x float> %893, %892, !dbg !76
  %895 = shufflevector <8 x float> %792, <8 x float> poison, <2 x i32> <i32 6, i32 7>, !dbg !67
  %896 = fcmp ogt <2 x float> %176, %895, !dbg !67
  %897 = or <2 x i1> %807, %896, !dbg !68
  %898 = select <2 x i1> %897, <2 x float> %176, <2 x float> %895, !dbg !69
  %899 = fcmp oeq <2 x float> %898, splat (float 0xFFF0000000000000), !dbg !70
  %900 = extractelement <2 x float> %898, i64 0, !dbg !64
  %901 = fsub <2 x float> %176, %898, !dbg !71
  %902 = extractelement <2 x float> %901, i64 0, !dbg !71
  %903 = extractelement <2 x float> %898, i64 1, !dbg !64
  %904 = fsub <2 x float> %176, %898, !dbg !71
  %905 = extractelement <2 x float> %904, i64 1, !dbg !71
  %906 = fmul float %902, 0x3FF7154760000000, !dbg !72
  %907 = tail call float @llvm.nvvm.ex2.approx.f(float %906), !dbg !72
  %908 = fmul float %905, 0x3FF7154760000000, !dbg !72
  %909 = tail call float @llvm.nvvm.ex2.approx.f(float %908), !dbg !72
  %910 = insertelement <2 x float> poison, float %907, i64 0, !dbg !73
  %911 = insertelement <2 x float> %910, float %909, i64 1, !dbg !73
  %912 = select <2 x i1> %899, <2 x float> splat (float 1.000000e+00), <2 x float> %911, !dbg !73
  %913 = fsub float %802, %900, !dbg !64
  %914 = fsub float %803, %903, !dbg !64
  %915 = fmul float %913, 0x3FF7154760000000, !dbg !72
  %916 = tail call float @llvm.nvvm.ex2.approx.f(float %915), !dbg !72
  %917 = fmul float %914, 0x3FF7154760000000, !dbg !72
  %918 = tail call float @llvm.nvvm.ex2.approx.f(float %917), !dbg !72
  %919 = insertelement <2 x float> poison, float %916, i64 0, !dbg !74
  %920 = insertelement <2 x float> %919, float %918, i64 1, !dbg !74
  %921 = select <2 x i1> %899, <2 x float> splat (float 1.000000e+00), <2 x float> %920, !dbg !74
  %922 = fmul <2 x float> %175, %912, !dbg !75
  %923 = fadd <2 x float> %922, %921, !dbg !76
  %924 = shufflevector <8 x i1> %734, <8 x i1> poison, <2 x i32> <i32 0, i32 1>, !dbg !77
  %925 = select <2 x i1> %924, <2 x float> %811, <2 x float> %182, !dbg !77
  %926 = shufflevector <8 x i1> %734, <8 x i1> poison, <2 x i32> <i32 2, i32 3>, !dbg !77
  %927 = select <2 x i1> %926, <2 x float> %840, <2 x float> %180, !dbg !77
  %928 = shufflevector <8 x i1> %734, <8 x i1> poison, <2 x i32> <i32 4, i32 5>, !dbg !77
  %929 = select <2 x i1> %928, <2 x float> %869, <2 x float> %178, !dbg !77
  %930 = shufflevector <8 x i1> %734, <8 x i1> poison, <2 x i32> <i32 6, i32 7>, !dbg !77
  %931 = select <2 x i1> %930, <2 x float> %898, <2 x float> %176, !dbg !77
  %932 = select <2 x i1> %924, <2 x float> %836, <2 x float> %181, !dbg !59
  %933 = select <2 x i1> %926, <2 x float> %865, <2 x float> %179, !dbg !59
  %934 = select <2 x i1> %928, <2 x float> %894, <2 x float> %177, !dbg !59
  %935 = select <2 x i1> %930, <2 x float> %923, <2 x float> %175, !dbg !59
  %936 = add i32 %158, %198, !dbg !78
  %937 = add i32 %161, %198, !dbg !78
  %938 = sext i32 %936 to i64, !dbg !79
  %939 = getelementptr float, ptr addrspace(1) %3, i64 %938, !dbg !79
  %940 = sext i32 %937 to i64, !dbg !79
  %941 = getelementptr float, ptr addrspace(1) %3, i64 %940, !dbg !79
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !80
  %942 = extractelement <8 x float> %783, i64 0, !dbg !80
  store float %942, ptr addrspace(3) %99, align 4, !dbg !80
  %943 = extractelement <8 x float> %783, i64 1, !dbg !80
  store float %943, ptr addrspace(3) %101, align 4, !dbg !80
  %944 = extractelement <8 x float> %783, i64 2, !dbg !80
  store float %944, ptr addrspace(3) %103, align 4, !dbg !80
  %945 = extractelement <8 x float> %783, i64 3, !dbg !80
  store float %945, ptr addrspace(3) %105, align 4, !dbg !80
  %946 = extractelement <8 x float> %783, i64 4, !dbg !80
  store float %946, ptr addrspace(3) %107, align 4, !dbg !80
  %947 = extractelement <8 x float> %783, i64 5, !dbg !80
  store float %947, ptr addrspace(3) %109, align 4, !dbg !80
  %948 = extractelement <8 x float> %783, i64 6, !dbg !80
  store float %948, ptr addrspace(3) %111, align 4, !dbg !80
  %949 = extractelement <8 x float> %783, i64 7, !dbg !80
  store float %949, ptr addrspace(3) %113, align 4, !dbg !80
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !80
  %950 = load <4 x i32>, ptr addrspace(3) %96, align 16, !dbg !80
  %.extract = load i32, ptr addrspace(3) %91, align 16, !dbg !80
  %.extract29 = load i32, ptr addrspace(3) %168, align 4, !dbg !80
  %.extract30 = load i32, ptr addrspace(3) %169, align 8, !dbg !80
  %.extract31 = load i32, ptr addrspace(3) %170, align 4, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract29, i32 %.extract30, i32 %.extract31, ptr addrspace(1) %939, i1 %188) #8, !dbg !80
  %.extract32 = extractelement <4 x i32> %950, i64 0, !dbg !80
  %.extract33 = extractelement <4 x i32> %950, i64 1, !dbg !80
  %.extract34 = extractelement <4 x i32> %950, i64 2, !dbg !80
  %.extract35 = extractelement <4 x i32> %950, i64 3, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract32, i32 %.extract33, i32 %.extract34, i32 %.extract35, ptr addrspace(1) %941, i1 %189) #8, !dbg !80
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !23
  %951 = icmp samesign ult i64 %indvars.iv, 260, !dbg !23
  br i1 %951, label %173, label %952, !dbg !23

952:                                              ; preds = %666
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !81
  %953 = bitcast <8 x i1> %795 to i8, !dbg !83
  %954 = icmp ne i8 %953, 0, !dbg !83
  %955 = zext i1 %954 to i8, !dbg !83
  %956 = shl nuw nsw i32 %12, 3, !dbg !81
  %957 = or disjoint i32 %956, %17, !dbg !81
  %958 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %957, !dbg !81
  %959 = insertelement <1 x i8> poison, i8 %955, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %958, <1 x i8> %959, i1 true) #8, !dbg !81
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !81
  %960 = icmp samesign ult i32 %11, 512, !dbg !81
  %961 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %11, !dbg !81
  %962 = tail call i8 asm sideeffect "@$2 ld.shared.b8 $0, [ $1 + 0 ];", "=h,r,b"(ptr addrspace(3) %961, i1 %960) #8, !dbg !81
  %963 = zext i8 %962 to i32, !dbg !81
  %964 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %963, i32 4, i32 31), !dbg !81
  %965 = trunc i32 %964 to i8, !dbg !81
  %966 = or i8 %962, %965, !dbg !83
  %967 = zext i8 %966 to i32, !dbg !81
  %968 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %967, i32 2, i32 31), !dbg !81
  %969 = trunc i32 %968 to i8, !dbg !81
  %970 = or i8 %966, %969, !dbg !83
  %971 = zext i8 %970 to i32, !dbg !81
  %972 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %971, i32 1, i32 31), !dbg !81
  %973 = trunc i32 %972 to i8, !dbg !81
  %974 = or i8 %970, %973, !dbg !83
  %975 = and i32 %11, 519, !dbg !81
  %976 = icmp eq i32 %975, 0, !dbg !81
  %977 = insertelement <1 x i8> poison, i8 %974, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %961, <1 x i8> %977, i1 %976) #8, !dbg !81
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !81
  %978 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %956, !dbg !81
  %979 = load i8, ptr addrspace(3) %978, align 8, !dbg !81
  %.not5 = icmp eq i8 %979, 0, !dbg !84
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !85
  %980 = extractelement <2 x float> %925, i64 0, !dbg !87
  %981 = extractelement <2 x float> %925, i64 1, !dbg !87
  %982 = fcmp ogt float %980, %981, !dbg !87
  %983 = fcmp uno float %980, 0.000000e+00, !dbg !88
  %984 = or i1 %982, %983, !dbg !89
  %985 = select i1 %984, float %980, float %981, !dbg !90
  %986 = extractelement <2 x float> %927, i64 0, !dbg !87
  %987 = fcmp ogt float %985, %986, !dbg !87
  %988 = fcmp uno float %985, 0.000000e+00, !dbg !88
  %989 = or i1 %987, %988, !dbg !89
  %990 = select i1 %989, float %985, float %986, !dbg !90
  %991 = extractelement <2 x float> %927, i64 1, !dbg !87
  %992 = fcmp ogt float %990, %991, !dbg !87
  %993 = fcmp uno float %990, 0.000000e+00, !dbg !88
  %994 = or i1 %992, %993, !dbg !89
  %995 = select i1 %994, float %990, float %991, !dbg !90
  %996 = extractelement <2 x float> %929, i64 0, !dbg !87
  %997 = fcmp ogt float %995, %996, !dbg !87
  %998 = fcmp uno float %995, 0.000000e+00, !dbg !88
  %999 = or i1 %997, %998, !dbg !89
  %1000 = select i1 %999, float %995, float %996, !dbg !90
  %1001 = extractelement <2 x float> %929, i64 1, !dbg !87
  %1002 = fcmp ogt float %1000, %1001, !dbg !87
  %1003 = fcmp uno float %1000, 0.000000e+00, !dbg !88
  %1004 = or i1 %1002, %1003, !dbg !89
  %1005 = select i1 %1004, float %1000, float %1001, !dbg !90
  %1006 = extractelement <2 x float> %931, i64 0, !dbg !87
  %1007 = fcmp ogt float %1005, %1006, !dbg !87
  %1008 = fcmp uno float %1005, 0.000000e+00, !dbg !88
  %1009 = or i1 %1007, %1008, !dbg !89
  %1010 = select i1 %1009, float %1005, float %1006, !dbg !90
  %1011 = extractelement <2 x float> %931, i64 1, !dbg !87
  %1012 = fcmp ogt float %1010, %1011, !dbg !87
  %1013 = fcmp uno float %1010, 0.000000e+00, !dbg !88
  %1014 = or i1 %1012, %1013, !dbg !89
  %1015 = select i1 %1014, float %1010, float %1011, !dbg !90
  %1016 = getelementptr float, ptr addrspace(3) @global_smem, i32 %957, !dbg !85
  %1017 = bitcast float %1015 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1016, <1 x i32> %1017, i1 true) #8, !dbg !85
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !85
  %1018 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !85
  %1019 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1018, i1 %960) #8, !dbg !85
  %1020 = bitcast i32 %1019 to float, !dbg !85
  %1021 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1019, i32 4, i32 31), !dbg !85
  %1022 = bitcast i32 %1021 to float, !dbg !85
  %1023 = fcmp ogt float %1020, %1022, !dbg !87
  %1024 = fcmp uno float %1020, 0.000000e+00, !dbg !88
  %1025 = or i1 %1024, %1023, !dbg !89
  %1026 = select i1 %1025, float %1020, float %1022, !dbg !90
  %1027 = bitcast float %1026 to i32, !dbg !85
  %1028 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1027, i32 2, i32 31), !dbg !85
  %1029 = bitcast i32 %1028 to float, !dbg !85
  %1030 = fcmp ogt float %1026, %1029, !dbg !87
  %1031 = fcmp uno float %1026, 0.000000e+00, !dbg !88
  %1032 = or i1 %1030, %1031, !dbg !89
  %1033 = select i1 %1032, float %1026, float %1029, !dbg !90
  %1034 = bitcast float %1033 to i32, !dbg !85
  %1035 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1034, i32 1, i32 31), !dbg !85
  %1036 = bitcast i32 %1035 to float, !dbg !85
  %1037 = fcmp ogt float %1033, %1036, !dbg !87
  %1038 = fcmp uno float %1033, 0.000000e+00, !dbg !88
  %1039 = or i1 %1037, %1038, !dbg !89
  %1040 = select i1 %1039, i32 %1034, i32 %1035, !dbg !90
  %1041 = insertelement <1 x i32> poison, i32 %1040, i64 0, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1018, <1 x i32> %1041, i1 %976) #8, !dbg !85
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !85
  %1042 = getelementptr float, ptr addrspace(3) @global_smem, i32 %956, !dbg !85
  %1043 = load float, ptr addrspace(3) %1042, align 16, !dbg !85
  %1044 = fcmp oeq float %1043, 0xFFF0000000000000, !dbg !91
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !92
  %1045 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %12, !dbg !92
  store float %1043, ptr addrspace(3) %1045, align 4, !dbg !92
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !92
  %1046 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14, !dbg !92
  %1047 = load float, ptr addrspace(3) %1046, align 4, !dbg !92
  %1048 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %15, !dbg !92
  %1049 = load float, ptr addrspace(3) %1048, align 4, !dbg !92
  %1050 = fsub float %980, %1043, !dbg !92
  %1051 = fsub float %981, %1043, !dbg !92
  %1052 = fsub float %986, %1043, !dbg !92
  %1053 = fsub float %991, %1043, !dbg !92
  %1054 = fsub float %996, %1043, !dbg !92
  %1055 = fsub float %1001, %1043, !dbg !92
  %1056 = fsub float %1006, %1043, !dbg !92
  %1057 = fsub float %1011, %1043, !dbg !92
  %1058 = fmul float %1050, 0x3FF7154760000000, !dbg !93
  %1059 = select i1 %1044, float 0.000000e+00, float %1058, !dbg !94
  %1060 = tail call float @llvm.nvvm.ex2.approx.f(float %1059), !dbg !93
  %1061 = fmul float %1051, 0x3FF7154760000000, !dbg !93
  %1062 = select i1 %1044, float 0.000000e+00, float %1061, !dbg !94
  %1063 = tail call float @llvm.nvvm.ex2.approx.f(float %1062), !dbg !93
  %1064 = fmul float %1052, 0x3FF7154760000000, !dbg !93
  %1065 = select i1 %1044, float 0.000000e+00, float %1064, !dbg !94
  %1066 = tail call float @llvm.nvvm.ex2.approx.f(float %1065), !dbg !93
  %1067 = fmul float %1053, 0x3FF7154760000000, !dbg !93
  %1068 = select i1 %1044, float 0.000000e+00, float %1067, !dbg !94
  %1069 = tail call float @llvm.nvvm.ex2.approx.f(float %1068), !dbg !93
  %1070 = fmul float %1054, 0x3FF7154760000000, !dbg !93
  %1071 = select i1 %1044, float 0.000000e+00, float %1070, !dbg !94
  %1072 = tail call float @llvm.nvvm.ex2.approx.f(float %1071), !dbg !93
  %1073 = fmul float %1055, 0x3FF7154760000000, !dbg !93
  %1074 = select i1 %1044, float 0.000000e+00, float %1073, !dbg !94
  %1075 = tail call float @llvm.nvvm.ex2.approx.f(float %1074), !dbg !93
  %1076 = fmul float %1056, 0x3FF7154760000000, !dbg !93
  %1077 = select i1 %1044, float 0.000000e+00, float %1076, !dbg !94
  %1078 = tail call float @llvm.nvvm.ex2.approx.f(float %1077), !dbg !93
  %1079 = fmul float %1057, 0x3FF7154760000000, !dbg !93
  %1080 = select i1 %1044, float 0.000000e+00, float %1079, !dbg !94
  %1081 = tail call float @llvm.nvvm.ex2.approx.f(float %1080), !dbg !93
  %1082 = insertelement <2 x float> poison, float %1060, i64 0, !dbg !95
  %1083 = insertelement <2 x float> %1082, float %1063, i64 1, !dbg !95
  %1084 = fmul <2 x float> %932, %1083, !dbg !95
  %1085 = insertelement <2 x float> poison, float %1066, i64 0, !dbg !95
  %1086 = insertelement <2 x float> %1085, float %1069, i64 1, !dbg !95
  %1087 = fmul <2 x float> %933, %1086, !dbg !95
  %1088 = insertelement <2 x float> poison, float %1072, i64 0, !dbg !95
  %1089 = insertelement <2 x float> %1088, float %1075, i64 1, !dbg !95
  %1090 = fmul <2 x float> %934, %1089, !dbg !95
  %1091 = insertelement <2 x float> poison, float %1078, i64 0, !dbg !95
  %1092 = insertelement <2 x float> %1091, float %1081, i64 1, !dbg !95
  %1093 = fmul <2 x float> %935, %1092, !dbg !95
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !96
  %shift = shufflevector <2 x float> %1084, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !99
  %1094 = fadd <2 x float> %1084, %shift, !dbg !99
  %1095 = fadd <2 x float> %1094, %1087, !dbg !99
  %shift344 = shufflevector <2 x float> %1087, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !99
  %1096 = fadd <2 x float> %1095, %shift344, !dbg !99
  %1097 = fadd <2 x float> %1096, %1090, !dbg !99
  %shift345 = shufflevector <2 x float> %1090, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !99
  %1098 = fadd <2 x float> %1097, %shift345, !dbg !99
  %1099 = fadd <2 x float> %1098, %1093, !dbg !99
  %shift346 = shufflevector <2 x float> %1093, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !99
  %1100 = fadd <2 x float> %1099, %shift346, !dbg !99
  %1101 = extractelement <2 x float> %1100, i64 0, !dbg !99
  %1102 = bitcast float %1101 to <1 x i32>, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1016, <1 x i32> %1102, i1 true) #8, !dbg !96
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !96
  %1103 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1018, i1 %960) #8, !dbg !96
  %1104 = bitcast i32 %1103 to float, !dbg !96
  %1105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1103, i32 4, i32 31), !dbg !96
  %1106 = bitcast i32 %1105 to float, !dbg !96
  %1107 = fadd float %1104, %1106, !dbg !99
  %1108 = bitcast float %1107 to i32, !dbg !96
  %1109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1108, i32 2, i32 31), !dbg !96
  %1110 = bitcast i32 %1109 to float, !dbg !96
  %1111 = fadd float %1107, %1110, !dbg !99
  %1112 = bitcast float %1111 to i32, !dbg !96
  %1113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1112, i32 1, i32 31), !dbg !96
  %1114 = bitcast i32 %1113 to float, !dbg !96
  %1115 = fadd float %1111, %1114, !dbg !99
  %1116 = bitcast float %1115 to <1 x i32>, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1018, <1 x i32> %1116, i1 %976) #8, !dbg !96
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !96
  %1117 = load i32, ptr addrspace(3) %1042, align 16, !dbg !96
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !100
  %1118 = insertelement <1 x i32> poison, i32 %1117, i64 0, !dbg !100
  store <1 x i32> %1118, ptr addrspace(3) %1045, align 4, !dbg !100
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !100
  %1119 = load float, ptr addrspace(3) %1046, align 4, !dbg !100
  %1120 = load float, ptr addrspace(3) %1048, align 4, !dbg !100
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !101
  %1121 = zext i1 %.not5 to i8, !dbg !101
  %1122 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %12, !dbg !101
  %1123 = insertelement <1 x i8> poison, i8 %1121, i64 0, !dbg !101
  store <1 x i8> %1123, ptr addrspace(3) %1122, align 1, !dbg !101
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !101
  %1124 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %14, !dbg !101
  %1125 = load i8, ptr addrspace(3) %1124, align 1, !dbg !101
  %1126 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %15, !dbg !101
  %1127 = load i8, ptr addrspace(3) %1126, align 1, !dbg !101
  %1128 = trunc i8 %1125 to i1, !dbg !101
  %1129 = trunc i8 %1127 to i1, !dbg !101
  br label %1130, !dbg !102

1130:                                             ; preds = %952, %1130
  %indvars.iv288 = phi i64 [ 0, %952 ], [ %indvars.iv.next289, %1130 ]
  %1131 = or disjoint i64 %indvars.iv288, %164, !dbg !103
  %1132 = icmp samesign ult i64 %1131, 324, !dbg !104
  %1133 = trunc nuw nsw i64 %1131 to i32, !dbg !105
  %1134 = add i32 %71, %1133, !dbg !105
  %1135 = add i32 %72, %1133, !dbg !105
  %1136 = sext i32 %1134 to i64, !dbg !106
  %1137 = getelementptr float, ptr addrspace(1) %2, i64 %1136, !dbg !106
  %1138 = sext i32 %1135 to i64, !dbg !106
  %1139 = getelementptr float, ptr addrspace(1) %2, i64 %1138, !dbg !106
  %1140 = and i1 %35, %1132, !dbg !107
  %1141 = and i1 %36, %1132, !dbg !107
  %1142 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #8, !dbg !108
  %1143 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1137, i64 %1142, i1 %1140) #8, !dbg !108
  %1144 = extractvalue { i32, i32, i32, i32 } %1143, 0, !dbg !108
  %1145 = extractvalue { i32, i32, i32, i32 } %1143, 1, !dbg !108
  %1146 = extractvalue { i32, i32, i32, i32 } %1143, 2, !dbg !108
  %1147 = extractvalue { i32, i32, i32, i32 } %1143, 3, !dbg !108
  %1148 = bitcast i32 %1144 to float, !dbg !108
  %1149 = bitcast i32 %1145 to float, !dbg !108
  %1150 = bitcast i32 %1146 to float, !dbg !108
  %1151 = bitcast i32 %1147 to float, !dbg !108
  %1152 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #8, !dbg !108
  %1153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1139, i64 %1152, i1 %1141) #8, !dbg !108
  %1154 = extractvalue { i32, i32, i32, i32 } %1153, 0, !dbg !108
  %1155 = extractvalue { i32, i32, i32, i32 } %1153, 1, !dbg !108
  %1156 = extractvalue { i32, i32, i32, i32 } %1153, 2, !dbg !108
  %1157 = extractvalue { i32, i32, i32, i32 } %1153, 3, !dbg !108
  %1158 = bitcast i32 %1154 to float, !dbg !108
  %1159 = bitcast i32 %1155 to float, !dbg !108
  %1160 = bitcast i32 %1156 to float, !dbg !108
  %1161 = bitcast i32 %1157 to float, !dbg !108
  %1162 = add i32 %158, %1133, !dbg !109
  %1163 = add i32 %161, %1133, !dbg !109
  %1164 = sext i32 %1162 to i64, !dbg !110
  %1165 = getelementptr float, ptr addrspace(1) %3, i64 %1164, !dbg !110
  %1166 = sext i32 %1163 to i64, !dbg !110
  %1167 = getelementptr float, ptr addrspace(1) %3, i64 %1166, !dbg !110
  %1168 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #8, !dbg !111
  %1169 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1165, i64 %1168, i1 %1140) #8, !dbg !111
  %1170 = extractvalue { i32, i32, i32, i32 } %1169, 0, !dbg !111
  %1171 = extractvalue { i32, i32, i32, i32 } %1169, 1, !dbg !111
  %1172 = extractvalue { i32, i32, i32, i32 } %1169, 2, !dbg !111
  %1173 = extractvalue { i32, i32, i32, i32 } %1169, 3, !dbg !111
  %1174 = bitcast i32 %1170 to float, !dbg !111
  %1175 = bitcast i32 %1171 to float, !dbg !111
  %1176 = bitcast i32 %1172 to float, !dbg !111
  %1177 = bitcast i32 %1173 to float, !dbg !111
  %1178 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #8, !dbg !111
  %1179 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1167, i64 %1178, i1 %1141) #8, !dbg !111
  %1180 = extractvalue { i32, i32, i32, i32 } %1179, 0, !dbg !111
  %1181 = extractvalue { i32, i32, i32, i32 } %1179, 1, !dbg !111
  %1182 = extractvalue { i32, i32, i32, i32 } %1179, 2, !dbg !111
  %1183 = extractvalue { i32, i32, i32, i32 } %1179, 3, !dbg !111
  %1184 = bitcast i32 %1180 to float, !dbg !111
  %1185 = bitcast i32 %1181 to float, !dbg !111
  %1186 = bitcast i32 %1182 to float, !dbg !111
  %1187 = bitcast i32 %1183 to float, !dbg !111
  %1188 = fadd float %1148, %1174, !dbg !112
  %1189 = fadd float %1149, %1175, !dbg !112
  %1190 = fadd float %1150, %1176, !dbg !112
  %1191 = fadd float %1151, %1177, !dbg !112
  %1192 = fadd float %1158, %1184, !dbg !112
  %1193 = fadd float %1159, %1185, !dbg !112
  %1194 = fadd float %1160, %1186, !dbg !112
  %1195 = fadd float %1161, %1187, !dbg !112
  %1196 = fsub float %1188, %1047, !dbg !113
  %1197 = fsub float %1189, %1047, !dbg !113
  %1198 = fsub float %1190, %1047, !dbg !113
  %1199 = fsub float %1191, %1047, !dbg !113
  %1200 = fsub float %1192, %1049, !dbg !113
  %1201 = fsub float %1193, %1049, !dbg !113
  %1202 = fsub float %1194, %1049, !dbg !113
  %1203 = fsub float %1195, %1049, !dbg !113
  %1204 = fmul float %1196, 0x3FF7154760000000, !dbg !114
  %1205 = tail call float @llvm.nvvm.ex2.approx.f(float %1204), !dbg !114
  %1206 = fmul float %1197, 0x3FF7154760000000, !dbg !114
  %1207 = tail call float @llvm.nvvm.ex2.approx.f(float %1206), !dbg !114
  %1208 = fmul float %1198, 0x3FF7154760000000, !dbg !114
  %1209 = tail call float @llvm.nvvm.ex2.approx.f(float %1208), !dbg !114
  %1210 = fmul float %1199, 0x3FF7154760000000, !dbg !114
  %1211 = tail call float @llvm.nvvm.ex2.approx.f(float %1210), !dbg !114
  %1212 = fmul float %1200, 0x3FF7154760000000, !dbg !114
  %1213 = tail call float @llvm.nvvm.ex2.approx.f(float %1212), !dbg !114
  %1214 = fmul float %1201, 0x3FF7154760000000, !dbg !114
  %1215 = tail call float @llvm.nvvm.ex2.approx.f(float %1214), !dbg !114
  %1216 = fmul float %1202, 0x3FF7154760000000, !dbg !114
  %1217 = tail call float @llvm.nvvm.ex2.approx.f(float %1216), !dbg !114
  %1218 = fmul float %1203, 0x3FF7154760000000, !dbg !114
  %1219 = tail call float @llvm.nvvm.ex2.approx.f(float %1218), !dbg !114
  %1220 = tail call float @llvm.nvvm.div.full(float %1205, float %1119), !dbg !100
  %1221 = tail call float @llvm.nvvm.div.full(float %1207, float %1119), !dbg !100
  %1222 = tail call float @llvm.nvvm.div.full(float %1209, float %1119), !dbg !100
  %1223 = tail call float @llvm.nvvm.div.full(float %1211, float %1119), !dbg !100
  %1224 = tail call float @llvm.nvvm.div.full(float %1213, float %1120), !dbg !100
  %1225 = tail call float @llvm.nvvm.div.full(float %1215, float %1120), !dbg !100
  %1226 = tail call float @llvm.nvvm.div.full(float %1217, float %1120), !dbg !100
  %1227 = tail call float @llvm.nvvm.div.full(float %1219, float %1120), !dbg !100
  %1228 = getelementptr float, ptr addrspace(1) %4, i64 %1164, !dbg !115
  %1229 = getelementptr float, ptr addrspace(1) %4, i64 %1166, !dbg !115
  %1230 = bitcast float %1220 to i32, !dbg !116
  %1231 = select i1 %1128, i32 0, i32 %1230, !dbg !101
  %1232 = bitcast float %1221 to i32, !dbg !116
  %1233 = select i1 %1128, i32 0, i32 %1232, !dbg !101
  %1234 = bitcast float %1222 to i32, !dbg !116
  %1235 = select i1 %1128, i32 0, i32 %1234, !dbg !101
  %1236 = bitcast float %1223 to i32, !dbg !116
  %1237 = select i1 %1128, i32 0, i32 %1236, !dbg !101
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1231, i32 %1233, i32 %1235, i32 %1237, ptr addrspace(1) %1228, i1 %1140) #8, !dbg !116
  %1238 = bitcast float %1224 to i32, !dbg !116
  %1239 = select i1 %1129, i32 0, i32 %1238, !dbg !101
  %1240 = bitcast float %1225 to i32, !dbg !116
  %1241 = select i1 %1129, i32 0, i32 %1240, !dbg !101
  %1242 = bitcast float %1226 to i32, !dbg !116
  %1243 = select i1 %1129, i32 0, i32 %1242, !dbg !101
  %1244 = bitcast float %1227 to i32, !dbg !116
  %1245 = select i1 %1129, i32 0, i32 %1244, !dbg !101
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1239, i32 %1241, i32 %1243, i32 %1245, ptr addrspace(1) %1229, i1 %1141) #8, !dbg !116
  %indvars.iv.next289 = add nuw nsw i64 %indvars.iv288, 64, !dbg !102
  %1246 = icmp samesign ult i64 %indvars.iv288, 260, !dbg !102
  br i1 %1246, label %1130, label %1247, !dbg !102

1247:                                             ; preds = %1130
  ret void, !dbg !117
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #5

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <8 x i32> @llvm.abs.v8i32(<8 x i32>, i1 immarg) #7

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <8 x i64> @llvm.smin.v8i64(<8 x i64>, <8 x i64>) #7

attributes #0 = { noreturn }
attributes #1 = { "nvvm.reqntid"="512" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #8 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "ccisb2yra76ab2haychl3vkjloggui7jornx4qodogdjo7v6y64e.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/ci")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !6, file: !6, type: !7, spFlags: DISPFlagOptimized)
!6 = !DIFile(filename: "<unknown>", directory: "")
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mul_rsub_4", linkageName: "triton_red_fused__to_copy_add_mul_rsub_4", scope: !1, file: !1, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!10 = !DILocation(line: 23, column: 28, scope: !9)
!11 = !DILocation(line: 23, column: 33, scope: !9)
!12 = !DILocation(line: 24, column: 44, scope: !9)
!13 = !DILocation(line: 24, column: 23, scope: !9)
!14 = !DILocation(line: 25, column: 21, scope: !9)
!15 = !DILocation(line: 26, column: 37, scope: !9)
!16 = !DILocation(line: 28, column: 19, scope: !9)
!17 = !DILocation(line: 29, column: 21, scope: !9)
!18 = !DILocation(line: 29, column: 28, scope: !9)
!19 = !DILocation(line: 30, column: 19, scope: !9)
!20 = !DILocation(line: 43, column: 46, scope: !9)
!21 = !DILocation(line: 44, column: 46, scope: !9)
!22 = !DILocation(line: 74, column: 40, scope: !9)
!23 = !DILocation(line: 37, column: 40, scope: !9)
!24 = !DILocation(line: 43, column: 61, scope: !9)
!25 = !DILocation(line: 38, column: 31, scope: !9)
!26 = !DILocation(line: 39, column: 29, scope: !9)
!27 = !DILocation(line: 43, column: 35, scope: !9)
!28 = !DILocation(line: 43, column: 51, scope: !9)
!29 = !DILocation(line: 44, column: 42, scope: !9)
!30 = !DILocation(line: 44, column: 35, scope: !9)
!31 = !DILocation(line: 44, column: 51, scope: !9)
!32 = !DILocation(line: 45, column: 23, scope: !9)
!33 = !DILocation(line: 47, column: 22, scope: !9)
!34 = !DILocation(line: 50, column: 22, scope: !9)
!35 = !DILocation(line: 52, column: 27, scope: !9)
!36 = !DILocation(line: 54, column: 22, scope: !9)
!37 = !DILocation(line: 55, column: 24, scope: !9)
!38 = !DILocation(line: 57, column: 24, scope: !9)
!39 = !DILocation(line: 58, column: 28, scope: !9)
!40 = !DILocation(line: 60, column: 24, scope: !9)
!41 = !DILocation(line: 62, column: 24, scope: !9)
!42 = !DILocation(line: 63, column: 25, scope: !9)
!43 = !DILocation(line: 64, column: 24, scope: !9)
!44 = !DILocation(line: 106, column: 29, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !9, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 66, column: 46, scope: !9)
!48 = !DILocation(line: 67, column: 37, scope: !9)
!49 = !DILocation(line: 68, column: 23, scope: !9)
!50 = !DILocation(line: 72, column: 39, scope: !9)
!51 = !DILocation(line: 73, column: 42, scope: !9)
!52 = !DILocation(line: 73, column: 57, scope: !9)
!53 = !DILocation(line: 73, column: 77, scope: !9)
!54 = !DILocation(line: 74, column: 35, scope: !9)
!55 = !DILocation(line: 74, column: 50, scope: !9)
!56 = !DILocation(line: 75, column: 25, scope: !9)
!57 = !DILocation(line: 77, column: 24, scope: !9)
!58 = !DILocation(line: 79, column: 24, scope: !9)
!59 = !DILocation(line: 97, column: 64, scope: !9)
!60 = !DILocation(line: 80, column: 24, scope: !9)
!61 = !DILocation(line: 81, column: 24, scope: !9)
!62 = !DILocation(line: 83, column: 25, scope: !9)
!63 = !DILocation(line: 89, column: 50, scope: !9)
!64 = !DILocation(line: 200, column: 53, scope: !45, inlinedAt: !65)
!65 = !DILocation(line: 93, column: 43, scope: !9)
!66 = !DILocation(line: 113, column: 21, scope: !45, inlinedAt: !65)
!67 = !DILocation(line: 111, column: 15, scope: !45, inlinedAt: !65)
!68 = !DILocation(line: 113, column: 16, scope: !45, inlinedAt: !65)
!69 = !DILocation(line: 114, column: 29, scope: !45, inlinedAt: !65)
!70 = !DILocation(line: 197, column: 19, scope: !45, inlinedAt: !65)
!71 = !DILocation(line: 197, column: 53, scope: !45, inlinedAt: !65)
!72 = !DILocation(line: 174, column: 24, scope: !45, inlinedAt: !65)
!73 = !DILocation(line: 197, column: 39, scope: !45, inlinedAt: !65)
!74 = !DILocation(line: 200, column: 39, scope: !45, inlinedAt: !65)
!75 = !DILocation(line: 206, column: 24, scope: !45, inlinedAt: !65)
!76 = !DILocation(line: 206, column: 36, scope: !45, inlinedAt: !65)
!77 = !DILocation(line: 96, column: 64, scope: !9)
!78 = !DILocation(line: 98, column: 45, scope: !9)
!79 = !DILocation(line: 98, column: 29, scope: !9)
!80 = !DILocation(line: 98, column: 64, scope: !9)
!81 = !DILocation(line: 266, column: 29, scope: !45, inlinedAt: !82)
!82 = !DILocation(line: 99, column: 51, scope: !9)
!83 = !DILocation(line: 261, column: 15, scope: !45, inlinedAt: !82)
!84 = !DILocation(line: 99, column: 66, scope: !9)
!85 = !DILocation(line: 124, column: 29, scope: !45, inlinedAt: !86)
!86 = !DILocation(line: 102, column: 35, scope: !9)
!87 = !DILocation(line: 111, column: 15, scope: !45, inlinedAt: !86)
!88 = !DILocation(line: 113, column: 21, scope: !45, inlinedAt: !86)
!89 = !DILocation(line: 113, column: 16, scope: !45, inlinedAt: !86)
!90 = !DILocation(line: 114, column: 29, scope: !45, inlinedAt: !86)
!91 = !DILocation(line: 181, column: 40, scope: !45, inlinedAt: !86)
!92 = !DILocation(line: 181, column: 68, scope: !45, inlinedAt: !86)
!93 = !DILocation(line: 174, column: 24, scope: !45, inlinedAt: !86)
!94 = !DILocation(line: 181, column: 58, scope: !45, inlinedAt: !86)
!95 = !DILocation(line: 182, column: 31, scope: !45, inlinedAt: !86)
!96 = !DILocation(line: 290, column: 36, scope: !97, inlinedAt: !86)
!97 = distinct !DILexicalBlockFile(scope: !9, file: !98, discriminator: 0)
!98 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!99 = !DILocation(line: 260, column: 15, scope: !97, inlinedAt: !86)
!100 = !DILocation(line: 119, column: 25, scope: !9)
!101 = !DILocation(line: 121, column: 39, scope: !9)
!102 = !DILocation(line: 107, column: 40, scope: !9)
!103 = !DILocation(line: 108, column: 31, scope: !9)
!104 = !DILocation(line: 109, column: 29, scope: !9)
!105 = !DILocation(line: 113, column: 42, scope: !9)
!106 = !DILocation(line: 113, column: 35, scope: !9)
!107 = !DILocation(line: 113, column: 61, scope: !9)
!108 = !DILocation(line: 113, column: 51, scope: !9)
!109 = !DILocation(line: 114, column: 52, scope: !9)
!110 = !DILocation(line: 114, column: 36, scope: !9)
!111 = !DILocation(line: 114, column: 64, scope: !9)
!112 = !DILocation(line: 116, column: 24, scope: !9)
!113 = !DILocation(line: 117, column: 24, scope: !9)
!114 = !DILocation(line: 118, column: 28, scope: !9)
!115 = !DILocation(line: 122, column: 29, scope: !9)
!116 = !DILocation(line: 122, column: 64, scope: !9)
!117 = !DILocation(line: 107, column: 4, scope: !9)
