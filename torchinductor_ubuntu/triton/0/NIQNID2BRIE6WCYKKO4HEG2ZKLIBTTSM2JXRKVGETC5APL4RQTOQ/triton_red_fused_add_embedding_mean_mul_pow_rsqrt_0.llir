; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [121 x i8] c"/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/ug/cuggpsc3ohxg4teqelsr3xqew2hbnyultfmksaqdqmuzrupdzg26.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 32128\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !5 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused_add_embedding_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr #1 !dbg !9 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !10
  %9 = icmp samesign ult i32 %8, 64, !dbg !11
  %10 = zext nneg i32 %8 to i64, !dbg !12
  %11 = getelementptr i64, ptr addrspace(1) %0, i64 %10, !dbg !12
  %12 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !13
  %13 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %11, i64 %12, i1 %9) #7, !dbg !13
  %14 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !13
  %15 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %11, i64 %14, i1 %9) #7, !dbg !13
  %16 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !13
  %17 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %11, i64 %16, i1 %9) #7, !dbg !13
  %18 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !13
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %11, i64 %18, i1 %9) #7, !dbg !13
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !13
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %11, i64 %20, i1 %9) #7, !dbg !13
  %22 = add i64 %21, 32128, !dbg !14
  %23 = icmp slt i64 %21, 0, !dbg !15
  %24 = select i1 %23, i64 %22, i64 %21, !dbg !16
  %25 = icmp ugt i64 %24, 32127, !dbg !17
  %.not2 = and i1 %9, %25, !dbg !18
  br i1 %.not2, label %26, label %__nv_rsqrtf.exit, !dbg !18

26:                                               ; preds = %7
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 41, ptr nonnull @assertFunc_0, i64 1), !dbg !18
  unreachable, !dbg !18

__nv_rsqrtf.exit:                                 ; preds = %7
  %27 = icmp slt i64 %19, 0, !dbg !15
  %28 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %29 = shl nuw nsw i32 %28, 2, !dbg !19
  %30 = and i32 %29, 508, !dbg !19
  %31 = lshr i32 %28, 5, !dbg !19
  %32 = and i32 %28, 31, !dbg !19
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !18
  %33 = shl i64 %19, 9, !dbg !20
  %34 = add i64 %33, 16449536, !dbg !20
  %35 = select i1 %27, i64 %34, i64 %33, !dbg !20
  %36 = zext nneg i32 %30 to i64, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %37, i64 %36, !dbg !22
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !23
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %38, i64 %39, i1 %9) #7, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !23
  %45 = bitcast i32 %41 to float, !dbg !23
  %46 = bitcast i32 %42 to float, !dbg !23
  %47 = bitcast i32 %43 to float, !dbg !23
  %48 = bitcast i32 %44 to float, !dbg !23
  %49 = fmul float %45, %45, !dbg !24
  %50 = fmul float %46, %46, !dbg !24
  %51 = fmul float %47, %47, !dbg !24
  %52 = fmul float %48, %48, !dbg !24
  %53 = fadd float %49, %50, !dbg !25
  %54 = fadd float %51, %53, !dbg !25
  %55 = fadd float %52, %54, !dbg !25
  %56 = select i1 %9, float %55, float 0.000000e+00, !dbg !25
  %57 = bitcast float %56 to i32, !dbg !29
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 16, i32 31), !dbg !29
  %59 = bitcast i32 %58 to float, !dbg !29
  %60 = fadd float %56, %59, !dbg !25
  %61 = bitcast float %60 to i32, !dbg !29
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 8, i32 31), !dbg !29
  %63 = bitcast i32 %62 to float, !dbg !29
  %64 = fadd float %60, %63, !dbg !25
  %65 = bitcast float %64 to i32, !dbg !29
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 4, i32 31), !dbg !29
  %67 = bitcast i32 %66 to float, !dbg !29
  %68 = fadd float %64, %67, !dbg !25
  %69 = bitcast float %68 to i32, !dbg !29
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 2, i32 31), !dbg !29
  %71 = bitcast i32 %70 to float, !dbg !29
  %72 = fadd float %68, %71, !dbg !25
  %73 = bitcast float %72 to i32, !dbg !29
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 1, i32 31), !dbg !29
  %75 = bitcast i32 %74 to float, !dbg !29
  %76 = fadd float %72, %75, !dbg !25
  %77 = and i32 %31, 3, !dbg !29
  %78 = icmp eq i32 %32, 0, !dbg !29
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i32 %77, !dbg !29
  %80 = bitcast float %76 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %80, i1 %78) #7, !dbg !29
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !29
  %81 = icmp samesign ult i32 %28, 4, !dbg !29
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i32 %28, !dbg !29
  %83 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %82, i1 %81) #7, !dbg !29
  %84 = bitcast i32 %83 to float, !dbg !29
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 2, i32 31), !dbg !29
  %86 = bitcast i32 %85 to float, !dbg !29
  %87 = fadd float %84, %86, !dbg !25
  %88 = bitcast float %87 to i32, !dbg !29
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 1, i32 31), !dbg !29
  %90 = bitcast i32 %89 to float, !dbg !29
  %91 = fadd float %87, %90, !dbg !25
  %92 = icmp eq i32 %28, 0, !dbg !29
  %93 = bitcast float %91 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %93, i1 %92) #7, !dbg !29
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !29
  %94 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !29
  %95 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !30
  %96 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !31
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %95, i64 %96, i1 true) #7, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !32
  %98 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #7, !dbg !33
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %38, i64 %98, i1 %9) #7, !dbg !33
  %100 = tail call float @llvm.nvvm.div.full(float %94, float 5.120000e+02), !dbg !34
  %101 = fadd float %100, 0x3EB0C6F7A0000000, !dbg !35
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !36
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !36
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !36
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !36
  %.not.i9 = icmp eq i32 %105, 0, !dbg !36
  br i1 %.not.i9, label %108, label %106, !dbg !36

106:                                              ; preds = %__nv_rsqrtf.exit
  %107 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %101), !dbg !36
  br label %__nv_rsqrtf.exit11, !dbg !36

108:                                              ; preds = %__nv_rsqrtf.exit
  %109 = tail call float @llvm.nvvm.rsqrt.approx.f(float %101), !dbg !36
  br label %__nv_rsqrtf.exit11, !dbg !36

__nv_rsqrtf.exit11:                               ; preds = %106, %108
  %.0.i10 = phi float [ %107, %106 ], [ %109, %108 ], !dbg !36
  %110 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !33
  %111 = bitcast i32 %110 to float, !dbg !33
  %112 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !33
  %113 = bitcast i32 %112 to float, !dbg !33
  %114 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !33
  %115 = bitcast i32 %114 to float, !dbg !33
  %116 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !33
  %117 = bitcast i32 %116 to float, !dbg !33
  %118 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !31
  %119 = bitcast i32 %118 to float, !dbg !31
  %120 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !31
  %121 = bitcast i32 %120 to float, !dbg !31
  %122 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !31
  %123 = bitcast i32 %122 to float, !dbg !31
  %124 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !31
  %125 = bitcast i32 %124 to float, !dbg !31
  %126 = fmul float %.0.i10, %117, !dbg !37
  %127 = fmul float %.0.i10, %115, !dbg !37
  %128 = fmul float %.0.i10, %113, !dbg !37
  %129 = fmul float %.0.i10, %111, !dbg !37
  %130 = fmul float %126, %125, !dbg !38
  %131 = fmul float %127, %123, !dbg !38
  %132 = fmul float %128, %121, !dbg !38
  %133 = fmul float %129, %119, !dbg !38
  %134 = shl i32 %8, 9, !dbg !39
  %135 = or disjoint i32 %30, %134, !dbg !40
  %136 = sext i32 %135 to i64, !dbg !41
  %137 = getelementptr float, ptr addrspace(1) %3, i64 %136, !dbg !41
  %138 = bitcast float %130 to i32, !dbg !42
  %139 = bitcast float %131 to i32, !dbg !42
  %140 = bitcast float %132 to i32, !dbg !42
  %141 = bitcast float %133 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %138, i32 %139, i32 %140, i32 %141, ptr addrspace(1) %137, i1 %9) #7, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #5

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { noreturn }
attributes #1 = { "nvvm.reqntid"="128" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "cuggpsc3ohxg4teqelsr3xqew2hbnyultfmksaqdqmuzrupdzg26.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/ug")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !6, file: !6, type: !7, spFlags: DISPFlagOptimized)
!6 = !DIFile(filename: "<unknown>", directory: "")
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = distinct !DISubprogram(name: "triton_red_fused_add_embedding_mean_mul_pow_rsqrt_0", linkageName: "triton_red_fused_add_embedding_mean_mul_pow_rsqrt_0", scope: !1, file: !1, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!10 = !DILocation(line: 23, column: 28, scope: !9)
!11 = !DILocation(line: 25, column: 21, scope: !9)
!12 = !DILocation(line: 29, column: 30, scope: !9)
!13 = !DILocation(line: 29, column: 35, scope: !9)
!14 = !DILocation(line: 38, column: 22, scope: !9)
!15 = !DILocation(line: 39, column: 22, scope: !9)
!16 = !DILocation(line: 40, column: 36, scope: !9)
!17 = !DILocation(line: 41, column: 41, scope: !9)
!18 = !DILocation(line: 41, column: 68, scope: !9)
!19 = !DILocation(line: 26, column: 37, scope: !9)
!20 = !DILocation(line: 42, column: 45, scope: !9)
!21 = !DILocation(line: 42, column: 41, scope: !9)
!22 = !DILocation(line: 42, column: 34, scope: !9)
!23 = !DILocation(line: 42, column: 52, scope: !9)
!24 = !DILocation(line: 43, column: 22, scope: !9)
!25 = !DILocation(line: 260, column: 15, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !9, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!28 = !DILocation(line: 47, column: 25, scope: !9)
!29 = !DILocation(line: 290, column: 36, scope: !26, inlinedAt: !28)
!30 = !DILocation(line: 54, column: 35, scope: !9)
!31 = !DILocation(line: 54, column: 42, scope: !9)
!32 = !DILocation(line: 59, column: 70, scope: !9)
!33 = !DILocation(line: 60, column: 54, scope: !9)
!34 = !DILocation(line: 62, column: 24, scope: !9)
!35 = !DILocation(line: 64, column: 24, scope: !9)
!36 = !DILocation(line: 65, column: 32, scope: !9)
!37 = !DILocation(line: 66, column: 24, scope: !9)
!38 = !DILocation(line: 67, column: 24, scope: !9)
!39 = !DILocation(line: 68, column: 40, scope: !9)
!40 = !DILocation(line: 68, column: 36, scope: !9)
!41 = !DILocation(line: 68, column: 29, scope: !9)
!42 = !DILocation(line: 68, column: 52, scope: !9)
!43 = !DILocation(line: 48, column: 4, scope: !9)
