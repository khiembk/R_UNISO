; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_per_fused_add_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr #0 !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !8
  %10 = shl nuw nsw i32 %9, 3, !dbg !9
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %12 = and i32 %11, 16, !dbg !10
  %13 = lshr i32 %11, 5, !dbg !10
  %14 = lshr i32 %11, 4, !dbg !10
  %15 = and i32 %14, 7, !dbg !10
  %16 = and i32 %11, 1, !dbg !10
  %17 = shl nuw nsw i32 %16, 2, !dbg !10
  %18 = lshr i32 %11, 3, !dbg !10
  %19 = and i32 %18, 7, !dbg !10
  %20 = or disjoint i32 %15, %10, !dbg !11
  %21 = or disjoint i32 %17, %10, !dbg !11
  %22 = or disjoint i32 %19, %10, !dbg !11
  %23 = icmp eq i32 %9, 0, !dbg !12
  %24 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !13
  %25 = shl i32 %24, 3, !dbg !14
  %26 = and i32 %11, 128, !dbg !15
  %.lobit4 = lshr exact i32 %26, 7, !dbg !15
  %27 = lshr i32 %11, 1, !dbg !15
  %28 = and i32 %27, 7, !dbg !15
  %29 = and i32 %11, 7, !dbg !15
  %30 = or disjoint i32 %.lobit4, %25, !dbg !16
  %31 = or disjoint i32 %30, 2, !dbg !16
  %32 = or disjoint i32 %30, 4, !dbg !16
  %33 = or disjoint i32 %30, 6, !dbg !16
  %34 = or disjoint i32 %28, %25, !dbg !16
  %35 = or disjoint i32 %25, %29, !dbg !16
  %36 = icmp slt i32 %34, 64, !dbg !17
  %37 = icmp slt i32 %30, 64, !dbg !17
  %38 = icmp slt i32 %31, 64, !dbg !17
  %39 = icmp slt i32 %32, 64, !dbg !17
  %40 = icmp slt i32 %33, 64, !dbg !17
  %41 = icmp slt i32 %35, 64, !dbg !17
  %42 = shl nuw nsw i32 %11, 2, !dbg !18
  %43 = and i32 %42, 60, !dbg !18
  %44 = shl i32 %30, 6, !dbg !19
  %45 = shl i32 %31, 6, !dbg !19
  %46 = shl i32 %32, 6, !dbg !19
  %47 = shl i32 %33, 6, !dbg !19
  %48 = or disjoint i32 %44, %43, !dbg !20
  %49 = shl nuw nsw i32 %20, 12, !dbg !21
  %50 = add i32 %48, %49, !dbg !22
  %51 = or disjoint i32 %49, %43, !dbg !20
  %52 = add i32 %51, %45, !dbg !22
  %53 = add i32 %51, %46, !dbg !22
  %54 = add i32 %51, %47, !dbg !22
  %55 = sext i32 %50 to i64, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !23
  %57 = sext i32 %52 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !23
  %59 = sext i32 %53 to i64, !dbg !23
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !23
  %61 = sext i32 %54 to i64, !dbg !23
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !23
  %63 = and i1 %23, %36, !dbg !24
  %64 = and i1 %23, %37, !dbg !24
  %65 = and i1 %23, %38, !dbg !24
  %66 = and i1 %23, %39, !dbg !24
  %67 = and i1 %23, %40, !dbg !24
  %68 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !25
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %56, i64 %68, i1 %64) #5, !dbg !25
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !25
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !25
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !25
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !25
  %74 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !25
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %58, i64 %74, i1 %65) #5, !dbg !25
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !25
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !25
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !25
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !25
  %80 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !25
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %60, i64 %80, i1 %66) #5, !dbg !25
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !25
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !25
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !25
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !25
  %86 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !25
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %62, i64 %86, i1 %67) #5, !dbg !25
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !25
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !25
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !25
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !25
  %92 = shl nuw nsw i32 %16, 5, !dbg !25
  %93 = shl nuw nsw i32 %11, 5, !dbg !25
  %94 = and i32 %93, 480, !dbg !25
  %95 = shl nuw nsw i32 %26, 2, !dbg !25
  %96 = or disjoint i32 %94, %95, !dbg !25
  %97 = or disjoint i32 %96, %15, !dbg !25
  %98 = shl nuw nsw i32 %11, 8, !dbg !25
  %99 = and i32 %98, 3584, !dbg !25
  %100 = and i32 %27, 120, !dbg !25
  %101 = or disjoint i32 %100, %99, !dbg !25
  %102 = or disjoint i32 %101, %17, !dbg !25
  %103 = lshr exact i32 %96, 1, !dbg !25
  %104 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %103, !dbg !25
  %105 = getelementptr inbounds nuw float, ptr addrspace(3) %104, i32 %97, !dbg !25
  %106 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !25
  store <1 x i32> %106, ptr addrspace(3) %105, align 4, !dbg !25
  %107 = or disjoint i32 %97, 8, !dbg !25
  %108 = lshr i32 %107, 3, !dbg !25
  %109 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %108, !dbg !25
  %110 = getelementptr inbounds nuw float, ptr addrspace(3) %109, i32 %107, !dbg !25
  %111 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !25
  store <1 x i32> %111, ptr addrspace(3) %110, align 4, !dbg !25
  %112 = or disjoint i32 %97, 16, !dbg !25
  %113 = lshr i32 %112, 3, !dbg !25
  %114 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %113, !dbg !25
  %115 = getelementptr inbounds nuw float, ptr addrspace(3) %114, i32 %112, !dbg !25
  %116 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !25
  store <1 x i32> %116, ptr addrspace(3) %115, align 4, !dbg !25
  %117 = or disjoint i32 %97, 24, !dbg !25
  %118 = lshr i32 %117, 3, !dbg !25
  %119 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %118, !dbg !25
  %120 = getelementptr inbounds nuw float, ptr addrspace(3) %119, i32 %117, !dbg !25
  %121 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !25
  store <1 x i32> %121, ptr addrspace(3) %120, align 4, !dbg !25
  %122 = or disjoint i32 %97, 1024, !dbg !25
  %123 = lshr i32 %122, 3, !dbg !25
  %124 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %123, !dbg !25
  %125 = getelementptr inbounds nuw float, ptr addrspace(3) %124, i32 %122, !dbg !25
  %126 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !25
  store <1 x i32> %126, ptr addrspace(3) %125, align 4, !dbg !25
  %127 = or disjoint i32 %97, 1032, !dbg !25
  %128 = lshr i32 %127, 3, !dbg !25
  %129 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %128, !dbg !25
  %130 = getelementptr inbounds nuw float, ptr addrspace(3) %129, i32 %127, !dbg !25
  %131 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !25
  store <1 x i32> %131, ptr addrspace(3) %130, align 4, !dbg !25
  %132 = or disjoint i32 %97, 1040, !dbg !25
  %133 = lshr i32 %132, 3, !dbg !25
  %134 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %133, !dbg !25
  %135 = getelementptr inbounds nuw float, ptr addrspace(3) %134, i32 %132, !dbg !25
  %136 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !25
  store <1 x i32> %136, ptr addrspace(3) %135, align 4, !dbg !25
  %137 = or disjoint i32 %97, 1048, !dbg !25
  %138 = lshr i32 %137, 3, !dbg !25
  %139 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %138, !dbg !25
  %140 = getelementptr inbounds nuw float, ptr addrspace(3) %139, i32 %137, !dbg !25
  %141 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !25
  store <1 x i32> %141, ptr addrspace(3) %140, align 4, !dbg !25
  %142 = or disjoint i32 %97, 2048, !dbg !25
  %143 = lshr i32 %142, 3, !dbg !25
  %144 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %143, !dbg !25
  %145 = getelementptr inbounds nuw float, ptr addrspace(3) %144, i32 %142, !dbg !25
  %146 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !25
  store <1 x i32> %146, ptr addrspace(3) %145, align 4, !dbg !25
  %147 = or disjoint i32 %97, 2056, !dbg !25
  %148 = lshr i32 %147, 3, !dbg !25
  %149 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %148, !dbg !25
  %150 = getelementptr inbounds nuw float, ptr addrspace(3) %149, i32 %147, !dbg !25
  %151 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !25
  store <1 x i32> %151, ptr addrspace(3) %150, align 4, !dbg !25
  %152 = or disjoint i32 %97, 2064, !dbg !25
  %153 = lshr i32 %152, 3, !dbg !25
  %154 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %153, !dbg !25
  %155 = getelementptr inbounds nuw float, ptr addrspace(3) %154, i32 %152, !dbg !25
  %156 = insertelement <1 x i32> poison, i32 %84, i64 0, !dbg !25
  store <1 x i32> %156, ptr addrspace(3) %155, align 4, !dbg !25
  %157 = or disjoint i32 %97, 2072, !dbg !25
  %158 = lshr i32 %157, 3, !dbg !25
  %159 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %158, !dbg !25
  %160 = getelementptr inbounds nuw float, ptr addrspace(3) %159, i32 %157, !dbg !25
  %161 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !25
  store <1 x i32> %161, ptr addrspace(3) %160, align 4, !dbg !25
  %162 = or disjoint i32 %97, 3072, !dbg !25
  %163 = lshr i32 %162, 3, !dbg !25
  %164 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %163, !dbg !25
  %165 = getelementptr inbounds nuw float, ptr addrspace(3) %164, i32 %162, !dbg !25
  %166 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !25
  store <1 x i32> %166, ptr addrspace(3) %165, align 4, !dbg !25
  %167 = or disjoint i32 %97, 3080, !dbg !25
  %168 = lshr i32 %167, 3, !dbg !25
  %169 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %168, !dbg !25
  %170 = getelementptr inbounds nuw float, ptr addrspace(3) %169, i32 %167, !dbg !25
  %171 = insertelement <1 x i32> poison, i32 %89, i64 0, !dbg !25
  store <1 x i32> %171, ptr addrspace(3) %170, align 4, !dbg !25
  %172 = or disjoint i32 %97, 3088, !dbg !25
  %173 = lshr i32 %172, 3, !dbg !25
  %174 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %173, !dbg !25
  %175 = getelementptr inbounds nuw float, ptr addrspace(3) %174, i32 %172, !dbg !25
  %176 = insertelement <1 x i32> poison, i32 %90, i64 0, !dbg !25
  store <1 x i32> %176, ptr addrspace(3) %175, align 4, !dbg !25
  %177 = or disjoint i32 %97, 3096, !dbg !25
  %178 = lshr i32 %177, 3, !dbg !25
  %179 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %178, !dbg !25
  %180 = getelementptr inbounds nuw float, ptr addrspace(3) %179, i32 %177, !dbg !25
  %181 = insertelement <1 x i32> poison, i32 %91, i64 0, !dbg !25
  store <1 x i32> %181, ptr addrspace(3) %180, align 4, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %182 = lshr exact i32 %101, 1, !dbg !25
  %183 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %182, !dbg !25
  %184 = getelementptr inbounds nuw float, ptr addrspace(3) %183, i32 %102, !dbg !25
  %185 = load float, ptr addrspace(3) %184, align 4, !dbg !25
  %186 = getelementptr inbounds nuw i8, ptr addrspace(3) %184, i32 4, !dbg !25
  %187 = load float, ptr addrspace(3) %186, align 4, !dbg !25
  %188 = getelementptr inbounds nuw i8, ptr addrspace(3) %184, i32 8, !dbg !25
  %189 = load float, ptr addrspace(3) %188, align 4, !dbg !25
  %190 = getelementptr inbounds nuw i8, ptr addrspace(3) %184, i32 12, !dbg !25
  %191 = load float, ptr addrspace(3) %190, align 4, !dbg !25
  %192 = or disjoint i32 %102, 128, !dbg !25
  %193 = lshr i32 %192, 3, !dbg !25
  %194 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %193, !dbg !25
  %195 = getelementptr inbounds nuw float, ptr addrspace(3) %194, i32 %192, !dbg !25
  %196 = load float, ptr addrspace(3) %195, align 4, !dbg !25
  %197 = or disjoint i32 %102, 129, !dbg !25
  %198 = lshr i32 %197, 3, !dbg !25
  %199 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %198, !dbg !25
  %200 = getelementptr inbounds nuw float, ptr addrspace(3) %199, i32 %197, !dbg !25
  %201 = load float, ptr addrspace(3) %200, align 4, !dbg !25
  %202 = or disjoint i32 %102, 130, !dbg !25
  %203 = lshr i32 %202, 3, !dbg !25
  %204 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %203, !dbg !25
  %205 = getelementptr inbounds nuw float, ptr addrspace(3) %204, i32 %202, !dbg !25
  %206 = load float, ptr addrspace(3) %205, align 4, !dbg !25
  %207 = or disjoint i32 %102, 131, !dbg !25
  %208 = lshr i32 %207, 3, !dbg !25
  %209 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %208, !dbg !25
  %210 = getelementptr inbounds nuw float, ptr addrspace(3) %209, i32 %207, !dbg !25
  %211 = load float, ptr addrspace(3) %210, align 4, !dbg !25
  %212 = or disjoint i32 %102, 256, !dbg !25
  %213 = lshr i32 %212, 3, !dbg !25
  %214 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %213, !dbg !25
  %215 = getelementptr inbounds nuw float, ptr addrspace(3) %214, i32 %212, !dbg !25
  %216 = load float, ptr addrspace(3) %215, align 4, !dbg !25
  %217 = or disjoint i32 %102, 257, !dbg !25
  %218 = lshr i32 %217, 3, !dbg !25
  %219 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %218, !dbg !25
  %220 = getelementptr inbounds nuw float, ptr addrspace(3) %219, i32 %217, !dbg !25
  %221 = load float, ptr addrspace(3) %220, align 4, !dbg !25
  %222 = or disjoint i32 %102, 258, !dbg !25
  %223 = lshr i32 %222, 3, !dbg !25
  %224 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %223, !dbg !25
  %225 = getelementptr inbounds nuw float, ptr addrspace(3) %224, i32 %222, !dbg !25
  %226 = load float, ptr addrspace(3) %225, align 4, !dbg !25
  %227 = or disjoint i32 %102, 259, !dbg !25
  %228 = lshr i32 %227, 3, !dbg !25
  %229 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %228, !dbg !25
  %230 = getelementptr inbounds nuw float, ptr addrspace(3) %229, i32 %227, !dbg !25
  %231 = load float, ptr addrspace(3) %230, align 4, !dbg !25
  %232 = or disjoint i32 %102, 384, !dbg !25
  %233 = lshr i32 %232, 3, !dbg !25
  %234 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %233, !dbg !25
  %235 = getelementptr inbounds nuw float, ptr addrspace(3) %234, i32 %232, !dbg !25
  %236 = load float, ptr addrspace(3) %235, align 4, !dbg !25
  %237 = or disjoint i32 %102, 385, !dbg !25
  %238 = lshr i32 %237, 3, !dbg !25
  %239 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %238, !dbg !25
  %240 = getelementptr inbounds nuw float, ptr addrspace(3) %239, i32 %237, !dbg !25
  %241 = load float, ptr addrspace(3) %240, align 4, !dbg !25
  %242 = or disjoint i32 %102, 386, !dbg !25
  %243 = lshr i32 %242, 3, !dbg !25
  %244 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %243, !dbg !25
  %245 = getelementptr inbounds nuw float, ptr addrspace(3) %244, i32 %242, !dbg !25
  %246 = load float, ptr addrspace(3) %245, align 4, !dbg !25
  %247 = or disjoint i32 %102, 387, !dbg !25
  %248 = lshr i32 %247, 3, !dbg !25
  %249 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %248, !dbg !25
  %250 = getelementptr inbounds nuw float, ptr addrspace(3) %249, i32 %247, !dbg !25
  %251 = load float, ptr addrspace(3) %250, align 4, !dbg !25
  %252 = lshr i32 %11, 1, !dbg !26
  %253 = and i32 %252, 120, !dbg !26
  %254 = shl i32 %34, 9, !dbg !27
  %255 = add i32 %254, %21, !dbg !28
  %256 = add i32 %255, %253, !dbg !29
  %257 = add i32 %255, 128, !dbg !28
  %258 = add i32 %257, %253, !dbg !29
  %259 = add i32 %255, 256, !dbg !28
  %260 = add i32 %259, %253, !dbg !29
  %261 = add i32 %255, 384, !dbg !28
  %262 = add i32 %261, %253, !dbg !29
  %263 = sext i32 %256 to i64, !dbg !30
  %264 = getelementptr float, ptr addrspace(1) %1, i64 %263, !dbg !30
  %265 = sext i32 %258 to i64, !dbg !30
  %266 = getelementptr float, ptr addrspace(1) %1, i64 %265, !dbg !30
  %267 = sext i32 %260 to i64, !dbg !30
  %268 = getelementptr float, ptr addrspace(1) %1, i64 %267, !dbg !30
  %269 = sext i32 %262 to i64, !dbg !30
  %270 = getelementptr float, ptr addrspace(1) %1, i64 %269, !dbg !30
  %271 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !31
  %272 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %264, i64 %271, i1 %63) #5, !dbg !31
  %273 = extractvalue { i32, i32, i32, i32 } %272, 0, !dbg !31
  %274 = extractvalue { i32, i32, i32, i32 } %272, 1, !dbg !31
  %275 = extractvalue { i32, i32, i32, i32 } %272, 2, !dbg !31
  %276 = extractvalue { i32, i32, i32, i32 } %272, 3, !dbg !31
  %277 = bitcast i32 %273 to float, !dbg !31
  %278 = bitcast i32 %274 to float, !dbg !31
  %279 = bitcast i32 %275 to float, !dbg !31
  %280 = bitcast i32 %276 to float, !dbg !31
  %281 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !31
  %282 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %266, i64 %281, i1 %63) #5, !dbg !31
  %283 = extractvalue { i32, i32, i32, i32 } %282, 0, !dbg !31
  %284 = extractvalue { i32, i32, i32, i32 } %282, 1, !dbg !31
  %285 = extractvalue { i32, i32, i32, i32 } %282, 2, !dbg !31
  %286 = extractvalue { i32, i32, i32, i32 } %282, 3, !dbg !31
  %287 = bitcast i32 %283 to float, !dbg !31
  %288 = bitcast i32 %284 to float, !dbg !31
  %289 = bitcast i32 %285 to float, !dbg !31
  %290 = bitcast i32 %286 to float, !dbg !31
  %291 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !31
  %292 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %268, i64 %291, i1 %63) #5, !dbg !31
  %293 = extractvalue { i32, i32, i32, i32 } %292, 0, !dbg !31
  %294 = extractvalue { i32, i32, i32, i32 } %292, 1, !dbg !31
  %295 = extractvalue { i32, i32, i32, i32 } %292, 2, !dbg !31
  %296 = extractvalue { i32, i32, i32, i32 } %292, 3, !dbg !31
  %297 = bitcast i32 %293 to float, !dbg !31
  %298 = bitcast i32 %294 to float, !dbg !31
  %299 = bitcast i32 %295 to float, !dbg !31
  %300 = bitcast i32 %296 to float, !dbg !31
  %301 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !31
  %302 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %270, i64 %301, i1 %63) #5, !dbg !31
  %303 = extractvalue { i32, i32, i32, i32 } %302, 0, !dbg !31
  %304 = extractvalue { i32, i32, i32, i32 } %302, 1, !dbg !31
  %305 = extractvalue { i32, i32, i32, i32 } %302, 2, !dbg !31
  %306 = extractvalue { i32, i32, i32, i32 } %302, 3, !dbg !31
  %307 = bitcast i32 %303 to float, !dbg !31
  %308 = bitcast i32 %304 to float, !dbg !31
  %309 = bitcast i32 %305 to float, !dbg !31
  %310 = bitcast i32 %306 to float, !dbg !31
  %311 = fadd float %185, %277, !dbg !32
  %312 = fadd float %187, %278, !dbg !32
  %313 = fadd float %189, %279, !dbg !32
  %314 = fadd float %191, %280, !dbg !32
  %315 = fadd float %196, %287, !dbg !32
  %316 = fadd float %201, %288, !dbg !32
  %317 = fadd float %206, %289, !dbg !32
  %318 = fadd float %211, %290, !dbg !32
  %319 = fadd float %216, %297, !dbg !32
  %320 = fadd float %221, %298, !dbg !32
  %321 = fadd float %226, %299, !dbg !32
  %322 = fadd float %231, %300, !dbg !32
  %323 = fadd float %236, %307, !dbg !32
  %324 = fadd float %241, %308, !dbg !32
  %325 = fadd float %246, %309, !dbg !32
  %326 = fadd float %251, %310, !dbg !32
  %327 = select i1 %63, float %311, float 0xFFF0000000000000, !dbg !33
  %328 = select i1 %63, float %312, float 0xFFF0000000000000, !dbg !33
  %329 = select i1 %63, float %313, float 0xFFF0000000000000, !dbg !33
  %330 = select i1 %63, float %314, float 0xFFF0000000000000, !dbg !33
  %331 = select i1 %63, float %315, float 0xFFF0000000000000, !dbg !33
  %332 = select i1 %63, float %316, float 0xFFF0000000000000, !dbg !33
  %333 = select i1 %63, float %317, float 0xFFF0000000000000, !dbg !33
  %334 = select i1 %63, float %318, float 0xFFF0000000000000, !dbg !33
  %335 = select i1 %63, float %319, float 0xFFF0000000000000, !dbg !33
  %336 = select i1 %63, float %320, float 0xFFF0000000000000, !dbg !33
  %337 = select i1 %63, float %321, float 0xFFF0000000000000, !dbg !33
  %338 = select i1 %63, float %322, float 0xFFF0000000000000, !dbg !33
  %339 = select i1 %63, float %323, float 0xFFF0000000000000, !dbg !33
  %340 = select i1 %63, float %324, float 0xFFF0000000000000, !dbg !33
  %341 = select i1 %63, float %325, float 0xFFF0000000000000, !dbg !33
  %342 = select i1 %63, float %326, float 0xFFF0000000000000, !dbg !33
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !34
  %343 = or disjoint i32 %17, 1, !dbg !34
  %344 = or disjoint i32 %17, 2, !dbg !34
  %345 = or disjoint i32 %17, 3, !dbg !34
  %346 = fcmp ogt float %327, %331, !dbg !38
  %347 = fcmp uno float %327, 0.000000e+00, !dbg !39
  %348 = or i1 %347, %346, !dbg !40
  %349 = select i1 %348, float %327, float %331, !dbg !41
  %350 = fcmp ogt float %328, %332, !dbg !38
  %351 = fcmp uno float %328, 0.000000e+00, !dbg !39
  %352 = or i1 %351, %350, !dbg !40
  %353 = select i1 %352, float %328, float %332, !dbg !41
  %354 = fcmp ogt float %329, %333, !dbg !38
  %355 = fcmp uno float %329, 0.000000e+00, !dbg !39
  %356 = or i1 %355, %354, !dbg !40
  %357 = select i1 %356, float %329, float %333, !dbg !41
  %358 = fcmp ogt float %330, %334, !dbg !38
  %359 = fcmp uno float %330, 0.000000e+00, !dbg !39
  %360 = or i1 %359, %358, !dbg !40
  %361 = select i1 %360, float %330, float %334, !dbg !41
  %362 = fcmp ogt float %349, %335, !dbg !38
  %363 = fcmp uno float %349, 0.000000e+00, !dbg !39
  %364 = or i1 %362, %363, !dbg !40
  %365 = select i1 %364, float %349, float %335, !dbg !41
  %366 = fcmp ogt float %353, %336, !dbg !38
  %367 = fcmp uno float %353, 0.000000e+00, !dbg !39
  %368 = or i1 %366, %367, !dbg !40
  %369 = select i1 %368, float %353, float %336, !dbg !41
  %370 = fcmp ogt float %357, %337, !dbg !38
  %371 = fcmp uno float %357, 0.000000e+00, !dbg !39
  %372 = or i1 %370, %371, !dbg !40
  %373 = select i1 %372, float %357, float %337, !dbg !41
  %374 = fcmp ogt float %361, %338, !dbg !38
  %375 = fcmp uno float %361, 0.000000e+00, !dbg !39
  %376 = or i1 %374, %375, !dbg !40
  %377 = select i1 %376, float %361, float %338, !dbg !41
  %378 = fcmp ogt float %365, %339, !dbg !38
  %379 = fcmp uno float %365, 0.000000e+00, !dbg !39
  %380 = or i1 %378, %379, !dbg !40
  %381 = select i1 %380, float %365, float %339, !dbg !41
  %382 = fcmp ogt float %369, %340, !dbg !38
  %383 = fcmp uno float %369, 0.000000e+00, !dbg !39
  %384 = or i1 %382, %383, !dbg !40
  %385 = select i1 %384, float %369, float %340, !dbg !41
  %386 = fcmp ogt float %373, %341, !dbg !38
  %387 = fcmp uno float %373, 0.000000e+00, !dbg !39
  %388 = or i1 %386, %387, !dbg !40
  %389 = select i1 %388, float %373, float %341, !dbg !41
  %390 = fcmp ogt float %377, %342, !dbg !38
  %391 = fcmp uno float %377, 0.000000e+00, !dbg !39
  %392 = or i1 %390, %391, !dbg !40
  %393 = select i1 %392, float %377, float %342, !dbg !41
  %394 = bitcast float %381 to i32, !dbg !34
  %395 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %394, i32 16, i32 31), !dbg !34
  %396 = bitcast i32 %395 to float, !dbg !34
  %397 = fcmp ogt float %381, %396, !dbg !38
  %398 = fcmp uno float %381, 0.000000e+00, !dbg !39
  %399 = or i1 %397, %398, !dbg !40
  %400 = bitcast float %385 to i32, !dbg !34
  %401 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %400, i32 16, i32 31), !dbg !34
  %402 = bitcast i32 %401 to float, !dbg !34
  %403 = fcmp ogt float %385, %402, !dbg !38
  %404 = fcmp uno float %385, 0.000000e+00, !dbg !39
  %405 = or i1 %403, %404, !dbg !40
  %406 = bitcast float %389 to i32, !dbg !34
  %407 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %406, i32 16, i32 31), !dbg !34
  %408 = bitcast i32 %407 to float, !dbg !34
  %409 = fcmp ogt float %389, %408, !dbg !38
  %410 = fcmp uno float %389, 0.000000e+00, !dbg !39
  %411 = or i1 %409, %410, !dbg !40
  %412 = bitcast float %393 to i32, !dbg !34
  %413 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %412, i32 16, i32 31), !dbg !34
  %414 = bitcast i32 %413 to float, !dbg !34
  %415 = fcmp ogt float %393, %414, !dbg !38
  %416 = fcmp uno float %393, 0.000000e+00, !dbg !39
  %417 = or i1 %415, %416, !dbg !40
  %418 = and i32 %13, 7, !dbg !34
  %419 = icmp eq i32 %12, 0, !dbg !34
  %420 = shl nuw nsw i32 %28, 3, !dbg !34
  %421 = or disjoint i32 %420, %17, !dbg !34
  %.idx9 = shl nuw nsw i32 %421, 5, !dbg !34
  %422 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx9, !dbg !34
  %423 = getelementptr float, ptr addrspace(3) %422, i32 %418, !dbg !34
  %424 = select i1 %399, i32 %394, i32 %395, !dbg !41
  %425 = insertelement <1 x i32> poison, i32 %424, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %423, <1 x i32> %425, i1 %419) #5, !dbg !34
  %426 = or disjoint i32 %420, %343, !dbg !34
  %.idx10 = shl nuw nsw i32 %426, 5, !dbg !34
  %427 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx10, !dbg !34
  %428 = getelementptr float, ptr addrspace(3) %427, i32 %418, !dbg !34
  %429 = select i1 %405, i32 %400, i32 %401, !dbg !41
  %430 = insertelement <1 x i32> poison, i32 %429, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %428, <1 x i32> %430, i1 %419) #5, !dbg !34
  %431 = or disjoint i32 %420, %344, !dbg !34
  %.idx11 = shl nuw nsw i32 %431, 5, !dbg !34
  %432 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx11, !dbg !34
  %433 = getelementptr float, ptr addrspace(3) %432, i32 %418, !dbg !34
  %434 = select i1 %411, i32 %406, i32 %407, !dbg !41
  %435 = insertelement <1 x i32> poison, i32 %434, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %433, <1 x i32> %435, i1 %419) #5, !dbg !34
  %436 = or disjoint i32 %420, %345, !dbg !34
  %.idx12 = shl nuw nsw i32 %436, 5, !dbg !34
  %437 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx12, !dbg !34
  %438 = getelementptr float, ptr addrspace(3) %437, i32 %418, !dbg !34
  %439 = select i1 %417, i32 %412, i32 %413, !dbg !41
  %440 = insertelement <1 x i32> poison, i32 %439, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %438, <1 x i32> %440, i1 %419) #5, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !34
  %441 = icmp samesign ult i32 %11, 512, !dbg !34
  %442 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !34
  %443 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %442, i1 %441) #5, !dbg !34
  %444 = bitcast i32 %443 to float, !dbg !34
  %445 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %443, i32 4, i32 31), !dbg !34
  %446 = bitcast i32 %445 to float, !dbg !34
  %447 = fcmp ogt float %444, %446, !dbg !38
  %448 = fcmp uno float %444, 0.000000e+00, !dbg !39
  %449 = or i1 %448, %447, !dbg !40
  %450 = select i1 %449, float %444, float %446, !dbg !41
  %451 = bitcast float %450 to i32, !dbg !34
  %452 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %451, i32 2, i32 31), !dbg !34
  %453 = bitcast i32 %452 to float, !dbg !34
  %454 = fcmp ogt float %450, %453, !dbg !38
  %455 = fcmp uno float %450, 0.000000e+00, !dbg !39
  %456 = or i1 %454, %455, !dbg !40
  %457 = select i1 %456, float %450, float %453, !dbg !41
  %458 = bitcast float %457 to i32, !dbg !34
  %459 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %458, i32 1, i32 31), !dbg !34
  %460 = bitcast i32 %459 to float, !dbg !34
  %461 = fcmp ogt float %457, %460, !dbg !38
  %462 = fcmp uno float %457, 0.000000e+00, !dbg !39
  %463 = or i1 %461, %462, !dbg !40
  %464 = and i32 %11, 519, !dbg !34
  %465 = icmp eq i32 %464, 0, !dbg !34
  %466 = select i1 %463, i32 %458, i32 %459, !dbg !41
  %467 = insertelement <1 x i32> poison, i32 %466, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %442, <1 x i32> %467, i1 %465) #5, !dbg !34
  %468 = getelementptr i8, ptr addrspace(3) %442, i32 1024, !dbg !34
  %469 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %468, i1 %441) #5, !dbg !34
  %470 = bitcast i32 %469 to float, !dbg !34
  %471 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %469, i32 4, i32 31), !dbg !34
  %472 = bitcast i32 %471 to float, !dbg !34
  %473 = fcmp ogt float %470, %472, !dbg !38
  %474 = fcmp uno float %470, 0.000000e+00, !dbg !39
  %475 = or i1 %474, %473, !dbg !40
  %476 = select i1 %475, float %470, float %472, !dbg !41
  %477 = bitcast float %476 to i32, !dbg !34
  %478 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %477, i32 2, i32 31), !dbg !34
  %479 = bitcast i32 %478 to float, !dbg !34
  %480 = fcmp ogt float %476, %479, !dbg !38
  %481 = fcmp uno float %476, 0.000000e+00, !dbg !39
  %482 = or i1 %480, %481, !dbg !40
  %483 = select i1 %482, float %476, float %479, !dbg !41
  %484 = bitcast float %483 to i32, !dbg !34
  %485 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %484, i32 1, i32 31), !dbg !34
  %486 = bitcast i32 %485 to float, !dbg !34
  %487 = fcmp ogt float %483, %486, !dbg !38
  %488 = fcmp uno float %483, 0.000000e+00, !dbg !39
  %489 = or i1 %487, %488, !dbg !40
  %490 = select i1 %489, i32 %484, i32 %485, !dbg !41
  %491 = insertelement <1 x i32> poison, i32 %490, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %468, <1 x i32> %491, i1 %465) #5, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !34
  %492 = load float, ptr addrspace(3) %422, align 16, !dbg !34
  %493 = load float, ptr addrspace(3) %427, align 16, !dbg !34
  %494 = load float, ptr addrspace(3) %432, align 16, !dbg !34
  %495 = load float, ptr addrspace(3) %437, align 16, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %496 = or disjoint i32 %92, %28, !dbg !42
  %497 = and i32 %11, 63, !dbg !42
  %.idx = shl nuw nsw i32 %16, 4, !dbg !42
  %498 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !42
  %499 = getelementptr inbounds nuw float, ptr addrspace(3) %498, i32 %496, !dbg !42
  store float %492, ptr addrspace(3) %499, align 4, !dbg !42
  %500 = or disjoint i32 %496, 8, !dbg !42
  %501 = lshr i32 %500, 3, !dbg !42
  %502 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %501, !dbg !42
  %503 = getelementptr inbounds nuw float, ptr addrspace(3) %502, i32 %500, !dbg !42
  store float %493, ptr addrspace(3) %503, align 4, !dbg !42
  %504 = or disjoint i32 %496, 16, !dbg !42
  %505 = lshr i32 %504, 3, !dbg !42
  %506 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %505, !dbg !42
  %507 = getelementptr inbounds nuw float, ptr addrspace(3) %506, i32 %504, !dbg !42
  store float %494, ptr addrspace(3) %507, align 4, !dbg !42
  %508 = or disjoint i32 %496, 24, !dbg !42
  %509 = lshr i32 %508, 3, !dbg !42
  %510 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %509, !dbg !42
  %511 = getelementptr inbounds nuw float, ptr addrspace(3) %510, i32 %508, !dbg !42
  store float %495, ptr addrspace(3) %511, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %512 = lshr i32 %497, 3, !dbg !42
  %513 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %512, !dbg !42
  %514 = getelementptr inbounds nuw float, ptr addrspace(3) %513, i32 %497, !dbg !42
  %515 = load i32, ptr addrspace(3) %514, align 4, !dbg !42
  %516 = fsub float %311, %492, !dbg !43
  %517 = fsub float %312, %493, !dbg !43
  %518 = fsub float %313, %494, !dbg !43
  %519 = fsub float %314, %495, !dbg !43
  %520 = fsub float %315, %492, !dbg !43
  %521 = fsub float %316, %493, !dbg !43
  %522 = fsub float %317, %494, !dbg !43
  %523 = fsub float %318, %495, !dbg !43
  %524 = fsub float %319, %492, !dbg !43
  %525 = fsub float %320, %493, !dbg !43
  %526 = fsub float %321, %494, !dbg !43
  %527 = fsub float %322, %495, !dbg !43
  %528 = fsub float %323, %492, !dbg !43
  %529 = fsub float %324, %493, !dbg !43
  %530 = fsub float %325, %494, !dbg !43
  %531 = fsub float %326, %495, !dbg !43
  %532 = fmul float %516, 0x3FF7154760000000, !dbg !44
  %533 = tail call float @llvm.nvvm.ex2.approx.f(float %532), !dbg !44
  %534 = fmul float %517, 0x3FF7154760000000, !dbg !44
  %535 = tail call float @llvm.nvvm.ex2.approx.f(float %534), !dbg !44
  %536 = fmul float %518, 0x3FF7154760000000, !dbg !44
  %537 = tail call float @llvm.nvvm.ex2.approx.f(float %536), !dbg !44
  %538 = fmul float %519, 0x3FF7154760000000, !dbg !44
  %539 = tail call float @llvm.nvvm.ex2.approx.f(float %538), !dbg !44
  %540 = fmul float %520, 0x3FF7154760000000, !dbg !44
  %541 = tail call float @llvm.nvvm.ex2.approx.f(float %540), !dbg !44
  %542 = fmul float %521, 0x3FF7154760000000, !dbg !44
  %543 = tail call float @llvm.nvvm.ex2.approx.f(float %542), !dbg !44
  %544 = fmul float %522, 0x3FF7154760000000, !dbg !44
  %545 = tail call float @llvm.nvvm.ex2.approx.f(float %544), !dbg !44
  %546 = fmul float %523, 0x3FF7154760000000, !dbg !44
  %547 = tail call float @llvm.nvvm.ex2.approx.f(float %546), !dbg !44
  %548 = fmul float %524, 0x3FF7154760000000, !dbg !44
  %549 = tail call float @llvm.nvvm.ex2.approx.f(float %548), !dbg !44
  %550 = fmul float %525, 0x3FF7154760000000, !dbg !44
  %551 = tail call float @llvm.nvvm.ex2.approx.f(float %550), !dbg !44
  %552 = fmul float %526, 0x3FF7154760000000, !dbg !44
  %553 = tail call float @llvm.nvvm.ex2.approx.f(float %552), !dbg !44
  %554 = fmul float %527, 0x3FF7154760000000, !dbg !44
  %555 = tail call float @llvm.nvvm.ex2.approx.f(float %554), !dbg !44
  %556 = fmul float %528, 0x3FF7154760000000, !dbg !44
  %557 = tail call float @llvm.nvvm.ex2.approx.f(float %556), !dbg !44
  %558 = fmul float %529, 0x3FF7154760000000, !dbg !44
  %559 = tail call float @llvm.nvvm.ex2.approx.f(float %558), !dbg !44
  %560 = fmul float %530, 0x3FF7154760000000, !dbg !44
  %561 = tail call float @llvm.nvvm.ex2.approx.f(float %560), !dbg !44
  %562 = fmul float %531, 0x3FF7154760000000, !dbg !44
  %563 = tail call float @llvm.nvvm.ex2.approx.f(float %562), !dbg !44
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !45
  %564 = fadd float %533, %541, !dbg !49
  %565 = fadd float %535, %543, !dbg !49
  %566 = fadd float %537, %545, !dbg !49
  %567 = fadd float %539, %547, !dbg !49
  %568 = fadd float %564, %549, !dbg !49
  %569 = fadd float %565, %551, !dbg !49
  %570 = fadd float %566, %553, !dbg !49
  %571 = fadd float %567, %555, !dbg !49
  %572 = fadd float %568, %557, !dbg !49
  %573 = select i1 %63, float %572, float 0.000000e+00, !dbg !49
  %574 = fadd float %569, %559, !dbg !49
  %575 = select i1 %63, float %574, float 0.000000e+00, !dbg !49
  %576 = fadd float %570, %561, !dbg !49
  %577 = select i1 %63, float %576, float 0.000000e+00, !dbg !49
  %578 = fadd float %571, %563, !dbg !49
  %579 = select i1 %63, float %578, float 0.000000e+00, !dbg !49
  %580 = bitcast float %573 to i32, !dbg !45
  %581 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %580, i32 16, i32 31), !dbg !45
  %582 = bitcast i32 %581 to float, !dbg !45
  %583 = fadd float %573, %582, !dbg !49
  %584 = bitcast float %575 to i32, !dbg !45
  %585 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %584, i32 16, i32 31), !dbg !45
  %586 = bitcast i32 %585 to float, !dbg !45
  %587 = fadd float %575, %586, !dbg !49
  %588 = bitcast float %577 to i32, !dbg !45
  %589 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %588, i32 16, i32 31), !dbg !45
  %590 = bitcast i32 %589 to float, !dbg !45
  %591 = fadd float %577, %590, !dbg !49
  %592 = bitcast float %579 to i32, !dbg !45
  %593 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %592, i32 16, i32 31), !dbg !45
  %594 = bitcast i32 %593 to float, !dbg !45
  %595 = fadd float %579, %594, !dbg !49
  %596 = bitcast float %583 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %423, <1 x i32> %596, i1 %419) #5, !dbg !45
  %597 = bitcast float %587 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %428, <1 x i32> %597, i1 %419) #5, !dbg !45
  %598 = bitcast float %591 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %433, <1 x i32> %598, i1 %419) #5, !dbg !45
  %599 = bitcast float %595 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %438, <1 x i32> %599, i1 %419) #5, !dbg !45
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !45
  %600 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %442, i1 %441) #5, !dbg !45
  %601 = bitcast i32 %600 to float, !dbg !45
  %602 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %600, i32 4, i32 31), !dbg !45
  %603 = bitcast i32 %602 to float, !dbg !45
  %604 = fadd float %601, %603, !dbg !49
  %605 = bitcast float %604 to i32, !dbg !45
  %606 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %605, i32 2, i32 31), !dbg !45
  %607 = bitcast i32 %606 to float, !dbg !45
  %608 = fadd float %604, %607, !dbg !49
  %609 = bitcast float %608 to i32, !dbg !45
  %610 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %609, i32 1, i32 31), !dbg !45
  %611 = bitcast i32 %610 to float, !dbg !45
  %612 = fadd float %608, %611, !dbg !49
  %613 = bitcast float %612 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %442, <1 x i32> %613, i1 %465) #5, !dbg !45
  %614 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %468, i1 %441) #5, !dbg !45
  %615 = bitcast i32 %614 to float, !dbg !45
  %616 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %614, i32 4, i32 31), !dbg !45
  %617 = bitcast i32 %616 to float, !dbg !45
  %618 = fadd float %615, %617, !dbg !49
  %619 = bitcast float %618 to i32, !dbg !45
  %620 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %619, i32 2, i32 31), !dbg !45
  %621 = bitcast i32 %620 to float, !dbg !45
  %622 = fadd float %618, %621, !dbg !49
  %623 = bitcast float %622 to i32, !dbg !45
  %624 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %623, i32 1, i32 31), !dbg !45
  %625 = bitcast i32 %624 to float, !dbg !45
  %626 = fadd float %622, %625, !dbg !49
  %627 = bitcast float %626 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %468, <1 x i32> %627, i1 %465) #5, !dbg !45
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !45
  %628 = load i32, ptr addrspace(3) %422, align 16, !dbg !45
  %629 = load i32, ptr addrspace(3) %427, align 16, !dbg !45
  %630 = load i32, ptr addrspace(3) %432, align 16, !dbg !45
  %631 = load i32, ptr addrspace(3) %437, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !50
  %632 = insertelement <1 x i32> poison, i32 %628, i64 0, !dbg !50
  store <1 x i32> %632, ptr addrspace(3) %499, align 4, !dbg !50
  %633 = insertelement <1 x i32> poison, i32 %629, i64 0, !dbg !50
  store <1 x i32> %633, ptr addrspace(3) %503, align 4, !dbg !50
  %634 = insertelement <1 x i32> poison, i32 %630, i64 0, !dbg !50
  store <1 x i32> %634, ptr addrspace(3) %507, align 4, !dbg !50
  %635 = insertelement <1 x i32> poison, i32 %631, i64 0, !dbg !50
  store <1 x i32> %635, ptr addrspace(3) %511, align 4, !dbg !50
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !50
  %636 = load i32, ptr addrspace(3) %514, align 4, !dbg !50
  %637 = shl nuw nsw i32 %22, 6, !dbg !51
  %638 = add i32 %637, %35, !dbg !52
  %639 = sext i32 %638 to i64, !dbg !53
  %640 = getelementptr float, ptr addrspace(1) %2, i64 %639, !dbg !53
  %641 = and i32 %11, 192, !dbg !54
  %642 = or i32 %641, %9, !dbg !54
  %643 = icmp eq i32 %642, 0, !dbg !54
  %644 = and i1 %41, %643, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %515, ptr addrspace(1) %640, i1 %644) #5, !dbg !54
  %645 = getelementptr float, ptr addrspace(1) %3, i64 %639, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %636, ptr addrspace(1) %645, i1 %644) #5, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

attributes #0 = { "nvvm.reqntid"="256" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "claemv32fqlvujzqgcxvvvdmn3ith7s5dli5nr6leneidikarcqt.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/la")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "triton_per_fused_add_2", linkageName: "triton_per_fused_add_2", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 25, column: 28, scope: !5)
!9 = !DILocation(line: 25, column: 33, scope: !5)
!10 = !DILocation(line: 26, column: 44, scope: !5)
!11 = !DILocation(line: 26, column: 23, scope: !5)
!12 = !DILocation(line: 27, column: 21, scope: !5)
!13 = !DILocation(line: 28, column: 28, scope: !5)
!14 = !DILocation(line: 28, column: 33, scope: !5)
!15 = !DILocation(line: 29, column: 44, scope: !5)
!16 = !DILocation(line: 29, column: 23, scope: !5)
!17 = !DILocation(line: 30, column: 21, scope: !5)
!18 = !DILocation(line: 31, column: 38, scope: !5)
!19 = !DILocation(line: 39, column: 40, scope: !5)
!20 = !DILocation(line: 39, column: 37, scope: !5)
!21 = !DILocation(line: 39, column: 50, scope: !5)
!22 = !DILocation(line: 39, column: 45, scope: !5)
!23 = !DILocation(line: 39, column: 30, scope: !5)
!24 = !DILocation(line: 39, column: 63, scope: !5)
!25 = !DILocation(line: 39, column: 55, scope: !5)
!26 = !DILocation(line: 40, column: 37, scope: !5)
!27 = !DILocation(line: 40, column: 48, scope: !5)
!28 = !DILocation(line: 40, column: 35, scope: !5)
!29 = !DILocation(line: 40, column: 44, scope: !5)
!30 = !DILocation(line: 40, column: 30, scope: !5)
!31 = !DILocation(line: 40, column: 53, scope: !5)
!32 = !DILocation(line: 41, column: 18, scope: !5)
!33 = !DILocation(line: 44, column: 41, scope: !5)
!34 = !DILocation(line: 124, column: 29, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !5, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 45, column: 37, scope: !5)
!38 = !DILocation(line: 111, column: 15, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 113, column: 21, scope: !35, inlinedAt: !37)
!40 = !DILocation(line: 113, column: 16, scope: !35, inlinedAt: !37)
!41 = !DILocation(line: 114, column: 29, scope: !35, inlinedAt: !37)
!42 = !DILocation(line: 45, column: 40, scope: !5)
!43 = !DILocation(line: 46, column: 18, scope: !5)
!44 = !DILocation(line: 47, column: 24, scope: !5)
!45 = !DILocation(line: 290, column: 36, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !5, file: !47, discriminator: 0)
!47 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!48 = !DILocation(line: 50, column: 26, scope: !5)
!49 = !DILocation(line: 260, column: 15, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 50, column: 29, scope: !5)
!51 = !DILocation(line: 51, column: 33, scope: !5)
!52 = !DILocation(line: 51, column: 30, scope: !5)
!53 = !DILocation(line: 51, column: 25, scope: !5)
!54 = !DILocation(line: 51, column: 44, scope: !5)
!55 = !DILocation(line: 52, column: 25, scope: !5)
!56 = !DILocation(line: 52, column: 45, scope: !5)
!57 = !DILocation(line: 52, column: 4, scope: !5)
