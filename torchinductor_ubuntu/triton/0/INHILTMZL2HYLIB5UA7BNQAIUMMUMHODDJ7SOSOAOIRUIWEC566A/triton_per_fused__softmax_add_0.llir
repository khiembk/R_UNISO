; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [121 x i8] c"/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/gs/cgscz7snavm33fdoafcgbjt7z3jguuay3yszv3klt6rj5gv776id.py\00"
@assertMessage_0 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp22 < 32\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !5 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_per_fused__softmax_add_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr #1 !dbg !9 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !10
  %9 = icmp samesign ult i32 %8, 400, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = icmp samesign ult i32 %11, 50, !dbg !13
  %13 = udiv i32 %8, 50, !dbg !14
  %14 = mul i32 %13, 50, !dbg !15
  %.decomposed = sub i32 %8, %14, !dbg !15
  %15 = mul i32 %8, 50, !dbg !16
  %16 = add i32 %11, %15, !dbg !17
  %17 = sext i32 %16 to i64, !dbg !18
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !18
  %19 = and i1 %9, %12, !dbg !19
  %20 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %18, i1 %19) #8, !dbg !20
  %21 = mul nuw nsw i32 %.decomposed, 50, !dbg !21
  %22 = add nuw nsw i32 %21, %11, !dbg !22
  %23 = zext nneg i32 %22 to i64, !dbg !23
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !23
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !24
  %26 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$4 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $2 + 0 ], $3;", "=r,r,l,l,b"(i32 0, ptr addrspace(1) %24, i64 %25, i1 %19) #8, !dbg !24
  %27 = sub nsw i32 %11, %.decomposed, !dbg !25
  %28 = tail call i32 @llvm.smin.i32(i32 %27, i32 0), !dbg !26
  %29 = sub nsw i32 0, %28, !dbg !27
  %30 = zext nneg i32 %29 to i64, !dbg !28
  %31 = icmp sgt i32 %27, -16, !dbg !28
  %32 = uitofp nneg i32 %29 to float, !dbg !29
  %33 = fmul float %32, 6.250000e-02, !dbg !30
  %34 = fcmp olt float %33, 0x3810000000000000, !dbg !31
  %35 = fmul float %33, 0x4160000000000000, !dbg !31
  %.02.i = select i1 %34, float %35, float %33, !dbg !31
  %i.i.0.i = select i1 %34, float -2.300000e+01, float 0.000000e+00, !dbg !31
  %36 = bitcast float %.02.i to i32, !dbg !31
  %37 = add nsw i32 %36, -1059760811, !dbg !31
  %38 = and i32 %37, -8388608, !dbg !31
  %39 = sub i32 %36, %38, !dbg !31
  %40 = bitcast i32 %39 to float, !dbg !31
  %41 = sitofp i32 %38 to float, !dbg !31
  %42 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !31
  %.not.i = icmp eq i32 %42, 0, !dbg !31
  %43 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %41, float 0x3E80000000000000, float %i.i.0.i) #8, !dbg !31
  %44 = tail call float @llvm.nvvm.fma.rn.f(float %41, float 0x3E80000000000000, float %i.i.0.i) #8, !dbg !31
  %.08.i = select i1 %.not.i, float %44, float %43, !dbg !31
  %45 = fadd float %40, -1.000000e+00, !dbg !31
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !31
  %.not1.i = icmp eq i32 %46, 0, !dbg !31
  %47 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %45, float 0x3FC2073EC0000000) #8, !dbg !31
  %48 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %45, float 0x3FC2073EC0000000) #8, !dbg !31
  %.010.i = select i1 %.not1.i, float %48, float %47, !dbg !31
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !31
  %.not2.i = icmp eq i32 %49, 0, !dbg !31
  %50 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %45, float 0xBFBF19B980000000) #8, !dbg !31
  %51 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %45, float 0xBFBF19B980000000) #8, !dbg !31
  %.011.i = select i1 %.not2.i, float %51, float %50, !dbg !31
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !31
  %.not3.i = icmp eq i32 %52, 0, !dbg !31
  %53 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %45, float 0x3FC1E52AA0000000) #8, !dbg !31
  %54 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %45, float 0x3FC1E52AA0000000) #8, !dbg !31
  %.012.i = select i1 %.not3.i, float %54, float %53, !dbg !31
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !31
  %.not4.i = icmp eq i32 %55, 0, !dbg !31
  %56 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %45, float 0xBFC55B1720000000) #8, !dbg !31
  %57 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %45, float 0xBFC55B1720000000) #8, !dbg !31
  %.09.i = select i1 %.not4.i, float %57, float %56, !dbg !31
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !31
  %.not5.i = icmp eq i32 %58, 0, !dbg !31
  %59 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %45, float 0x3FC99DA160000000) #8, !dbg !31
  %60 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %45, float 0x3FC99DA160000000) #8, !dbg !31
  %.05.i = select i1 %.not5.i, float %60, float %59, !dbg !31
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !31
  %.not6.i = icmp eq i32 %61, 0, !dbg !31
  %62 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %45, float 0xBFCFFFE440000000) #8, !dbg !31
  %63 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %45, float 0xBFCFFFE440000000) #8, !dbg !31
  %.01.i = select i1 %.not6.i, float %63, float %62, !dbg !31
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !31
  %.not7.i = icmp eq i32 %64, 0, !dbg !31
  %65 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %45, float 0x3FD5554F00000000) #8, !dbg !31
  %66 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %45, float 0x3FD5554F00000000) #8, !dbg !31
  %.0.i = select i1 %.not7.i, float %66, float %65, !dbg !31
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !31
  %.not8.i = icmp eq i32 %67, 0, !dbg !31
  %68 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %45, float -5.000000e-01) #8, !dbg !31
  %69 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %45, float -5.000000e-01) #8, !dbg !31
  %.07.i = select i1 %.not8.i, float %69, float %68, !dbg !31
  %70 = fmul float %45, %.07.i, !dbg !31
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !31
  %.not9.i = icmp eq i32 %71, 0, !dbg !31
  %72 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %70, float %45, float %45) #8, !dbg !31
  %73 = tail call float @llvm.nvvm.fma.rn.f(float %70, float %45, float %45) #8, !dbg !31
  %.06.i = select i1 %.not9.i, float %73, float %72, !dbg !31
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !31
  %.not10.i = icmp eq i32 %74, 0, !dbg !31
  %75 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #8, !dbg !31
  %76 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #8, !dbg !31
  %.04.i = select i1 %.not10.i, float %76, float %75, !dbg !31
  %77 = icmp samesign ugt i32 %36, 2139095039, !dbg !31
  br i1 %77, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !31

__nv_fmaf_rn.exit.i.i:                            ; preds = %7
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !31
  %.not11.i = icmp eq i32 %78, 0, !dbg !31
  %79 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !31
  %80 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !31
  %.03.i = select i1 %.not11.i, float %80, float %79, !dbg !31
  br label %__nv_logf.exit, !dbg !31

__nv_logf.exit:                                   ; preds = %7, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %7 ], !dbg !31
  %81 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !31
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !31
  %.not.i4 = icmp eq i32 %82, 0, !dbg !31
  %.08.i5 = select i1 %.not.i4, float %44, float %43, !dbg !31
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !31
  %.not1.i6 = icmp eq i32 %83, 0, !dbg !31
  %.010.i7 = select i1 %.not1.i6, float %48, float %47, !dbg !31
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !31
  %.not2.i8 = icmp eq i32 %84, 0, !dbg !31
  %85 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i7, float %45, float 0xBFBF19B980000000) #8, !dbg !31
  %86 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i7, float %45, float 0xBFBF19B980000000) #8, !dbg !31
  %.011.i9 = select i1 %.not2.i8, float %86, float %85, !dbg !31
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !31
  %.not3.i10 = icmp eq i32 %87, 0, !dbg !31
  %88 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i9, float %45, float 0x3FC1E52AA0000000) #8, !dbg !31
  %89 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i9, float %45, float 0x3FC1E52AA0000000) #8, !dbg !31
  %.012.i11 = select i1 %.not3.i10, float %89, float %88, !dbg !31
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !31
  %.not4.i12 = icmp eq i32 %90, 0, !dbg !31
  %91 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i11, float %45, float 0xBFC55B1720000000) #8, !dbg !31
  %92 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i11, float %45, float 0xBFC55B1720000000) #8, !dbg !31
  %.09.i13 = select i1 %.not4.i12, float %92, float %91, !dbg !31
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !31
  %.not5.i14 = icmp eq i32 %93, 0, !dbg !31
  %94 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i13, float %45, float 0x3FC99DA160000000) #8, !dbg !31
  %95 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i13, float %45, float 0x3FC99DA160000000) #8, !dbg !31
  %.05.i15 = select i1 %.not5.i14, float %95, float %94, !dbg !31
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !31
  %.not6.i16 = icmp eq i32 %96, 0, !dbg !31
  %97 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i15, float %45, float 0xBFCFFFE440000000) #8, !dbg !31
  %98 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i15, float %45, float 0xBFCFFFE440000000) #8, !dbg !31
  %.01.i17 = select i1 %.not6.i16, float %98, float %97, !dbg !31
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !31
  %.not7.i18 = icmp eq i32 %99, 0, !dbg !31
  %100 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i17, float %45, float 0x3FD5554F00000000) #8, !dbg !31
  %101 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i17, float %45, float 0x3FD5554F00000000) #8, !dbg !31
  %.0.i19 = select i1 %.not7.i18, float %101, float %100, !dbg !31
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !31
  %.not8.i20 = icmp eq i32 %102, 0, !dbg !31
  %103 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i19, float %45, float -5.000000e-01) #8, !dbg !31
  %104 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i19, float %45, float -5.000000e-01) #8, !dbg !31
  %.07.i21 = select i1 %.not8.i20, float %104, float %103, !dbg !31
  %105 = fmul float %45, %.07.i21, !dbg !31
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !31
  %.not9.i22 = icmp eq i32 %106, 0, !dbg !31
  %107 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %105, float %45, float %45) #8, !dbg !31
  %108 = tail call float @llvm.nvvm.fma.rn.f(float %105, float %45, float %45) #8, !dbg !31
  %.06.i23 = select i1 %.not9.i22, float %108, float %107, !dbg !31
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !31
  %.not10.i24 = icmp eq i32 %109, 0, !dbg !31
  %110 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i5, float 0x3FE62E4300000000, float %.06.i23) #8, !dbg !31
  %111 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i5, float 0x3FE62E4300000000, float %.06.i23) #8, !dbg !31
  %.04.i25 = select i1 %.not10.i24, float %111, float %110, !dbg !31
  br i1 %77, label %__nv_fmaf_rn.exit.i.i28, label %__nv_logf.exit31, !dbg !31

__nv_fmaf_rn.exit.i.i28:                          ; preds = %__nv_logf.exit
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !31
  %.not11.i29 = icmp eq i32 %112, 0, !dbg !31
  %113 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !31
  %114 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !31
  %.03.i30 = select i1 %.not11.i29, float %114, float %113, !dbg !31
  br label %__nv_logf.exit31, !dbg !31

__nv_logf.exit31:                                 ; preds = %__nv_logf.exit, %__nv_fmaf_rn.exit.i.i28
  %r.i.0.i26 = phi float [ %.03.i30, %__nv_fmaf_rn.exit.i.i28 ], [ %.04.i25, %__nv_logf.exit ], !dbg !31
  %115 = fmul float %r.i.0.i26, 0x3FDEC709E0000000, !dbg !32
  %116 = fmul float %115, 1.600000e+01, !dbg !33
  %117 = select i1 %81, float 0xFFF0000000000000, float %116, !dbg !31
  %118 = fptosi float %117 to i64, !dbg !34
  %119 = add i64 %118, 16, !dbg !35
  %120 = tail call i64 @llvm.smin.i64(i64 %119, i64 31), !dbg !36
  %121 = select i1 %31, i64 %30, i64 %120, !dbg !40
  %122 = lshr i64 %121, 58, !dbg !41
  %123 = and i64 %122, 32, !dbg !41
  %124 = add nsw i64 %123, %121, !dbg !41
  %125 = icmp ugt i64 %124, 31, !dbg !42
  %.not1 = and i1 %19, %125, !dbg !43
  br i1 %.not1, label %126, label %127, !dbg !43

126:                                              ; preds = %__nv_logf.exit31
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 60, ptr nonnull @assertFunc_0, i64 1), !dbg !43
  unreachable, !dbg !43

127:                                              ; preds = %__nv_logf.exit31
  %128 = fmul float %r.i.0.i, 0x3FDEC709E0000000, !dbg !32
  %129 = fmul float %128, 1.600000e+01, !dbg !33
  %130 = select i1 %81, float 0xFFF0000000000000, float %129, !dbg !31
  %131 = fptosi float %130 to i64, !dbg !34
  %132 = add i64 %131, 16, !dbg !35
  %133 = tail call i64 @llvm.smin.i64(i64 %132, i64 31), !dbg !36
  %134 = select i1 %31, i64 %30, i64 %133, !dbg !40
  %135 = lshr i64 %134, 58, !dbg !41
  %136 = and i64 %135, 32, !dbg !41
  %137 = add nsw i64 %136, %134, !dbg !41
  %138 = bitcast i32 %26 to float, !dbg !24
  %139 = bitcast i32 %20 to float, !dbg !20
  %140 = lshr i32 %10, 5, !dbg !12
  %141 = and i32 %10, 31, !dbg !12
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !43
  %142 = zext nneg i32 %13 to i64, !dbg !44
  %.idx = shl i64 %137, 5, !dbg !45
  %143 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx, !dbg !45
  %144 = getelementptr float, ptr addrspace(1) %143, i64 %142, !dbg !45
  %145 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !46
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %144, i64 %145, i1 %19) #8, !dbg !46
  %147 = bitcast i32 %146 to float, !dbg !46
  %148 = fadd float %138, %147, !dbg !47
  %149 = fadd float %148, %139, !dbg !48
  %150 = select i1 %19, float %149, float 0xFFF0000000000000, !dbg !49
  %151 = bitcast float %150 to i32, !dbg !50
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 16, i32 31), !dbg !50
  %153 = bitcast i32 %152 to float, !dbg !50
  %154 = fcmp ogt float %150, %153, !dbg !52
  %155 = fcmp uno float %150, 0.000000e+00, !dbg !53
  %156 = or i1 %154, %155, !dbg !54
  %157 = select i1 %156, float %150, float %153, !dbg !55
  %158 = bitcast float %157 to i32, !dbg !50
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 8, i32 31), !dbg !50
  %160 = bitcast i32 %159 to float, !dbg !50
  %161 = fcmp ogt float %157, %160, !dbg !52
  %162 = fcmp uno float %157, 0.000000e+00, !dbg !53
  %163 = or i1 %161, %162, !dbg !54
  %164 = select i1 %163, float %157, float %160, !dbg !55
  %165 = bitcast float %164 to i32, !dbg !50
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 4, i32 31), !dbg !50
  %167 = bitcast i32 %166 to float, !dbg !50
  %168 = fcmp ogt float %164, %167, !dbg !52
  %169 = fcmp uno float %164, 0.000000e+00, !dbg !53
  %170 = or i1 %168, %169, !dbg !54
  %171 = select i1 %170, float %164, float %167, !dbg !55
  %172 = bitcast float %171 to i32, !dbg !50
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 2, i32 31), !dbg !50
  %174 = bitcast i32 %173 to float, !dbg !50
  %175 = fcmp ogt float %171, %174, !dbg !52
  %176 = fcmp uno float %171, 0.000000e+00, !dbg !53
  %177 = or i1 %175, %176, !dbg !54
  %178 = select i1 %177, float %171, float %174, !dbg !55
  %179 = bitcast float %178 to i32, !dbg !50
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 1, i32 31), !dbg !50
  %181 = bitcast i32 %180 to float, !dbg !50
  %182 = fcmp ogt float %178, %181, !dbg !52
  %183 = fcmp uno float %178, 0.000000e+00, !dbg !53
  %184 = or i1 %182, %183, !dbg !54
  %185 = and i32 %140, 1, !dbg !50
  %186 = icmp eq i32 %141, 0, !dbg !50
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i32 %185, !dbg !50
  %188 = select i1 %184, i32 %179, i32 %180, !dbg !55
  %189 = insertelement <1 x i32> poison, i32 %188, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %189, i1 %186) #8, !dbg !50
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !50
  %190 = icmp samesign ult i32 %10, 2, !dbg !50
  %191 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !50
  %192 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %191, i1 %190) #8, !dbg !50
  %193 = bitcast i32 %192 to float, !dbg !50
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 1, i32 31), !dbg !50
  %195 = bitcast i32 %194 to float, !dbg !50
  %196 = fcmp ogt float %193, %195, !dbg !52
  %197 = fcmp uno float %193, 0.000000e+00, !dbg !53
  %198 = or i1 %197, %196, !dbg !54
  %199 = icmp eq i32 %10, 0, !dbg !50
  %200 = select i1 %198, i32 %192, i32 %194, !dbg !55
  %201 = insertelement <1 x i32> poison, i32 %200, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %201, i1 %199) #8, !dbg !50
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !50
  %202 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !50
  %203 = fsub float %149, %202, !dbg !56
  %204 = fmul float %203, 0x3FF7154760000000, !dbg !57
  %205 = tail call float @llvm.nvvm.ex2.approx.f(float %204), !dbg !57
  %206 = select i1 %19, float %205, float 0.000000e+00, !dbg !58
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !59
  %207 = bitcast float %206 to i32, !dbg !59
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 16, i32 31), !dbg !59
  %209 = bitcast i32 %208 to float, !dbg !59
  %210 = fadd float %206, %209, !dbg !63
  %211 = bitcast float %210 to i32, !dbg !59
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 8, i32 31), !dbg !59
  %213 = bitcast i32 %212 to float, !dbg !59
  %214 = fadd float %210, %213, !dbg !63
  %215 = bitcast float %214 to i32, !dbg !59
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 4, i32 31), !dbg !59
  %217 = bitcast i32 %216 to float, !dbg !59
  %218 = fadd float %214, %217, !dbg !63
  %219 = bitcast float %218 to i32, !dbg !59
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 2, i32 31), !dbg !59
  %221 = bitcast i32 %220 to float, !dbg !59
  %222 = fadd float %218, %221, !dbg !63
  %223 = bitcast float %222 to i32, !dbg !59
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 1, i32 31), !dbg !59
  %225 = bitcast i32 %224 to float, !dbg !59
  %226 = fadd float %222, %225, !dbg !63
  %227 = bitcast float %226 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %227, i1 %186) #8, !dbg !59
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !59
  %228 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %191, i1 %190) #8, !dbg !59
  %229 = bitcast i32 %228 to float, !dbg !59
  %230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 1, i32 31), !dbg !59
  %231 = bitcast i32 %230 to float, !dbg !59
  %232 = fadd float %229, %231, !dbg !63
  %233 = bitcast float %232 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %233, i1 %199) #8, !dbg !59
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !59
  %234 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !59
  %235 = tail call float @llvm.nvvm.div.full(float %205, float %234), !dbg !64
  %236 = mul i32 %13, 2528, !dbg !65
  %237 = add i32 %22, %236, !dbg !66
  %238 = sext i32 %237 to i64, !dbg !67
  %239 = getelementptr float, ptr addrspace(1) %3, i64 %238, !dbg !67
  %240 = bitcast float %235 to i32, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %240, ptr addrspace(1) %239, i1 %19) #8, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #5

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #7

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #7

attributes #0 = { noreturn }
attributes #1 = { "nvvm.reqntid"="64" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #8 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "cgscz7snavm33fdoafcgbjt7z3jguuay3yszv3klt6rj5gv776id.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/gs")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !6, file: !6, type: !7, spFlags: DISPFlagOptimized)
!6 = !DIFile(filename: "<unknown>", directory: "")
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = distinct !DISubprogram(name: "triton_per_fused__softmax_add_0", linkageName: "triton_per_fused__softmax_add_0", scope: !1, file: !1, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!10 = !DILocation(line: 24, column: 28, scope: !9)
!11 = !DILocation(line: 26, column: 21, scope: !9)
!12 = !DILocation(line: 27, column: 38, scope: !9)
!13 = !DILocation(line: 29, column: 25, scope: !9)
!14 = !DILocation(line: 35, column: 19, scope: !9)
!15 = !DILocation(line: 34, column: 19, scope: !9)
!16 = !DILocation(line: 36, column: 40, scope: !9)
!17 = !DILocation(line: 36, column: 37, scope: !9)
!18 = !DILocation(line: 36, column: 30, scope: !9)
!19 = !DILocation(line: 36, column: 55, scope: !9)
!20 = !DILocation(line: 36, column: 45, scope: !9)
!21 = !DILocation(line: 37, column: 41, scope: !9)
!22 = !DILocation(line: 37, column: 38, scope: !9)
!23 = !DILocation(line: 37, column: 31, scope: !9)
!24 = !DILocation(line: 37, column: 46, scope: !9)
!25 = !DILocation(line: 38, column: 62, scope: !9)
!26 = !DILocation(line: 38, column: 75, scope: !9)
!27 = !DILocation(line: 38, column: 17, scope: !9)
!28 = !DILocation(line: 40, column: 18, scope: !9)
!29 = !DILocation(line: 41, column: 19, scope: !9)
!30 = !DILocation(line: 43, column: 18, scope: !9)
!31 = !DILocation(line: 44, column: 23, scope: !9)
!32 = !DILocation(line: 46, column: 18, scope: !9)
!33 = !DILocation(line: 48, column: 19, scope: !9)
!34 = !DILocation(line: 49, column: 21, scope: !9)
!35 = !DILocation(line: 50, column: 20, scope: !9)
!36 = !DILocation(line: 106, column: 29, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !9, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 52, column: 42, scope: !9)
!40 = !DILocation(line: 53, column: 33, scope: !9)
!41 = !DILocation(line: 59, column: 35, scope: !9)
!42 = !DILocation(line: 60, column: 38, scope: !9)
!43 = !DILocation(line: 60, column: 73, scope: !9)
!44 = !DILocation(line: 61, column: 36, scope: !9)
!45 = !DILocation(line: 61, column: 31, scope: !9)
!46 = !DILocation(line: 61, column: 46, scope: !9)
!47 = !DILocation(line: 62, column: 20, scope: !9)
!48 = !DILocation(line: 63, column: 19, scope: !9)
!49 = !DILocation(line: 66, column: 45, scope: !9)
!50 = !DILocation(line: 124, column: 29, scope: !37, inlinedAt: !51)
!51 = !DILocation(line: 67, column: 39, scope: !9)
!52 = !DILocation(line: 111, column: 15, scope: !37, inlinedAt: !51)
!53 = !DILocation(line: 113, column: 21, scope: !37, inlinedAt: !51)
!54 = !DILocation(line: 113, column: 16, scope: !37, inlinedAt: !51)
!55 = !DILocation(line: 114, column: 29, scope: !37, inlinedAt: !51)
!56 = !DILocation(line: 68, column: 20, scope: !9)
!57 = !DILocation(line: 69, column: 24, scope: !9)
!58 = !DILocation(line: 71, column: 45, scope: !9)
!59 = !DILocation(line: 290, column: 36, scope: !60, inlinedAt: !62)
!60 = distinct !DILexicalBlockFile(scope: !9, file: !61, discriminator: 0)
!61 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!62 = !DILocation(line: 72, column: 26, scope: !9)
!63 = !DILocation(line: 260, column: 15, scope: !60, inlinedAt: !62)
!64 = !DILocation(line: 75, column: 21, scope: !9)
!65 = !DILocation(line: 76, column: 45, scope: !9)
!66 = !DILocation(line: 76, column: 40, scope: !9)
!67 = !DILocation(line: 76, column: 25, scope: !9)
!68 = !DILocation(line: 76, column: 57, scope: !9)
!69 = !DILocation(line: 76, column: 4, scope: !9)
