; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_red_fused_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr #0 !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %8 = shl i32 %7, 6, !dbg !9
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %10 = lshr i32 %9, 4, !dbg !10
  %11 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !10
  %12 = shufflevector <2 x i32> %11, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !10
  %13 = insertelement <2 x i32> <i32 31, i32 poison>, i32 %8, i64 1, !dbg !10
  %14 = and <2 x i32> %12, %13, !dbg !10
  %15 = or disjoint <2 x i32> %12, %13, !dbg !10
  %16 = shufflevector <2 x i32> %14, <2 x i32> %15, <2 x i32> <i32 0, i32 3>, !dbg !10
  %17 = insertelement <2 x i32> <i32 poison, i32 32>, i32 %8, i64 0, !dbg !11
  %18 = or <2 x i32> %16, %17, !dbg !11
  %19 = icmp slt <2 x i32> %18, splat (i32 10368), !dbg !12
  %20 = shl nuw nsw i32 %9, 2, !dbg !13
  %21 = and i32 %20, 60, !dbg !13
  %22 = extractelement <2 x i32> %18, i64 0
  %23 = sdiv i32 %22, 324, !dbg !14
  %24 = extractelement <2 x i32> %18, i64 1
  %25 = sdiv i32 %24, 324, !dbg !14
  %26 = mul i32 %22, 324, !dbg !15
  %27 = mul i32 %24, 324, !dbg !15
  %28 = mul i32 %22, 324
  %29 = shl nsw i32 %23, 4
  %30 = add i32 %29, %28
  %31 = mul i32 %24, 324
  %32 = shl nsw i32 %25, 4
  %33 = add i32 %32, %31
  %34 = zext nneg i32 %21 to i64, !dbg !16
  br label %35, !dbg !16

35:                                               ; preds = %6, %35
  %indvars.iv = phi i64 [ 0, %6 ], [ %indvars.iv.next, %35 ]
  %36 = phi <4 x i1> [ zeroinitializer, %6 ], [ %115, %35 ]
  %37 = phi <4 x i1> [ zeroinitializer, %6 ], [ %100, %35 ]
  %38 = phi <16 x float> [ <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, %6 ], [ %215, %35 ]
  %39 = or disjoint i64 %indvars.iv, %34, !dbg !17
  %40 = icmp samesign ult i64 %39, 324, !dbg !18
  %41 = trunc nuw nsw i64 %39 to i32, !dbg !19
  %42 = add i32 %26, %41, !dbg !19
  %43 = add i32 %27, %41, !dbg !19
  %44 = sext i32 %42 to i64, !dbg !20
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !20
  %46 = sext i32 %43 to i64, !dbg !20
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !20
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !21
  %49 = add i32 %30, %41, !dbg !22
  %50 = add i32 %33, %41, !dbg !22
  %51 = sext i32 %49 to i64, !dbg !23
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !23
  %53 = sext i32 %50 to i64, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !23
  %55 = shufflevector <16 x float> %38, <16 x float> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !24
  %56 = fcmp uno <8 x float> %55, zeroinitializer, !dbg !24
  %57 = insertelement <2 x i1> poison, i1 %40, i64 0, !dbg !28
  %58 = shufflevector <2 x i1> %57, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !28
  %59 = and <2 x i1> %19, %58, !dbg !28
  %60 = shufflevector <2 x i1> %59, <2 x i1> poison, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !28
  %61 = extractelement <2 x i1> %59, i64 0, !dbg !29
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %45, i64 %48, i1 %61) #4, !dbg !21
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !21
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !21
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !21
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !21
  %67 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !21
  %68 = extractelement <2 x i1> %59, i64 1, !dbg !29
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %47, i64 %67, i1 %68) #4, !dbg !21
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !21
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !21
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !21
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !21
  %74 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !29
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %52, i64 %74, i1 %61) #4, !dbg !29
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !29
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !29
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !29
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !29
  %80 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #4, !dbg !29
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %54, i64 %80, i1 %68) #4, !dbg !29
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !29
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !29
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !29
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !29
  %86 = insertelement <4 x i32> poison, i32 %63, i64 0, !dbg !21
  %87 = insertelement <4 x i32> %86, i32 %64, i64 1, !dbg !21
  %88 = insertelement <4 x i32> %87, i32 %65, i64 2, !dbg !21
  %89 = insertelement <4 x i32> %88, i32 %66, i64 3, !dbg !21
  %90 = bitcast <4 x i32> %89 to <4 x float>, !dbg !21
  %91 = insertelement <4 x i32> poison, i32 %76, i64 0, !dbg !29
  %92 = insertelement <4 x i32> %91, i32 %77, i64 1, !dbg !29
  %93 = insertelement <4 x i32> %92, i32 %78, i64 2, !dbg !29
  %94 = insertelement <4 x i32> %93, i32 %79, i64 3, !dbg !29
  %95 = bitcast <4 x i32> %94 to <4 x float>, !dbg !29
  %96 = fadd <4 x float> %90, %95, !dbg !30
  %97 = fcmp une <4 x float> %96, splat (float 0xFFF0000000000000), !dbg !31
  %98 = shufflevector <2 x i1> %59, <2 x i1> poison, <4 x i32> zeroinitializer, !dbg !32
  %99 = select <4 x i1> %98, <4 x i1> %97, <4 x i1> zeroinitializer, !dbg !32
  %100 = or <4 x i1> %37, %99, !dbg !32
  %101 = insertelement <4 x i32> poison, i32 %70, i64 0, !dbg !21
  %102 = insertelement <4 x i32> %101, i32 %71, i64 1, !dbg !21
  %103 = insertelement <4 x i32> %102, i32 %72, i64 2, !dbg !21
  %104 = insertelement <4 x i32> %103, i32 %73, i64 3, !dbg !21
  %105 = bitcast <4 x i32> %104 to <4 x float>, !dbg !21
  %106 = insertelement <4 x i32> poison, i32 %82, i64 0, !dbg !29
  %107 = insertelement <4 x i32> %106, i32 %83, i64 1, !dbg !29
  %108 = insertelement <4 x i32> %107, i32 %84, i64 2, !dbg !29
  %109 = insertelement <4 x i32> %108, i32 %85, i64 3, !dbg !29
  %110 = bitcast <4 x i32> %109 to <4 x float>, !dbg !29
  %111 = fadd <4 x float> %105, %110, !dbg !30
  %112 = fcmp une <4 x float> %111, splat (float 0xFFF0000000000000), !dbg !31
  %113 = shufflevector <2 x i1> %59, <2 x i1> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>, !dbg !32
  %114 = select <4 x i1> %113, <4 x i1> %112, <4 x i1> zeroinitializer, !dbg !32
  %115 = or <4 x i1> %36, %114, !dbg !32
  %116 = extractelement <4 x float> %96, i64 0, !dbg !33
  %117 = extractelement <4 x float> %96, i64 1, !dbg !33
  %118 = extractelement <4 x float> %96, i64 2, !dbg !33
  %119 = extractelement <4 x float> %96, i64 3, !dbg !33
  %120 = extractelement <4 x float> %111, i64 0, !dbg !33
  %121 = extractelement <4 x float> %111, i64 1, !dbg !33
  %122 = extractelement <4 x float> %111, i64 2, !dbg !33
  %123 = extractelement <4 x float> %111, i64 3, !dbg !33
  %124 = shufflevector <4 x float> %96, <4 x float> %111, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !34
  %125 = fcmp ogt <8 x float> %55, %124, !dbg !34
  %126 = or <8 x i1> %56, %125, !dbg !35
  %127 = select <8 x i1> %126, <8 x float> %55, <8 x float> %124, !dbg !36
  %128 = fcmp oeq <8 x float> %127, splat (float 0xFFF0000000000000), !dbg !37
  %129 = extractelement <16 x float> %38, i64 8, !dbg !38
  %130 = extractelement <8 x float> %127, i64 0, !dbg !33
  %131 = fsub float %129, %130, !dbg !38
  %132 = extractelement <16 x float> %38, i64 9, !dbg !38
  %133 = extractelement <8 x float> %127, i64 1, !dbg !33
  %134 = fsub float %132, %133, !dbg !38
  %135 = extractelement <16 x float> %38, i64 10, !dbg !38
  %136 = extractelement <8 x float> %127, i64 2, !dbg !33
  %137 = fsub float %135, %136, !dbg !38
  %138 = extractelement <16 x float> %38, i64 11, !dbg !38
  %139 = extractelement <8 x float> %127, i64 3, !dbg !33
  %140 = fsub float %138, %139, !dbg !38
  %141 = extractelement <16 x float> %38, i64 12, !dbg !38
  %142 = extractelement <8 x float> %127, i64 4, !dbg !33
  %143 = fsub float %141, %142, !dbg !38
  %144 = extractelement <16 x float> %38, i64 13, !dbg !38
  %145 = extractelement <8 x float> %127, i64 5, !dbg !33
  %146 = fsub float %144, %145, !dbg !38
  %147 = extractelement <16 x float> %38, i64 14, !dbg !38
  %148 = extractelement <8 x float> %127, i64 6, !dbg !33
  %149 = fsub float %147, %148, !dbg !38
  %150 = extractelement <16 x float> %38, i64 15, !dbg !38
  %151 = extractelement <8 x float> %127, i64 7, !dbg !33
  %152 = fsub float %150, %151, !dbg !38
  %153 = fmul float %131, 0x3FF7154760000000, !dbg !39
  %154 = tail call float @llvm.nvvm.ex2.approx.f(float %153), !dbg !39
  %155 = fmul float %134, 0x3FF7154760000000, !dbg !39
  %156 = tail call float @llvm.nvvm.ex2.approx.f(float %155), !dbg !39
  %157 = fmul float %137, 0x3FF7154760000000, !dbg !39
  %158 = tail call float @llvm.nvvm.ex2.approx.f(float %157), !dbg !39
  %159 = fmul float %140, 0x3FF7154760000000, !dbg !39
  %160 = tail call float @llvm.nvvm.ex2.approx.f(float %159), !dbg !39
  %161 = fmul float %143, 0x3FF7154760000000, !dbg !39
  %162 = tail call float @llvm.nvvm.ex2.approx.f(float %161), !dbg !39
  %163 = fmul float %146, 0x3FF7154760000000, !dbg !39
  %164 = tail call float @llvm.nvvm.ex2.approx.f(float %163), !dbg !39
  %165 = fmul float %149, 0x3FF7154760000000, !dbg !39
  %166 = tail call float @llvm.nvvm.ex2.approx.f(float %165), !dbg !39
  %167 = fmul float %152, 0x3FF7154760000000, !dbg !39
  %168 = tail call float @llvm.nvvm.ex2.approx.f(float %167), !dbg !39
  %169 = insertelement <8 x float> poison, float %154, i64 0, !dbg !40
  %170 = insertelement <8 x float> %169, float %156, i64 1, !dbg !40
  %171 = insertelement <8 x float> %170, float %158, i64 2, !dbg !40
  %172 = insertelement <8 x float> %171, float %160, i64 3, !dbg !40
  %173 = insertelement <8 x float> %172, float %162, i64 4, !dbg !40
  %174 = insertelement <8 x float> %173, float %164, i64 5, !dbg !40
  %175 = insertelement <8 x float> %174, float %166, i64 6, !dbg !40
  %176 = insertelement <8 x float> %175, float %168, i64 7, !dbg !40
  %177 = select <8 x i1> %128, <8 x float> splat (float 1.000000e+00), <8 x float> %176, !dbg !40
  %178 = fsub float %116, %130, !dbg !33
  %179 = fsub float %117, %133, !dbg !33
  %180 = fsub float %118, %136, !dbg !33
  %181 = fsub float %119, %139, !dbg !33
  %182 = fsub float %120, %142, !dbg !33
  %183 = fsub float %121, %145, !dbg !33
  %184 = fsub float %122, %148, !dbg !33
  %185 = fsub float %123, %151, !dbg !33
  %186 = fmul float %178, 0x3FF7154760000000, !dbg !39
  %187 = tail call float @llvm.nvvm.ex2.approx.f(float %186), !dbg !39
  %188 = fmul float %179, 0x3FF7154760000000, !dbg !39
  %189 = tail call float @llvm.nvvm.ex2.approx.f(float %188), !dbg !39
  %190 = fmul float %180, 0x3FF7154760000000, !dbg !39
  %191 = tail call float @llvm.nvvm.ex2.approx.f(float %190), !dbg !39
  %192 = fmul float %181, 0x3FF7154760000000, !dbg !39
  %193 = tail call float @llvm.nvvm.ex2.approx.f(float %192), !dbg !39
  %194 = fmul float %182, 0x3FF7154760000000, !dbg !39
  %195 = tail call float @llvm.nvvm.ex2.approx.f(float %194), !dbg !39
  %196 = fmul float %183, 0x3FF7154760000000, !dbg !39
  %197 = tail call float @llvm.nvvm.ex2.approx.f(float %196), !dbg !39
  %198 = fmul float %184, 0x3FF7154760000000, !dbg !39
  %199 = tail call float @llvm.nvvm.ex2.approx.f(float %198), !dbg !39
  %200 = fmul float %185, 0x3FF7154760000000, !dbg !39
  %201 = tail call float @llvm.nvvm.ex2.approx.f(float %200), !dbg !39
  %202 = insertelement <8 x float> poison, float %187, i64 0, !dbg !41
  %203 = insertelement <8 x float> %202, float %189, i64 1, !dbg !41
  %204 = insertelement <8 x float> %203, float %191, i64 2, !dbg !41
  %205 = insertelement <8 x float> %204, float %193, i64 3, !dbg !41
  %206 = insertelement <8 x float> %205, float %195, i64 4, !dbg !41
  %207 = insertelement <8 x float> %206, float %197, i64 5, !dbg !41
  %208 = insertelement <8 x float> %207, float %199, i64 6, !dbg !41
  %209 = insertelement <8 x float> %208, float %201, i64 7, !dbg !41
  %210 = select <8 x i1> %128, <8 x float> splat (float 1.000000e+00), <8 x float> %209, !dbg !41
  %211 = shufflevector <16 x float> %38, <16 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !42
  %212 = fmul <8 x float> %211, %177, !dbg !42
  %213 = fadd <8 x float> %212, %210, !dbg !43
  %214 = shufflevector <8 x float> %213, <8 x float> %127, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !44
  %215 = select <16 x i1> %60, <16 x float> %214, <16 x float> %38, !dbg !44
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !16
  %216 = icmp samesign ult i64 %indvars.iv, 260, !dbg !16
  br i1 %216, label %35, label %217, !dbg !16

217:                                              ; preds = %35
  %218 = bitcast <4 x i1> %100 to i4, !dbg !45
  %219 = icmp ne i4 %218, 0, !dbg !45
  %220 = zext i1 %219 to i8, !dbg !45
  %221 = bitcast <4 x i1> %115 to i4, !dbg !45
  %222 = icmp ne i4 %221, 0, !dbg !45
  %223 = zext i1 %222 to i8, !dbg !45
  %224 = zext i1 %219 to i32, !dbg !47
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 8, i32 31), !dbg !47
  %226 = trunc i32 %225 to i8, !dbg !47
  %227 = or i8 %226, %220, !dbg !45
  %228 = zext i8 %227 to i32, !dbg !47
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 4, i32 31), !dbg !47
  %230 = trunc i32 %229 to i8, !dbg !47
  %231 = or i8 %227, %230, !dbg !45
  %232 = zext i8 %231 to i32, !dbg !47
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 2, i32 31), !dbg !47
  %234 = trunc i32 %233 to i8, !dbg !47
  %235 = or i8 %231, %234, !dbg !45
  %236 = zext i8 %235 to i32, !dbg !47
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 1, i32 31), !dbg !47
  %238 = trunc i32 %237 to i8, !dbg !47
  %239 = or i8 %235, %238, !dbg !45
  %240 = zext i1 %222 to i32, !dbg !47
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 8, i32 31), !dbg !47
  %242 = trunc i32 %241 to i8, !dbg !47
  %243 = or i8 %242, %223, !dbg !45
  %244 = zext i8 %243 to i32, !dbg !47
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 4, i32 31), !dbg !47
  %246 = trunc i32 %245 to i8, !dbg !47
  %247 = or i8 %243, %246, !dbg !45
  %248 = zext i8 %247 to i32, !dbg !47
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 2, i32 31), !dbg !47
  %250 = trunc i32 %249 to i8, !dbg !47
  %251 = or i8 %247, %250, !dbg !45
  %252 = zext i8 %251 to i32, !dbg !47
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 1, i32 31), !dbg !47
  %254 = trunc i32 %253 to i8, !dbg !47
  %255 = or i8 %251, %254, !dbg !45
  %.not = icmp eq i8 %239, 0, !dbg !48
  %.not2 = icmp eq i8 %255, 0, !dbg !48
  %256 = extractelement <16 x float> %215, i64 8, !dbg !49
  %257 = extractelement <16 x float> %215, i64 9, !dbg !49
  %258 = fcmp ogt float %256, %257, !dbg !49
  %259 = fcmp uno float %256, 0.000000e+00, !dbg !51
  %260 = or i1 %258, %259, !dbg !52
  %261 = select i1 %260, float %256, float %257, !dbg !53
  %262 = extractelement <16 x float> %215, i64 10, !dbg !49
  %263 = fcmp ogt float %261, %262, !dbg !49
  %264 = fcmp uno float %261, 0.000000e+00, !dbg !51
  %265 = or i1 %263, %264, !dbg !52
  %266 = select i1 %265, float %261, float %262, !dbg !53
  %267 = extractelement <16 x float> %215, i64 11, !dbg !49
  %268 = fcmp ogt float %266, %267, !dbg !49
  %269 = fcmp uno float %266, 0.000000e+00, !dbg !51
  %270 = or i1 %268, %269, !dbg !52
  %271 = select i1 %270, float %266, float %267, !dbg !53
  %272 = extractelement <16 x float> %215, i64 12, !dbg !49
  %273 = extractelement <16 x float> %215, i64 13, !dbg !49
  %274 = fcmp ogt float %272, %273, !dbg !49
  %275 = fcmp uno float %272, 0.000000e+00, !dbg !51
  %276 = or i1 %274, %275, !dbg !52
  %277 = select i1 %276, float %272, float %273, !dbg !53
  %278 = extractelement <16 x float> %215, i64 14, !dbg !49
  %279 = fcmp ogt float %277, %278, !dbg !49
  %280 = fcmp uno float %277, 0.000000e+00, !dbg !51
  %281 = or i1 %279, %280, !dbg !52
  %282 = select i1 %281, float %277, float %278, !dbg !53
  %283 = extractelement <16 x float> %215, i64 15, !dbg !49
  %284 = fcmp ogt float %282, %283, !dbg !49
  %285 = fcmp uno float %282, 0.000000e+00, !dbg !51
  %286 = or i1 %284, %285, !dbg !52
  %287 = select i1 %286, float %282, float %283, !dbg !53
  %288 = bitcast float %271 to i32, !dbg !54
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 8, i32 31), !dbg !54
  %290 = bitcast i32 %289 to float, !dbg !54
  %291 = fcmp ogt float %271, %290, !dbg !49
  %292 = fcmp uno float %271, 0.000000e+00, !dbg !51
  %293 = or i1 %292, %291, !dbg !52
  %294 = select i1 %293, float %271, float %290, !dbg !53
  %295 = bitcast float %294 to i32, !dbg !54
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 4, i32 31), !dbg !54
  %297 = bitcast i32 %296 to float, !dbg !54
  %298 = fcmp ogt float %294, %297, !dbg !49
  %299 = fcmp uno float %294, 0.000000e+00, !dbg !51
  %300 = or i1 %298, %299, !dbg !52
  %301 = select i1 %300, float %294, float %297, !dbg !53
  %302 = bitcast float %301 to i32, !dbg !54
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 2, i32 31), !dbg !54
  %304 = bitcast i32 %303 to float, !dbg !54
  %305 = fcmp ogt float %301, %304, !dbg !49
  %306 = fcmp uno float %301, 0.000000e+00, !dbg !51
  %307 = or i1 %305, %306, !dbg !52
  %308 = select i1 %307, float %301, float %304, !dbg !53
  %309 = bitcast float %308 to i32, !dbg !54
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 1, i32 31), !dbg !54
  %311 = bitcast i32 %310 to float, !dbg !54
  %312 = fcmp ogt float %308, %311, !dbg !49
  %313 = fcmp uno float %308, 0.000000e+00, !dbg !51
  %314 = or i1 %312, %313, !dbg !52
  %315 = select i1 %314, float %308, float %311, !dbg !53
  %316 = bitcast float %287 to i32, !dbg !54
  %317 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %316, i32 8, i32 31), !dbg !54
  %318 = bitcast i32 %317 to float, !dbg !54
  %319 = fcmp ogt float %287, %318, !dbg !49
  %320 = fcmp uno float %287, 0.000000e+00, !dbg !51
  %321 = or i1 %320, %319, !dbg !52
  %322 = select i1 %321, float %287, float %318, !dbg !53
  %323 = bitcast float %322 to i32, !dbg !54
  %324 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %323, i32 4, i32 31), !dbg !54
  %325 = bitcast i32 %324 to float, !dbg !54
  %326 = fcmp ogt float %322, %325, !dbg !49
  %327 = fcmp uno float %322, 0.000000e+00, !dbg !51
  %328 = or i1 %326, %327, !dbg !52
  %329 = select i1 %328, float %322, float %325, !dbg !53
  %330 = bitcast float %329 to i32, !dbg !54
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 2, i32 31), !dbg !54
  %332 = bitcast i32 %331 to float, !dbg !54
  %333 = fcmp ogt float %329, %332, !dbg !49
  %334 = fcmp uno float %329, 0.000000e+00, !dbg !51
  %335 = or i1 %333, %334, !dbg !52
  %336 = select i1 %335, float %329, float %332, !dbg !53
  %337 = bitcast float %336 to i32, !dbg !54
  %338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %337, i32 1, i32 31), !dbg !54
  %339 = bitcast i32 %338 to float, !dbg !54
  %340 = fcmp ogt float %336, %339, !dbg !49
  %341 = fcmp uno float %336, 0.000000e+00, !dbg !51
  %342 = or i1 %340, %341, !dbg !52
  %343 = select i1 %342, float %336, float %339, !dbg !53
  %344 = fcmp oeq float %315, 0xFFF0000000000000, !dbg !55
  %345 = fcmp oeq float %343, 0xFFF0000000000000, !dbg !55
  %346 = fsub float %256, %315, !dbg !56
  %347 = fsub float %257, %315, !dbg !56
  %348 = fsub float %262, %315, !dbg !56
  %349 = fsub float %267, %315, !dbg !56
  %350 = fsub float %272, %343, !dbg !56
  %351 = fsub float %273, %343, !dbg !56
  %352 = fsub float %278, %343, !dbg !56
  %353 = fsub float %283, %343, !dbg !56
  %354 = fmul float %346, 0x3FF7154760000000, !dbg !57
  %355 = select i1 %344, float 0.000000e+00, float %354, !dbg !58
  %356 = tail call float @llvm.nvvm.ex2.approx.f(float %355), !dbg !57
  %357 = fmul float %347, 0x3FF7154760000000, !dbg !57
  %358 = select i1 %344, float 0.000000e+00, float %357, !dbg !58
  %359 = tail call float @llvm.nvvm.ex2.approx.f(float %358), !dbg !57
  %360 = fmul float %348, 0x3FF7154760000000, !dbg !57
  %361 = select i1 %344, float 0.000000e+00, float %360, !dbg !58
  %362 = tail call float @llvm.nvvm.ex2.approx.f(float %361), !dbg !57
  %363 = fmul float %349, 0x3FF7154760000000, !dbg !57
  %364 = select i1 %344, float 0.000000e+00, float %363, !dbg !58
  %365 = tail call float @llvm.nvvm.ex2.approx.f(float %364), !dbg !57
  %366 = fmul float %350, 0x3FF7154760000000, !dbg !57
  %367 = select i1 %345, float 0.000000e+00, float %366, !dbg !58
  %368 = tail call float @llvm.nvvm.ex2.approx.f(float %367), !dbg !57
  %369 = fmul float %351, 0x3FF7154760000000, !dbg !57
  %370 = select i1 %345, float 0.000000e+00, float %369, !dbg !58
  %371 = tail call float @llvm.nvvm.ex2.approx.f(float %370), !dbg !57
  %372 = fmul float %352, 0x3FF7154760000000, !dbg !57
  %373 = select i1 %345, float 0.000000e+00, float %372, !dbg !58
  %374 = tail call float @llvm.nvvm.ex2.approx.f(float %373), !dbg !57
  %375 = fmul float %353, 0x3FF7154760000000, !dbg !57
  %376 = select i1 %345, float 0.000000e+00, float %375, !dbg !58
  %377 = tail call float @llvm.nvvm.ex2.approx.f(float %376), !dbg !57
  %378 = extractelement <16 x float> %215, i64 0, !dbg !59
  %379 = fmul float %378, %356, !dbg !59
  %380 = extractelement <16 x float> %215, i64 1, !dbg !59
  %381 = fmul float %380, %359, !dbg !59
  %382 = extractelement <16 x float> %215, i64 2, !dbg !59
  %383 = fmul float %382, %362, !dbg !59
  %384 = extractelement <16 x float> %215, i64 3, !dbg !59
  %385 = fmul float %384, %365, !dbg !59
  %386 = extractelement <16 x float> %215, i64 4, !dbg !59
  %387 = fmul float %386, %368, !dbg !59
  %388 = extractelement <16 x float> %215, i64 5, !dbg !59
  %389 = fmul float %388, %371, !dbg !59
  %390 = extractelement <16 x float> %215, i64 6, !dbg !59
  %391 = fmul float %390, %374, !dbg !59
  %392 = extractelement <16 x float> %215, i64 7, !dbg !59
  %393 = fmul float %392, %377, !dbg !59
  %394 = fadd float %379, %381, !dbg !60
  %395 = fadd float %394, %383, !dbg !60
  %396 = fadd float %395, %385, !dbg !60
  %397 = fadd float %387, %389, !dbg !60
  %398 = fadd float %397, %391, !dbg !60
  %399 = fadd float %398, %393, !dbg !60
  %400 = bitcast float %396 to i32, !dbg !63
  %401 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %400, i32 8, i32 31), !dbg !63
  %402 = bitcast i32 %401 to float, !dbg !63
  %403 = fadd float %396, %402, !dbg !60
  %404 = bitcast float %403 to i32, !dbg !63
  %405 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %404, i32 4, i32 31), !dbg !63
  %406 = bitcast i32 %405 to float, !dbg !63
  %407 = fadd float %403, %406, !dbg !60
  %408 = bitcast float %407 to i32, !dbg !63
  %409 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %408, i32 2, i32 31), !dbg !63
  %410 = bitcast i32 %409 to float, !dbg !63
  %411 = fadd float %407, %410, !dbg !60
  %412 = bitcast float %411 to i32, !dbg !63
  %413 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %412, i32 1, i32 31), !dbg !63
  %414 = bitcast i32 %413 to float, !dbg !63
  %415 = fadd float %411, %414, !dbg !60
  %416 = bitcast float %399 to i32, !dbg !63
  %417 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %416, i32 8, i32 31), !dbg !63
  %418 = bitcast i32 %417 to float, !dbg !63
  %419 = fadd float %399, %418, !dbg !60
  %420 = bitcast float %419 to i32, !dbg !63
  %421 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %420, i32 4, i32 31), !dbg !63
  %422 = bitcast i32 %421 to float, !dbg !63
  %423 = fadd float %419, %422, !dbg !60
  %424 = bitcast float %423 to i32, !dbg !63
  %425 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %424, i32 2, i32 31), !dbg !63
  %426 = bitcast i32 %425 to float, !dbg !63
  %427 = fadd float %423, %426, !dbg !60
  %428 = bitcast float %427 to i32, !dbg !63
  %429 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %428, i32 1, i32 31), !dbg !63
  %430 = bitcast i32 %429 to float, !dbg !63
  %431 = fadd float %427, %430, !dbg !60
  %432 = extractelement <2 x i1> %19, i64 0, !dbg !64
  %433 = extractelement <2 x i1> %19, i64 1, !dbg !64
  br label %434, !dbg !65

434:                                              ; preds = %217, %434
  %indvars.iv28 = phi i64 [ 0, %217 ], [ %indvars.iv.next29, %434 ]
  %435 = or disjoint i64 %indvars.iv28, %34, !dbg !66
  %436 = icmp samesign ult i64 %435, 324, !dbg !67
  %437 = trunc nuw nsw i64 %435 to i32, !dbg !68
  %438 = add i32 %26, %437, !dbg !68
  %439 = add i32 %27, %437, !dbg !68
  %440 = sext i32 %438 to i64, !dbg !69
  %441 = getelementptr float, ptr addrspace(1) %0, i64 %440, !dbg !69
  %442 = sext i32 %439 to i64, !dbg !69
  %443 = getelementptr float, ptr addrspace(1) %0, i64 %442, !dbg !69
  %444 = and i1 %432, %436, !dbg !64
  %445 = and i1 %433, %436, !dbg !64
  %446 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #4, !dbg !70
  %447 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %441, i64 %446, i1 %444) #4, !dbg !70
  %448 = extractvalue { i32, i32, i32, i32 } %447, 0, !dbg !70
  %449 = extractvalue { i32, i32, i32, i32 } %447, 1, !dbg !70
  %450 = extractvalue { i32, i32, i32, i32 } %447, 2, !dbg !70
  %451 = extractvalue { i32, i32, i32, i32 } %447, 3, !dbg !70
  %452 = bitcast i32 %448 to float, !dbg !70
  %453 = bitcast i32 %449 to float, !dbg !70
  %454 = bitcast i32 %450 to float, !dbg !70
  %455 = bitcast i32 %451 to float, !dbg !70
  %456 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #4, !dbg !70
  %457 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %443, i64 %456, i1 %445) #4, !dbg !70
  %458 = extractvalue { i32, i32, i32, i32 } %457, 0, !dbg !70
  %459 = extractvalue { i32, i32, i32, i32 } %457, 1, !dbg !70
  %460 = extractvalue { i32, i32, i32, i32 } %457, 2, !dbg !70
  %461 = extractvalue { i32, i32, i32, i32 } %457, 3, !dbg !70
  %462 = bitcast i32 %458 to float, !dbg !70
  %463 = bitcast i32 %459 to float, !dbg !70
  %464 = bitcast i32 %460 to float, !dbg !70
  %465 = bitcast i32 %461 to float, !dbg !70
  %466 = add i32 %30, %437, !dbg !71
  %467 = add i32 %33, %437, !dbg !71
  %468 = sext i32 %466 to i64, !dbg !72
  %469 = getelementptr float, ptr addrspace(1) %1, i64 %468, !dbg !72
  %470 = sext i32 %467 to i64, !dbg !72
  %471 = getelementptr float, ptr addrspace(1) %1, i64 %470, !dbg !72
  %472 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #4, !dbg !73
  %473 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %469, i64 %472, i1 %444) #4, !dbg !73
  %474 = extractvalue { i32, i32, i32, i32 } %473, 0, !dbg !73
  %475 = extractvalue { i32, i32, i32, i32 } %473, 1, !dbg !73
  %476 = extractvalue { i32, i32, i32, i32 } %473, 2, !dbg !73
  %477 = extractvalue { i32, i32, i32, i32 } %473, 3, !dbg !73
  %478 = bitcast i32 %474 to float, !dbg !73
  %479 = bitcast i32 %475 to float, !dbg !73
  %480 = bitcast i32 %476 to float, !dbg !73
  %481 = bitcast i32 %477 to float, !dbg !73
  %482 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #4, !dbg !73
  %483 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %471, i64 %482, i1 %445) #4, !dbg !73
  %484 = extractvalue { i32, i32, i32, i32 } %483, 0, !dbg !73
  %485 = extractvalue { i32, i32, i32, i32 } %483, 1, !dbg !73
  %486 = extractvalue { i32, i32, i32, i32 } %483, 2, !dbg !73
  %487 = extractvalue { i32, i32, i32, i32 } %483, 3, !dbg !73
  %488 = bitcast i32 %484 to float, !dbg !73
  %489 = bitcast i32 %485 to float, !dbg !73
  %490 = bitcast i32 %486 to float, !dbg !73
  %491 = bitcast i32 %487 to float, !dbg !73
  %492 = fadd float %452, %478, !dbg !74
  %493 = fadd float %453, %479, !dbg !74
  %494 = fadd float %454, %480, !dbg !74
  %495 = fadd float %455, %481, !dbg !74
  %496 = fadd float %462, %488, !dbg !74
  %497 = fadd float %463, %489, !dbg !74
  %498 = fadd float %464, %490, !dbg !74
  %499 = fadd float %465, %491, !dbg !74
  %500 = fsub float %492, %315, !dbg !75
  %501 = fsub float %493, %315, !dbg !75
  %502 = fsub float %494, %315, !dbg !75
  %503 = fsub float %495, %315, !dbg !75
  %504 = fsub float %496, %343, !dbg !75
  %505 = fsub float %497, %343, !dbg !75
  %506 = fsub float %498, %343, !dbg !75
  %507 = fsub float %499, %343, !dbg !75
  %508 = fmul float %500, 0x3FF7154760000000, !dbg !76
  %509 = tail call float @llvm.nvvm.ex2.approx.f(float %508), !dbg !76
  %510 = fmul float %501, 0x3FF7154760000000, !dbg !76
  %511 = tail call float @llvm.nvvm.ex2.approx.f(float %510), !dbg !76
  %512 = fmul float %502, 0x3FF7154760000000, !dbg !76
  %513 = tail call float @llvm.nvvm.ex2.approx.f(float %512), !dbg !76
  %514 = fmul float %503, 0x3FF7154760000000, !dbg !76
  %515 = tail call float @llvm.nvvm.ex2.approx.f(float %514), !dbg !76
  %516 = fmul float %504, 0x3FF7154760000000, !dbg !76
  %517 = tail call float @llvm.nvvm.ex2.approx.f(float %516), !dbg !76
  %518 = fmul float %505, 0x3FF7154760000000, !dbg !76
  %519 = tail call float @llvm.nvvm.ex2.approx.f(float %518), !dbg !76
  %520 = fmul float %506, 0x3FF7154760000000, !dbg !76
  %521 = tail call float @llvm.nvvm.ex2.approx.f(float %520), !dbg !76
  %522 = fmul float %507, 0x3FF7154760000000, !dbg !76
  %523 = tail call float @llvm.nvvm.ex2.approx.f(float %522), !dbg !76
  %524 = tail call float @llvm.nvvm.div.full(float %509, float %415), !dbg !77
  %525 = tail call float @llvm.nvvm.div.full(float %511, float %415), !dbg !77
  %526 = tail call float @llvm.nvvm.div.full(float %513, float %415), !dbg !77
  %527 = tail call float @llvm.nvvm.div.full(float %515, float %415), !dbg !77
  %528 = tail call float @llvm.nvvm.div.full(float %517, float %431), !dbg !77
  %529 = tail call float @llvm.nvvm.div.full(float %519, float %431), !dbg !77
  %530 = tail call float @llvm.nvvm.div.full(float %521, float %431), !dbg !77
  %531 = tail call float @llvm.nvvm.div.full(float %523, float %431), !dbg !77
  %532 = getelementptr float, ptr addrspace(1) %2, i64 %468, !dbg !78
  %533 = getelementptr float, ptr addrspace(1) %2, i64 %470, !dbg !78
  %534 = bitcast float %524 to i32, !dbg !79
  %535 = select i1 %.not, i32 0, i32 %534, !dbg !80
  %536 = bitcast float %525 to i32, !dbg !79
  %537 = select i1 %.not, i32 0, i32 %536, !dbg !80
  %538 = bitcast float %526 to i32, !dbg !79
  %539 = select i1 %.not, i32 0, i32 %538, !dbg !80
  %540 = bitcast float %527 to i32, !dbg !79
  %541 = select i1 %.not, i32 0, i32 %540, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %535, i32 %537, i32 %539, i32 %541, ptr addrspace(1) %532, i1 %444) #4, !dbg !79
  %542 = bitcast float %528 to i32, !dbg !79
  %543 = select i1 %.not2, i32 0, i32 %542, !dbg !80
  %544 = bitcast float %529 to i32, !dbg !79
  %545 = select i1 %.not2, i32 0, i32 %544, !dbg !80
  %546 = bitcast float %530 to i32, !dbg !79
  %547 = select i1 %.not2, i32 0, i32 %546, !dbg !80
  %548 = bitcast float %531 to i32, !dbg !79
  %549 = select i1 %.not2, i32 0, i32 %548, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %543, i32 %545, i32 %547, i32 %549, ptr addrspace(1) %533, i1 %445) #4, !dbg !79
  %indvars.iv.next29 = add nuw nsw i64 %indvars.iv28, 64, !dbg !65
  %550 = icmp samesign ult i64 %indvars.iv28, 260, !dbg !65
  br i1 %550, label %434, label %551, !dbg !65

551:                                              ; preds = %434
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { "nvvm.reqntid"="512" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "coefcjzwqeaazrpai4joq343fvrsgrhhb67vzijrbyjgc63uwhrl.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/oe")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "triton_red_fused_9", linkageName: "triton_red_fused_9", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 23, column: 28, scope: !5)
!9 = !DILocation(line: 23, column: 33, scope: !5)
!10 = !DILocation(line: 24, column: 44, scope: !5)
!11 = !DILocation(line: 24, column: 23, scope: !5)
!12 = !DILocation(line: 25, column: 21, scope: !5)
!13 = !DILocation(line: 26, column: 37, scope: !5)
!14 = !DILocation(line: 30, column: 19, scope: !5)
!15 = !DILocation(line: 42, column: 45, scope: !5)
!16 = !DILocation(line: 36, column: 40, scope: !5)
!17 = !DILocation(line: 37, column: 31, scope: !5)
!18 = !DILocation(line: 38, column: 29, scope: !5)
!19 = !DILocation(line: 42, column: 41, scope: !5)
!20 = !DILocation(line: 42, column: 34, scope: !5)
!21 = !DILocation(line: 42, column: 50, scope: !5)
!22 = !DILocation(line: 43, column: 50, scope: !5)
!23 = !DILocation(line: 43, column: 34, scope: !5)
!24 = !DILocation(line: 113, column: 21, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !5, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 56, column: 43, scope: !5)
!28 = !DILocation(line: 42, column: 60, scope: !5)
!29 = !DILocation(line: 43, column: 62, scope: !5)
!30 = !DILocation(line: 44, column: 22, scope: !5)
!31 = !DILocation(line: 46, column: 23, scope: !5)
!32 = !DILocation(line: 52, column: 49, scope: !5)
!33 = !DILocation(line: 200, column: 53, scope: !25, inlinedAt: !27)
!34 = !DILocation(line: 111, column: 15, scope: !25, inlinedAt: !27)
!35 = !DILocation(line: 113, column: 16, scope: !25, inlinedAt: !27)
!36 = !DILocation(line: 114, column: 29, scope: !25, inlinedAt: !27)
!37 = !DILocation(line: 197, column: 19, scope: !25, inlinedAt: !27)
!38 = !DILocation(line: 197, column: 53, scope: !25, inlinedAt: !27)
!39 = !DILocation(line: 174, column: 24, scope: !25, inlinedAt: !27)
!40 = !DILocation(line: 197, column: 39, scope: !25, inlinedAt: !27)
!41 = !DILocation(line: 200, column: 39, scope: !25, inlinedAt: !27)
!42 = !DILocation(line: 206, column: 24, scope: !25, inlinedAt: !27)
!43 = !DILocation(line: 206, column: 36, scope: !25, inlinedAt: !27)
!44 = !DILocation(line: 60, column: 64, scope: !5)
!45 = !DILocation(line: 261, column: 15, scope: !25, inlinedAt: !46)
!46 = !DILocation(line: 61, column: 49, scope: !5)
!47 = !DILocation(line: 266, column: 29, scope: !25, inlinedAt: !46)
!48 = !DILocation(line: 61, column: 64, scope: !5)
!49 = !DILocation(line: 111, column: 15, scope: !25, inlinedAt: !50)
!50 = !DILocation(line: 64, column: 35, scope: !5)
!51 = !DILocation(line: 113, column: 21, scope: !25, inlinedAt: !50)
!52 = !DILocation(line: 113, column: 16, scope: !25, inlinedAt: !50)
!53 = !DILocation(line: 114, column: 29, scope: !25, inlinedAt: !50)
!54 = !DILocation(line: 124, column: 29, scope: !25, inlinedAt: !50)
!55 = !DILocation(line: 181, column: 40, scope: !25, inlinedAt: !50)
!56 = !DILocation(line: 181, column: 68, scope: !25, inlinedAt: !50)
!57 = !DILocation(line: 174, column: 24, scope: !25, inlinedAt: !50)
!58 = !DILocation(line: 181, column: 58, scope: !25, inlinedAt: !50)
!59 = !DILocation(line: 182, column: 31, scope: !25, inlinedAt: !50)
!60 = !DILocation(line: 260, column: 15, scope: !61, inlinedAt: !50)
!61 = distinct !DILexicalBlockFile(scope: !5, file: !62, discriminator: 0)
!62 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!63 = !DILocation(line: 290, column: 36, scope: !61, inlinedAt: !50)
!64 = !DILocation(line: 75, column: 61, scope: !5)
!65 = !DILocation(line: 69, column: 40, scope: !5)
!66 = !DILocation(line: 70, column: 31, scope: !5)
!67 = !DILocation(line: 71, column: 29, scope: !5)
!68 = !DILocation(line: 75, column: 42, scope: !5)
!69 = !DILocation(line: 75, column: 35, scope: !5)
!70 = !DILocation(line: 75, column: 51, scope: !5)
!71 = !DILocation(line: 76, column: 51, scope: !5)
!72 = !DILocation(line: 76, column: 35, scope: !5)
!73 = !DILocation(line: 76, column: 63, scope: !5)
!74 = !DILocation(line: 78, column: 24, scope: !5)
!75 = !DILocation(line: 79, column: 24, scope: !5)
!76 = !DILocation(line: 80, column: 28, scope: !5)
!77 = !DILocation(line: 81, column: 25, scope: !5)
!78 = !DILocation(line: 84, column: 29, scope: !5)
!79 = !DILocation(line: 84, column: 64, scope: !5)
!80 = !DILocation(line: 83, column: 39, scope: !5)
!81 = !DILocation(line: 69, column: 4, scope: !5)
