; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [121 x i8] c"/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/ci/ccisb2yra76ab2haychl3vkjloggui7jornx4qodogdjo7v6y64e.py\00"
@assertMessage_0 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp27 < 32\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !5 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_mul_rsub_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr #1 !dbg !9 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %.lobit2 = lshr i32 %10, 7, !dbg !11
  %11 = and i32 %.lobit2, 3, !dbg !11
  %12 = or i32 %.lobit2, 4, !dbg !11
  %13 = lshr i32 %10, 3, !dbg !12
  %14 = shl nuw nsw i32 %10, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %15, 2, !dbg !12
  %17 = and i32 %10, 511, !dbg !12
  %18 = icmp samesign ult i32 %15, 324, !dbg !13
  %19 = icmp samesign ult i32 %17, 324, !dbg !13
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !14
  %21 = and i32 %14, 2044, !dbg !15
  %22 = shl nuw nsw i32 %10, 9, !dbg !15
  %23 = and i32 %22, 3584, !dbg !15
  %24 = and i32 %13, 63, !dbg !15
  %25 = or disjoint i32 %23, %24, !dbg !15
  %26 = lshr i32 %10, 5, !dbg !15
  %27 = and i32 %26, 12, !dbg !15
  %28 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %27, !dbg !15
  %29 = getelementptr inbounds nuw float, ptr addrspace(3) %28, i32 %21, !dbg !15
  %30 = or i32 %14, 2048, !dbg !15
  %31 = lshr i32 %30, 7, !dbg !15
  %32 = and i32 %31, 28, !dbg !15
  %33 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %32, !dbg !15
  %34 = getelementptr inbounds nuw float, ptr addrspace(3) %33, i32 %30, !dbg !15
  %35 = lshr exact i32 %23, 5, !dbg !15
  %36 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %35, !dbg !15
  %37 = getelementptr inbounds nuw float, ptr addrspace(3) %36, i32 %25, !dbg !15
  %38 = or disjoint i32 %25, 64, !dbg !15
  %39 = getelementptr inbounds nuw float, ptr addrspace(3) %36, i32 %38, !dbg !15
  %40 = or disjoint i32 %25, 128, !dbg !15
  %41 = getelementptr inbounds nuw float, ptr addrspace(3) %36, i32 %40, !dbg !15
  %42 = or disjoint i32 %25, 192, !dbg !15
  %43 = getelementptr inbounds nuw float, ptr addrspace(3) %36, i32 %42, !dbg !15
  %44 = or disjoint i32 %25, 256, !dbg !15
  %45 = getelementptr inbounds nuw float, ptr addrspace(3) %36, i32 %44, !dbg !15
  %46 = or disjoint i32 %25, 320, !dbg !15
  %47 = getelementptr inbounds nuw float, ptr addrspace(3) %36, i32 %46, !dbg !15
  %48 = shl i32 %9, 3, !dbg !16
  %49 = or disjoint i32 %11, %48, !dbg !17
  %50 = or disjoint i32 %12, %48, !dbg !17
  %51 = or disjoint i32 %48, 1, !dbg !17
  %52 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !17
  %53 = shufflevector <2 x i32> %52, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !17
  %54 = or disjoint <2 x i32> %53, <i32 2, i32 3>, !dbg !17
  %55 = insertelement <4 x i32> poison, i32 %48, i64 0, !dbg !17
  %56 = shufflevector <4 x i32> %55, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !17
  %57 = or disjoint <4 x i32> %56, <i32 4, i32 5, i32 6, i32 7>, !dbg !17
  %58 = icmp slt i32 %49, 10368, !dbg !18
  %59 = icmp slt i32 %50, 10368, !dbg !18
  %60 = icmp slt i32 %48, 10368, !dbg !18
  %61 = insertelement <8 x i32> poison, i32 %51, i64 0, !dbg !19
  %62 = insertelement <8 x i32> %61, i32 %48, i64 1, !dbg !19
  %63 = shufflevector <4 x i32> %57, <4 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !19
  %64 = shufflevector <8 x i32> %62, <8 x i32> %63, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 8, i32 9, i32 10, i32 11>, !dbg !19
  %65 = shufflevector <2 x i32> %54, <2 x i32> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !19
  %66 = shufflevector <8 x i32> %64, <8 x i32> %65, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 4, i32 5, i32 6, i32 7>, !dbg !19
  %67 = srem <8 x i32> %66, splat (i32 324), !dbg !19
  %68 = sdiv i32 %49, 2592, !dbg !20
  %69 = sdiv i32 %50, 2592, !dbg !20
  %70 = mul nsw i32 %68, 324, !dbg !21
  %71 = mul nsw i32 %69, 324, !dbg !21
  %72 = add nsw i32 %70, %15, !dbg !22
  %73 = add nsw i32 %70, %16, !dbg !22
  %74 = add nsw i32 %71, %15, !dbg !22
  %75 = add nsw i32 %71, %16, !dbg !22
  %76 = sext i32 %72 to i64, !dbg !23
  %77 = getelementptr i64, ptr addrspace(1) %1, i64 %76, !dbg !23
  %78 = sext i32 %73 to i64, !dbg !23
  %79 = getelementptr i64, ptr addrspace(1) %1, i64 %78, !dbg !23
  %80 = sext i32 %74 to i64, !dbg !23
  %81 = getelementptr i64, ptr addrspace(1) %1, i64 %80, !dbg !23
  %82 = sext i32 %75 to i64, !dbg !23
  %83 = getelementptr i64, ptr addrspace(1) %1, i64 %82, !dbg !23
  %84 = and i1 %18, %58, !dbg !24
  %85 = and i1 %18, %59, !dbg !24
  %.not5.not16 = and i1 %19, %60, !dbg !14
  %86 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$4 ld.global.L1::evict_last.L2::cache_hint.v2.b64 { $0, $1 }, [ $2 + 0 ], $3;", "=l,=l,l,l,b"(ptr addrspace(1) %77, i64 %20, i1 %84) #8, !dbg !14
  %87 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !14
  %88 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$4 ld.global.L1::evict_last.L2::cache_hint.v2.b64 { $0, $1 }, [ $2 + 0 ], $3;", "=l,=l,l,l,b"(ptr addrspace(1) %79, i64 %87, i1 %84) #8, !dbg !14
  %89 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !14
  %90 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$4 ld.global.L1::evict_last.L2::cache_hint.v2.b64 { $0, $1 }, [ $2 + 0 ], $3;", "=l,=l,l,l,b"(ptr addrspace(1) %81, i64 %89, i1 %85) #8, !dbg !14
  %91 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !14
  %92 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$4 ld.global.L1::evict_last.L2::cache_hint.v2.b64 { $0, $1 }, [ $2 + 0 ], $3;", "=l,=l,l,l,b"(ptr addrspace(1) %83, i64 %91, i1 %85) #8, !dbg !14
  %93 = mul i32 %49, 324, !dbg !25
  %94 = mul i32 %50, 324, !dbg !25
  %95 = add i32 %93, %15, !dbg !26
  %96 = add i32 %94, %15, !dbg !26
  %97 = sext i32 %95 to i64, !dbg !27
  %98 = getelementptr float, ptr addrspace(1) %2, i64 %97, !dbg !27
  %99 = sext i32 %96 to i64, !dbg !27
  %100 = getelementptr float, ptr addrspace(1) %2, i64 %99, !dbg !27
  %101 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !15
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %98, i64 %101, i1 %84) #8, !dbg !15
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !15
  %104 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !15
  %105 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !15
  %106 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !15
  %107 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !15
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %100, i64 %107, i1 %85) #8, !dbg !15
  %109 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !15
  %110 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !15
  %111 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !15
  %112 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !15
  %113 = insertelement <4 x i32> poison, i32 %103, i64 0, !dbg !15
  %114 = insertelement <4 x i32> %113, i32 %104, i64 1, !dbg !15
  %115 = insertelement <4 x i32> %114, i32 %105, i64 2, !dbg !15
  %116 = insertelement <4 x i32> %115, i32 %106, i64 3, !dbg !15
  store <4 x i32> %116, ptr addrspace(3) %29, align 16, !dbg !15
  %117 = insertelement <4 x i32> poison, i32 %109, i64 0, !dbg !15
  %118 = insertelement <4 x i32> %117, i32 %110, i64 1, !dbg !15
  %119 = insertelement <4 x i32> %118, i32 %111, i64 2, !dbg !15
  %120 = insertelement <4 x i32> %119, i32 %112, i64 3, !dbg !15
  store <4 x i32> %120, ptr addrspace(3) %34, align 16, !dbg !15
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !15
  %121 = load float, ptr addrspace(3) %37, align 4, !dbg !15
  %122 = load float, ptr addrspace(3) %39, align 4, !dbg !15
  %123 = load float, ptr addrspace(3) %41, align 4, !dbg !15
  %124 = load float, ptr addrspace(3) %43, align 4, !dbg !15
  %125 = load float, ptr addrspace(3) %45, align 4, !dbg !15
  %126 = load float, ptr addrspace(3) %47, align 4, !dbg !15
  %127 = insertelement <8 x i32> poison, i32 %17, i64 0, !dbg !28
  %128 = shufflevector <8 x i32> %127, <8 x i32> poison, <8 x i32> zeroinitializer, !dbg !28
  %129 = sub nsw <8 x i32> %128, %67, !dbg !28
  %130 = icmp sgt <8 x i32> %129, zeroinitializer, !dbg !29
  %131 = select <8 x i1> %130, <8 x i64> splat (i64 16), <8 x i64> zeroinitializer, !dbg !30
  %132 = tail call <8 x i32> @llvm.abs.v8i32(<8 x i32> %129, i1 true), !dbg !31
  %133 = zext nneg <8 x i32> %132 to <8 x i64>, !dbg !32
  %134 = icmp samesign ult <8 x i32> %132, splat (i32 8), !dbg !32
  %135 = extractelement <8 x i32> %132, i64 1, !dbg !33
  %136 = uitofp nneg i32 %135 to float, !dbg !33
  %137 = extractelement <8 x i32> %132, i64 0, !dbg !33
  %138 = uitofp nneg i32 %137 to float, !dbg !33
  %139 = extractelement <8 x i32> %132, i64 2, !dbg !33
  %140 = uitofp nneg i32 %139 to float, !dbg !33
  %141 = extractelement <8 x i32> %132, i64 3, !dbg !33
  %142 = uitofp nneg i32 %141 to float, !dbg !33
  %143 = extractelement <8 x i32> %132, i64 4, !dbg !33
  %144 = uitofp nneg i32 %143 to float, !dbg !33
  %145 = extractelement <8 x i32> %132, i64 5, !dbg !33
  %146 = uitofp nneg i32 %145 to float, !dbg !33
  %147 = extractelement <8 x i32> %132, i64 6, !dbg !33
  %148 = uitofp nneg i32 %147 to float, !dbg !33
  %149 = extractelement <8 x i32> %132, i64 7, !dbg !33
  %150 = uitofp nneg i32 %149 to float, !dbg !33
  %151 = fmul float %136, 1.250000e-01, !dbg !34
  %152 = fmul float %138, 1.250000e-01, !dbg !34
  %153 = fmul float %140, 1.250000e-01, !dbg !34
  %154 = fmul float %142, 1.250000e-01, !dbg !34
  %155 = fmul float %144, 1.250000e-01, !dbg !34
  %156 = fmul float %146, 1.250000e-01, !dbg !34
  %157 = fmul float %148, 1.250000e-01, !dbg !34
  %158 = fmul float %150, 1.250000e-01, !dbg !34
  %159 = fcmp olt float %151, 0x3810000000000000, !dbg !35
  %160 = fmul float %151, 0x4160000000000000, !dbg !35
  %.02.i = select i1 %159, float %160, float %151, !dbg !35
  %i.i.0.i = select i1 %159, float -2.300000e+01, float 0.000000e+00, !dbg !35
  %161 = bitcast float %.02.i to i32, !dbg !35
  %162 = add nsw i32 %161, -1059760811, !dbg !35
  %163 = and i32 %162, -8388608, !dbg !35
  %164 = sub i32 %161, %163, !dbg !35
  %165 = bitcast i32 %164 to float, !dbg !35
  %166 = sitofp i32 %163 to float, !dbg !35
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not.i = icmp eq i32 %167, 0, !dbg !35
  %168 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %166, float 0x3E80000000000000, float %i.i.0.i) #8, !dbg !35
  %169 = tail call float @llvm.nvvm.fma.rn.f(float %166, float 0x3E80000000000000, float %i.i.0.i) #8, !dbg !35
  %.08.i = select i1 %.not.i, float %169, float %168, !dbg !35
  %170 = fadd float %165, -1.000000e+00, !dbg !35
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not1.i = icmp eq i32 %171, 0, !dbg !35
  %172 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %170, float 0x3FC2073EC0000000) #8, !dbg !35
  %173 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %170, float 0x3FC2073EC0000000) #8, !dbg !35
  %.010.i = select i1 %.not1.i, float %173, float %172, !dbg !35
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not2.i = icmp eq i32 %174, 0, !dbg !35
  %175 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %170, float 0xBFBF19B980000000) #8, !dbg !35
  %176 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %170, float 0xBFBF19B980000000) #8, !dbg !35
  %.011.i = select i1 %.not2.i, float %176, float %175, !dbg !35
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not3.i = icmp eq i32 %177, 0, !dbg !35
  %178 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %170, float 0x3FC1E52AA0000000) #8, !dbg !35
  %179 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %170, float 0x3FC1E52AA0000000) #8, !dbg !35
  %.012.i = select i1 %.not3.i, float %179, float %178, !dbg !35
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not4.i = icmp eq i32 %180, 0, !dbg !35
  %181 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %170, float 0xBFC55B1720000000) #8, !dbg !35
  %182 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %170, float 0xBFC55B1720000000) #8, !dbg !35
  %.09.i = select i1 %.not4.i, float %182, float %181, !dbg !35
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not5.i = icmp eq i32 %183, 0, !dbg !35
  %184 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %170, float 0x3FC99DA160000000) #8, !dbg !35
  %185 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %170, float 0x3FC99DA160000000) #8, !dbg !35
  %.05.i = select i1 %.not5.i, float %185, float %184, !dbg !35
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not6.i = icmp eq i32 %186, 0, !dbg !35
  %187 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %170, float 0xBFCFFFE440000000) #8, !dbg !35
  %188 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %170, float 0xBFCFFFE440000000) #8, !dbg !35
  %.01.i = select i1 %.not6.i, float %188, float %187, !dbg !35
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not7.i = icmp eq i32 %189, 0, !dbg !35
  %190 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %170, float 0x3FD5554F00000000) #8, !dbg !35
  %191 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %170, float 0x3FD5554F00000000) #8, !dbg !35
  %.0.i = select i1 %.not7.i, float %191, float %190, !dbg !35
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not8.i = icmp eq i32 %192, 0, !dbg !35
  %193 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %170, float -5.000000e-01) #8, !dbg !35
  %194 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %170, float -5.000000e-01) #8, !dbg !35
  %.07.i = select i1 %.not8.i, float %194, float %193, !dbg !35
  %195 = fmul float %170, %.07.i, !dbg !35
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not9.i = icmp eq i32 %196, 0, !dbg !35
  %197 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %195, float %170, float %170) #8, !dbg !35
  %198 = tail call float @llvm.nvvm.fma.rn.f(float %195, float %170, float %170) #8, !dbg !35
  %.06.i = select i1 %.not9.i, float %198, float %197, !dbg !35
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not10.i = icmp eq i32 %199, 0, !dbg !35
  %200 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #8, !dbg !35
  %201 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #8, !dbg !35
  %.04.i = select i1 %.not10.i, float %201, float %200, !dbg !35
  %202 = icmp samesign ugt i32 %161, 2139095039, !dbg !35
  br i1 %202, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !35

__nv_fmaf_rn.exit.i.i:                            ; preds = %8
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not11.i = icmp eq i32 %203, 0, !dbg !35
  %204 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !35
  %205 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !35
  %.03.i = select i1 %.not11.i, float %205, float %204, !dbg !35
  br label %__nv_logf.exit, !dbg !35

__nv_logf.exit:                                   ; preds = %8, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %8 ], !dbg !35
  %206 = fcmp olt float %152, 0x3810000000000000, !dbg !35
  %207 = fmul float %152, 0x4160000000000000, !dbg !35
  %.02.i38 = select i1 %206, float %207, float %152, !dbg !35
  %i.i.0.i39 = select i1 %206, float -2.300000e+01, float 0.000000e+00, !dbg !35
  %208 = bitcast float %.02.i38 to i32, !dbg !35
  %209 = add nsw i32 %208, -1059760811, !dbg !35
  %210 = and i32 %209, -8388608, !dbg !35
  %211 = sub i32 %208, %210, !dbg !35
  %212 = bitcast i32 %211 to float, !dbg !35
  %213 = sitofp i32 %210 to float, !dbg !35
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not.i40 = icmp eq i32 %214, 0, !dbg !35
  %215 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %213, float 0x3E80000000000000, float %i.i.0.i39) #8, !dbg !35
  %216 = tail call float @llvm.nvvm.fma.rn.f(float %213, float 0x3E80000000000000, float %i.i.0.i39) #8, !dbg !35
  %.08.i41 = select i1 %.not.i40, float %216, float %215, !dbg !35
  %217 = fadd float %212, -1.000000e+00, !dbg !35
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not1.i42 = icmp eq i32 %218, 0, !dbg !35
  %219 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %217, float 0x3FC2073EC0000000) #8, !dbg !35
  %220 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %217, float 0x3FC2073EC0000000) #8, !dbg !35
  %.010.i43 = select i1 %.not1.i42, float %220, float %219, !dbg !35
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not2.i44 = icmp eq i32 %221, 0, !dbg !35
  %222 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i43, float %217, float 0xBFBF19B980000000) #8, !dbg !35
  %223 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i43, float %217, float 0xBFBF19B980000000) #8, !dbg !35
  %.011.i45 = select i1 %.not2.i44, float %223, float %222, !dbg !35
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not3.i46 = icmp eq i32 %224, 0, !dbg !35
  %225 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i45, float %217, float 0x3FC1E52AA0000000) #8, !dbg !35
  %226 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i45, float %217, float 0x3FC1E52AA0000000) #8, !dbg !35
  %.012.i47 = select i1 %.not3.i46, float %226, float %225, !dbg !35
  %227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not4.i48 = icmp eq i32 %227, 0, !dbg !35
  %228 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i47, float %217, float 0xBFC55B1720000000) #8, !dbg !35
  %229 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i47, float %217, float 0xBFC55B1720000000) #8, !dbg !35
  %.09.i49 = select i1 %.not4.i48, float %229, float %228, !dbg !35
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not5.i50 = icmp eq i32 %230, 0, !dbg !35
  %231 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i49, float %217, float 0x3FC99DA160000000) #8, !dbg !35
  %232 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i49, float %217, float 0x3FC99DA160000000) #8, !dbg !35
  %.05.i51 = select i1 %.not5.i50, float %232, float %231, !dbg !35
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not6.i52 = icmp eq i32 %233, 0, !dbg !35
  %234 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i51, float %217, float 0xBFCFFFE440000000) #8, !dbg !35
  %235 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i51, float %217, float 0xBFCFFFE440000000) #8, !dbg !35
  %.01.i53 = select i1 %.not6.i52, float %235, float %234, !dbg !35
  %236 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not7.i54 = icmp eq i32 %236, 0, !dbg !35
  %237 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i53, float %217, float 0x3FD5554F00000000) #8, !dbg !35
  %238 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i53, float %217, float 0x3FD5554F00000000) #8, !dbg !35
  %.0.i55 = select i1 %.not7.i54, float %238, float %237, !dbg !35
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not8.i56 = icmp eq i32 %239, 0, !dbg !35
  %240 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i55, float %217, float -5.000000e-01) #8, !dbg !35
  %241 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i55, float %217, float -5.000000e-01) #8, !dbg !35
  %.07.i57 = select i1 %.not8.i56, float %241, float %240, !dbg !35
  %242 = fmul float %217, %.07.i57, !dbg !35
  %243 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not9.i58 = icmp eq i32 %243, 0, !dbg !35
  %244 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %242, float %217, float %217) #8, !dbg !35
  %245 = tail call float @llvm.nvvm.fma.rn.f(float %242, float %217, float %217) #8, !dbg !35
  %.06.i59 = select i1 %.not9.i58, float %245, float %244, !dbg !35
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not10.i60 = icmp eq i32 %246, 0, !dbg !35
  %247 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i41, float 0x3FE62E4300000000, float %.06.i59) #8, !dbg !35
  %248 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i41, float 0x3FE62E4300000000, float %.06.i59) #8, !dbg !35
  %.04.i61 = select i1 %.not10.i60, float %248, float %247, !dbg !35
  %249 = icmp samesign ugt i32 %208, 2139095039, !dbg !35
  br i1 %249, label %__nv_fmaf_rn.exit.i.i64, label %__nv_logf.exit67, !dbg !35

__nv_fmaf_rn.exit.i.i64:                          ; preds = %__nv_logf.exit
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not11.i65 = icmp eq i32 %250, 0, !dbg !35
  %251 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i38, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !35
  %252 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i38, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !35
  %.03.i66 = select i1 %.not11.i65, float %252, float %251, !dbg !35
  br label %__nv_logf.exit67, !dbg !35

__nv_logf.exit67:                                 ; preds = %__nv_logf.exit, %__nv_fmaf_rn.exit.i.i64
  %r.i.0.i62 = phi float [ %.03.i66, %__nv_fmaf_rn.exit.i.i64 ], [ %.04.i61, %__nv_logf.exit ], !dbg !35
  %253 = fcmp olt float %153, 0x3810000000000000, !dbg !35
  %254 = fmul float %153, 0x4160000000000000, !dbg !35
  %.02.i68 = select i1 %253, float %254, float %153, !dbg !35
  %i.i.0.i69 = select i1 %253, float -2.300000e+01, float 0.000000e+00, !dbg !35
  %255 = bitcast float %.02.i68 to i32, !dbg !35
  %256 = add nsw i32 %255, -1059760811, !dbg !35
  %257 = and i32 %256, -8388608, !dbg !35
  %258 = sub i32 %255, %257, !dbg !35
  %259 = bitcast i32 %258 to float, !dbg !35
  %260 = sitofp i32 %257 to float, !dbg !35
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not.i70 = icmp eq i32 %261, 0, !dbg !35
  %262 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %260, float 0x3E80000000000000, float %i.i.0.i69) #8, !dbg !35
  %263 = tail call float @llvm.nvvm.fma.rn.f(float %260, float 0x3E80000000000000, float %i.i.0.i69) #8, !dbg !35
  %.08.i71 = select i1 %.not.i70, float %263, float %262, !dbg !35
  %264 = fadd float %259, -1.000000e+00, !dbg !35
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not1.i72 = icmp eq i32 %265, 0, !dbg !35
  %266 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %264, float 0x3FC2073EC0000000) #8, !dbg !35
  %267 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %264, float 0x3FC2073EC0000000) #8, !dbg !35
  %.010.i73 = select i1 %.not1.i72, float %267, float %266, !dbg !35
  %268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not2.i74 = icmp eq i32 %268, 0, !dbg !35
  %269 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i73, float %264, float 0xBFBF19B980000000) #8, !dbg !35
  %270 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i73, float %264, float 0xBFBF19B980000000) #8, !dbg !35
  %.011.i75 = select i1 %.not2.i74, float %270, float %269, !dbg !35
  %271 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not3.i76 = icmp eq i32 %271, 0, !dbg !35
  %272 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i75, float %264, float 0x3FC1E52AA0000000) #8, !dbg !35
  %273 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i75, float %264, float 0x3FC1E52AA0000000) #8, !dbg !35
  %.012.i77 = select i1 %.not3.i76, float %273, float %272, !dbg !35
  %274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not4.i78 = icmp eq i32 %274, 0, !dbg !35
  %275 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i77, float %264, float 0xBFC55B1720000000) #8, !dbg !35
  %276 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i77, float %264, float 0xBFC55B1720000000) #8, !dbg !35
  %.09.i79 = select i1 %.not4.i78, float %276, float %275, !dbg !35
  %277 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not5.i80 = icmp eq i32 %277, 0, !dbg !35
  %278 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i79, float %264, float 0x3FC99DA160000000) #8, !dbg !35
  %279 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i79, float %264, float 0x3FC99DA160000000) #8, !dbg !35
  %.05.i81 = select i1 %.not5.i80, float %279, float %278, !dbg !35
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not6.i82 = icmp eq i32 %280, 0, !dbg !35
  %281 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i81, float %264, float 0xBFCFFFE440000000) #8, !dbg !35
  %282 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i81, float %264, float 0xBFCFFFE440000000) #8, !dbg !35
  %.01.i83 = select i1 %.not6.i82, float %282, float %281, !dbg !35
  %283 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not7.i84 = icmp eq i32 %283, 0, !dbg !35
  %284 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i83, float %264, float 0x3FD5554F00000000) #8, !dbg !35
  %285 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i83, float %264, float 0x3FD5554F00000000) #8, !dbg !35
  %.0.i85 = select i1 %.not7.i84, float %285, float %284, !dbg !35
  %286 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not8.i86 = icmp eq i32 %286, 0, !dbg !35
  %287 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i85, float %264, float -5.000000e-01) #8, !dbg !35
  %288 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i85, float %264, float -5.000000e-01) #8, !dbg !35
  %.07.i87 = select i1 %.not8.i86, float %288, float %287, !dbg !35
  %289 = fmul float %264, %.07.i87, !dbg !35
  %290 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not9.i88 = icmp eq i32 %290, 0, !dbg !35
  %291 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %289, float %264, float %264) #8, !dbg !35
  %292 = tail call float @llvm.nvvm.fma.rn.f(float %289, float %264, float %264) #8, !dbg !35
  %.06.i89 = select i1 %.not9.i88, float %292, float %291, !dbg !35
  %293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not10.i90 = icmp eq i32 %293, 0, !dbg !35
  %294 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i71, float 0x3FE62E4300000000, float %.06.i89) #8, !dbg !35
  %295 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i71, float 0x3FE62E4300000000, float %.06.i89) #8, !dbg !35
  %.04.i91 = select i1 %.not10.i90, float %295, float %294, !dbg !35
  %296 = icmp samesign ugt i32 %255, 2139095039, !dbg !35
  br i1 %296, label %__nv_fmaf_rn.exit.i.i94, label %__nv_logf.exit97, !dbg !35

__nv_fmaf_rn.exit.i.i94:                          ; preds = %__nv_logf.exit67
  %297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not11.i95 = icmp eq i32 %297, 0, !dbg !35
  %298 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i68, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !35
  %299 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i68, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !35
  %.03.i96 = select i1 %.not11.i95, float %299, float %298, !dbg !35
  br label %__nv_logf.exit97, !dbg !35

__nv_logf.exit97:                                 ; preds = %__nv_logf.exit67, %__nv_fmaf_rn.exit.i.i94
  %r.i.0.i92 = phi float [ %.03.i96, %__nv_fmaf_rn.exit.i.i94 ], [ %.04.i91, %__nv_logf.exit67 ], !dbg !35
  %300 = fcmp olt float %154, 0x3810000000000000, !dbg !35
  %301 = fmul float %154, 0x4160000000000000, !dbg !35
  %.02.i98 = select i1 %300, float %301, float %154, !dbg !35
  %i.i.0.i99 = select i1 %300, float -2.300000e+01, float 0.000000e+00, !dbg !35
  %302 = bitcast float %.02.i98 to i32, !dbg !35
  %303 = add nsw i32 %302, -1059760811, !dbg !35
  %304 = and i32 %303, -8388608, !dbg !35
  %305 = sub i32 %302, %304, !dbg !35
  %306 = bitcast i32 %305 to float, !dbg !35
  %307 = sitofp i32 %304 to float, !dbg !35
  %308 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not.i100 = icmp eq i32 %308, 0, !dbg !35
  %309 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %307, float 0x3E80000000000000, float %i.i.0.i99) #8, !dbg !35
  %310 = tail call float @llvm.nvvm.fma.rn.f(float %307, float 0x3E80000000000000, float %i.i.0.i99) #8, !dbg !35
  %.08.i101 = select i1 %.not.i100, float %310, float %309, !dbg !35
  %311 = fadd float %306, -1.000000e+00, !dbg !35
  %312 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not1.i102 = icmp eq i32 %312, 0, !dbg !35
  %313 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %311, float 0x3FC2073EC0000000) #8, !dbg !35
  %314 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %311, float 0x3FC2073EC0000000) #8, !dbg !35
  %.010.i103 = select i1 %.not1.i102, float %314, float %313, !dbg !35
  %315 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not2.i104 = icmp eq i32 %315, 0, !dbg !35
  %316 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i103, float %311, float 0xBFBF19B980000000) #8, !dbg !35
  %317 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i103, float %311, float 0xBFBF19B980000000) #8, !dbg !35
  %.011.i105 = select i1 %.not2.i104, float %317, float %316, !dbg !35
  %318 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not3.i106 = icmp eq i32 %318, 0, !dbg !35
  %319 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i105, float %311, float 0x3FC1E52AA0000000) #8, !dbg !35
  %320 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i105, float %311, float 0x3FC1E52AA0000000) #8, !dbg !35
  %.012.i107 = select i1 %.not3.i106, float %320, float %319, !dbg !35
  %321 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not4.i108 = icmp eq i32 %321, 0, !dbg !35
  %322 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i107, float %311, float 0xBFC55B1720000000) #8, !dbg !35
  %323 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i107, float %311, float 0xBFC55B1720000000) #8, !dbg !35
  %.09.i109 = select i1 %.not4.i108, float %323, float %322, !dbg !35
  %324 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not5.i110 = icmp eq i32 %324, 0, !dbg !35
  %325 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i109, float %311, float 0x3FC99DA160000000) #8, !dbg !35
  %326 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i109, float %311, float 0x3FC99DA160000000) #8, !dbg !35
  %.05.i111 = select i1 %.not5.i110, float %326, float %325, !dbg !35
  %327 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not6.i112 = icmp eq i32 %327, 0, !dbg !35
  %328 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i111, float %311, float 0xBFCFFFE440000000) #8, !dbg !35
  %329 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i111, float %311, float 0xBFCFFFE440000000) #8, !dbg !35
  %.01.i113 = select i1 %.not6.i112, float %329, float %328, !dbg !35
  %330 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not7.i114 = icmp eq i32 %330, 0, !dbg !35
  %331 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i113, float %311, float 0x3FD5554F00000000) #8, !dbg !35
  %332 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i113, float %311, float 0x3FD5554F00000000) #8, !dbg !35
  %.0.i115 = select i1 %.not7.i114, float %332, float %331, !dbg !35
  %333 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not8.i116 = icmp eq i32 %333, 0, !dbg !35
  %334 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i115, float %311, float -5.000000e-01) #8, !dbg !35
  %335 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i115, float %311, float -5.000000e-01) #8, !dbg !35
  %.07.i117 = select i1 %.not8.i116, float %335, float %334, !dbg !35
  %336 = fmul float %311, %.07.i117, !dbg !35
  %337 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not9.i118 = icmp eq i32 %337, 0, !dbg !35
  %338 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %336, float %311, float %311) #8, !dbg !35
  %339 = tail call float @llvm.nvvm.fma.rn.f(float %336, float %311, float %311) #8, !dbg !35
  %.06.i119 = select i1 %.not9.i118, float %339, float %338, !dbg !35
  %340 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not10.i120 = icmp eq i32 %340, 0, !dbg !35
  %341 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i101, float 0x3FE62E4300000000, float %.06.i119) #8, !dbg !35
  %342 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i101, float 0x3FE62E4300000000, float %.06.i119) #8, !dbg !35
  %.04.i121 = select i1 %.not10.i120, float %342, float %341, !dbg !35
  %343 = icmp samesign ugt i32 %302, 2139095039, !dbg !35
  br i1 %343, label %__nv_fmaf_rn.exit.i.i124, label %__nv_logf.exit127, !dbg !35

__nv_fmaf_rn.exit.i.i124:                         ; preds = %__nv_logf.exit97
  %344 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not11.i125 = icmp eq i32 %344, 0, !dbg !35
  %345 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i98, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !35
  %346 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i98, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !35
  %.03.i126 = select i1 %.not11.i125, float %346, float %345, !dbg !35
  br label %__nv_logf.exit127, !dbg !35

__nv_logf.exit127:                                ; preds = %__nv_logf.exit97, %__nv_fmaf_rn.exit.i.i124
  %r.i.0.i122 = phi float [ %.03.i126, %__nv_fmaf_rn.exit.i.i124 ], [ %.04.i121, %__nv_logf.exit97 ], !dbg !35
  %347 = fcmp olt float %155, 0x3810000000000000, !dbg !35
  %348 = fmul float %155, 0x4160000000000000, !dbg !35
  %.02.i128 = select i1 %347, float %348, float %155, !dbg !35
  %i.i.0.i129 = select i1 %347, float -2.300000e+01, float 0.000000e+00, !dbg !35
  %349 = bitcast float %.02.i128 to i32, !dbg !35
  %350 = add nsw i32 %349, -1059760811, !dbg !35
  %351 = and i32 %350, -8388608, !dbg !35
  %352 = sub i32 %349, %351, !dbg !35
  %353 = bitcast i32 %352 to float, !dbg !35
  %354 = sitofp i32 %351 to float, !dbg !35
  %355 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not.i130 = icmp eq i32 %355, 0, !dbg !35
  %356 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %354, float 0x3E80000000000000, float %i.i.0.i129) #8, !dbg !35
  %357 = tail call float @llvm.nvvm.fma.rn.f(float %354, float 0x3E80000000000000, float %i.i.0.i129) #8, !dbg !35
  %.08.i131 = select i1 %.not.i130, float %357, float %356, !dbg !35
  %358 = fadd float %353, -1.000000e+00, !dbg !35
  %359 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not1.i132 = icmp eq i32 %359, 0, !dbg !35
  %360 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %358, float 0x3FC2073EC0000000) #8, !dbg !35
  %361 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %358, float 0x3FC2073EC0000000) #8, !dbg !35
  %.010.i133 = select i1 %.not1.i132, float %361, float %360, !dbg !35
  %362 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not2.i134 = icmp eq i32 %362, 0, !dbg !35
  %363 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i133, float %358, float 0xBFBF19B980000000) #8, !dbg !35
  %364 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i133, float %358, float 0xBFBF19B980000000) #8, !dbg !35
  %.011.i135 = select i1 %.not2.i134, float %364, float %363, !dbg !35
  %365 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not3.i136 = icmp eq i32 %365, 0, !dbg !35
  %366 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i135, float %358, float 0x3FC1E52AA0000000) #8, !dbg !35
  %367 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i135, float %358, float 0x3FC1E52AA0000000) #8, !dbg !35
  %.012.i137 = select i1 %.not3.i136, float %367, float %366, !dbg !35
  %368 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not4.i138 = icmp eq i32 %368, 0, !dbg !35
  %369 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i137, float %358, float 0xBFC55B1720000000) #8, !dbg !35
  %370 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i137, float %358, float 0xBFC55B1720000000) #8, !dbg !35
  %.09.i139 = select i1 %.not4.i138, float %370, float %369, !dbg !35
  %371 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not5.i140 = icmp eq i32 %371, 0, !dbg !35
  %372 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i139, float %358, float 0x3FC99DA160000000) #8, !dbg !35
  %373 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i139, float %358, float 0x3FC99DA160000000) #8, !dbg !35
  %.05.i141 = select i1 %.not5.i140, float %373, float %372, !dbg !35
  %374 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not6.i142 = icmp eq i32 %374, 0, !dbg !35
  %375 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i141, float %358, float 0xBFCFFFE440000000) #8, !dbg !35
  %376 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i141, float %358, float 0xBFCFFFE440000000) #8, !dbg !35
  %.01.i143 = select i1 %.not6.i142, float %376, float %375, !dbg !35
  %377 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not7.i144 = icmp eq i32 %377, 0, !dbg !35
  %378 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i143, float %358, float 0x3FD5554F00000000) #8, !dbg !35
  %379 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i143, float %358, float 0x3FD5554F00000000) #8, !dbg !35
  %.0.i145 = select i1 %.not7.i144, float %379, float %378, !dbg !35
  %380 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not8.i146 = icmp eq i32 %380, 0, !dbg !35
  %381 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i145, float %358, float -5.000000e-01) #8, !dbg !35
  %382 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i145, float %358, float -5.000000e-01) #8, !dbg !35
  %.07.i147 = select i1 %.not8.i146, float %382, float %381, !dbg !35
  %383 = fmul float %358, %.07.i147, !dbg !35
  %384 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not9.i148 = icmp eq i32 %384, 0, !dbg !35
  %385 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %383, float %358, float %358) #8, !dbg !35
  %386 = tail call float @llvm.nvvm.fma.rn.f(float %383, float %358, float %358) #8, !dbg !35
  %.06.i149 = select i1 %.not9.i148, float %386, float %385, !dbg !35
  %387 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not10.i150 = icmp eq i32 %387, 0, !dbg !35
  %388 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i131, float 0x3FE62E4300000000, float %.06.i149) #8, !dbg !35
  %389 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i131, float 0x3FE62E4300000000, float %.06.i149) #8, !dbg !35
  %.04.i151 = select i1 %.not10.i150, float %389, float %388, !dbg !35
  %390 = icmp samesign ugt i32 %349, 2139095039, !dbg !35
  br i1 %390, label %__nv_fmaf_rn.exit.i.i154, label %__nv_logf.exit157, !dbg !35

__nv_fmaf_rn.exit.i.i154:                         ; preds = %__nv_logf.exit127
  %391 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not11.i155 = icmp eq i32 %391, 0, !dbg !35
  %392 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i128, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !35
  %393 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i128, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !35
  %.03.i156 = select i1 %.not11.i155, float %393, float %392, !dbg !35
  br label %__nv_logf.exit157, !dbg !35

__nv_logf.exit157:                                ; preds = %__nv_logf.exit127, %__nv_fmaf_rn.exit.i.i154
  %r.i.0.i152 = phi float [ %.03.i156, %__nv_fmaf_rn.exit.i.i154 ], [ %.04.i151, %__nv_logf.exit127 ], !dbg !35
  %394 = fcmp olt float %156, 0x3810000000000000, !dbg !35
  %395 = fmul float %156, 0x4160000000000000, !dbg !35
  %.02.i158 = select i1 %394, float %395, float %156, !dbg !35
  %i.i.0.i159 = select i1 %394, float -2.300000e+01, float 0.000000e+00, !dbg !35
  %396 = bitcast float %.02.i158 to i32, !dbg !35
  %397 = add nsw i32 %396, -1059760811, !dbg !35
  %398 = and i32 %397, -8388608, !dbg !35
  %399 = sub i32 %396, %398, !dbg !35
  %400 = bitcast i32 %399 to float, !dbg !35
  %401 = sitofp i32 %398 to float, !dbg !35
  %402 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not.i160 = icmp eq i32 %402, 0, !dbg !35
  %403 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %401, float 0x3E80000000000000, float %i.i.0.i159) #8, !dbg !35
  %404 = tail call float @llvm.nvvm.fma.rn.f(float %401, float 0x3E80000000000000, float %i.i.0.i159) #8, !dbg !35
  %.08.i161 = select i1 %.not.i160, float %404, float %403, !dbg !35
  %405 = fadd float %400, -1.000000e+00, !dbg !35
  %406 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not1.i162 = icmp eq i32 %406, 0, !dbg !35
  %407 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %405, float 0x3FC2073EC0000000) #8, !dbg !35
  %408 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %405, float 0x3FC2073EC0000000) #8, !dbg !35
  %.010.i163 = select i1 %.not1.i162, float %408, float %407, !dbg !35
  %409 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not2.i164 = icmp eq i32 %409, 0, !dbg !35
  %410 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i163, float %405, float 0xBFBF19B980000000) #8, !dbg !35
  %411 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i163, float %405, float 0xBFBF19B980000000) #8, !dbg !35
  %.011.i165 = select i1 %.not2.i164, float %411, float %410, !dbg !35
  %412 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not3.i166 = icmp eq i32 %412, 0, !dbg !35
  %413 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i165, float %405, float 0x3FC1E52AA0000000) #8, !dbg !35
  %414 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i165, float %405, float 0x3FC1E52AA0000000) #8, !dbg !35
  %.012.i167 = select i1 %.not3.i166, float %414, float %413, !dbg !35
  %415 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not4.i168 = icmp eq i32 %415, 0, !dbg !35
  %416 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i167, float %405, float 0xBFC55B1720000000) #8, !dbg !35
  %417 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i167, float %405, float 0xBFC55B1720000000) #8, !dbg !35
  %.09.i169 = select i1 %.not4.i168, float %417, float %416, !dbg !35
  %418 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not5.i170 = icmp eq i32 %418, 0, !dbg !35
  %419 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i169, float %405, float 0x3FC99DA160000000) #8, !dbg !35
  %420 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i169, float %405, float 0x3FC99DA160000000) #8, !dbg !35
  %.05.i171 = select i1 %.not5.i170, float %420, float %419, !dbg !35
  %421 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not6.i172 = icmp eq i32 %421, 0, !dbg !35
  %422 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i171, float %405, float 0xBFCFFFE440000000) #8, !dbg !35
  %423 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i171, float %405, float 0xBFCFFFE440000000) #8, !dbg !35
  %.01.i173 = select i1 %.not6.i172, float %423, float %422, !dbg !35
  %424 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not7.i174 = icmp eq i32 %424, 0, !dbg !35
  %425 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i173, float %405, float 0x3FD5554F00000000) #8, !dbg !35
  %426 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i173, float %405, float 0x3FD5554F00000000) #8, !dbg !35
  %.0.i175 = select i1 %.not7.i174, float %426, float %425, !dbg !35
  %427 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not8.i176 = icmp eq i32 %427, 0, !dbg !35
  %428 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i175, float %405, float -5.000000e-01) #8, !dbg !35
  %429 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i175, float %405, float -5.000000e-01) #8, !dbg !35
  %.07.i177 = select i1 %.not8.i176, float %429, float %428, !dbg !35
  %430 = fmul float %405, %.07.i177, !dbg !35
  %431 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not9.i178 = icmp eq i32 %431, 0, !dbg !35
  %432 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %430, float %405, float %405) #8, !dbg !35
  %433 = tail call float @llvm.nvvm.fma.rn.f(float %430, float %405, float %405) #8, !dbg !35
  %.06.i179 = select i1 %.not9.i178, float %433, float %432, !dbg !35
  %434 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not10.i180 = icmp eq i32 %434, 0, !dbg !35
  %435 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i161, float 0x3FE62E4300000000, float %.06.i179) #8, !dbg !35
  %436 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i161, float 0x3FE62E4300000000, float %.06.i179) #8, !dbg !35
  %.04.i181 = select i1 %.not10.i180, float %436, float %435, !dbg !35
  %437 = icmp samesign ugt i32 %396, 2139095039, !dbg !35
  br i1 %437, label %__nv_fmaf_rn.exit.i.i184, label %__nv_logf.exit187, !dbg !35

__nv_fmaf_rn.exit.i.i184:                         ; preds = %__nv_logf.exit157
  %438 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not11.i185 = icmp eq i32 %438, 0, !dbg !35
  %439 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i158, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !35
  %440 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i158, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !35
  %.03.i186 = select i1 %.not11.i185, float %440, float %439, !dbg !35
  br label %__nv_logf.exit187, !dbg !35

__nv_logf.exit187:                                ; preds = %__nv_logf.exit157, %__nv_fmaf_rn.exit.i.i184
  %r.i.0.i182 = phi float [ %.03.i186, %__nv_fmaf_rn.exit.i.i184 ], [ %.04.i181, %__nv_logf.exit157 ], !dbg !35
  %441 = fcmp olt float %157, 0x3810000000000000, !dbg !35
  %442 = fmul float %157, 0x4160000000000000, !dbg !35
  %.02.i188 = select i1 %441, float %442, float %157, !dbg !35
  %i.i.0.i189 = select i1 %441, float -2.300000e+01, float 0.000000e+00, !dbg !35
  %443 = bitcast float %.02.i188 to i32, !dbg !35
  %444 = add nsw i32 %443, -1059760811, !dbg !35
  %445 = and i32 %444, -8388608, !dbg !35
  %446 = sub i32 %443, %445, !dbg !35
  %447 = bitcast i32 %446 to float, !dbg !35
  %448 = sitofp i32 %445 to float, !dbg !35
  %449 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not.i190 = icmp eq i32 %449, 0, !dbg !35
  %450 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %448, float 0x3E80000000000000, float %i.i.0.i189) #8, !dbg !35
  %451 = tail call float @llvm.nvvm.fma.rn.f(float %448, float 0x3E80000000000000, float %i.i.0.i189) #8, !dbg !35
  %.08.i191 = select i1 %.not.i190, float %451, float %450, !dbg !35
  %452 = fadd float %447, -1.000000e+00, !dbg !35
  %453 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not1.i192 = icmp eq i32 %453, 0, !dbg !35
  %454 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %452, float 0x3FC2073EC0000000) #8, !dbg !35
  %455 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %452, float 0x3FC2073EC0000000) #8, !dbg !35
  %.010.i193 = select i1 %.not1.i192, float %455, float %454, !dbg !35
  %456 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not2.i194 = icmp eq i32 %456, 0, !dbg !35
  %457 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i193, float %452, float 0xBFBF19B980000000) #8, !dbg !35
  %458 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i193, float %452, float 0xBFBF19B980000000) #8, !dbg !35
  %.011.i195 = select i1 %.not2.i194, float %458, float %457, !dbg !35
  %459 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not3.i196 = icmp eq i32 %459, 0, !dbg !35
  %460 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i195, float %452, float 0x3FC1E52AA0000000) #8, !dbg !35
  %461 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i195, float %452, float 0x3FC1E52AA0000000) #8, !dbg !35
  %.012.i197 = select i1 %.not3.i196, float %461, float %460, !dbg !35
  %462 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not4.i198 = icmp eq i32 %462, 0, !dbg !35
  %463 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i197, float %452, float 0xBFC55B1720000000) #8, !dbg !35
  %464 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i197, float %452, float 0xBFC55B1720000000) #8, !dbg !35
  %.09.i199 = select i1 %.not4.i198, float %464, float %463, !dbg !35
  %465 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not5.i200 = icmp eq i32 %465, 0, !dbg !35
  %466 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i199, float %452, float 0x3FC99DA160000000) #8, !dbg !35
  %467 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i199, float %452, float 0x3FC99DA160000000) #8, !dbg !35
  %.05.i201 = select i1 %.not5.i200, float %467, float %466, !dbg !35
  %468 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not6.i202 = icmp eq i32 %468, 0, !dbg !35
  %469 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i201, float %452, float 0xBFCFFFE440000000) #8, !dbg !35
  %470 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i201, float %452, float 0xBFCFFFE440000000) #8, !dbg !35
  %.01.i203 = select i1 %.not6.i202, float %470, float %469, !dbg !35
  %471 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not7.i204 = icmp eq i32 %471, 0, !dbg !35
  %472 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i203, float %452, float 0x3FD5554F00000000) #8, !dbg !35
  %473 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i203, float %452, float 0x3FD5554F00000000) #8, !dbg !35
  %.0.i205 = select i1 %.not7.i204, float %473, float %472, !dbg !35
  %474 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not8.i206 = icmp eq i32 %474, 0, !dbg !35
  %475 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i205, float %452, float -5.000000e-01) #8, !dbg !35
  %476 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i205, float %452, float -5.000000e-01) #8, !dbg !35
  %.07.i207 = select i1 %.not8.i206, float %476, float %475, !dbg !35
  %477 = fmul float %452, %.07.i207, !dbg !35
  %478 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not9.i208 = icmp eq i32 %478, 0, !dbg !35
  %479 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %477, float %452, float %452) #8, !dbg !35
  %480 = tail call float @llvm.nvvm.fma.rn.f(float %477, float %452, float %452) #8, !dbg !35
  %.06.i209 = select i1 %.not9.i208, float %480, float %479, !dbg !35
  %481 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not10.i210 = icmp eq i32 %481, 0, !dbg !35
  %482 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i191, float 0x3FE62E4300000000, float %.06.i209) #8, !dbg !35
  %483 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i191, float 0x3FE62E4300000000, float %.06.i209) #8, !dbg !35
  %.04.i211 = select i1 %.not10.i210, float %483, float %482, !dbg !35
  %484 = icmp samesign ugt i32 %443, 2139095039, !dbg !35
  br i1 %484, label %__nv_fmaf_rn.exit.i.i214, label %__nv_logf.exit217, !dbg !35

__nv_fmaf_rn.exit.i.i214:                         ; preds = %__nv_logf.exit187
  %485 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not11.i215 = icmp eq i32 %485, 0, !dbg !35
  %486 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i188, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !35
  %487 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i188, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !35
  %.03.i216 = select i1 %.not11.i215, float %487, float %486, !dbg !35
  br label %__nv_logf.exit217, !dbg !35

__nv_logf.exit217:                                ; preds = %__nv_logf.exit187, %__nv_fmaf_rn.exit.i.i214
  %r.i.0.i212 = phi float [ %.03.i216, %__nv_fmaf_rn.exit.i.i214 ], [ %.04.i211, %__nv_logf.exit187 ], !dbg !35
  %488 = fcmp olt float %158, 0x3810000000000000, !dbg !35
  %489 = fmul float %158, 0x4160000000000000, !dbg !35
  %.02.i218 = select i1 %488, float %489, float %158, !dbg !35
  %i.i.0.i219 = select i1 %488, float -2.300000e+01, float 0.000000e+00, !dbg !35
  %490 = bitcast float %.02.i218 to i32, !dbg !35
  %491 = add nsw i32 %490, -1059760811, !dbg !35
  %492 = and i32 %491, -8388608, !dbg !35
  %493 = sub i32 %490, %492, !dbg !35
  %494 = bitcast i32 %493 to float, !dbg !35
  %495 = sitofp i32 %492 to float, !dbg !35
  %496 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not.i220 = icmp eq i32 %496, 0, !dbg !35
  %497 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %495, float 0x3E80000000000000, float %i.i.0.i219) #8, !dbg !35
  %498 = tail call float @llvm.nvvm.fma.rn.f(float %495, float 0x3E80000000000000, float %i.i.0.i219) #8, !dbg !35
  %.08.i221 = select i1 %.not.i220, float %498, float %497, !dbg !35
  %499 = fadd float %494, -1.000000e+00, !dbg !35
  %500 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not1.i222 = icmp eq i32 %500, 0, !dbg !35
  %501 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %499, float 0x3FC2073EC0000000) #8, !dbg !35
  %502 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %499, float 0x3FC2073EC0000000) #8, !dbg !35
  %.010.i223 = select i1 %.not1.i222, float %502, float %501, !dbg !35
  %503 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not2.i224 = icmp eq i32 %503, 0, !dbg !35
  %504 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i223, float %499, float 0xBFBF19B980000000) #8, !dbg !35
  %505 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i223, float %499, float 0xBFBF19B980000000) #8, !dbg !35
  %.011.i225 = select i1 %.not2.i224, float %505, float %504, !dbg !35
  %506 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not3.i226 = icmp eq i32 %506, 0, !dbg !35
  %507 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i225, float %499, float 0x3FC1E52AA0000000) #8, !dbg !35
  %508 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i225, float %499, float 0x3FC1E52AA0000000) #8, !dbg !35
  %.012.i227 = select i1 %.not3.i226, float %508, float %507, !dbg !35
  %509 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not4.i228 = icmp eq i32 %509, 0, !dbg !35
  %510 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i227, float %499, float 0xBFC55B1720000000) #8, !dbg !35
  %511 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i227, float %499, float 0xBFC55B1720000000) #8, !dbg !35
  %.09.i229 = select i1 %.not4.i228, float %511, float %510, !dbg !35
  %512 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not5.i230 = icmp eq i32 %512, 0, !dbg !35
  %513 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i229, float %499, float 0x3FC99DA160000000) #8, !dbg !35
  %514 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i229, float %499, float 0x3FC99DA160000000) #8, !dbg !35
  %.05.i231 = select i1 %.not5.i230, float %514, float %513, !dbg !35
  %515 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not6.i232 = icmp eq i32 %515, 0, !dbg !35
  %516 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i231, float %499, float 0xBFCFFFE440000000) #8, !dbg !35
  %517 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i231, float %499, float 0xBFCFFFE440000000) #8, !dbg !35
  %.01.i233 = select i1 %.not6.i232, float %517, float %516, !dbg !35
  %518 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not7.i234 = icmp eq i32 %518, 0, !dbg !35
  %519 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i233, float %499, float 0x3FD5554F00000000) #8, !dbg !35
  %520 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i233, float %499, float 0x3FD5554F00000000) #8, !dbg !35
  %.0.i235 = select i1 %.not7.i234, float %520, float %519, !dbg !35
  %521 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not8.i236 = icmp eq i32 %521, 0, !dbg !35
  %522 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i235, float %499, float -5.000000e-01) #8, !dbg !35
  %523 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i235, float %499, float -5.000000e-01) #8, !dbg !35
  %.07.i237 = select i1 %.not8.i236, float %523, float %522, !dbg !35
  %524 = fmul float %499, %.07.i237, !dbg !35
  %525 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not9.i238 = icmp eq i32 %525, 0, !dbg !35
  %526 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %524, float %499, float %499) #8, !dbg !35
  %527 = tail call float @llvm.nvvm.fma.rn.f(float %524, float %499, float %499) #8, !dbg !35
  %.06.i239 = select i1 %.not9.i238, float %527, float %526, !dbg !35
  %528 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not10.i240 = icmp eq i32 %528, 0, !dbg !35
  %529 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i221, float 0x3FE62E4300000000, float %.06.i239) #8, !dbg !35
  %530 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i221, float 0x3FE62E4300000000, float %.06.i239) #8, !dbg !35
  %.04.i241 = select i1 %.not10.i240, float %530, float %529, !dbg !35
  %531 = icmp samesign ugt i32 %490, 2139095039, !dbg !35
  br i1 %531, label %__nv_fmaf_rn.exit.i.i244, label %__nv_logf.exit247, !dbg !35

__nv_fmaf_rn.exit.i.i244:                         ; preds = %__nv_logf.exit217
  %532 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !35
  %.not11.i245 = icmp eq i32 %532, 0, !dbg !35
  %533 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i218, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !35
  %534 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i218, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !35
  %.03.i246 = select i1 %.not11.i245, float %534, float %533, !dbg !35
  br label %__nv_logf.exit247, !dbg !35

__nv_logf.exit247:                                ; preds = %__nv_logf.exit217, %__nv_fmaf_rn.exit.i.i244
  %r.i.0.i242 = phi float [ %.03.i246, %__nv_fmaf_rn.exit.i.i244 ], [ %.04.i241, %__nv_logf.exit217 ], !dbg !35
  %535 = insertelement <8 x float> poison, float %r.i.0.i62, i64 0, !dbg !36
  %536 = insertelement <8 x float> %535, float %r.i.0.i, i64 1, !dbg !36
  %537 = insertelement <8 x float> %536, float %r.i.0.i92, i64 2, !dbg !36
  %538 = insertelement <8 x float> %537, float %r.i.0.i122, i64 3, !dbg !36
  %539 = insertelement <8 x float> %538, float %r.i.0.i152, i64 4, !dbg !36
  %540 = insertelement <8 x float> %539, float %r.i.0.i182, i64 5, !dbg !36
  %541 = insertelement <8 x float> %540, float %r.i.0.i212, i64 6, !dbg !36
  %542 = insertelement <8 x float> %541, float %r.i.0.i242, i64 7, !dbg !36
  %543 = fmul <8 x float> %542, splat (float 0x3FD7154760000000), !dbg !36
  %544 = fmul <8 x float> %543, splat (float 8.000000e+00), !dbg !37
  %545 = fptosi <8 x float> %544 to <8 x i64>, !dbg !38
  %546 = add <8 x i64> %545, splat (i64 8), !dbg !39
  %547 = tail call <8 x i64> @llvm.smin.v8i64(<8 x i64> %546, <8 x i64> splat (i64 15)), !dbg !40
  %548 = select <8 x i1> %134, <8 x i64> %133, <8 x i64> %547, !dbg !44
  %549 = add nsw <8 x i64> %548, %131, !dbg !45
  %550 = lshr <8 x i64> %549, splat (i64 58), !dbg !46
  %551 = and <8 x i64> %550, splat (i64 32), !dbg !46
  %552 = add nsw <8 x i64> %551, %549, !dbg !46
  %553 = tail call i64 @llvm.vector.reduce.or.v8i64(<8 x i64> %552), !dbg !47
  %.demorgan1214 = icmp ugt i64 %553, 31, !dbg !47
  %.demorgan.not = and i1 %.not5.not16, %.demorgan1214, !dbg !47
  br i1 %.demorgan.not, label %554, label %555, !dbg !47

554:                                              ; preds = %__nv_logf.exit247
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 73, ptr nonnull @assertFunc_0, i64 1), !dbg !47
  unreachable, !dbg !47

555:                                              ; preds = %__nv_logf.exit247
  %556 = or disjoint i32 %48, 4, !dbg !17
  %557 = or disjoint i32 %25, 448, !dbg !15
  %558 = getelementptr inbounds nuw float, ptr addrspace(3) %36, i32 %557, !dbg !15
  %559 = or disjoint i32 %25, 384, !dbg !15
  %560 = getelementptr inbounds nuw float, ptr addrspace(3) %36, i32 %559, !dbg !15
  %561 = extractvalue { i64, i64 } %92, 1, !dbg !14
  %562 = extractvalue { i64, i64 } %92, 0, !dbg !14
  %563 = extractvalue { i64, i64 } %90, 1, !dbg !14
  %564 = extractvalue { i64, i64 } %90, 0, !dbg !14
  %565 = extractvalue { i64, i64 } %88, 1, !dbg !14
  %566 = extractvalue { i64, i64 } %88, 0, !dbg !14
  %567 = extractvalue { i64, i64 } %86, 1, !dbg !14
  %568 = extractvalue { i64, i64 } %86, 0, !dbg !14
  %569 = or i32 %13, 320, !dbg !12
  %570 = icmp samesign ult i32 %569, 324, !dbg !13
  %571 = and i32 %10, 7, !dbg !11
  %572 = or disjoint i32 %48, %571, !dbg !17
  %573 = icmp slt i32 %572, 10368, !dbg !18
  %574 = and i1 %570, %573, !dbg !24
  %575 = sdiv i32 %556, 324, !dbg !48
  %576 = srem i32 %575, 8, !dbg !49
  %577 = sdiv i32 %48, 324, !dbg !48
  %578 = srem i32 %577, 8, !dbg !49
  %579 = sdiv i32 %50, 324, !dbg !48
  %580 = sdiv i32 %49, 324, !dbg !48
  %581 = mul i32 %579, 324, !dbg !19
  %.decomposed = sub i32 %50, %581, !dbg !19
  %582 = mul i32 %580, 324, !dbg !19
  %.decomposed248 = sub i32 %49, %582, !dbg !19
  %583 = and i32 %10, 24, !dbg !11
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !47
  %584 = sext i32 %578 to i64, !dbg !50
  %585 = sext i32 %576 to i64, !dbg !50
  %586 = extractelement <8 x i64> %552, i64 1, !dbg !51
  %.idx = shl i64 %586, 5, !dbg !51
  %587 = getelementptr i8, ptr addrspace(1) %0, i64 %.idx, !dbg !51
  %588 = getelementptr float, ptr addrspace(1) %587, i64 %584, !dbg !51
  %589 = extractelement <8 x i64> %552, i64 0, !dbg !51
  %.idx17 = shl i64 %589, 5, !dbg !51
  %590 = getelementptr i8, ptr addrspace(1) %0, i64 %.idx17, !dbg !51
  %591 = getelementptr float, ptr addrspace(1) %590, i64 %584, !dbg !51
  %592 = extractelement <8 x i64> %552, i64 2, !dbg !51
  %.idx18 = shl i64 %592, 5, !dbg !51
  %593 = getelementptr i8, ptr addrspace(1) %0, i64 %.idx18, !dbg !51
  %594 = getelementptr float, ptr addrspace(1) %593, i64 %584, !dbg !51
  %595 = extractelement <8 x i64> %552, i64 3, !dbg !51
  %.idx19 = shl i64 %595, 5, !dbg !51
  %596 = getelementptr i8, ptr addrspace(1) %0, i64 %.idx19, !dbg !51
  %597 = getelementptr float, ptr addrspace(1) %596, i64 %584, !dbg !51
  %598 = extractelement <8 x i64> %552, i64 4, !dbg !51
  %.idx20 = shl i64 %598, 5, !dbg !51
  %599 = getelementptr i8, ptr addrspace(1) %0, i64 %.idx20, !dbg !51
  %600 = getelementptr float, ptr addrspace(1) %599, i64 %585, !dbg !51
  %601 = extractelement <8 x i64> %552, i64 5, !dbg !51
  %.idx21 = shl i64 %601, 5, !dbg !51
  %602 = getelementptr i8, ptr addrspace(1) %0, i64 %.idx21, !dbg !51
  %603 = getelementptr float, ptr addrspace(1) %602, i64 %585, !dbg !51
  %604 = extractelement <8 x i64> %552, i64 6, !dbg !51
  %.idx22 = shl i64 %604, 5, !dbg !51
  %605 = getelementptr i8, ptr addrspace(1) %0, i64 %.idx22, !dbg !51
  %606 = getelementptr float, ptr addrspace(1) %605, i64 %585, !dbg !51
  %607 = extractelement <8 x i64> %552, i64 7, !dbg !51
  %.idx23 = shl i64 %607, 5, !dbg !51
  %608 = getelementptr i8, ptr addrspace(1) %0, i64 %.idx23, !dbg !51
  %609 = getelementptr float, ptr addrspace(1) %608, i64 %585, !dbg !51
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !52
  %610 = ptrtoint ptr addrspace(1) %588 to i64, !dbg !52
  %611 = ptrtoint ptr addrspace(1) %591 to i64, !dbg !52
  %612 = ptrtoint ptr addrspace(1) %594 to i64, !dbg !52
  %613 = ptrtoint ptr addrspace(1) %597 to i64, !dbg !52
  %614 = ptrtoint ptr addrspace(1) %600 to i64, !dbg !52
  %615 = ptrtoint ptr addrspace(1) %603 to i64, !dbg !52
  %616 = ptrtoint ptr addrspace(1) %606 to i64, !dbg !52
  %617 = ptrtoint ptr addrspace(1) %609 to i64, !dbg !52
  %618 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %17, !dbg !52
  %619 = insertelement <1 x i64> poison, i64 %610, i64 0, !dbg !52
  store <1 x i64> %619, ptr addrspace(3) %618, align 8, !dbg !52
  %620 = or i32 %10, 512, !dbg !52
  %621 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %620, !dbg !52
  %622 = getelementptr inbounds nuw i8, ptr addrspace(3) %621, i32 8, !dbg !52
  %623 = insertelement <1 x i64> poison, i64 %611, i64 0, !dbg !52
  store <1 x i64> %623, ptr addrspace(3) %622, align 8, !dbg !52
  %624 = getelementptr inbounds nuw i8, ptr addrspace(3) %618, i32 8208, !dbg !52
  %625 = insertelement <1 x i64> poison, i64 %612, i64 0, !dbg !52
  store <1 x i64> %625, ptr addrspace(3) %624, align 8, !dbg !52
  %626 = or i32 %10, 1536, !dbg !52
  %627 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %626, !dbg !52
  %628 = getelementptr inbounds nuw i8, ptr addrspace(3) %627, i32 24, !dbg !52
  %629 = insertelement <1 x i64> poison, i64 %613, i64 0, !dbg !52
  store <1 x i64> %629, ptr addrspace(3) %628, align 8, !dbg !52
  %630 = getelementptr inbounds nuw i8, ptr addrspace(3) %618, i32 16416, !dbg !52
  %631 = insertelement <1 x i64> poison, i64 %614, i64 0, !dbg !52
  store <1 x i64> %631, ptr addrspace(3) %630, align 8, !dbg !52
  %632 = or i32 %10, 2560, !dbg !52
  %633 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %632, !dbg !52
  %634 = getelementptr inbounds nuw i8, ptr addrspace(3) %633, i32 40, !dbg !52
  %635 = insertelement <1 x i64> poison, i64 %615, i64 0, !dbg !52
  store <1 x i64> %635, ptr addrspace(3) %634, align 8, !dbg !52
  %636 = getelementptr inbounds nuw i8, ptr addrspace(3) %618, i32 24624, !dbg !52
  %637 = insertelement <1 x i64> poison, i64 %616, i64 0, !dbg !52
  store <1 x i64> %637, ptr addrspace(3) %636, align 8, !dbg !52
  %638 = or i32 %10, 3584, !dbg !52
  %639 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %638, !dbg !52
  %640 = getelementptr inbounds nuw i8, ptr addrspace(3) %639, i32 56, !dbg !52
  %641 = insertelement <1 x i64> poison, i64 %617, i64 0, !dbg !52
  store <1 x i64> %641, ptr addrspace(3) %640, align 8, !dbg !52
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !52
  %642 = lshr exact i32 %23, 6, !dbg !52
  %643 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %642, !dbg !52
  %644 = getelementptr inbounds nuw i64, ptr addrspace(3) %643, i32 %25, !dbg !52
  %645 = load i64, ptr addrspace(3) %644, align 8, !dbg !52
  %646 = getelementptr inbounds nuw i64, ptr addrspace(3) %643, i32 %38, !dbg !52
  %647 = load i64, ptr addrspace(3) %646, align 8, !dbg !52
  %648 = getelementptr inbounds nuw i64, ptr addrspace(3) %643, i32 %40, !dbg !52
  %649 = load i64, ptr addrspace(3) %648, align 8, !dbg !52
  %650 = getelementptr inbounds nuw i64, ptr addrspace(3) %643, i32 %42, !dbg !52
  %651 = load i64, ptr addrspace(3) %650, align 8, !dbg !52
  %652 = getelementptr inbounds nuw i64, ptr addrspace(3) %643, i32 %44, !dbg !52
  %653 = load i64, ptr addrspace(3) %652, align 8, !dbg !52
  %654 = getelementptr inbounds nuw i64, ptr addrspace(3) %643, i32 %46, !dbg !52
  %655 = load i64, ptr addrspace(3) %654, align 8, !dbg !52
  %656 = getelementptr inbounds nuw i64, ptr addrspace(3) %643, i32 %559, !dbg !52
  %657 = load i64, ptr addrspace(3) %656, align 8, !dbg !52
  %658 = getelementptr inbounds nuw i64, ptr addrspace(3) %643, i32 %557, !dbg !52
  %659 = load i64, ptr addrspace(3) %658, align 8, !dbg !52
  %660 = inttoptr i64 %645 to ptr addrspace(1), !dbg !52
  %661 = inttoptr i64 %647 to ptr addrspace(1), !dbg !52
  %662 = inttoptr i64 %649 to ptr addrspace(1), !dbg !52
  %663 = inttoptr i64 %651 to ptr addrspace(1), !dbg !52
  %664 = inttoptr i64 %653 to ptr addrspace(1), !dbg !52
  %665 = inttoptr i64 %655 to ptr addrspace(1), !dbg !52
  %666 = inttoptr i64 %657 to ptr addrspace(1), !dbg !52
  %667 = inttoptr i64 %659 to ptr addrspace(1), !dbg !52
  %668 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !52
  %669 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %660, i64 %668, i1 %573) #8, !dbg !52
  %670 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !52
  %671 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %661, i64 %670, i1 %573) #8, !dbg !52
  %672 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !52
  %673 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %662, i64 %672, i1 %573) #8, !dbg !52
  %674 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !52
  %675 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %663, i64 %674, i1 %573) #8, !dbg !52
  %676 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !52
  %677 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %664, i64 %676, i1 %573) #8, !dbg !52
  %678 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !52
  %679 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %665, i64 %678, i1 %574) #8, !dbg !52
  %680 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !52
  %681 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %666, i64 %680, i1 false) #8, !dbg !52
  %682 = bitcast i32 %681 to float, !dbg !52
  %683 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !52
  %684 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %667, i64 %683, i1 false) #8, !dbg !52
  %685 = bitcast i32 %684 to float, !dbg !52
  %686 = insertelement <4 x i64> poison, i64 %568, i64 0, !dbg !53
  %687 = insertelement <4 x i64> %686, i64 %567, i64 1, !dbg !53
  %688 = insertelement <4 x i64> %687, i64 %566, i64 2, !dbg !53
  %689 = insertelement <4 x i64> %688, i64 %565, i64 3, !dbg !53
  %690 = sitofp <4 x i64> %689 to <4 x float>, !dbg !53
  %691 = fsub <4 x float> splat (float 1.000000e+00), %690, !dbg !54
  %692 = fmul <4 x float> %691, splat (float 0xC7EFFFFFE0000000), !dbg !55
  %693 = insertelement <4 x i64> poison, i64 %564, i64 0, !dbg !53
  %694 = insertelement <4 x i64> %693, i64 %563, i64 1, !dbg !53
  %695 = insertelement <4 x i64> %694, i64 %562, i64 2, !dbg !53
  %696 = insertelement <4 x i64> %695, i64 %561, i64 3, !dbg !53
  %697 = sitofp <4 x i64> %696 to <4 x float>, !dbg !53
  %698 = fsub <4 x float> splat (float 1.000000e+00), %697, !dbg !54
  %699 = fmul <4 x float> %698, splat (float 0xC7EFFFFFE0000000), !dbg !55
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !55
  store <4 x float> %692, ptr addrspace(3) %29, align 16, !dbg !55
  store <4 x float> %699, ptr addrspace(3) %34, align 16, !dbg !55
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !55
  %700 = load float, ptr addrspace(3) %37, align 4, !dbg !55
  %701 = load float, ptr addrspace(3) %39, align 4, !dbg !55
  %702 = load float, ptr addrspace(3) %41, align 4, !dbg !55
  %703 = load float, ptr addrspace(3) %43, align 4, !dbg !55
  %704 = load float, ptr addrspace(3) %45, align 4, !dbg !55
  %705 = load float, ptr addrspace(3) %47, align 4, !dbg !55
  %706 = load float, ptr addrspace(3) %560, align 4, !dbg !55
  %707 = load float, ptr addrspace(3) %558, align 4, !dbg !55
  %708 = fadd float %706, %682, !dbg !56
  %709 = fadd float %707, %685, !dbg !56
  %710 = insertelement <4 x i32> poison, i32 %669, i64 0, !dbg !52
  %711 = insertelement <4 x i32> %710, i32 %671, i64 1, !dbg !52
  %712 = insertelement <4 x i32> %711, i32 %673, i64 2, !dbg !52
  %713 = insertelement <4 x i32> %712, i32 %675, i64 3, !dbg !52
  %714 = bitcast <4 x i32> %713 to <4 x float>, !dbg !52
  %715 = insertelement <4 x float> poison, float %700, i64 0, !dbg !56
  %716 = insertelement <4 x float> %715, float %701, i64 1, !dbg !56
  %717 = insertelement <4 x float> %716, float %702, i64 2, !dbg !56
  %718 = insertelement <4 x float> %717, float %703, i64 3, !dbg !56
  %719 = fadd <4 x float> %718, %714, !dbg !56
  %720 = insertelement <4 x float> poison, float %121, i64 0, !dbg !57
  %721 = insertelement <4 x float> %720, float %122, i64 1, !dbg !57
  %722 = insertelement <4 x float> %721, float %123, i64 2, !dbg !57
  %723 = insertelement <4 x float> %722, float %124, i64 3, !dbg !57
  %724 = fadd <4 x float> %723, %719, !dbg !57
  %725 = fcmp une <4 x float> %724, splat (float 0xFFF0000000000000), !dbg !58
  %726 = extractelement <4 x float> %724, i64 0, !dbg !59
  %727 = fsub float 0xFFF0000000000000, %726, !dbg !59
  %728 = extractelement <4 x float> %724, i64 1, !dbg !59
  %729 = fsub float 0xFFF0000000000000, %728, !dbg !59
  %730 = extractelement <4 x float> %724, i64 2, !dbg !59
  %731 = fsub float 0xFFF0000000000000, %730, !dbg !59
  %732 = extractelement <4 x float> %724, i64 3, !dbg !59
  %733 = fsub float 0xFFF0000000000000, %732, !dbg !59
  %734 = fmul float %727, 0x3FF7154760000000, !dbg !61
  %735 = tail call float @llvm.nvvm.ex2.approx.f(float %734), !dbg !61
  %736 = fmul float %729, 0x3FF7154760000000, !dbg !61
  %737 = tail call float @llvm.nvvm.ex2.approx.f(float %736), !dbg !61
  %738 = fmul float %731, 0x3FF7154760000000, !dbg !61
  %739 = tail call float @llvm.nvvm.ex2.approx.f(float %738), !dbg !61
  %740 = fmul float %733, 0x3FF7154760000000, !dbg !61
  %741 = tail call float @llvm.nvvm.ex2.approx.f(float %740), !dbg !61
  %742 = fsub float %726, %726, !dbg !62
  %743 = fsub float %728, %728, !dbg !62
  %744 = fsub float %730, %730, !dbg !62
  %745 = fsub float %732, %732, !dbg !62
  %746 = fmul float %742, 0x3FF7154760000000, !dbg !61
  %747 = tail call float @llvm.nvvm.ex2.approx.f(float %746), !dbg !61
  %748 = fmul float %743, 0x3FF7154760000000, !dbg !61
  %749 = tail call float @llvm.nvvm.ex2.approx.f(float %748), !dbg !61
  %750 = fmul float %744, 0x3FF7154760000000, !dbg !61
  %751 = tail call float @llvm.nvvm.ex2.approx.f(float %750), !dbg !61
  %752 = fmul float %745, 0x3FF7154760000000, !dbg !61
  %753 = tail call float @llvm.nvvm.ex2.approx.f(float %752), !dbg !61
  %754 = fmul float %735, 0.000000e+00, !dbg !63
  %755 = fmul float %737, 0.000000e+00, !dbg !63
  %756 = fmul float %739, 0.000000e+00, !dbg !63
  %757 = fmul float %741, 0.000000e+00, !dbg !63
  %758 = fadd float %754, %747, !dbg !64
  %759 = extractelement <4 x i1> %725, i64 0, !dbg !64
  %760 = select i1 %759, float %758, float 1.000000e+00, !dbg !64
  %761 = fadd float %755, %749, !dbg !64
  %762 = extractelement <4 x i1> %725, i64 1, !dbg !64
  %763 = select i1 %762, float %761, float 1.000000e+00, !dbg !64
  %764 = fadd float %756, %751, !dbg !64
  %765 = extractelement <4 x i1> %725, i64 2, !dbg !64
  %766 = select i1 %765, float %764, float 1.000000e+00, !dbg !64
  %767 = fadd float %757, %753, !dbg !64
  %768 = extractelement <4 x i1> %725, i64 3, !dbg !64
  %769 = select i1 %768, float %767, float 1.000000e+00, !dbg !64
  %770 = select i1 %573, float %726, float 0xFFF0000000000000, !dbg !65
  %771 = select i1 %573, float %728, float 0xFFF0000000000000, !dbg !65
  %772 = select i1 %573, float %730, float 0xFFF0000000000000, !dbg !65
  %773 = select i1 %573, float %732, float 0xFFF0000000000000, !dbg !65
  %774 = select i1 %573, float %760, float 0.000000e+00, !dbg !66
  %775 = select i1 %573, float %763, float 0.000000e+00, !dbg !66
  %776 = select i1 %573, float %766, float 0.000000e+00, !dbg !66
  %777 = select i1 %573, float %769, float 0.000000e+00, !dbg !66
  %778 = mul nsw i32 %.decomposed248, 324, !dbg !67
  %779 = mul nsw i32 %.decomposed, 324, !dbg !67
  %780 = add nsw i32 %778, %15, !dbg !68
  %781 = add nsw i32 %779, %15, !dbg !68
  %782 = mul i32 %580, 104992, !dbg !69
  %783 = mul i32 %579, 104992, !dbg !69
  %784 = add i32 %780, %782, !dbg !70
  %785 = add i32 %781, %783, !dbg !70
  %786 = sext i32 %784 to i64, !dbg !71
  %787 = getelementptr float, ptr addrspace(1) %3, i64 %786, !dbg !71
  %788 = sext i32 %785 to i64, !dbg !71
  %789 = getelementptr float, ptr addrspace(1) %3, i64 %788, !dbg !71
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !72
  %790 = extractelement <4 x float> %719, i64 0, !dbg !72
  store float %790, ptr addrspace(3) %37, align 4, !dbg !72
  %791 = extractelement <4 x float> %719, i64 1, !dbg !72
  store float %791, ptr addrspace(3) %39, align 4, !dbg !72
  %792 = extractelement <4 x float> %719, i64 2, !dbg !72
  store float %792, ptr addrspace(3) %41, align 4, !dbg !72
  %793 = extractelement <4 x float> %719, i64 3, !dbg !72
  store float %793, ptr addrspace(3) %43, align 4, !dbg !72
  store float %708, ptr addrspace(3) %560, align 4, !dbg !72
  store float %709, ptr addrspace(3) %558, align 4, !dbg !72
  %794 = getelementptr inbounds nuw i8, ptr addrspace(3) %29, i32 4, !dbg !72
  %795 = getelementptr inbounds nuw i8, ptr addrspace(3) %29, i32 8, !dbg !72
  %796 = getelementptr inbounds nuw i8, ptr addrspace(3) %29, i32 12, !dbg !72
  %797 = bitcast <4 x i1> %725 to i4, !dbg !73
  %798 = icmp ne i4 %797, 0, !dbg !73
  %799 = and i32 %26, 15, !dbg !75
  %800 = icmp eq i32 %583, 0, !dbg !75
  %801 = shl nuw nsw i32 %571, 4, !dbg !75
  %802 = or disjoint i32 %801, %799, !dbg !75
  %803 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %802, !dbg !75
  %804 = icmp samesign ult i32 %10, 128, !dbg !75
  %805 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %10, !dbg !75
  %806 = and i32 %10, 911, !dbg !75
  %807 = icmp eq i32 %806, 0, !dbg !75
  %808 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %801, !dbg !75
  %809 = fcmp ogt float %770, %771, !dbg !76
  %810 = fcmp uno float %770, 0.000000e+00, !dbg !78
  %811 = or i1 %810, %809, !dbg !79
  %812 = select i1 %811, float %770, float %771, !dbg !80
  %813 = fcmp ogt float %812, %772, !dbg !76
  %814 = fcmp uno float %812, 0.000000e+00, !dbg !78
  %815 = or i1 %813, %814, !dbg !79
  %816 = select i1 %815, float %812, float %772, !dbg !80
  %817 = fcmp ogt float %816, %773, !dbg !76
  %818 = fcmp uno float %816, 0.000000e+00, !dbg !78
  %819 = or i1 %817, %818, !dbg !79
  %820 = select i1 %819, float %816, float %773, !dbg !80
  %821 = fcmp uno float %820, 0.000000e+00, !dbg !78
  %822 = getelementptr float, ptr addrspace(3) @global_smem, i32 %802, !dbg !81
  %823 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !81
  %824 = getelementptr float, ptr addrspace(3) @global_smem, i32 %801, !dbg !81
  %825 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %571, !dbg !82
  %826 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %11, !dbg !82
  %827 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %12, !dbg !82
  %828 = insertelement <2 x i32> poison, i32 %677, i64 0, !dbg !52
  %829 = insertelement <2 x i32> %828, i32 %679, i64 1, !dbg !52
  %830 = bitcast <2 x i32> %829 to <2 x float>, !dbg !52
  %831 = insertelement <2 x float> poison, float %704, i64 0, !dbg !56
  %832 = insertelement <2 x float> %831, float %705, i64 1, !dbg !56
  %833 = fadd <2 x float> %832, %830, !dbg !56
  %834 = insertelement <2 x float> poison, float %125, i64 0, !dbg !57
  %835 = insertelement <2 x float> %834, float %126, i64 1, !dbg !57
  %836 = fadd <2 x float> %835, %833, !dbg !57
  %837 = fcmp une <2 x float> %836, splat (float 0xFFF0000000000000), !dbg !58
  %838 = extractelement <2 x i1> %837, i64 1, !dbg !83
  %839 = select i1 %574, i1 %838, i1 false, !dbg !83
  %840 = extractelement <2 x float> %836, i64 0, !dbg !59
  %841 = fsub float 0xFFF0000000000000, %840, !dbg !59
  %842 = extractelement <2 x float> %836, i64 1, !dbg !59
  %843 = fsub float 0xFFF0000000000000, %842, !dbg !59
  %844 = fmul float %841, 0x3FF7154760000000, !dbg !61
  %845 = tail call float @llvm.nvvm.ex2.approx.f(float %844), !dbg !61
  %846 = fmul float %843, 0x3FF7154760000000, !dbg !61
  %847 = tail call float @llvm.nvvm.ex2.approx.f(float %846), !dbg !61
  %848 = fsub float %840, %840, !dbg !62
  %849 = fsub float %842, %842, !dbg !62
  %850 = fmul float %848, 0x3FF7154760000000, !dbg !61
  %851 = tail call float @llvm.nvvm.ex2.approx.f(float %850), !dbg !61
  %852 = fmul float %849, 0x3FF7154760000000, !dbg !61
  %853 = tail call float @llvm.nvvm.ex2.approx.f(float %852), !dbg !61
  %854 = insertelement <2 x float> poison, float %845, i64 0, !dbg !63
  %855 = insertelement <2 x float> %854, float %847, i64 1, !dbg !63
  %856 = fmul <2 x float> %855, zeroinitializer, !dbg !63
  %857 = insertelement <2 x float> poison, float %851, i64 0, !dbg !64
  %858 = insertelement <2 x float> %857, float %853, i64 1, !dbg !64
  %859 = fadd <2 x float> %856, %858, !dbg !64
  %860 = select <2 x i1> %837, <2 x float> %859, <2 x float> splat (float 1.000000e+00), !dbg !64
  %861 = select i1 %573, float %840, float 0xFFF0000000000000, !dbg !65
  %862 = select i1 %574, float %842, float 0xFFF0000000000000, !dbg !65
  %863 = insertelement <2 x i1> poison, i1 %573, i64 0, !dbg !66
  %864 = insertelement <2 x i1> %863, i1 %574, i64 1, !dbg !66
  %865 = select <2 x i1> %864, <2 x float> %860, <2 x float> zeroinitializer, !dbg !66
  %866 = extractelement <2 x float> %833, i64 0, !dbg !72
  store float %866, ptr addrspace(3) %45, align 4, !dbg !72
  %867 = extractelement <2 x float> %833, i64 1, !dbg !72
  store float %867, ptr addrspace(3) %47, align 4, !dbg !72
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !72
  %868 = load <4 x i32>, ptr addrspace(3) %34, align 16, !dbg !72
  %.extract = load i32, ptr addrspace(3) %29, align 16, !dbg !72
  %.extract31 = load i32, ptr addrspace(3) %794, align 4, !dbg !72
  %.extract32 = load i32, ptr addrspace(3) %795, align 8, !dbg !72
  %.extract33 = load i32, ptr addrspace(3) %796, align 4, !dbg !72
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %787, i1 %84) #8, !dbg !72
  %.extract34 = extractelement <4 x i32> %868, i64 0, !dbg !72
  %.extract35 = extractelement <4 x i32> %868, i64 1, !dbg !72
  %.extract36 = extractelement <4 x i32> %868, i64 2, !dbg !72
  %.extract37 = extractelement <4 x i32> %868, i64 3, !dbg !72
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract34, i32 %.extract35, i32 %.extract36, i32 %.extract37, ptr addrspace(1) %789, i1 %85) #8, !dbg !72
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !75
  %869 = extractelement <2 x i1> %837, i64 0, !dbg !73
  %op.rdx = or i1 %798, %869, !dbg !73
  %870 = select i1 %573, i1 %op.rdx, i1 false, !dbg !73
  %871 = or i1 %870, %839, !dbg !73
  %872 = zext i1 %871 to i8, !dbg !73
  %873 = zext i1 %871 to i32, !dbg !75
  %874 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %873, i32 16, i32 31), !dbg !75
  %875 = trunc i32 %874 to i8, !dbg !75
  %876 = or i8 %875, %872, !dbg !73
  %877 = zext i8 %876 to i32, !dbg !75
  %878 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %877, i32 8, i32 31), !dbg !75
  %879 = trunc i32 %878 to i8, !dbg !75
  %880 = or i8 %876, %879, !dbg !73
  %881 = insertelement <1 x i8> poison, i8 %880, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %803, <1 x i8> %881, i1 %800) #8, !dbg !75
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !75
  %882 = tail call i8 asm sideeffect "@$2 ld.shared.b8 $0, [ $1 + 0 ];", "=h,r,b"(ptr addrspace(3) %805, i1 %804) #8, !dbg !75
  %883 = zext i8 %882 to i32, !dbg !75
  %884 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %883, i32 8, i32 31), !dbg !75
  %885 = trunc i32 %884 to i8, !dbg !75
  %886 = or i8 %882, %885, !dbg !73
  %887 = zext i8 %886 to i32, !dbg !75
  %888 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %887, i32 4, i32 31), !dbg !75
  %889 = trunc i32 %888 to i8, !dbg !75
  %890 = or i8 %886, %889, !dbg !73
  %891 = zext i8 %890 to i32, !dbg !75
  %892 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %891, i32 2, i32 31), !dbg !75
  %893 = trunc i32 %892 to i8, !dbg !75
  %894 = or i8 %890, %893, !dbg !73
  %895 = zext i8 %894 to i32, !dbg !75
  %896 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %895, i32 1, i32 31), !dbg !75
  %897 = trunc i32 %896 to i8, !dbg !75
  %898 = or i8 %894, %897, !dbg !73
  %899 = insertelement <1 x i8> poison, i8 %898, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %805, <1 x i8> %899, i1 %807) #8, !dbg !75
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !75
  %900 = load i8, ptr addrspace(3) %808, align 16, !dbg !75
  %.not = icmp eq i8 %900, 0, !dbg !84
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !81
  %901 = fcmp ogt float %820, %861, !dbg !76
  %902 = or i1 %901, %821, !dbg !79
  %903 = select i1 %902, float %820, float %861, !dbg !80
  %904 = fcmp ogt float %903, %862, !dbg !76
  %905 = fcmp uno float %903, 0.000000e+00, !dbg !78
  %906 = or i1 %904, %905, !dbg !79
  %907 = select i1 %906, float %903, float %862, !dbg !80
  %908 = bitcast float %907 to i32, !dbg !81
  %909 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %908, i32 16, i32 31), !dbg !81
  %910 = bitcast i32 %909 to float, !dbg !81
  %911 = fcmp ogt float %907, %910, !dbg !76
  %912 = fcmp uno float %907, 0.000000e+00, !dbg !78
  %913 = or i1 %912, %911, !dbg !79
  %914 = select i1 %913, float %907, float %910, !dbg !80
  %915 = bitcast float %914 to i32, !dbg !81
  %916 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %915, i32 8, i32 31), !dbg !81
  %917 = bitcast i32 %916 to float, !dbg !81
  %918 = fcmp ogt float %914, %917, !dbg !76
  %919 = fcmp uno float %914, 0.000000e+00, !dbg !78
  %920 = or i1 %918, %919, !dbg !79
  %921 = select i1 %920, i32 %915, i32 %916, !dbg !80
  %922 = insertelement <1 x i32> poison, i32 %921, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %822, <1 x i32> %922, i1 %800) #8, !dbg !81
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !81
  %923 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %823, i1 %804) #8, !dbg !81
  %924 = bitcast i32 %923 to float, !dbg !81
  %925 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %923, i32 8, i32 31), !dbg !81
  %926 = bitcast i32 %925 to float, !dbg !81
  %927 = fcmp ogt float %924, %926, !dbg !76
  %928 = fcmp uno float %924, 0.000000e+00, !dbg !78
  %929 = or i1 %928, %927, !dbg !79
  %930 = select i1 %929, float %924, float %926, !dbg !80
  %931 = bitcast float %930 to i32, !dbg !81
  %932 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %931, i32 4, i32 31), !dbg !81
  %933 = bitcast i32 %932 to float, !dbg !81
  %934 = fcmp ogt float %930, %933, !dbg !76
  %935 = fcmp uno float %930, 0.000000e+00, !dbg !78
  %936 = or i1 %934, %935, !dbg !79
  %937 = select i1 %936, float %930, float %933, !dbg !80
  %938 = bitcast float %937 to i32, !dbg !81
  %939 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %938, i32 2, i32 31), !dbg !81
  %940 = bitcast i32 %939 to float, !dbg !81
  %941 = fcmp ogt float %937, %940, !dbg !76
  %942 = fcmp uno float %937, 0.000000e+00, !dbg !78
  %943 = or i1 %941, %942, !dbg !79
  %944 = select i1 %943, float %937, float %940, !dbg !80
  %945 = bitcast float %944 to i32, !dbg !81
  %946 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %945, i32 1, i32 31), !dbg !81
  %947 = bitcast i32 %946 to float, !dbg !81
  %948 = fcmp ogt float %944, %947, !dbg !76
  %949 = fcmp uno float %944, 0.000000e+00, !dbg !78
  %950 = or i1 %948, %949, !dbg !79
  %951 = select i1 %950, i32 %945, i32 %946, !dbg !80
  %952 = insertelement <1 x i32> poison, i32 %951, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %823, <1 x i32> %952, i1 %807) #8, !dbg !81
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !81
  %953 = load float, ptr addrspace(3) %824, align 16, !dbg !81
  %954 = fcmp oeq float %953, 0xFFF0000000000000, !dbg !85
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !82
  store float %953, ptr addrspace(3) %825, align 4, !dbg !82
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !82
  %955 = load float, ptr addrspace(3) %826, align 4, !dbg !82
  %956 = load float, ptr addrspace(3) %827, align 4, !dbg !82
  %957 = fsub float %770, %953, !dbg !82
  %958 = fsub float %771, %953, !dbg !82
  %959 = fsub float %772, %953, !dbg !82
  %960 = fsub float %773, %953, !dbg !82
  %961 = fsub float %861, %953, !dbg !82
  %962 = fsub float %862, %953, !dbg !82
  %963 = fsub float 0xFFF0000000000000, %953, !dbg !82
  %964 = fmul float %957, 0x3FF7154760000000, !dbg !86
  %965 = select i1 %954, float 0.000000e+00, float %964, !dbg !87
  %966 = tail call float @llvm.nvvm.ex2.approx.f(float %965), !dbg !86
  %967 = fmul float %958, 0x3FF7154760000000, !dbg !86
  %968 = select i1 %954, float 0.000000e+00, float %967, !dbg !87
  %969 = tail call float @llvm.nvvm.ex2.approx.f(float %968), !dbg !86
  %970 = fmul float %959, 0x3FF7154760000000, !dbg !86
  %971 = select i1 %954, float 0.000000e+00, float %970, !dbg !87
  %972 = tail call float @llvm.nvvm.ex2.approx.f(float %971), !dbg !86
  %973 = fmul float %960, 0x3FF7154760000000, !dbg !86
  %974 = select i1 %954, float 0.000000e+00, float %973, !dbg !87
  %975 = tail call float @llvm.nvvm.ex2.approx.f(float %974), !dbg !86
  %976 = fmul float %961, 0x3FF7154760000000, !dbg !86
  %977 = select i1 %954, float 0.000000e+00, float %976, !dbg !87
  %978 = tail call float @llvm.nvvm.ex2.approx.f(float %977), !dbg !86
  %979 = fmul float %962, 0x3FF7154760000000, !dbg !86
  %980 = select i1 %954, float 0.000000e+00, float %979, !dbg !87
  %981 = tail call float @llvm.nvvm.ex2.approx.f(float %980), !dbg !86
  %982 = fmul float %963, 0x3FF7154760000000, !dbg !86
  %983 = select i1 %954, float 0.000000e+00, float %982, !dbg !87
  %984 = tail call float @llvm.nvvm.ex2.approx.f(float %983), !dbg !86
  %985 = fmul float %774, %966, !dbg !88
  %986 = fmul float %775, %969, !dbg !88
  %987 = fmul float %776, %972, !dbg !88
  %988 = fmul float %777, %975, !dbg !88
  %989 = insertelement <2 x float> poison, float %978, i64 0, !dbg !88
  %990 = insertelement <2 x float> %989, float %981, i64 1, !dbg !88
  %991 = fmul <2 x float> %865, %990, !dbg !88
  %992 = fmul float %984, 0.000000e+00, !dbg !88
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !89
  %993 = fadd float %985, %986, !dbg !92
  %994 = fadd float %993, %987, !dbg !92
  %995 = fadd float %994, %988, !dbg !92
  %996 = extractelement <2 x float> %991, i64 0, !dbg !92
  %997 = fadd float %995, %996, !dbg !92
  %998 = extractelement <2 x float> %991, i64 1, !dbg !92
  %999 = fadd float %997, %998, !dbg !92
  %1000 = fadd float %999, %992, !dbg !92
  %1001 = fadd float %992, %1000, !dbg !92
  %1002 = bitcast float %1001 to i32, !dbg !89
  %1003 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1002, i32 16, i32 31), !dbg !89
  %1004 = bitcast i32 %1003 to float, !dbg !89
  %1005 = fadd float %1001, %1004, !dbg !92
  %1006 = bitcast float %1005 to i32, !dbg !89
  %1007 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1006, i32 8, i32 31), !dbg !89
  %1008 = bitcast i32 %1007 to float, !dbg !89
  %1009 = fadd float %1005, %1008, !dbg !92
  %1010 = bitcast float %1009 to <1 x i32>, !dbg !89
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %822, <1 x i32> %1010, i1 %800) #8, !dbg !89
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !89
  %1011 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %823, i1 %804) #8, !dbg !89
  %1012 = bitcast i32 %1011 to float, !dbg !89
  %1013 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1011, i32 8, i32 31), !dbg !89
  %1014 = bitcast i32 %1013 to float, !dbg !89
  %1015 = fadd float %1012, %1014, !dbg !92
  %1016 = bitcast float %1015 to i32, !dbg !89
  %1017 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1016, i32 4, i32 31), !dbg !89
  %1018 = bitcast i32 %1017 to float, !dbg !89
  %1019 = fadd float %1015, %1018, !dbg !92
  %1020 = bitcast float %1019 to i32, !dbg !89
  %1021 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1020, i32 2, i32 31), !dbg !89
  %1022 = bitcast i32 %1021 to float, !dbg !89
  %1023 = fadd float %1019, %1022, !dbg !92
  %1024 = bitcast float %1023 to i32, !dbg !89
  %1025 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1024, i32 1, i32 31), !dbg !89
  %1026 = bitcast i32 %1025 to float, !dbg !89
  %1027 = fadd float %1023, %1026, !dbg !92
  %1028 = bitcast float %1027 to <1 x i32>, !dbg !89
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %823, <1 x i32> %1028, i1 %807) #8, !dbg !89
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !89
  %1029 = load i32, ptr addrspace(3) %824, align 16, !dbg !89
  %1030 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #8, !dbg !93
  %1031 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %98, i64 %1030, i1 %84) #8, !dbg !93
  %1032 = extractvalue { i32, i32, i32, i32 } %1031, 0, !dbg !93
  %1033 = extractvalue { i32, i32, i32, i32 } %1031, 1, !dbg !93
  %1034 = extractvalue { i32, i32, i32, i32 } %1031, 2, !dbg !93
  %1035 = extractvalue { i32, i32, i32, i32 } %1031, 3, !dbg !93
  %1036 = bitcast i32 %1032 to float, !dbg !93
  %1037 = bitcast i32 %1033 to float, !dbg !93
  %1038 = bitcast i32 %1034 to float, !dbg !93
  %1039 = bitcast i32 %1035 to float, !dbg !93
  %1040 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #8, !dbg !93
  %1041 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %100, i64 %1040, i1 %85) #8, !dbg !93
  %1042 = extractvalue { i32, i32, i32, i32 } %1041, 0, !dbg !93
  %1043 = extractvalue { i32, i32, i32, i32 } %1041, 1, !dbg !93
  %1044 = extractvalue { i32, i32, i32, i32 } %1041, 2, !dbg !93
  %1045 = extractvalue { i32, i32, i32, i32 } %1041, 3, !dbg !93
  %1046 = bitcast i32 %1042 to float, !dbg !93
  %1047 = bitcast i32 %1043 to float, !dbg !93
  %1048 = bitcast i32 %1044 to float, !dbg !93
  %1049 = bitcast i32 %1045 to float, !dbg !93
  %1050 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #8, !dbg !94
  %1051 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %787, i64 %1050, i1 %84) #8, !dbg !94
  %1052 = extractvalue { i32, i32, i32, i32 } %1051, 0, !dbg !94
  %1053 = extractvalue { i32, i32, i32, i32 } %1051, 1, !dbg !94
  %1054 = extractvalue { i32, i32, i32, i32 } %1051, 2, !dbg !94
  %1055 = extractvalue { i32, i32, i32, i32 } %1051, 3, !dbg !94
  %1056 = bitcast i32 %1052 to float, !dbg !94
  %1057 = bitcast i32 %1053 to float, !dbg !94
  %1058 = bitcast i32 %1054 to float, !dbg !94
  %1059 = bitcast i32 %1055 to float, !dbg !94
  %1060 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #8, !dbg !94
  %1061 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %789, i64 %1060, i1 %85) #8, !dbg !94
  %1062 = extractvalue { i32, i32, i32, i32 } %1061, 0, !dbg !94
  %1063 = extractvalue { i32, i32, i32, i32 } %1061, 1, !dbg !94
  %1064 = extractvalue { i32, i32, i32, i32 } %1061, 2, !dbg !94
  %1065 = extractvalue { i32, i32, i32, i32 } %1061, 3, !dbg !94
  %1066 = bitcast i32 %1062 to float, !dbg !94
  %1067 = bitcast i32 %1063 to float, !dbg !94
  %1068 = bitcast i32 %1064 to float, !dbg !94
  %1069 = bitcast i32 %1065 to float, !dbg !94
  %1070 = fadd float %1036, %1056, !dbg !95
  %1071 = fadd float %1037, %1057, !dbg !95
  %1072 = fadd float %1038, %1058, !dbg !95
  %1073 = fadd float %1039, %1059, !dbg !95
  %1074 = fadd float %1046, %1066, !dbg !95
  %1075 = fadd float %1047, %1067, !dbg !95
  %1076 = fadd float %1048, %1068, !dbg !95
  %1077 = fadd float %1049, %1069, !dbg !95
  %1078 = fsub float %1070, %955, !dbg !96
  %1079 = fsub float %1071, %955, !dbg !96
  %1080 = fsub float %1072, %955, !dbg !96
  %1081 = fsub float %1073, %955, !dbg !96
  %1082 = fsub float %1074, %956, !dbg !96
  %1083 = fsub float %1075, %956, !dbg !96
  %1084 = fsub float %1076, %956, !dbg !96
  %1085 = fsub float %1077, %956, !dbg !96
  %1086 = fmul float %1078, 0x3FF7154760000000, !dbg !97
  %1087 = tail call float @llvm.nvvm.ex2.approx.f(float %1086), !dbg !97
  %1088 = fmul float %1079, 0x3FF7154760000000, !dbg !97
  %1089 = tail call float @llvm.nvvm.ex2.approx.f(float %1088), !dbg !97
  %1090 = fmul float %1080, 0x3FF7154760000000, !dbg !97
  %1091 = tail call float @llvm.nvvm.ex2.approx.f(float %1090), !dbg !97
  %1092 = fmul float %1081, 0x3FF7154760000000, !dbg !97
  %1093 = tail call float @llvm.nvvm.ex2.approx.f(float %1092), !dbg !97
  %1094 = fmul float %1082, 0x3FF7154760000000, !dbg !97
  %1095 = tail call float @llvm.nvvm.ex2.approx.f(float %1094), !dbg !97
  %1096 = fmul float %1083, 0x3FF7154760000000, !dbg !97
  %1097 = tail call float @llvm.nvvm.ex2.approx.f(float %1096), !dbg !97
  %1098 = fmul float %1084, 0x3FF7154760000000, !dbg !97
  %1099 = tail call float @llvm.nvvm.ex2.approx.f(float %1098), !dbg !97
  %1100 = fmul float %1085, 0x3FF7154760000000, !dbg !97
  %1101 = tail call float @llvm.nvvm.ex2.approx.f(float %1100), !dbg !97
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !98
  %1102 = insertelement <1 x i32> poison, i32 %1029, i64 0, !dbg !98
  store <1 x i32> %1102, ptr addrspace(3) %825, align 4, !dbg !98
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !98
  %1103 = load float, ptr addrspace(3) %826, align 4, !dbg !98
  %1104 = load float, ptr addrspace(3) %827, align 4, !dbg !98
  %1105 = tail call float @llvm.nvvm.div.full(float %1087, float %1103), !dbg !98
  %1106 = tail call float @llvm.nvvm.div.full(float %1089, float %1103), !dbg !98
  %1107 = tail call float @llvm.nvvm.div.full(float %1091, float %1103), !dbg !98
  %1108 = tail call float @llvm.nvvm.div.full(float %1093, float %1103), !dbg !98
  %1109 = tail call float @llvm.nvvm.div.full(float %1095, float %1104), !dbg !98
  %1110 = tail call float @llvm.nvvm.div.full(float %1097, float %1104), !dbg !98
  %1111 = tail call float @llvm.nvvm.div.full(float %1099, float %1104), !dbg !98
  %1112 = tail call float @llvm.nvvm.div.full(float %1101, float %1104), !dbg !98
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !99
  %1113 = zext i1 %.not to i8, !dbg !99
  %1114 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %571, !dbg !99
  %1115 = insertelement <1 x i8> poison, i8 %1113, i64 0, !dbg !99
  store <1 x i8> %1115, ptr addrspace(3) %1114, align 1, !dbg !99
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !99
  %1116 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %11, !dbg !99
  %1117 = load i8, ptr addrspace(3) %1116, align 1, !dbg !99
  %1118 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %12, !dbg !99
  %1119 = load i8, ptr addrspace(3) %1118, align 1, !dbg !99
  %1120 = trunc i8 %1117 to i1, !dbg !99
  %1121 = trunc i8 %1119 to i1, !dbg !99
  %1122 = getelementptr float, ptr addrspace(1) %4, i64 %786, !dbg !100
  %1123 = getelementptr float, ptr addrspace(1) %4, i64 %788, !dbg !100
  %1124 = bitcast float %1105 to i32, !dbg !101
  %1125 = select i1 %1120, i32 0, i32 %1124, !dbg !99
  %1126 = bitcast float %1106 to i32, !dbg !101
  %1127 = select i1 %1120, i32 0, i32 %1126, !dbg !99
  %1128 = bitcast float %1107 to i32, !dbg !101
  %1129 = select i1 %1120, i32 0, i32 %1128, !dbg !99
  %1130 = bitcast float %1108 to i32, !dbg !101
  %1131 = select i1 %1120, i32 0, i32 %1130, !dbg !99
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1125, i32 %1127, i32 %1129, i32 %1131, ptr addrspace(1) %1122, i1 %84) #8, !dbg !101
  %1132 = bitcast float %1109 to i32, !dbg !101
  %1133 = select i1 %1121, i32 0, i32 %1132, !dbg !99
  %1134 = bitcast float %1110 to i32, !dbg !101
  %1135 = select i1 %1121, i32 0, i32 %1134, !dbg !99
  %1136 = bitcast float %1111 to i32, !dbg !101
  %1137 = select i1 %1121, i32 0, i32 %1136, !dbg !99
  %1138 = bitcast float %1112 to i32, !dbg !101
  %1139 = select i1 %1121, i32 0, i32 %1138, !dbg !99
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1133, i32 %1135, i32 %1137, i32 %1139, ptr addrspace(1) %1123, i1 %85) #8, !dbg !101
  ret void, !dbg !102
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <8 x i32> @llvm.abs.v8i32(<8 x i32>, i1 immarg) #7

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <8 x i64> @llvm.smin.v8i64(<8 x i64>, <8 x i64>) #7

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.vector.reduce.or.v8i64(<8 x i64>) #7

attributes #0 = { noreturn }
attributes #1 = { "nvvm.reqntid"="512" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #6 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #8 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "ccisb2yra76ab2haychl3vkjloggui7jornx4qodogdjo7v6y64e.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/ci")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !6, file: !6, type: !7, spFlags: DISPFlagOptimized)
!6 = !DIFile(filename: "<unknown>", directory: "")
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mul_rsub_4", linkageName: "triton_red_fused__to_copy_add_mul_rsub_4", scope: !1, file: !1, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!10 = !DILocation(line: 23, column: 28, scope: !9)
!11 = !DILocation(line: 24, column: 44, scope: !9)
!12 = !DILocation(line: 26, column: 37, scope: !9)
!13 = !DILocation(line: 39, column: 29, scope: !9)
!14 = !DILocation(line: 43, column: 51, scope: !9)
!15 = !DILocation(line: 44, column: 51, scope: !9)
!16 = !DILocation(line: 23, column: 33, scope: !9)
!17 = !DILocation(line: 24, column: 23, scope: !9)
!18 = !DILocation(line: 25, column: 21, scope: !9)
!19 = !DILocation(line: 28, column: 19, scope: !9)
!20 = !DILocation(line: 30, column: 19, scope: !9)
!21 = !DILocation(line: 43, column: 46, scope: !9)
!22 = !DILocation(line: 43, column: 42, scope: !9)
!23 = !DILocation(line: 43, column: 35, scope: !9)
!24 = !DILocation(line: 43, column: 61, scope: !9)
!25 = !DILocation(line: 44, column: 46, scope: !9)
!26 = !DILocation(line: 44, column: 42, scope: !9)
!27 = !DILocation(line: 44, column: 35, scope: !9)
!28 = !DILocation(line: 45, column: 23, scope: !9)
!29 = !DILocation(line: 47, column: 22, scope: !9)
!30 = !DILocation(line: 50, column: 22, scope: !9)
!31 = !DILocation(line: 52, column: 27, scope: !9)
!32 = !DILocation(line: 54, column: 22, scope: !9)
!33 = !DILocation(line: 55, column: 24, scope: !9)
!34 = !DILocation(line: 57, column: 24, scope: !9)
!35 = !DILocation(line: 58, column: 28, scope: !9)
!36 = !DILocation(line: 60, column: 24, scope: !9)
!37 = !DILocation(line: 62, column: 24, scope: !9)
!38 = !DILocation(line: 63, column: 25, scope: !9)
!39 = !DILocation(line: 64, column: 24, scope: !9)
!40 = !DILocation(line: 106, column: 29, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !9, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 66, column: 46, scope: !9)
!44 = !DILocation(line: 67, column: 37, scope: !9)
!45 = !DILocation(line: 68, column: 23, scope: !9)
!46 = !DILocation(line: 72, column: 39, scope: !9)
!47 = !DILocation(line: 73, column: 77, scope: !9)
!48 = !DILocation(line: 29, column: 21, scope: !9)
!49 = !DILocation(line: 29, column: 28, scope: !9)
!50 = !DILocation(line: 74, column: 40, scope: !9)
!51 = !DILocation(line: 74, column: 35, scope: !9)
!52 = !DILocation(line: 74, column: 50, scope: !9)
!53 = !DILocation(line: 75, column: 25, scope: !9)
!54 = !DILocation(line: 77, column: 24, scope: !9)
!55 = !DILocation(line: 79, column: 24, scope: !9)
!56 = !DILocation(line: 80, column: 24, scope: !9)
!57 = !DILocation(line: 81, column: 24, scope: !9)
!58 = !DILocation(line: 83, column: 25, scope: !9)
!59 = !DILocation(line: 197, column: 53, scope: !41, inlinedAt: !60)
!60 = !DILocation(line: 93, column: 43, scope: !9)
!61 = !DILocation(line: 174, column: 24, scope: !41, inlinedAt: !60)
!62 = !DILocation(line: 200, column: 53, scope: !41, inlinedAt: !60)
!63 = !DILocation(line: 206, column: 24, scope: !41, inlinedAt: !60)
!64 = !DILocation(line: 206, column: 36, scope: !41, inlinedAt: !60)
!65 = !DILocation(line: 96, column: 64, scope: !9)
!66 = !DILocation(line: 97, column: 64, scope: !9)
!67 = !DILocation(line: 98, column: 40, scope: !9)
!68 = !DILocation(line: 98, column: 36, scope: !9)
!69 = !DILocation(line: 98, column: 52, scope: !9)
!70 = !DILocation(line: 98, column: 45, scope: !9)
!71 = !DILocation(line: 98, column: 29, scope: !9)
!72 = !DILocation(line: 98, column: 64, scope: !9)
!73 = !DILocation(line: 261, column: 15, scope: !41, inlinedAt: !74)
!74 = !DILocation(line: 99, column: 51, scope: !9)
!75 = !DILocation(line: 266, column: 29, scope: !41, inlinedAt: !74)
!76 = !DILocation(line: 111, column: 15, scope: !41, inlinedAt: !77)
!77 = !DILocation(line: 102, column: 35, scope: !9)
!78 = !DILocation(line: 113, column: 21, scope: !41, inlinedAt: !77)
!79 = !DILocation(line: 113, column: 16, scope: !41, inlinedAt: !77)
!80 = !DILocation(line: 114, column: 29, scope: !41, inlinedAt: !77)
!81 = !DILocation(line: 124, column: 29, scope: !41, inlinedAt: !77)
!82 = !DILocation(line: 181, column: 68, scope: !41, inlinedAt: !77)
!83 = !DILocation(line: 89, column: 50, scope: !9)
!84 = !DILocation(line: 99, column: 66, scope: !9)
!85 = !DILocation(line: 181, column: 40, scope: !41, inlinedAt: !77)
!86 = !DILocation(line: 174, column: 24, scope: !41, inlinedAt: !77)
!87 = !DILocation(line: 181, column: 58, scope: !41, inlinedAt: !77)
!88 = !DILocation(line: 182, column: 31, scope: !41, inlinedAt: !77)
!89 = !DILocation(line: 290, column: 36, scope: !90, inlinedAt: !77)
!90 = distinct !DILexicalBlockFile(scope: !9, file: !91, discriminator: 0)
!91 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!92 = !DILocation(line: 260, column: 15, scope: !90, inlinedAt: !77)
!93 = !DILocation(line: 113, column: 51, scope: !9)
!94 = !DILocation(line: 114, column: 64, scope: !9)
!95 = !DILocation(line: 116, column: 24, scope: !9)
!96 = !DILocation(line: 117, column: 24, scope: !9)
!97 = !DILocation(line: 118, column: 28, scope: !9)
!98 = !DILocation(line: 119, column: 25, scope: !9)
!99 = !DILocation(line: 121, column: 39, scope: !9)
!100 = !DILocation(line: 122, column: 29, scope: !9)
!101 = !DILocation(line: 122, column: 64, scope: !9)
!102 = !DILocation(line: 107, column: 4, scope: !9)
