; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_15(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr #0 !dbg !5 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %7 = icmp samesign ult i32 %6, 10368, !dbg !9
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %9 = and i32 %8, 31, !dbg !10
  %10 = lshr i32 %8, 5, !dbg !10
  %11 = shl nuw nsw i32 %8, 2, !dbg !10
  %12 = and i32 %11, 508, !dbg !10
  %13 = udiv i32 %6, 324, !dbg !11
  %14 = mul i32 %13, 324, !dbg !12
  %.decomposed = sub i32 %6, %14, !dbg !12
  %15 = icmp samesign ult i32 %12, 324, !dbg !13
  %16 = mul i32 %6, 324, !dbg !14
  %17 = add i32 %12, %16, !dbg !15
  %18 = sext i32 %17 to i64, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !16
  %20 = and i1 %7, %15, !dbg !17
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !18
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %19, i64 %21, i1 %20) #5, !dbg !18
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !18
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !18
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !18
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !18
  %27 = mul nuw nsw i32 %.decomposed, 324, !dbg !19
  %28 = add nuw nsw i32 %12, %27, !dbg !20
  %29 = mul i32 %13, 104992, !dbg !21
  %30 = add i32 %28, %29, !dbg !22
  %31 = sext i32 %30 to i64, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !23
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !24
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %32, i64 %33, i1 %20) #5, !dbg !24
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !24
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !24
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !24
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !24
  %39 = insertelement <4 x i32> poison, i32 %23, i64 0, !dbg !18
  %40 = insertelement <4 x i32> %39, i32 %24, i64 1, !dbg !18
  %41 = insertelement <4 x i32> %40, i32 %25, i64 2, !dbg !18
  %42 = insertelement <4 x i32> %41, i32 %26, i64 3, !dbg !18
  %43 = bitcast <4 x i32> %42 to <4 x float>, !dbg !18
  %44 = insertelement <4 x i32> poison, i32 %35, i64 0, !dbg !24
  %45 = insertelement <4 x i32> %44, i32 %36, i64 1, !dbg !24
  %46 = insertelement <4 x i32> %45, i32 %37, i64 2, !dbg !24
  %47 = insertelement <4 x i32> %46, i32 %38, i64 3, !dbg !24
  %48 = bitcast <4 x i32> %47 to <4 x float>, !dbg !24
  %49 = fadd <4 x float> %43, %48, !dbg !25
  %50 = fcmp une <4 x float> %49, splat (float 0xFFF0000000000000), !dbg !26
  %51 = extractelement <4 x float> %49, i64 0, !dbg !27
  %52 = fsub float 0xFFF0000000000000, %51, !dbg !27
  %53 = extractelement <4 x float> %49, i64 1, !dbg !27
  %54 = fsub float 0xFFF0000000000000, %53, !dbg !27
  %55 = extractelement <4 x float> %49, i64 2, !dbg !27
  %56 = fsub float 0xFFF0000000000000, %55, !dbg !27
  %57 = extractelement <4 x float> %49, i64 3, !dbg !27
  %58 = fsub float 0xFFF0000000000000, %57, !dbg !27
  %59 = fmul float %52, 0x3FF7154760000000, !dbg !31
  %60 = tail call float @llvm.nvvm.ex2.approx.f(float %59), !dbg !31
  %61 = fmul float %54, 0x3FF7154760000000, !dbg !31
  %62 = tail call float @llvm.nvvm.ex2.approx.f(float %61), !dbg !31
  %63 = fmul float %56, 0x3FF7154760000000, !dbg !31
  %64 = tail call float @llvm.nvvm.ex2.approx.f(float %63), !dbg !31
  %65 = fmul float %58, 0x3FF7154760000000, !dbg !31
  %66 = tail call float @llvm.nvvm.ex2.approx.f(float %65), !dbg !31
  %67 = fsub float %51, %51, !dbg !32
  %68 = fsub float %53, %53, !dbg !32
  %69 = fsub float %55, %55, !dbg !32
  %70 = fsub float %57, %57, !dbg !32
  %71 = fmul float %67, 0x3FF7154760000000, !dbg !31
  %72 = tail call float @llvm.nvvm.ex2.approx.f(float %71), !dbg !31
  %73 = fmul float %68, 0x3FF7154760000000, !dbg !31
  %74 = tail call float @llvm.nvvm.ex2.approx.f(float %73), !dbg !31
  %75 = fmul float %69, 0x3FF7154760000000, !dbg !31
  %76 = tail call float @llvm.nvvm.ex2.approx.f(float %75), !dbg !31
  %77 = fmul float %70, 0x3FF7154760000000, !dbg !31
  %78 = tail call float @llvm.nvvm.ex2.approx.f(float %77), !dbg !31
  %79 = fmul float %60, 0.000000e+00, !dbg !33
  %80 = fmul float %62, 0.000000e+00, !dbg !33
  %81 = fmul float %64, 0.000000e+00, !dbg !33
  %82 = fmul float %66, 0.000000e+00, !dbg !33
  %83 = fadd float %79, %72, !dbg !34
  %84 = extractelement <4 x i1> %50, i64 0, !dbg !34
  %85 = select i1 %84, float %83, float 1.000000e+00, !dbg !34
  %86 = fadd float %80, %74, !dbg !34
  %87 = extractelement <4 x i1> %50, i64 1, !dbg !34
  %88 = select i1 %87, float %86, float 1.000000e+00, !dbg !34
  %89 = fadd float %81, %76, !dbg !34
  %90 = extractelement <4 x i1> %50, i64 2, !dbg !34
  %91 = select i1 %90, float %89, float 1.000000e+00, !dbg !34
  %92 = fadd float %82, %78, !dbg !34
  %93 = extractelement <4 x i1> %50, i64 3, !dbg !34
  %94 = select i1 %93, float %92, float 1.000000e+00, !dbg !34
  %95 = select i1 %20, float %51, float 0xFFF0000000000000, !dbg !35
  %96 = select i1 %20, float %53, float 0xFFF0000000000000, !dbg !35
  %97 = select i1 %20, float %55, float 0xFFF0000000000000, !dbg !35
  %98 = select i1 %20, float %57, float 0xFFF0000000000000, !dbg !35
  %99 = select i1 %20, float %85, float 0.000000e+00, !dbg !36
  %100 = select i1 %20, float %88, float 0.000000e+00, !dbg !36
  %101 = select i1 %20, float %91, float 0.000000e+00, !dbg !36
  %102 = select i1 %20, float %94, float 0.000000e+00, !dbg !36
  %103 = bitcast <4 x i1> %50 to i4, !dbg !37
  %104 = icmp ne i4 %103, 0, !dbg !37
  %105 = select i1 %20, i1 %104, i1 false, !dbg !37
  %106 = zext i1 %105 to i32, !dbg !39
  %107 = tail call i32 @llvm.nvvm.redux.sync.or(i32 %106, i32 -1), !dbg !39
  %108 = trunc i32 %107 to i8, !dbg !39
  %109 = and i32 %10, 3, !dbg !39
  %110 = icmp eq i32 %9, 0, !dbg !39
  %111 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %109, !dbg !39
  %112 = insertelement <1 x i8> poison, i8 %108, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %111, <1 x i8> %112, i1 %110) #5, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  %113 = icmp samesign ult i32 %8, 4, !dbg !39
  %114 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %8, !dbg !39
  %115 = tail call i8 asm sideeffect "@$2 ld.shared.b8 $0, [ $1 + 0 ];", "=h,r,b"(ptr addrspace(3) %114, i1 %113) #5, !dbg !39
  %116 = zext i8 %115 to i32, !dbg !39
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 2, i32 31), !dbg !39
  %118 = trunc i32 %117 to i8, !dbg !39
  %119 = or i8 %115, %118, !dbg !37
  %120 = zext i8 %119 to i32, !dbg !39
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 1, i32 31), !dbg !39
  %122 = trunc i32 %121 to i8, !dbg !39
  %123 = or i8 %119, %122, !dbg !37
  %124 = icmp eq i32 %8, 0, !dbg !39
  %125 = insertelement <1 x i8> poison, i8 %123, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %114, <1 x i8> %125, i1 %124) #5, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  %126 = load i8, ptr addrspace(3) @global_smem, align 16, !dbg !39
  %.not = icmp eq i8 %126, 0, !dbg !40
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !41
  %127 = fcmp ogt float %95, %96, !dbg !43
  %128 = fcmp uno float %95, 0.000000e+00, !dbg !44
  %129 = or i1 %127, %128, !dbg !45
  %130 = select i1 %129, float %95, float %96, !dbg !46
  %131 = fcmp ogt float %130, %97, !dbg !43
  %132 = fcmp uno float %130, 0.000000e+00, !dbg !44
  %133 = or i1 %131, %132, !dbg !45
  %134 = select i1 %133, float %130, float %97, !dbg !46
  %135 = fcmp ogt float %134, %98, !dbg !43
  %136 = fcmp uno float %134, 0.000000e+00, !dbg !44
  %137 = or i1 %135, %136, !dbg !45
  %138 = select i1 %137, float %134, float %98, !dbg !46
  %139 = bitcast float %138 to i32, !dbg !41
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 16, i32 31), !dbg !41
  %141 = bitcast i32 %140 to float, !dbg !41
  %142 = fcmp ogt float %138, %141, !dbg !43
  %143 = fcmp uno float %138, 0.000000e+00, !dbg !44
  %144 = or i1 %143, %142, !dbg !45
  %145 = select i1 %144, float %138, float %141, !dbg !46
  %146 = bitcast float %145 to i32, !dbg !41
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 8, i32 31), !dbg !41
  %148 = bitcast i32 %147 to float, !dbg !41
  %149 = fcmp ogt float %145, %148, !dbg !43
  %150 = fcmp uno float %145, 0.000000e+00, !dbg !44
  %151 = or i1 %149, %150, !dbg !45
  %152 = select i1 %151, float %145, float %148, !dbg !46
  %153 = bitcast float %152 to i32, !dbg !41
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 4, i32 31), !dbg !41
  %155 = bitcast i32 %154 to float, !dbg !41
  %156 = fcmp ogt float %152, %155, !dbg !43
  %157 = fcmp uno float %152, 0.000000e+00, !dbg !44
  %158 = or i1 %156, %157, !dbg !45
  %159 = select i1 %158, float %152, float %155, !dbg !46
  %160 = bitcast float %159 to i32, !dbg !41
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 2, i32 31), !dbg !41
  %162 = bitcast i32 %161 to float, !dbg !41
  %163 = fcmp ogt float %159, %162, !dbg !43
  %164 = fcmp uno float %159, 0.000000e+00, !dbg !44
  %165 = or i1 %163, %164, !dbg !45
  %166 = select i1 %165, float %159, float %162, !dbg !46
  %167 = bitcast float %166 to i32, !dbg !41
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 1, i32 31), !dbg !41
  %169 = bitcast i32 %168 to float, !dbg !41
  %170 = fcmp ogt float %166, %169, !dbg !43
  %171 = fcmp uno float %166, 0.000000e+00, !dbg !44
  %172 = or i1 %170, %171, !dbg !45
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i32 %109, !dbg !41
  %174 = select i1 %172, i32 %167, i32 %168, !dbg !46
  %175 = insertelement <1 x i32> poison, i32 %174, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %175, i1 %110) #5, !dbg !41
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !41
  %176 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !41
  %177 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %176, i1 %113) #5, !dbg !41
  %178 = bitcast i32 %177 to float, !dbg !41
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 2, i32 31), !dbg !41
  %180 = bitcast i32 %179 to float, !dbg !41
  %181 = fcmp ogt float %178, %180, !dbg !43
  %182 = fcmp uno float %178, 0.000000e+00, !dbg !44
  %183 = or i1 %182, %181, !dbg !45
  %184 = select i1 %183, float %178, float %180, !dbg !46
  %185 = bitcast float %184 to i32, !dbg !41
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 1, i32 31), !dbg !41
  %187 = bitcast i32 %186 to float, !dbg !41
  %188 = fcmp ogt float %184, %187, !dbg !43
  %189 = fcmp uno float %184, 0.000000e+00, !dbg !44
  %190 = or i1 %188, %189, !dbg !45
  %191 = select i1 %190, i32 %185, i32 %186, !dbg !46
  %192 = insertelement <1 x i32> poison, i32 %191, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %192, i1 %124) #5, !dbg !41
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !41
  %193 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !41
  %194 = fcmp oeq float %193, 0xFFF0000000000000, !dbg !47
  %195 = fsub float %95, %193, !dbg !48
  %196 = fsub float %96, %193, !dbg !48
  %197 = fsub float %97, %193, !dbg !48
  %198 = fsub float %98, %193, !dbg !48
  %199 = fmul float %195, 0x3FF7154760000000, !dbg !49
  %200 = select i1 %194, float 0.000000e+00, float %199, !dbg !50
  %201 = tail call float @llvm.nvvm.ex2.approx.f(float %200), !dbg !49
  %202 = fmul float %196, 0x3FF7154760000000, !dbg !49
  %203 = select i1 %194, float 0.000000e+00, float %202, !dbg !50
  %204 = tail call float @llvm.nvvm.ex2.approx.f(float %203), !dbg !49
  %205 = fmul float %197, 0x3FF7154760000000, !dbg !49
  %206 = select i1 %194, float 0.000000e+00, float %205, !dbg !50
  %207 = tail call float @llvm.nvvm.ex2.approx.f(float %206), !dbg !49
  %208 = fmul float %198, 0x3FF7154760000000, !dbg !49
  %209 = select i1 %194, float 0.000000e+00, float %208, !dbg !50
  %210 = tail call float @llvm.nvvm.ex2.approx.f(float %209), !dbg !49
  %211 = fmul float %99, %201, !dbg !51
  %212 = fmul float %100, %204, !dbg !51
  %213 = fmul float %101, %207, !dbg !51
  %214 = fmul float %102, %210, !dbg !51
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !52
  %215 = fadd float %211, %212, !dbg !55
  %216 = fadd float %215, %213, !dbg !55
  %217 = fadd float %216, %214, !dbg !55
  %218 = bitcast float %217 to i32, !dbg !52
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 16, i32 31), !dbg !52
  %220 = bitcast i32 %219 to float, !dbg !52
  %221 = fadd float %217, %220, !dbg !55
  %222 = bitcast float %221 to i32, !dbg !52
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 8, i32 31), !dbg !52
  %224 = bitcast i32 %223 to float, !dbg !52
  %225 = fadd float %221, %224, !dbg !55
  %226 = bitcast float %225 to i32, !dbg !52
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 4, i32 31), !dbg !52
  %228 = bitcast i32 %227 to float, !dbg !52
  %229 = fadd float %225, %228, !dbg !55
  %230 = bitcast float %229 to i32, !dbg !52
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 2, i32 31), !dbg !52
  %232 = bitcast i32 %231 to float, !dbg !52
  %233 = fadd float %229, %232, !dbg !55
  %234 = bitcast float %233 to i32, !dbg !52
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 1, i32 31), !dbg !52
  %236 = bitcast i32 %235 to float, !dbg !52
  %237 = fadd float %233, %236, !dbg !55
  %238 = bitcast float %237 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %238, i1 %110) #5, !dbg !52
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !52
  %239 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %176, i1 %113) #5, !dbg !52
  %240 = bitcast i32 %239 to float, !dbg !52
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 2, i32 31), !dbg !52
  %242 = bitcast i32 %241 to float, !dbg !52
  %243 = fadd float %240, %242, !dbg !55
  %244 = bitcast float %243 to i32, !dbg !52
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 1, i32 31), !dbg !52
  %246 = bitcast i32 %245 to float, !dbg !52
  %247 = fadd float %243, %246, !dbg !55
  %248 = bitcast float %247 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %248, i1 %124) #5, !dbg !52
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !52
  %249 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !52
  %250 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #5, !dbg !56
  %251 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %19, i64 %250, i1 %20) #5, !dbg !56
  %252 = extractvalue { i32, i32, i32, i32 } %251, 0, !dbg !56
  %253 = extractvalue { i32, i32, i32, i32 } %251, 1, !dbg !56
  %254 = extractvalue { i32, i32, i32, i32 } %251, 2, !dbg !56
  %255 = extractvalue { i32, i32, i32, i32 } %251, 3, !dbg !56
  %256 = bitcast i32 %252 to float, !dbg !56
  %257 = bitcast i32 %253 to float, !dbg !56
  %258 = bitcast i32 %254 to float, !dbg !56
  %259 = bitcast i32 %255 to float, !dbg !56
  %260 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #5, !dbg !57
  %261 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %32, i64 %260, i1 %20) #5, !dbg !57
  %262 = extractvalue { i32, i32, i32, i32 } %261, 0, !dbg !57
  %263 = extractvalue { i32, i32, i32, i32 } %261, 1, !dbg !57
  %264 = extractvalue { i32, i32, i32, i32 } %261, 2, !dbg !57
  %265 = extractvalue { i32, i32, i32, i32 } %261, 3, !dbg !57
  %266 = bitcast i32 %262 to float, !dbg !57
  %267 = bitcast i32 %263 to float, !dbg !57
  %268 = bitcast i32 %264 to float, !dbg !57
  %269 = bitcast i32 %265 to float, !dbg !57
  %270 = fadd float %256, %266, !dbg !58
  %271 = fadd float %257, %267, !dbg !58
  %272 = fadd float %258, %268, !dbg !58
  %273 = fadd float %259, %269, !dbg !58
  %274 = fsub float %270, %193, !dbg !59
  %275 = fsub float %271, %193, !dbg !59
  %276 = fsub float %272, %193, !dbg !59
  %277 = fsub float %273, %193, !dbg !59
  %278 = fmul float %274, 0x3FF7154760000000, !dbg !60
  %279 = tail call float @llvm.nvvm.ex2.approx.f(float %278), !dbg !60
  %280 = fmul float %275, 0x3FF7154760000000, !dbg !60
  %281 = tail call float @llvm.nvvm.ex2.approx.f(float %280), !dbg !60
  %282 = fmul float %276, 0x3FF7154760000000, !dbg !60
  %283 = tail call float @llvm.nvvm.ex2.approx.f(float %282), !dbg !60
  %284 = fmul float %277, 0x3FF7154760000000, !dbg !60
  %285 = tail call float @llvm.nvvm.ex2.approx.f(float %284), !dbg !60
  %286 = tail call float @llvm.nvvm.div.full(float %279, float %249), !dbg !61
  %287 = tail call float @llvm.nvvm.div.full(float %281, float %249), !dbg !61
  %288 = tail call float @llvm.nvvm.div.full(float %283, float %249), !dbg !61
  %289 = tail call float @llvm.nvvm.div.full(float %285, float %249), !dbg !61
  %290 = bitcast float %286 to i32, !dbg !62
  %291 = select i1 %.not, i32 0, i32 %290, !dbg !63
  %292 = bitcast float %287 to i32, !dbg !62
  %293 = select i1 %.not, i32 0, i32 %292, !dbg !63
  %294 = bitcast float %288 to i32, !dbg !62
  %295 = select i1 %.not, i32 0, i32 %294, !dbg !63
  %296 = bitcast float %289 to i32, !dbg !62
  %297 = select i1 %.not, i32 0, i32 %296, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %291, i32 %293, i32 %295, i32 %297, ptr addrspace(1) %32, i1 %20) #5, !dbg !62
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.redux.sync.or(i32, i32) #3

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #4

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { convergent nocallback nounwind }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "c3s5rpotgkrxj53byxl6iiai4e64ppfdhf7r5r7xy2iceaf5vzca.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/3s")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "triton_red_fused_15", linkageName: "triton_red_fused_15", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 23, column: 28, scope: !5)
!9 = !DILocation(line: 25, column: 21, scope: !5)
!10 = !DILocation(line: 26, column: 37, scope: !5)
!11 = !DILocation(line: 30, column: 19, scope: !5)
!12 = !DILocation(line: 29, column: 19, scope: !5)
!13 = !DILocation(line: 38, column: 29, scope: !5)
!14 = !DILocation(line: 42, column: 45, scope: !5)
!15 = !DILocation(line: 42, column: 41, scope: !5)
!16 = !DILocation(line: 42, column: 34, scope: !5)
!17 = !DILocation(line: 42, column: 60, scope: !5)
!18 = !DILocation(line: 42, column: 50, scope: !5)
!19 = !DILocation(line: 43, column: 49, scope: !5)
!20 = !DILocation(line: 43, column: 45, scope: !5)
!21 = !DILocation(line: 43, column: 61, scope: !5)
!22 = !DILocation(line: 43, column: 54, scope: !5)
!23 = !DILocation(line: 43, column: 38, scope: !5)
!24 = !DILocation(line: 43, column: 66, scope: !5)
!25 = !DILocation(line: 44, column: 22, scope: !5)
!26 = !DILocation(line: 46, column: 23, scope: !5)
!27 = !DILocation(line: 197, column: 53, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !5, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 56, column: 43, scope: !5)
!31 = !DILocation(line: 174, column: 24, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 200, column: 53, scope: !28, inlinedAt: !30)
!33 = !DILocation(line: 206, column: 24, scope: !28, inlinedAt: !30)
!34 = !DILocation(line: 206, column: 36, scope: !28, inlinedAt: !30)
!35 = !DILocation(line: 59, column: 64, scope: !5)
!36 = !DILocation(line: 60, column: 64, scope: !5)
!37 = !DILocation(line: 261, column: 15, scope: !28, inlinedAt: !38)
!38 = !DILocation(line: 61, column: 49, scope: !5)
!39 = !DILocation(line: 266, column: 29, scope: !28, inlinedAt: !38)
!40 = !DILocation(line: 61, column: 64, scope: !5)
!41 = !DILocation(line: 124, column: 29, scope: !28, inlinedAt: !42)
!42 = !DILocation(line: 64, column: 35, scope: !5)
!43 = !DILocation(line: 111, column: 15, scope: !28, inlinedAt: !42)
!44 = !DILocation(line: 113, column: 21, scope: !28, inlinedAt: !42)
!45 = !DILocation(line: 113, column: 16, scope: !28, inlinedAt: !42)
!46 = !DILocation(line: 114, column: 29, scope: !28, inlinedAt: !42)
!47 = !DILocation(line: 181, column: 40, scope: !28, inlinedAt: !42)
!48 = !DILocation(line: 181, column: 68, scope: !28, inlinedAt: !42)
!49 = !DILocation(line: 174, column: 24, scope: !28, inlinedAt: !42)
!50 = !DILocation(line: 181, column: 58, scope: !28, inlinedAt: !42)
!51 = !DILocation(line: 182, column: 31, scope: !28, inlinedAt: !42)
!52 = !DILocation(line: 290, column: 36, scope: !53, inlinedAt: !42)
!53 = distinct !DILexicalBlockFile(scope: !5, file: !54, discriminator: 0)
!54 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!55 = !DILocation(line: 260, column: 15, scope: !53, inlinedAt: !42)
!56 = !DILocation(line: 75, column: 51, scope: !5)
!57 = !DILocation(line: 76, column: 67, scope: !5)
!58 = !DILocation(line: 78, column: 24, scope: !5)
!59 = !DILocation(line: 79, column: 24, scope: !5)
!60 = !DILocation(line: 80, column: 28, scope: !5)
!61 = !DILocation(line: 81, column: 25, scope: !5)
!62 = !DILocation(line: 84, column: 67, scope: !5)
!63 = !DILocation(line: 83, column: 39, scope: !5)
!64 = !DILocation(line: 69, column: 4, scope: !5)
