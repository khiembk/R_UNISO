; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [121 x i8] c"/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/kz/ckzqi7x2at4m3jxs6zdc46t47t6lw6nmlhnn2rg6szev4wipvslb.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 32128\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !5 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused_add_embedding_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr #1 !dbg !9 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !10
  %9 = shl i32 %8, 6, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 4, !dbg !12
  %12 = lshr i32 %10, 6, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !12
  %15 = shufflevector <2 x i32> %14, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !12
  %16 = insertelement <2 x i32> <i32 31, i32 poison>, i32 %9, i64 1, !dbg !12
  %17 = and <2 x i32> %15, %16, !dbg !12
  %18 = or disjoint <2 x i32> %15, %16, !dbg !12
  %19 = shufflevector <2 x i32> %17, <2 x i32> %18, <2 x i32> <i32 0, i32 3>, !dbg !12
  %20 = insertelement <2 x i32> <i32 poison, i32 32>, i32 %9, i64 0, !dbg !13
  %21 = or <2 x i32> %19, %20, !dbg !13
  %22 = icmp slt <2 x i32> %21, splat (i32 1296), !dbg !14
  %23 = shufflevector <2 x i1> %22, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !14
  %24 = shl nuw nsw i32 %10, 2, !dbg !15
  %25 = and i32 %24, 60, !dbg !15
  %26 = extractelement <2 x i32> %21, i64 0, !dbg !16
  %27 = sext i32 %26 to i64, !dbg !16
  %28 = getelementptr i64, ptr addrspace(1) %0, i64 %27, !dbg !16
  %29 = extractelement <2 x i32> %21, i64 1, !dbg !16
  %30 = sext i32 %29 to i64, !dbg !16
  %31 = getelementptr i64, ptr addrspace(1) %0, i64 %30, !dbg !16
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %33 = extractelement <2 x i1> %22, i64 0, !dbg !17
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %28, i64 %32, i1 %33) #7, !dbg !17
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %28, i64 %35, i1 %33) #7, !dbg !17
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %28, i64 %37, i1 %33) #7, !dbg !17
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %28, i64 %39, i1 %33) #7, !dbg !17
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %42 = extractelement <2 x i1> %22, i64 1, !dbg !17
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %31, i64 %41, i1 %42) #7, !dbg !17
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %31, i64 %44, i1 %42) #7, !dbg !17
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %31, i64 %46, i1 %42) #7, !dbg !17
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %31, i64 %48, i1 %42) #7, !dbg !17
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %51 = add i64 %40, 32128, !dbg !18
  %52 = add i64 %49, 32128, !dbg !18
  %53 = icmp slt i64 %40, 0, !dbg !19
  %54 = icmp slt i64 %49, 0, !dbg !19
  %55 = select i1 %53, i64 %51, i64 %40, !dbg !20
  %56 = select i1 %54, i64 %52, i64 %49, !dbg !20
  %57 = or disjoint i32 %13, %9, !dbg !13
  %58 = or disjoint i32 %57, 8, !dbg !13
  %59 = or disjoint i32 %57, 16, !dbg !13
  %60 = or disjoint i32 %57, 24, !dbg !13
  %61 = or disjoint i32 %57, 32, !dbg !13
  %62 = or disjoint i32 %57, 40, !dbg !13
  %63 = or disjoint i32 %57, 48, !dbg !13
  %64 = or disjoint i32 %57, 56, !dbg !13
  %65 = insertelement <8 x i32> poison, i32 %57, i64 0, !dbg !14
  %66 = insertelement <8 x i32> %65, i32 %58, i64 1, !dbg !14
  %67 = insertelement <8 x i32> %66, i32 %59, i64 2, !dbg !14
  %68 = insertelement <8 x i32> %67, i32 %60, i64 3, !dbg !14
  %69 = insertelement <8 x i32> %68, i32 %61, i64 4, !dbg !14
  %70 = insertelement <8 x i32> %69, i32 %62, i64 5, !dbg !14
  %71 = insertelement <8 x i32> %70, i32 %63, i64 6, !dbg !14
  %72 = insertelement <8 x i32> %71, i32 %64, i64 7, !dbg !14
  %73 = icmp slt <8 x i32> %72, splat (i32 1296), !dbg !14
  %74 = sext i32 %57 to i64, !dbg !16
  %75 = getelementptr i64, ptr addrspace(1) %0, i64 %74, !dbg !16
  %76 = sext i32 %58 to i64, !dbg !16
  %77 = getelementptr i64, ptr addrspace(1) %0, i64 %76, !dbg !16
  %78 = sext i32 %59 to i64, !dbg !16
  %79 = getelementptr i64, ptr addrspace(1) %0, i64 %78, !dbg !16
  %80 = sext i32 %60 to i64, !dbg !16
  %81 = getelementptr i64, ptr addrspace(1) %0, i64 %80, !dbg !16
  %82 = sext i32 %61 to i64, !dbg !16
  %83 = getelementptr i64, ptr addrspace(1) %0, i64 %82, !dbg !16
  %84 = sext i32 %62 to i64, !dbg !16
  %85 = getelementptr i64, ptr addrspace(1) %0, i64 %84, !dbg !16
  %86 = sext i32 %63 to i64, !dbg !16
  %87 = getelementptr i64, ptr addrspace(1) %0, i64 %86, !dbg !16
  %88 = sext i32 %64 to i64, !dbg !16
  %89 = getelementptr i64, ptr addrspace(1) %0, i64 %88, !dbg !16
  %90 = extractelement <8 x i1> %73, i64 0, !dbg !17
  %91 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %75, i64 %50, i1 %90) #7, !dbg !17
  %92 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %93 = extractelement <8 x i1> %73, i64 1, !dbg !17
  %94 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %77, i64 %92, i1 %93) #7, !dbg !17
  %95 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %96 = extractelement <8 x i1> %73, i64 2, !dbg !17
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %79, i64 %95, i1 %96) #7, !dbg !17
  %98 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %99 = extractelement <8 x i1> %73, i64 3, !dbg !17
  %100 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %81, i64 %98, i1 %99) #7, !dbg !17
  %101 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %102 = extractelement <8 x i1> %73, i64 4, !dbg !17
  %103 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %83, i64 %101, i1 %102) #7, !dbg !17
  %104 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %105 = extractelement <8 x i1> %73, i64 5, !dbg !17
  %106 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %85, i64 %104, i1 %105) #7, !dbg !17
  %107 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %108 = extractelement <8 x i1> %73, i64 6, !dbg !17
  %109 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %87, i64 %107, i1 %108) #7, !dbg !17
  %110 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %111 = extractelement <8 x i1> %73, i64 7, !dbg !17
  %112 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %89, i64 %110, i1 %111) #7, !dbg !17
  %113 = insertelement <8 x i64> poison, i64 %91, i64 0, !dbg !18
  %114 = insertelement <8 x i64> %113, i64 %94, i64 1, !dbg !18
  %115 = insertelement <8 x i64> %114, i64 %97, i64 2, !dbg !18
  %116 = insertelement <8 x i64> %115, i64 %100, i64 3, !dbg !18
  %117 = insertelement <8 x i64> %116, i64 %103, i64 4, !dbg !18
  %118 = insertelement <8 x i64> %117, i64 %106, i64 5, !dbg !18
  %119 = insertelement <8 x i64> %118, i64 %109, i64 6, !dbg !18
  %120 = insertelement <8 x i64> %119, i64 %112, i64 7, !dbg !18
  %121 = add <8 x i64> %120, splat (i64 32128), !dbg !18
  %122 = icmp slt <8 x i64> %120, zeroinitializer, !dbg !19
  %123 = select <8 x i1> %122, <8 x i64> %121, <8 x i64> %120, !dbg !20
  %124 = icmp ugt <8 x i64> %123, splat (i64 32127)
  %125 = and <8 x i1> %124, %73
  %126 = bitcast <8 x i1> %125 to i8
  %127 = icmp eq i8 %126, 0
  %.idx = mul i64 %55, 1536
  %128 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx
  %.idx51 = mul i64 %56, 1536
  %129 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx51
  br i1 %127, label %.split, label %334, !dbg !21

.split:                                           ; preds = %7
  %130 = zext nneg i32 %25 to i64, !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !21
  %131 = getelementptr float, ptr addrspace(1) %128, i64 %130, !dbg !23
  %132 = getelementptr float, ptr addrspace(1) %129, i64 %130, !dbg !23
  %133 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !24
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %131, i64 %133, i1 %33) #7, !dbg !24
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !24
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !24
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !24
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !24
  %139 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !24
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %132, i64 %139, i1 %42) #7, !dbg !24
  %141 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !24
  %142 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !24
  %143 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !24
  %144 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !24
  %145 = insertelement <8 x i32> poison, i32 %135, i64 0, !dbg !24
  %146 = insertelement <8 x i32> %145, i32 %136, i64 1, !dbg !24
  %147 = insertelement <8 x i32> %146, i32 %137, i64 2, !dbg !24
  %148 = insertelement <8 x i32> %147, i32 %138, i64 3, !dbg !24
  %149 = insertelement <8 x i32> %148, i32 %141, i64 4, !dbg !24
  %150 = insertelement <8 x i32> %149, i32 %142, i64 5, !dbg !24
  %151 = insertelement <8 x i32> %150, i32 %143, i64 6, !dbg !24
  %152 = insertelement <8 x i32> %151, i32 %144, i64 7, !dbg !24
  %153 = bitcast <8 x i32> %152 to <8 x float>, !dbg !24
  %154 = fmul <8 x float> %153, %153, !dbg !25
  %155 = or disjoint i64 %130, 64, !dbg !26
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !21
  %156 = getelementptr float, ptr addrspace(1) %128, i64 %155, !dbg !23
  %157 = getelementptr float, ptr addrspace(1) %129, i64 %155, !dbg !23
  %158 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !24
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %156, i64 %158, i1 %33) #7, !dbg !24
  %160 = extractvalue { i32, i32, i32, i32 } %159, 0, !dbg !24
  %161 = extractvalue { i32, i32, i32, i32 } %159, 1, !dbg !24
  %162 = extractvalue { i32, i32, i32, i32 } %159, 2, !dbg !24
  %163 = extractvalue { i32, i32, i32, i32 } %159, 3, !dbg !24
  %164 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !24
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %157, i64 %164, i1 %42) #7, !dbg !24
  %166 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !24
  %167 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !24
  %168 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !24
  %169 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !24
  %170 = insertelement <8 x i32> poison, i32 %160, i64 0, !dbg !24
  %171 = insertelement <8 x i32> %170, i32 %161, i64 1, !dbg !24
  %172 = insertelement <8 x i32> %171, i32 %162, i64 2, !dbg !24
  %173 = insertelement <8 x i32> %172, i32 %163, i64 3, !dbg !24
  %174 = insertelement <8 x i32> %173, i32 %166, i64 4, !dbg !24
  %175 = insertelement <8 x i32> %174, i32 %167, i64 5, !dbg !24
  %176 = insertelement <8 x i32> %175, i32 %168, i64 6, !dbg !24
  %177 = insertelement <8 x i32> %176, i32 %169, i64 7, !dbg !24
  %178 = bitcast <8 x i32> %177 to <8 x float>, !dbg !24
  %179 = fmul <8 x float> %178, %178, !dbg !25
  %180 = fadd <8 x float> %154, %179, !dbg !27
  %181 = or disjoint i64 %130, 128, !dbg !26
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !21
  %182 = getelementptr float, ptr addrspace(1) %128, i64 %181, !dbg !23
  %183 = getelementptr float, ptr addrspace(1) %129, i64 %181, !dbg !23
  %184 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !24
  %185 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %182, i64 %184, i1 %33) #7, !dbg !24
  %186 = extractvalue { i32, i32, i32, i32 } %185, 0, !dbg !24
  %187 = extractvalue { i32, i32, i32, i32 } %185, 1, !dbg !24
  %188 = extractvalue { i32, i32, i32, i32 } %185, 2, !dbg !24
  %189 = extractvalue { i32, i32, i32, i32 } %185, 3, !dbg !24
  %190 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !24
  %191 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %183, i64 %190, i1 %42) #7, !dbg !24
  %192 = extractvalue { i32, i32, i32, i32 } %191, 0, !dbg !24
  %193 = extractvalue { i32, i32, i32, i32 } %191, 1, !dbg !24
  %194 = extractvalue { i32, i32, i32, i32 } %191, 2, !dbg !24
  %195 = extractvalue { i32, i32, i32, i32 } %191, 3, !dbg !24
  %196 = insertelement <8 x i32> poison, i32 %186, i64 0, !dbg !24
  %197 = insertelement <8 x i32> %196, i32 %187, i64 1, !dbg !24
  %198 = insertelement <8 x i32> %197, i32 %188, i64 2, !dbg !24
  %199 = insertelement <8 x i32> %198, i32 %189, i64 3, !dbg !24
  %200 = insertelement <8 x i32> %199, i32 %192, i64 4, !dbg !24
  %201 = insertelement <8 x i32> %200, i32 %193, i64 5, !dbg !24
  %202 = insertelement <8 x i32> %201, i32 %194, i64 6, !dbg !24
  %203 = insertelement <8 x i32> %202, i32 %195, i64 7, !dbg !24
  %204 = bitcast <8 x i32> %203 to <8 x float>, !dbg !24
  %205 = fmul <8 x float> %204, %204, !dbg !25
  %206 = fadd <8 x float> %180, %205, !dbg !27
  %207 = or disjoint i64 %130, 192, !dbg !26
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !21
  %208 = getelementptr float, ptr addrspace(1) %128, i64 %207, !dbg !23
  %209 = getelementptr float, ptr addrspace(1) %129, i64 %207, !dbg !23
  %210 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !24
  %211 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %208, i64 %210, i1 %33) #7, !dbg !24
  %212 = extractvalue { i32, i32, i32, i32 } %211, 0, !dbg !24
  %213 = extractvalue { i32, i32, i32, i32 } %211, 1, !dbg !24
  %214 = extractvalue { i32, i32, i32, i32 } %211, 2, !dbg !24
  %215 = extractvalue { i32, i32, i32, i32 } %211, 3, !dbg !24
  %216 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !24
  %217 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %209, i64 %216, i1 %42) #7, !dbg !24
  %218 = extractvalue { i32, i32, i32, i32 } %217, 0, !dbg !24
  %219 = extractvalue { i32, i32, i32, i32 } %217, 1, !dbg !24
  %220 = extractvalue { i32, i32, i32, i32 } %217, 2, !dbg !24
  %221 = extractvalue { i32, i32, i32, i32 } %217, 3, !dbg !24
  %222 = insertelement <8 x i32> poison, i32 %212, i64 0, !dbg !24
  %223 = insertelement <8 x i32> %222, i32 %213, i64 1, !dbg !24
  %224 = insertelement <8 x i32> %223, i32 %214, i64 2, !dbg !24
  %225 = insertelement <8 x i32> %224, i32 %215, i64 3, !dbg !24
  %226 = insertelement <8 x i32> %225, i32 %218, i64 4, !dbg !24
  %227 = insertelement <8 x i32> %226, i32 %219, i64 5, !dbg !24
  %228 = insertelement <8 x i32> %227, i32 %220, i64 6, !dbg !24
  %229 = insertelement <8 x i32> %228, i32 %221, i64 7, !dbg !24
  %230 = bitcast <8 x i32> %229 to <8 x float>, !dbg !24
  %231 = fmul <8 x float> %230, %230, !dbg !25
  %232 = fadd <8 x float> %206, %231, !dbg !27
  %233 = or disjoint i64 %130, 256, !dbg !26
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !21
  %234 = getelementptr float, ptr addrspace(1) %128, i64 %233, !dbg !23
  %235 = getelementptr float, ptr addrspace(1) %129, i64 %233, !dbg !23
  %236 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !24
  %237 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %234, i64 %236, i1 %33) #7, !dbg !24
  %238 = extractvalue { i32, i32, i32, i32 } %237, 0, !dbg !24
  %239 = extractvalue { i32, i32, i32, i32 } %237, 1, !dbg !24
  %240 = extractvalue { i32, i32, i32, i32 } %237, 2, !dbg !24
  %241 = extractvalue { i32, i32, i32, i32 } %237, 3, !dbg !24
  %242 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !24
  %243 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %235, i64 %242, i1 %42) #7, !dbg !24
  %244 = extractvalue { i32, i32, i32, i32 } %243, 0, !dbg !24
  %245 = extractvalue { i32, i32, i32, i32 } %243, 1, !dbg !24
  %246 = extractvalue { i32, i32, i32, i32 } %243, 2, !dbg !24
  %247 = extractvalue { i32, i32, i32, i32 } %243, 3, !dbg !24
  %248 = insertelement <8 x i32> poison, i32 %238, i64 0, !dbg !24
  %249 = insertelement <8 x i32> %248, i32 %239, i64 1, !dbg !24
  %250 = insertelement <8 x i32> %249, i32 %240, i64 2, !dbg !24
  %251 = insertelement <8 x i32> %250, i32 %241, i64 3, !dbg !24
  %252 = insertelement <8 x i32> %251, i32 %244, i64 4, !dbg !24
  %253 = insertelement <8 x i32> %252, i32 %245, i64 5, !dbg !24
  %254 = insertelement <8 x i32> %253, i32 %246, i64 6, !dbg !24
  %255 = insertelement <8 x i32> %254, i32 %247, i64 7, !dbg !24
  %256 = bitcast <8 x i32> %255 to <8 x float>, !dbg !24
  %257 = fmul <8 x float> %256, %256, !dbg !25
  %258 = fadd <8 x float> %232, %257, !dbg !27
  %259 = or disjoint i64 %130, 320, !dbg !26
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !21
  %260 = getelementptr float, ptr addrspace(1) %128, i64 %259, !dbg !23
  %261 = getelementptr float, ptr addrspace(1) %129, i64 %259, !dbg !23
  %262 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !24
  %263 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %260, i64 %262, i1 %33) #7, !dbg !24
  %264 = extractvalue { i32, i32, i32, i32 } %263, 0, !dbg !24
  %265 = extractvalue { i32, i32, i32, i32 } %263, 1, !dbg !24
  %266 = extractvalue { i32, i32, i32, i32 } %263, 2, !dbg !24
  %267 = extractvalue { i32, i32, i32, i32 } %263, 3, !dbg !24
  %268 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !24
  %269 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %261, i64 %268, i1 %42) #7, !dbg !24
  %270 = extractvalue { i32, i32, i32, i32 } %269, 0, !dbg !24
  %271 = extractvalue { i32, i32, i32, i32 } %269, 1, !dbg !24
  %272 = extractvalue { i32, i32, i32, i32 } %269, 2, !dbg !24
  %273 = extractvalue { i32, i32, i32, i32 } %269, 3, !dbg !24
  %274 = insertelement <8 x i32> poison, i32 %264, i64 0, !dbg !24
  %275 = insertelement <8 x i32> %274, i32 %265, i64 1, !dbg !24
  %276 = insertelement <8 x i32> %275, i32 %266, i64 2, !dbg !24
  %277 = insertelement <8 x i32> %276, i32 %267, i64 3, !dbg !24
  %278 = insertelement <8 x i32> %277, i32 %270, i64 4, !dbg !24
  %279 = insertelement <8 x i32> %278, i32 %271, i64 5, !dbg !24
  %280 = insertelement <8 x i32> %279, i32 %272, i64 6, !dbg !24
  %281 = insertelement <8 x i32> %280, i32 %273, i64 7, !dbg !24
  %282 = bitcast <8 x i32> %281 to <8 x float>, !dbg !24
  %283 = fmul <8 x float> %282, %282, !dbg !25
  %284 = fadd <8 x float> %258, %283, !dbg !27
  %285 = select <8 x i1> %23, <8 x float> %284, <8 x float> zeroinitializer, !dbg !28
  %shift = shufflevector <8 x float> %285, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %286 = fadd <8 x float> %285, %shift, !dbg !29
  %shift66 = shufflevector <8 x float> %285, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %287 = fadd <8 x float> %shift66, %286, !dbg !29
  %shift67 = shufflevector <8 x float> %285, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %288 = fadd <8 x float> %shift67, %287, !dbg !29
  %289 = extractelement <8 x float> %288, i64 0, !dbg !29
  %shift68 = shufflevector <8 x float> %285, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 5, i32 poison, i32 poison, i32 poison>, !dbg !29
  %290 = fadd <8 x float> %285, %shift68, !dbg !29
  %shift69 = shufflevector <8 x float> %285, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 6, i32 poison, i32 poison, i32 poison>, !dbg !29
  %291 = fadd <8 x float> %shift69, %290, !dbg !29
  %shift70 = shufflevector <8 x float> %285, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 7, i32 poison, i32 poison, i32 poison>, !dbg !29
  %292 = fadd <8 x float> %shift70, %291, !dbg !29
  %293 = extractelement <8 x float> %292, i64 4, !dbg !29
  %294 = bitcast float %289 to i32, !dbg !33
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 8, i32 31), !dbg !33
  %296 = bitcast i32 %295 to float, !dbg !33
  %297 = fadd float %289, %296, !dbg !29
  %298 = bitcast float %297 to i32, !dbg !33
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 4, i32 31), !dbg !33
  %300 = bitcast i32 %299 to float, !dbg !33
  %301 = fadd float %297, %300, !dbg !29
  %302 = bitcast float %301 to i32, !dbg !33
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 2, i32 31), !dbg !33
  %304 = bitcast i32 %303 to float, !dbg !33
  %305 = fadd float %301, %304, !dbg !29
  %306 = bitcast float %305 to i32, !dbg !33
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 1, i32 31), !dbg !33
  %308 = bitcast i32 %307 to float, !dbg !33
  %309 = fadd float %305, %308, !dbg !29
  %310 = bitcast float %293 to i32, !dbg !33
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 8, i32 31), !dbg !33
  %312 = bitcast i32 %311 to float, !dbg !33
  %313 = fadd float %293, %312, !dbg !29
  %314 = bitcast float %313 to i32, !dbg !33
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 4, i32 31), !dbg !33
  %316 = bitcast i32 %315 to float, !dbg !33
  %317 = fadd float %313, %316, !dbg !29
  %318 = bitcast float %317 to i32, !dbg !33
  %319 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %318, i32 2, i32 31), !dbg !33
  %320 = bitcast i32 %319 to float, !dbg !33
  %321 = fadd float %317, %320, !dbg !29
  %322 = bitcast float %321 to i32, !dbg !33
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 1, i32 31), !dbg !33
  %324 = bitcast i32 %323 to float, !dbg !33
  %325 = fadd float %321, %324, !dbg !29
  %326 = tail call float @llvm.nvvm.div.full(float %309, float 3.840000e+02), !dbg !34
  %327 = tail call float @llvm.nvvm.div.full(float %325, float 3.840000e+02), !dbg !34
  %328 = fadd float %326, 0x3EB0C6F7A0000000, !dbg !35
  %329 = fadd float %327, 0x3EB0C6F7A0000000, !dbg !35
  %330 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !36
  %331 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !36
  %332 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !36
  %333 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !36
  %.not.i22 = icmp eq i32 %333, 0, !dbg !36
  br i1 %.not.i22, label %337, label %335, !dbg !36

334:                                              ; preds = %7
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 41, ptr nonnull @assertFunc_0, i64 1), !dbg !21
  unreachable, !dbg !21

335:                                              ; preds = %.split
  %336 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %328), !dbg !36
  br label %__nv_rsqrtf.exit24, !dbg !36

337:                                              ; preds = %.split
  %338 = tail call float @llvm.nvvm.rsqrt.approx.f(float %328), !dbg !36
  br label %__nv_rsqrtf.exit24, !dbg !36

__nv_rsqrtf.exit24:                               ; preds = %335, %337
  %.0.i23 = phi float [ %336, %335 ], [ %338, %337 ], !dbg !36
  %339 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !36
  %340 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !36
  %341 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !36
  %342 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !36
  %.not.i34 = icmp eq i32 %342, 0, !dbg !36
  br i1 %.not.i34, label %345, label %343, !dbg !36

343:                                              ; preds = %__nv_rsqrtf.exit24
  %344 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %329), !dbg !36
  br label %__nv_rsqrtf.exit36, !dbg !36

345:                                              ; preds = %__nv_rsqrtf.exit24
  %346 = tail call float @llvm.nvvm.rsqrt.approx.f(float %329), !dbg !36
  br label %__nv_rsqrtf.exit36, !dbg !36

__nv_rsqrtf.exit36:                               ; preds = %343, %345
  %.0.i35 = phi float [ %344, %343 ], [ %346, %345 ], !dbg !36
  %347 = mul i32 %26, 384, !dbg !37
  %348 = mul i32 %29, 384, !dbg !37
  %349 = zext nneg i32 %25 to i64, !dbg !38
  br label %350, !dbg !38

350:                                              ; preds = %350, %__nv_rsqrtf.exit36
  %indvars.iv49 = phi i64 [ 0, %__nv_rsqrtf.exit36 ], [ %indvars.iv.next50, %350 ]
  %351 = or disjoint i64 %indvars.iv49, %349, !dbg !39
  %352 = getelementptr float, ptr addrspace(1) %2, i64 %351, !dbg !40
  %353 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !41
  %354 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %352, i64 %353, i1 true) #7, !dbg !41
  %355 = extractvalue { i32, i32, i32, i32 } %354, 3, !dbg !41
  %356 = bitcast i32 %355 to float, !dbg !41
  %357 = extractvalue { i32, i32, i32, i32 } %354, 2, !dbg !41
  %358 = bitcast i32 %357 to float, !dbg !41
  %359 = extractvalue { i32, i32, i32, i32 } %354, 1, !dbg !41
  %360 = bitcast i32 %359 to float, !dbg !41
  %361 = extractvalue { i32, i32, i32, i32 } %354, 0, !dbg !41
  %362 = bitcast i32 %361 to float, !dbg !41
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %363 = getelementptr float, ptr addrspace(1) %128, i64 %351, !dbg !43
  %364 = getelementptr float, ptr addrspace(1) %129, i64 %351, !dbg !43
  %365 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #7, !dbg !44
  %366 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %363, i64 %365, i1 %33) #7, !dbg !44
  %367 = extractvalue { i32, i32, i32, i32 } %366, 0, !dbg !44
  %368 = extractvalue { i32, i32, i32, i32 } %366, 1, !dbg !44
  %369 = extractvalue { i32, i32, i32, i32 } %366, 2, !dbg !44
  %370 = extractvalue { i32, i32, i32, i32 } %366, 3, !dbg !44
  %371 = bitcast i32 %367 to float, !dbg !44
  %372 = bitcast i32 %368 to float, !dbg !44
  %373 = bitcast i32 %369 to float, !dbg !44
  %374 = bitcast i32 %370 to float, !dbg !44
  %375 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #7, !dbg !44
  %376 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %364, i64 %375, i1 %42) #7, !dbg !44
  %377 = extractvalue { i32, i32, i32, i32 } %376, 0, !dbg !44
  %378 = extractvalue { i32, i32, i32, i32 } %376, 1, !dbg !44
  %379 = extractvalue { i32, i32, i32, i32 } %376, 2, !dbg !44
  %380 = extractvalue { i32, i32, i32, i32 } %376, 3, !dbg !44
  %381 = bitcast i32 %377 to float, !dbg !44
  %382 = bitcast i32 %378 to float, !dbg !44
  %383 = bitcast i32 %379 to float, !dbg !44
  %384 = bitcast i32 %380 to float, !dbg !44
  %385 = fmul float %.0.i23, %371, !dbg !45
  %386 = fmul float %.0.i23, %372, !dbg !45
  %387 = fmul float %.0.i23, %373, !dbg !45
  %388 = fmul float %.0.i23, %374, !dbg !45
  %389 = fmul float %.0.i35, %381, !dbg !45
  %390 = fmul float %.0.i35, %382, !dbg !45
  %391 = fmul float %.0.i35, %383, !dbg !45
  %392 = fmul float %.0.i35, %384, !dbg !45
  %393 = fmul float %385, %362, !dbg !46
  %394 = fmul float %386, %360, !dbg !46
  %395 = fmul float %387, %358, !dbg !46
  %396 = fmul float %388, %356, !dbg !46
  %397 = fmul float %389, %362, !dbg !46
  %398 = fmul float %390, %360, !dbg !46
  %399 = fmul float %391, %358, !dbg !46
  %400 = fmul float %392, %356, !dbg !46
  %401 = trunc nuw nsw i64 %351 to i32, !dbg !47
  %402 = add i32 %347, %401, !dbg !47
  %403 = add i32 %348, %401, !dbg !47
  %404 = sext i32 %402 to i64, !dbg !48
  %405 = getelementptr float, ptr addrspace(1) %3, i64 %404, !dbg !48
  %406 = sext i32 %403 to i64, !dbg !48
  %407 = getelementptr float, ptr addrspace(1) %3, i64 %406, !dbg !48
  %408 = bitcast float %393 to i32, !dbg !49
  %409 = bitcast float %394 to i32, !dbg !49
  %410 = bitcast float %395 to i32, !dbg !49
  %411 = bitcast float %396 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %408, i32 %409, i32 %410, i32 %411, ptr addrspace(1) %405, i1 %33) #7, !dbg !49
  %412 = bitcast float %397 to i32, !dbg !49
  %413 = bitcast float %398 to i32, !dbg !49
  %414 = bitcast float %399 to i32, !dbg !49
  %415 = bitcast float %400 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %412, i32 %413, i32 %414, i32 %415, ptr addrspace(1) %407, i1 %42) #7, !dbg !49
  %indvars.iv.next50 = add nuw nsw i64 %indvars.iv49, 64, !dbg !38
  %416 = icmp samesign ult i64 %indvars.iv49, 320, !dbg !38
  br i1 %416, label %350, label %417, !dbg !38

417:                                              ; preds = %350
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #5

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { "nvvm.reqntid"="512" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { convergent nocallback nounwind }
attributes #6 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "ckzqi7x2at4m3jxs6zdc46t47t6lw6nmlhnn2rg6szev4wipvslb.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/kz")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !6, file: !6, type: !7, spFlags: DISPFlagOptimized)
!6 = !DIFile(filename: "<unknown>", directory: "")
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = distinct !DISubprogram(name: "triton_red_fused_add_embedding_mean_mul_pow_rsqrt_0", linkageName: "triton_red_fused_add_embedding_mean_mul_pow_rsqrt_0", scope: !1, file: !1, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!10 = !DILocation(line: 23, column: 28, scope: !9)
!11 = !DILocation(line: 23, column: 33, scope: !9)
!12 = !DILocation(line: 24, column: 44, scope: !9)
!13 = !DILocation(line: 24, column: 23, scope: !9)
!14 = !DILocation(line: 25, column: 21, scope: !9)
!15 = !DILocation(line: 26, column: 37, scope: !9)
!16 = !DILocation(line: 29, column: 30, scope: !9)
!17 = !DILocation(line: 29, column: 35, scope: !9)
!18 = !DILocation(line: 38, column: 22, scope: !9)
!19 = !DILocation(line: 39, column: 22, scope: !9)
!20 = !DILocation(line: 40, column: 36, scope: !9)
!21 = !DILocation(line: 41, column: 68, scope: !9)
!22 = !DILocation(line: 31, column: 40, scope: !9)
!23 = !DILocation(line: 42, column: 34, scope: !9)
!24 = !DILocation(line: 42, column: 52, scope: !9)
!25 = !DILocation(line: 43, column: 22, scope: !9)
!26 = !DILocation(line: 32, column: 31, scope: !9)
!27 = !DILocation(line: 45, column: 24, scope: !9)
!28 = !DILocation(line: 46, column: 49, scope: !9)
!29 = !DILocation(line: 260, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !9, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!32 = !DILocation(line: 47, column: 25, scope: !9)
!33 = !DILocation(line: 290, column: 36, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 62, column: 24, scope: !9)
!35 = !DILocation(line: 64, column: 24, scope: !9)
!36 = !DILocation(line: 65, column: 32, scope: !9)
!37 = !DILocation(line: 68, column: 40, scope: !9)
!38 = !DILocation(line: 48, column: 40, scope: !9)
!39 = !DILocation(line: 49, column: 31, scope: !9)
!40 = !DILocation(line: 54, column: 35, scope: !9)
!41 = !DILocation(line: 54, column: 42, scope: !9)
!42 = !DILocation(line: 59, column: 70, scope: !9)
!43 = !DILocation(line: 60, column: 35, scope: !9)
!44 = !DILocation(line: 60, column: 54, scope: !9)
!45 = !DILocation(line: 66, column: 24, scope: !9)
!46 = !DILocation(line: 67, column: 24, scope: !9)
!47 = !DILocation(line: 68, column: 36, scope: !9)
!48 = !DILocation(line: 68, column: 29, scope: !9)
!49 = !DILocation(line: 68, column: 52, scope: !9)
!50 = !DILocation(line: 48, column: 4, scope: !9)
