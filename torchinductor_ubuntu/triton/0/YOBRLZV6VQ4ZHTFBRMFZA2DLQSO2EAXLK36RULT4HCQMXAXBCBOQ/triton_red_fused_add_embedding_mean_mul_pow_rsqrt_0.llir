; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [121 x i8] c"/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/ug/cuggpsc3ohxg4teqelsr3xqew2hbnyultfmksaqdqmuzrupdzg26.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 32128\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !5 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused_add_embedding_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr #1 !dbg !9 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !10
  %9 = shl i32 %8, 6, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 4, !dbg !12
  %12 = lshr i32 %10, 6, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !12
  %15 = shufflevector <2 x i32> %14, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !12
  %16 = insertelement <2 x i32> <i32 31, i32 poison>, i32 %9, i64 1, !dbg !12
  %17 = and <2 x i32> %15, %16, !dbg !12
  %18 = or disjoint <2 x i32> %15, %16, !dbg !12
  %19 = shufflevector <2 x i32> %17, <2 x i32> %18, <2 x i32> <i32 0, i32 3>, !dbg !12
  %20 = insertelement <2 x i32> <i32 poison, i32 32>, i32 %9, i64 0, !dbg !13
  %21 = or <2 x i32> %19, %20, !dbg !13
  %22 = icmp slt <2 x i32> %21, splat (i32 64), !dbg !14
  %23 = shufflevector <2 x i1> %22, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !14
  %24 = shl nuw nsw i32 %10, 2, !dbg !15
  %25 = and i32 %24, 60, !dbg !15
  %26 = extractelement <2 x i32> %21, i64 0, !dbg !16
  %27 = sext i32 %26 to i64, !dbg !16
  %28 = getelementptr i64, ptr addrspace(1) %0, i64 %27, !dbg !16
  %29 = extractelement <2 x i32> %21, i64 1, !dbg !16
  %30 = sext i32 %29 to i64, !dbg !16
  %31 = getelementptr i64, ptr addrspace(1) %0, i64 %30, !dbg !16
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %33 = extractelement <2 x i1> %22, i64 0, !dbg !17
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %28, i64 %32, i1 %33) #7, !dbg !17
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %28, i64 %35, i1 %33) #7, !dbg !17
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %28, i64 %37, i1 %33) #7, !dbg !17
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %28, i64 %39, i1 %33) #7, !dbg !17
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %42 = extractelement <2 x i1> %22, i64 1, !dbg !17
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %31, i64 %41, i1 %42) #7, !dbg !17
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %31, i64 %44, i1 %42) #7, !dbg !17
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %31, i64 %46, i1 %42) #7, !dbg !17
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %31, i64 %48, i1 %42) #7, !dbg !17
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %51 = icmp slt i64 %40, 0, !dbg !18
  %52 = icmp slt i64 %49, 0, !dbg !18
  %53 = or disjoint i32 %13, %9, !dbg !13
  %54 = or disjoint i32 %53, 8, !dbg !13
  %55 = or disjoint i32 %53, 16, !dbg !13
  %56 = or disjoint i32 %53, 24, !dbg !13
  %57 = or disjoint i32 %53, 32, !dbg !13
  %58 = or disjoint i32 %53, 40, !dbg !13
  %59 = or disjoint i32 %53, 48, !dbg !13
  %60 = or disjoint i32 %53, 56, !dbg !13
  %61 = insertelement <8 x i32> poison, i32 %53, i64 0, !dbg !14
  %62 = insertelement <8 x i32> %61, i32 %54, i64 1, !dbg !14
  %63 = insertelement <8 x i32> %62, i32 %55, i64 2, !dbg !14
  %64 = insertelement <8 x i32> %63, i32 %56, i64 3, !dbg !14
  %65 = insertelement <8 x i32> %64, i32 %57, i64 4, !dbg !14
  %66 = insertelement <8 x i32> %65, i32 %58, i64 5, !dbg !14
  %67 = insertelement <8 x i32> %66, i32 %59, i64 6, !dbg !14
  %68 = insertelement <8 x i32> %67, i32 %60, i64 7, !dbg !14
  %69 = icmp slt <8 x i32> %68, splat (i32 64), !dbg !14
  %70 = sext i32 %53 to i64, !dbg !16
  %71 = getelementptr i64, ptr addrspace(1) %0, i64 %70, !dbg !16
  %72 = sext i32 %54 to i64, !dbg !16
  %73 = getelementptr i64, ptr addrspace(1) %0, i64 %72, !dbg !16
  %74 = sext i32 %55 to i64, !dbg !16
  %75 = getelementptr i64, ptr addrspace(1) %0, i64 %74, !dbg !16
  %76 = sext i32 %56 to i64, !dbg !16
  %77 = getelementptr i64, ptr addrspace(1) %0, i64 %76, !dbg !16
  %78 = sext i32 %57 to i64, !dbg !16
  %79 = getelementptr i64, ptr addrspace(1) %0, i64 %78, !dbg !16
  %80 = sext i32 %58 to i64, !dbg !16
  %81 = getelementptr i64, ptr addrspace(1) %0, i64 %80, !dbg !16
  %82 = sext i32 %59 to i64, !dbg !16
  %83 = getelementptr i64, ptr addrspace(1) %0, i64 %82, !dbg !16
  %84 = sext i32 %60 to i64, !dbg !16
  %85 = getelementptr i64, ptr addrspace(1) %0, i64 %84, !dbg !16
  %86 = extractelement <8 x i1> %69, i64 0, !dbg !17
  %87 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %71, i64 %50, i1 %86) #7, !dbg !17
  %88 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %89 = extractelement <8 x i1> %69, i64 1, !dbg !17
  %90 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %73, i64 %88, i1 %89) #7, !dbg !17
  %91 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %92 = extractelement <8 x i1> %69, i64 2, !dbg !17
  %93 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %75, i64 %91, i1 %92) #7, !dbg !17
  %94 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %95 = extractelement <8 x i1> %69, i64 3, !dbg !17
  %96 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %77, i64 %94, i1 %95) #7, !dbg !17
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %98 = extractelement <8 x i1> %69, i64 4, !dbg !17
  %99 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %79, i64 %97, i1 %98) #7, !dbg !17
  %100 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %101 = extractelement <8 x i1> %69, i64 5, !dbg !17
  %102 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %81, i64 %100, i1 %101) #7, !dbg !17
  %103 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %104 = extractelement <8 x i1> %69, i64 6, !dbg !17
  %105 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %83, i64 %103, i1 %104) #7, !dbg !17
  %106 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !17
  %107 = extractelement <8 x i1> %69, i64 7, !dbg !17
  %108 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %85, i64 %106, i1 %107) #7, !dbg !17
  %109 = insertelement <8 x i64> poison, i64 %87, i64 0, !dbg !19
  %110 = insertelement <8 x i64> %109, i64 %90, i64 1, !dbg !19
  %111 = insertelement <8 x i64> %110, i64 %93, i64 2, !dbg !19
  %112 = insertelement <8 x i64> %111, i64 %96, i64 3, !dbg !19
  %113 = insertelement <8 x i64> %112, i64 %99, i64 4, !dbg !19
  %114 = insertelement <8 x i64> %113, i64 %102, i64 5, !dbg !19
  %115 = insertelement <8 x i64> %114, i64 %105, i64 6, !dbg !19
  %116 = insertelement <8 x i64> %115, i64 %108, i64 7, !dbg !19
  %117 = add <8 x i64> %116, splat (i64 32128), !dbg !19
  %118 = icmp slt <8 x i64> %116, zeroinitializer, !dbg !18
  %119 = select <8 x i1> %118, <8 x i64> %117, <8 x i64> %116, !dbg !20
  %120 = shl i64 %40, 9, !dbg !21
  %121 = add i64 %120, 16449536, !dbg !21
  %122 = select i1 %51, i64 %121, i64 %120, !dbg !21
  %123 = shl i64 %49, 9, !dbg !21
  %124 = add i64 %123, 16449536, !dbg !21
  %125 = select i1 %52, i64 %124, i64 %123, !dbg !21
  %126 = icmp ugt <8 x i64> %119, splat (i64 32127)
  %127 = and <8 x i1> %126, %69
  %128 = bitcast <8 x i1> %127 to i8
  %129 = icmp eq i8 %128, 0
  %130 = getelementptr float, ptr addrspace(1) %1, i64 %122
  %131 = getelementptr float, ptr addrspace(1) %1, i64 %125
  br i1 %129, label %.split, label %388, !dbg !22

.split:                                           ; preds = %7
  %132 = zext nneg i32 %25 to i64, !dbg !23
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %133 = getelementptr float, ptr addrspace(1) %130, i64 %132, !dbg !24
  %134 = getelementptr float, ptr addrspace(1) %131, i64 %132, !dbg !24
  %135 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !25
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %133, i64 %135, i1 %33) #7, !dbg !25
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !25
  %138 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !25
  %139 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !25
  %140 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !25
  %141 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !25
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %134, i64 %141, i1 %42) #7, !dbg !25
  %143 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !25
  %144 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !25
  %145 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !25
  %146 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !25
  %147 = insertelement <8 x i32> poison, i32 %137, i64 0, !dbg !25
  %148 = insertelement <8 x i32> %147, i32 %138, i64 1, !dbg !25
  %149 = insertelement <8 x i32> %148, i32 %139, i64 2, !dbg !25
  %150 = insertelement <8 x i32> %149, i32 %140, i64 3, !dbg !25
  %151 = insertelement <8 x i32> %150, i32 %143, i64 4, !dbg !25
  %152 = insertelement <8 x i32> %151, i32 %144, i64 5, !dbg !25
  %153 = insertelement <8 x i32> %152, i32 %145, i64 6, !dbg !25
  %154 = insertelement <8 x i32> %153, i32 %146, i64 7, !dbg !25
  %155 = bitcast <8 x i32> %154 to <8 x float>, !dbg !25
  %156 = fmul <8 x float> %155, %155, !dbg !26
  %157 = or disjoint i64 %132, 64, !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %158 = getelementptr float, ptr addrspace(1) %130, i64 %157, !dbg !24
  %159 = getelementptr float, ptr addrspace(1) %131, i64 %157, !dbg !24
  %160 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !25
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %158, i64 %160, i1 %33) #7, !dbg !25
  %162 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !25
  %163 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !25
  %164 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !25
  %165 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !25
  %166 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !25
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %159, i64 %166, i1 %42) #7, !dbg !25
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !25
  %169 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !25
  %170 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !25
  %171 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !25
  %172 = insertelement <8 x i32> poison, i32 %162, i64 0, !dbg !25
  %173 = insertelement <8 x i32> %172, i32 %163, i64 1, !dbg !25
  %174 = insertelement <8 x i32> %173, i32 %164, i64 2, !dbg !25
  %175 = insertelement <8 x i32> %174, i32 %165, i64 3, !dbg !25
  %176 = insertelement <8 x i32> %175, i32 %168, i64 4, !dbg !25
  %177 = insertelement <8 x i32> %176, i32 %169, i64 5, !dbg !25
  %178 = insertelement <8 x i32> %177, i32 %170, i64 6, !dbg !25
  %179 = insertelement <8 x i32> %178, i32 %171, i64 7, !dbg !25
  %180 = bitcast <8 x i32> %179 to <8 x float>, !dbg !25
  %181 = fmul <8 x float> %180, %180, !dbg !26
  %182 = fadd <8 x float> %156, %181, !dbg !28
  %183 = or disjoint i64 %132, 128, !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %184 = getelementptr float, ptr addrspace(1) %130, i64 %183, !dbg !24
  %185 = getelementptr float, ptr addrspace(1) %131, i64 %183, !dbg !24
  %186 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !25
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %184, i64 %186, i1 %33) #7, !dbg !25
  %188 = extractvalue { i32, i32, i32, i32 } %187, 0, !dbg !25
  %189 = extractvalue { i32, i32, i32, i32 } %187, 1, !dbg !25
  %190 = extractvalue { i32, i32, i32, i32 } %187, 2, !dbg !25
  %191 = extractvalue { i32, i32, i32, i32 } %187, 3, !dbg !25
  %192 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !25
  %193 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %185, i64 %192, i1 %42) #7, !dbg !25
  %194 = extractvalue { i32, i32, i32, i32 } %193, 0, !dbg !25
  %195 = extractvalue { i32, i32, i32, i32 } %193, 1, !dbg !25
  %196 = extractvalue { i32, i32, i32, i32 } %193, 2, !dbg !25
  %197 = extractvalue { i32, i32, i32, i32 } %193, 3, !dbg !25
  %198 = insertelement <8 x i32> poison, i32 %188, i64 0, !dbg !25
  %199 = insertelement <8 x i32> %198, i32 %189, i64 1, !dbg !25
  %200 = insertelement <8 x i32> %199, i32 %190, i64 2, !dbg !25
  %201 = insertelement <8 x i32> %200, i32 %191, i64 3, !dbg !25
  %202 = insertelement <8 x i32> %201, i32 %194, i64 4, !dbg !25
  %203 = insertelement <8 x i32> %202, i32 %195, i64 5, !dbg !25
  %204 = insertelement <8 x i32> %203, i32 %196, i64 6, !dbg !25
  %205 = insertelement <8 x i32> %204, i32 %197, i64 7, !dbg !25
  %206 = bitcast <8 x i32> %205 to <8 x float>, !dbg !25
  %207 = fmul <8 x float> %206, %206, !dbg !26
  %208 = fadd <8 x float> %182, %207, !dbg !28
  %209 = or disjoint i64 %132, 192, !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %210 = getelementptr float, ptr addrspace(1) %130, i64 %209, !dbg !24
  %211 = getelementptr float, ptr addrspace(1) %131, i64 %209, !dbg !24
  %212 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !25
  %213 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %210, i64 %212, i1 %33) #7, !dbg !25
  %214 = extractvalue { i32, i32, i32, i32 } %213, 0, !dbg !25
  %215 = extractvalue { i32, i32, i32, i32 } %213, 1, !dbg !25
  %216 = extractvalue { i32, i32, i32, i32 } %213, 2, !dbg !25
  %217 = extractvalue { i32, i32, i32, i32 } %213, 3, !dbg !25
  %218 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !25
  %219 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %211, i64 %218, i1 %42) #7, !dbg !25
  %220 = extractvalue { i32, i32, i32, i32 } %219, 0, !dbg !25
  %221 = extractvalue { i32, i32, i32, i32 } %219, 1, !dbg !25
  %222 = extractvalue { i32, i32, i32, i32 } %219, 2, !dbg !25
  %223 = extractvalue { i32, i32, i32, i32 } %219, 3, !dbg !25
  %224 = insertelement <8 x i32> poison, i32 %214, i64 0, !dbg !25
  %225 = insertelement <8 x i32> %224, i32 %215, i64 1, !dbg !25
  %226 = insertelement <8 x i32> %225, i32 %216, i64 2, !dbg !25
  %227 = insertelement <8 x i32> %226, i32 %217, i64 3, !dbg !25
  %228 = insertelement <8 x i32> %227, i32 %220, i64 4, !dbg !25
  %229 = insertelement <8 x i32> %228, i32 %221, i64 5, !dbg !25
  %230 = insertelement <8 x i32> %229, i32 %222, i64 6, !dbg !25
  %231 = insertelement <8 x i32> %230, i32 %223, i64 7, !dbg !25
  %232 = bitcast <8 x i32> %231 to <8 x float>, !dbg !25
  %233 = fmul <8 x float> %232, %232, !dbg !26
  %234 = fadd <8 x float> %208, %233, !dbg !28
  %235 = or disjoint i64 %132, 256, !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %236 = getelementptr float, ptr addrspace(1) %130, i64 %235, !dbg !24
  %237 = getelementptr float, ptr addrspace(1) %131, i64 %235, !dbg !24
  %238 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !25
  %239 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %236, i64 %238, i1 %33) #7, !dbg !25
  %240 = extractvalue { i32, i32, i32, i32 } %239, 0, !dbg !25
  %241 = extractvalue { i32, i32, i32, i32 } %239, 1, !dbg !25
  %242 = extractvalue { i32, i32, i32, i32 } %239, 2, !dbg !25
  %243 = extractvalue { i32, i32, i32, i32 } %239, 3, !dbg !25
  %244 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !25
  %245 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %237, i64 %244, i1 %42) #7, !dbg !25
  %246 = extractvalue { i32, i32, i32, i32 } %245, 0, !dbg !25
  %247 = extractvalue { i32, i32, i32, i32 } %245, 1, !dbg !25
  %248 = extractvalue { i32, i32, i32, i32 } %245, 2, !dbg !25
  %249 = extractvalue { i32, i32, i32, i32 } %245, 3, !dbg !25
  %250 = insertelement <8 x i32> poison, i32 %240, i64 0, !dbg !25
  %251 = insertelement <8 x i32> %250, i32 %241, i64 1, !dbg !25
  %252 = insertelement <8 x i32> %251, i32 %242, i64 2, !dbg !25
  %253 = insertelement <8 x i32> %252, i32 %243, i64 3, !dbg !25
  %254 = insertelement <8 x i32> %253, i32 %246, i64 4, !dbg !25
  %255 = insertelement <8 x i32> %254, i32 %247, i64 5, !dbg !25
  %256 = insertelement <8 x i32> %255, i32 %248, i64 6, !dbg !25
  %257 = insertelement <8 x i32> %256, i32 %249, i64 7, !dbg !25
  %258 = bitcast <8 x i32> %257 to <8 x float>, !dbg !25
  %259 = fmul <8 x float> %258, %258, !dbg !26
  %260 = fadd <8 x float> %234, %259, !dbg !28
  %261 = or disjoint i64 %132, 320, !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %262 = getelementptr float, ptr addrspace(1) %130, i64 %261, !dbg !24
  %263 = getelementptr float, ptr addrspace(1) %131, i64 %261, !dbg !24
  %264 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !25
  %265 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %262, i64 %264, i1 %33) #7, !dbg !25
  %266 = extractvalue { i32, i32, i32, i32 } %265, 0, !dbg !25
  %267 = extractvalue { i32, i32, i32, i32 } %265, 1, !dbg !25
  %268 = extractvalue { i32, i32, i32, i32 } %265, 2, !dbg !25
  %269 = extractvalue { i32, i32, i32, i32 } %265, 3, !dbg !25
  %270 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !25
  %271 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %263, i64 %270, i1 %42) #7, !dbg !25
  %272 = extractvalue { i32, i32, i32, i32 } %271, 0, !dbg !25
  %273 = extractvalue { i32, i32, i32, i32 } %271, 1, !dbg !25
  %274 = extractvalue { i32, i32, i32, i32 } %271, 2, !dbg !25
  %275 = extractvalue { i32, i32, i32, i32 } %271, 3, !dbg !25
  %276 = insertelement <8 x i32> poison, i32 %266, i64 0, !dbg !25
  %277 = insertelement <8 x i32> %276, i32 %267, i64 1, !dbg !25
  %278 = insertelement <8 x i32> %277, i32 %268, i64 2, !dbg !25
  %279 = insertelement <8 x i32> %278, i32 %269, i64 3, !dbg !25
  %280 = insertelement <8 x i32> %279, i32 %272, i64 4, !dbg !25
  %281 = insertelement <8 x i32> %280, i32 %273, i64 5, !dbg !25
  %282 = insertelement <8 x i32> %281, i32 %274, i64 6, !dbg !25
  %283 = insertelement <8 x i32> %282, i32 %275, i64 7, !dbg !25
  %284 = bitcast <8 x i32> %283 to <8 x float>, !dbg !25
  %285 = fmul <8 x float> %284, %284, !dbg !26
  %286 = fadd <8 x float> %260, %285, !dbg !28
  %287 = or disjoint i64 %132, 384, !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %288 = getelementptr float, ptr addrspace(1) %130, i64 %287, !dbg !24
  %289 = getelementptr float, ptr addrspace(1) %131, i64 %287, !dbg !24
  %290 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !25
  %291 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %288, i64 %290, i1 %33) #7, !dbg !25
  %292 = extractvalue { i32, i32, i32, i32 } %291, 0, !dbg !25
  %293 = extractvalue { i32, i32, i32, i32 } %291, 1, !dbg !25
  %294 = extractvalue { i32, i32, i32, i32 } %291, 2, !dbg !25
  %295 = extractvalue { i32, i32, i32, i32 } %291, 3, !dbg !25
  %296 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !25
  %297 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %289, i64 %296, i1 %42) #7, !dbg !25
  %298 = extractvalue { i32, i32, i32, i32 } %297, 0, !dbg !25
  %299 = extractvalue { i32, i32, i32, i32 } %297, 1, !dbg !25
  %300 = extractvalue { i32, i32, i32, i32 } %297, 2, !dbg !25
  %301 = extractvalue { i32, i32, i32, i32 } %297, 3, !dbg !25
  %302 = insertelement <8 x i32> poison, i32 %292, i64 0, !dbg !25
  %303 = insertelement <8 x i32> %302, i32 %293, i64 1, !dbg !25
  %304 = insertelement <8 x i32> %303, i32 %294, i64 2, !dbg !25
  %305 = insertelement <8 x i32> %304, i32 %295, i64 3, !dbg !25
  %306 = insertelement <8 x i32> %305, i32 %298, i64 4, !dbg !25
  %307 = insertelement <8 x i32> %306, i32 %299, i64 5, !dbg !25
  %308 = insertelement <8 x i32> %307, i32 %300, i64 6, !dbg !25
  %309 = insertelement <8 x i32> %308, i32 %301, i64 7, !dbg !25
  %310 = bitcast <8 x i32> %309 to <8 x float>, !dbg !25
  %311 = fmul <8 x float> %310, %310, !dbg !26
  %312 = fadd <8 x float> %286, %311, !dbg !28
  %313 = or disjoint i64 %132, 448, !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %314 = getelementptr float, ptr addrspace(1) %130, i64 %313, !dbg !24
  %315 = getelementptr float, ptr addrspace(1) %131, i64 %313, !dbg !24
  %316 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !25
  %317 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %314, i64 %316, i1 %33) #7, !dbg !25
  %318 = extractvalue { i32, i32, i32, i32 } %317, 0, !dbg !25
  %319 = extractvalue { i32, i32, i32, i32 } %317, 1, !dbg !25
  %320 = extractvalue { i32, i32, i32, i32 } %317, 2, !dbg !25
  %321 = extractvalue { i32, i32, i32, i32 } %317, 3, !dbg !25
  %322 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !25
  %323 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %315, i64 %322, i1 %42) #7, !dbg !25
  %324 = extractvalue { i32, i32, i32, i32 } %323, 0, !dbg !25
  %325 = extractvalue { i32, i32, i32, i32 } %323, 1, !dbg !25
  %326 = extractvalue { i32, i32, i32, i32 } %323, 2, !dbg !25
  %327 = extractvalue { i32, i32, i32, i32 } %323, 3, !dbg !25
  %328 = insertelement <8 x i32> poison, i32 %318, i64 0, !dbg !25
  %329 = insertelement <8 x i32> %328, i32 %319, i64 1, !dbg !25
  %330 = insertelement <8 x i32> %329, i32 %320, i64 2, !dbg !25
  %331 = insertelement <8 x i32> %330, i32 %321, i64 3, !dbg !25
  %332 = insertelement <8 x i32> %331, i32 %324, i64 4, !dbg !25
  %333 = insertelement <8 x i32> %332, i32 %325, i64 5, !dbg !25
  %334 = insertelement <8 x i32> %333, i32 %326, i64 6, !dbg !25
  %335 = insertelement <8 x i32> %334, i32 %327, i64 7, !dbg !25
  %336 = bitcast <8 x i32> %335 to <8 x float>, !dbg !25
  %337 = fmul <8 x float> %336, %336, !dbg !26
  %338 = fadd <8 x float> %312, %337, !dbg !28
  %339 = select <8 x i1> %23, <8 x float> %338, <8 x float> zeroinitializer, !dbg !29
  %shift = shufflevector <8 x float> %339, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %340 = fadd <8 x float> %339, %shift, !dbg !30
  %shift67 = shufflevector <8 x float> %339, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %341 = fadd <8 x float> %shift67, %340, !dbg !30
  %shift68 = shufflevector <8 x float> %339, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %342 = fadd <8 x float> %shift68, %341, !dbg !30
  %343 = extractelement <8 x float> %342, i64 0, !dbg !30
  %shift69 = shufflevector <8 x float> %339, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 5, i32 poison, i32 poison, i32 poison>, !dbg !30
  %344 = fadd <8 x float> %339, %shift69, !dbg !30
  %shift70 = shufflevector <8 x float> %339, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 6, i32 poison, i32 poison, i32 poison>, !dbg !30
  %345 = fadd <8 x float> %shift70, %344, !dbg !30
  %shift71 = shufflevector <8 x float> %339, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 7, i32 poison, i32 poison, i32 poison>, !dbg !30
  %346 = fadd <8 x float> %shift71, %345, !dbg !30
  %347 = extractelement <8 x float> %346, i64 4, !dbg !30
  %348 = bitcast float %343 to i32, !dbg !34
  %349 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %348, i32 8, i32 31), !dbg !34
  %350 = bitcast i32 %349 to float, !dbg !34
  %351 = fadd float %343, %350, !dbg !30
  %352 = bitcast float %351 to i32, !dbg !34
  %353 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %352, i32 4, i32 31), !dbg !34
  %354 = bitcast i32 %353 to float, !dbg !34
  %355 = fadd float %351, %354, !dbg !30
  %356 = bitcast float %355 to i32, !dbg !34
  %357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 2, i32 31), !dbg !34
  %358 = bitcast i32 %357 to float, !dbg !34
  %359 = fadd float %355, %358, !dbg !30
  %360 = bitcast float %359 to i32, !dbg !34
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 1, i32 31), !dbg !34
  %362 = bitcast i32 %361 to float, !dbg !34
  %363 = fadd float %359, %362, !dbg !30
  %364 = bitcast float %347 to i32, !dbg !34
  %365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 8, i32 31), !dbg !34
  %366 = bitcast i32 %365 to float, !dbg !34
  %367 = fadd float %347, %366, !dbg !30
  %368 = bitcast float %367 to i32, !dbg !34
  %369 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %368, i32 4, i32 31), !dbg !34
  %370 = bitcast i32 %369 to float, !dbg !34
  %371 = fadd float %367, %370, !dbg !30
  %372 = bitcast float %371 to i32, !dbg !34
  %373 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %372, i32 2, i32 31), !dbg !34
  %374 = bitcast i32 %373 to float, !dbg !34
  %375 = fadd float %371, %374, !dbg !30
  %376 = bitcast float %375 to i32, !dbg !34
  %377 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %376, i32 1, i32 31), !dbg !34
  %378 = bitcast i32 %377 to float, !dbg !34
  %379 = fadd float %375, %378, !dbg !30
  %380 = tail call float @llvm.nvvm.div.full(float %363, float 5.120000e+02), !dbg !35
  %381 = tail call float @llvm.nvvm.div.full(float %379, float 5.120000e+02), !dbg !35
  %382 = fadd float %380, 0x3EB0C6F7A0000000, !dbg !36
  %383 = fadd float %381, 0x3EB0C6F7A0000000, !dbg !36
  %384 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !37
  %385 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !37
  %386 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !37
  %387 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !37
  %.not.i22 = icmp eq i32 %387, 0, !dbg !37
  br i1 %.not.i22, label %391, label %389, !dbg !37

388:                                              ; preds = %7
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 41, ptr nonnull @assertFunc_0, i64 1), !dbg !22
  unreachable, !dbg !22

389:                                              ; preds = %.split
  %390 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %382), !dbg !37
  br label %__nv_rsqrtf.exit24, !dbg !37

391:                                              ; preds = %.split
  %392 = tail call float @llvm.nvvm.rsqrt.approx.f(float %382), !dbg !37
  br label %__nv_rsqrtf.exit24, !dbg !37

__nv_rsqrtf.exit24:                               ; preds = %389, %391
  %.0.i23 = phi float [ %390, %389 ], [ %392, %391 ], !dbg !37
  %393 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !37
  %394 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !37
  %395 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !37
  %396 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !37
  %.not.i34 = icmp eq i32 %396, 0, !dbg !37
  br i1 %.not.i34, label %399, label %397, !dbg !37

397:                                              ; preds = %__nv_rsqrtf.exit24
  %398 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %383), !dbg !37
  br label %__nv_rsqrtf.exit36, !dbg !37

399:                                              ; preds = %__nv_rsqrtf.exit24
  %400 = tail call float @llvm.nvvm.rsqrt.approx.f(float %383), !dbg !37
  br label %__nv_rsqrtf.exit36, !dbg !37

__nv_rsqrtf.exit36:                               ; preds = %397, %399
  %.0.i35 = phi float [ %398, %397 ], [ %400, %399 ], !dbg !37
  %401 = shl i32 %26, 9, !dbg !38
  %402 = shl i32 %29, 9, !dbg !38
  %403 = zext nneg i32 %25 to i64, !dbg !39
  %404 = sext i32 %401 to i64, !dbg !39
  %405 = sext i32 %402 to i64, !dbg !39
  %invariant.gep = getelementptr float, ptr addrspace(1) %3, i64 %404, !dbg !39
  %invariant.gep58 = getelementptr float, ptr addrspace(1) %3, i64 %405, !dbg !39
  br label %406, !dbg !39

406:                                              ; preds = %406, %__nv_rsqrtf.exit36
  %indvars.iv49 = phi i64 [ 0, %__nv_rsqrtf.exit36 ], [ %indvars.iv.next50, %406 ]
  %407 = or disjoint i64 %indvars.iv49, %403, !dbg !40
  %408 = getelementptr float, ptr addrspace(1) %2, i64 %407, !dbg !41
  %409 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !42
  %410 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %408, i64 %409, i1 true) #7, !dbg !42
  %411 = extractvalue { i32, i32, i32, i32 } %410, 3, !dbg !42
  %412 = bitcast i32 %411 to float, !dbg !42
  %413 = extractvalue { i32, i32, i32, i32 } %410, 2, !dbg !42
  %414 = bitcast i32 %413 to float, !dbg !42
  %415 = extractvalue { i32, i32, i32, i32 } %410, 1, !dbg !42
  %416 = bitcast i32 %415 to float, !dbg !42
  %417 = extractvalue { i32, i32, i32, i32 } %410, 0, !dbg !42
  %418 = bitcast i32 %417 to float, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !43
  %419 = getelementptr float, ptr addrspace(1) %130, i64 %407, !dbg !44
  %420 = getelementptr float, ptr addrspace(1) %131, i64 %407, !dbg !44
  %421 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #7, !dbg !45
  %422 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %419, i64 %421, i1 %33) #7, !dbg !45
  %423 = extractvalue { i32, i32, i32, i32 } %422, 0, !dbg !45
  %424 = extractvalue { i32, i32, i32, i32 } %422, 1, !dbg !45
  %425 = extractvalue { i32, i32, i32, i32 } %422, 2, !dbg !45
  %426 = extractvalue { i32, i32, i32, i32 } %422, 3, !dbg !45
  %427 = bitcast i32 %423 to float, !dbg !45
  %428 = bitcast i32 %424 to float, !dbg !45
  %429 = bitcast i32 %425 to float, !dbg !45
  %430 = bitcast i32 %426 to float, !dbg !45
  %431 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #7, !dbg !45
  %432 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %420, i64 %431, i1 %42) #7, !dbg !45
  %433 = extractvalue { i32, i32, i32, i32 } %432, 0, !dbg !45
  %434 = extractvalue { i32, i32, i32, i32 } %432, 1, !dbg !45
  %435 = extractvalue { i32, i32, i32, i32 } %432, 2, !dbg !45
  %436 = extractvalue { i32, i32, i32, i32 } %432, 3, !dbg !45
  %437 = bitcast i32 %433 to float, !dbg !45
  %438 = bitcast i32 %434 to float, !dbg !45
  %439 = bitcast i32 %435 to float, !dbg !45
  %440 = bitcast i32 %436 to float, !dbg !45
  %441 = fmul float %.0.i23, %427, !dbg !46
  %442 = fmul float %.0.i23, %428, !dbg !46
  %443 = fmul float %.0.i23, %429, !dbg !46
  %444 = fmul float %.0.i23, %430, !dbg !46
  %445 = fmul float %.0.i35, %437, !dbg !46
  %446 = fmul float %.0.i35, %438, !dbg !46
  %447 = fmul float %.0.i35, %439, !dbg !46
  %448 = fmul float %.0.i35, %440, !dbg !46
  %449 = fmul float %441, %418, !dbg !47
  %450 = fmul float %442, %416, !dbg !47
  %451 = fmul float %443, %414, !dbg !47
  %452 = fmul float %444, %412, !dbg !47
  %453 = fmul float %445, %418, !dbg !47
  %454 = fmul float %446, %416, !dbg !47
  %455 = fmul float %447, %414, !dbg !47
  %456 = fmul float %448, %412, !dbg !47
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %407, !dbg !48
  %gep59 = getelementptr float, ptr addrspace(1) %invariant.gep58, i64 %407, !dbg !48
  %457 = bitcast float %449 to i32, !dbg !49
  %458 = bitcast float %450 to i32, !dbg !49
  %459 = bitcast float %451 to i32, !dbg !49
  %460 = bitcast float %452 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %457, i32 %458, i32 %459, i32 %460, ptr addrspace(1) %gep, i1 %33) #7, !dbg !49
  %461 = bitcast float %453 to i32, !dbg !49
  %462 = bitcast float %454 to i32, !dbg !49
  %463 = bitcast float %455 to i32, !dbg !49
  %464 = bitcast float %456 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %461, i32 %462, i32 %463, i32 %464, ptr addrspace(1) %gep59, i1 %42) #7, !dbg !49
  %indvars.iv.next50 = add nuw nsw i64 %indvars.iv49, 64, !dbg !39
  %465 = icmp samesign ult i64 %indvars.iv49, 448, !dbg !39
  br i1 %465, label %406, label %466, !dbg !39

466:                                              ; preds = %406
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #5

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { "nvvm.reqntid"="512" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { convergent nocallback nounwind }
attributes #6 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "cuggpsc3ohxg4teqelsr3xqew2hbnyultfmksaqdqmuzrupdzg26.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/ug")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !6, file: !6, type: !7, spFlags: DISPFlagOptimized)
!6 = !DIFile(filename: "<unknown>", directory: "")
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = distinct !DISubprogram(name: "triton_red_fused_add_embedding_mean_mul_pow_rsqrt_0", linkageName: "triton_red_fused_add_embedding_mean_mul_pow_rsqrt_0", scope: !1, file: !1, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!10 = !DILocation(line: 23, column: 28, scope: !9)
!11 = !DILocation(line: 23, column: 33, scope: !9)
!12 = !DILocation(line: 24, column: 44, scope: !9)
!13 = !DILocation(line: 24, column: 23, scope: !9)
!14 = !DILocation(line: 25, column: 21, scope: !9)
!15 = !DILocation(line: 26, column: 37, scope: !9)
!16 = !DILocation(line: 29, column: 30, scope: !9)
!17 = !DILocation(line: 29, column: 35, scope: !9)
!18 = !DILocation(line: 39, column: 22, scope: !9)
!19 = !DILocation(line: 38, column: 22, scope: !9)
!20 = !DILocation(line: 40, column: 36, scope: !9)
!21 = !DILocation(line: 42, column: 45, scope: !9)
!22 = !DILocation(line: 41, column: 68, scope: !9)
!23 = !DILocation(line: 31, column: 40, scope: !9)
!24 = !DILocation(line: 42, column: 34, scope: !9)
!25 = !DILocation(line: 42, column: 52, scope: !9)
!26 = !DILocation(line: 43, column: 22, scope: !9)
!27 = !DILocation(line: 32, column: 31, scope: !9)
!28 = !DILocation(line: 45, column: 24, scope: !9)
!29 = !DILocation(line: 46, column: 49, scope: !9)
!30 = !DILocation(line: 260, column: 15, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !9, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!33 = !DILocation(line: 47, column: 25, scope: !9)
!34 = !DILocation(line: 290, column: 36, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 62, column: 24, scope: !9)
!36 = !DILocation(line: 64, column: 24, scope: !9)
!37 = !DILocation(line: 65, column: 32, scope: !9)
!38 = !DILocation(line: 68, column: 40, scope: !9)
!39 = !DILocation(line: 48, column: 40, scope: !9)
!40 = !DILocation(line: 49, column: 31, scope: !9)
!41 = !DILocation(line: 54, column: 35, scope: !9)
!42 = !DILocation(line: 54, column: 42, scope: !9)
!43 = !DILocation(line: 59, column: 70, scope: !9)
!44 = !DILocation(line: 60, column: 35, scope: !9)
!45 = !DILocation(line: 60, column: 54, scope: !9)
!46 = !DILocation(line: 66, column: 24, scope: !9)
!47 = !DILocation(line: 67, column: 24, scope: !9)
!48 = !DILocation(line: 68, column: 29, scope: !9)
!49 = !DILocation(line: 68, column: 52, scope: !9)
!50 = !DILocation(line: 48, column: 4, scope: !9)
