; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [121 x i8] c"/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/nf/cnfehoh4k6l3otcz6shdp3chj7l7akuk6bepi5ielbhql6xqmt2v.py\00"
@assertMessage_0 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp27 < 32\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !5 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_per_fused__softmax__to_copy_add_mul_rsub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr #1 !dbg !9 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !10
  %10 = shl i32 %9, 3, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 64, !dbg !12
  %.lobit2 = lshr i32 %11, 5, !dbg !12
  %13 = and i32 %.lobit2, 3, !dbg !12
  %.lobit = lshr exact i32 %12, 6, !dbg !12
  %14 = or disjoint i32 %13, %10, !dbg !13
  %15 = or disjoint i32 %14, 4, !dbg !13
  %16 = icmp slt i32 %14, 400, !dbg !14
  %17 = icmp slt i32 %15, 400, !dbg !14
  %18 = lshr i32 %11, 3, !dbg !15
  %19 = and i32 %18, 7, !dbg !15
  %20 = lshr exact i32 %12, 3, !dbg !15
  %21 = or disjoint i32 %19, %20, !dbg !15
  %22 = or disjoint i32 %21, 48, !dbg !15
  %23 = shl nuw nsw i32 %11, 1, !dbg !15
  %24 = and i32 %23, 62, !dbg !15
  %25 = and i32 %11, 63, !dbg !15
  %26 = icmp samesign ult i32 %22, 50, !dbg !16
  %27 = icmp samesign ult i32 %24, 50, !dbg !16
  %28 = icmp samesign ult i32 %25, 50, !dbg !16
  %29 = zext nneg i32 %21 to i64, !dbg !17
  %30 = getelementptr i64, ptr addrspace(1) %1, i64 %29, !dbg !17
  %31 = getelementptr i8, ptr addrspace(1) %30, i64 128, !dbg !17
  %32 = getelementptr i8, ptr addrspace(1) %30, i64 256, !dbg !17
  %33 = zext nneg i32 %22 to i64, !dbg !17
  %34 = getelementptr i64, ptr addrspace(1) %1, i64 %33, !dbg !17
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !18
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %30, i64 %35, i1 true) #8, !dbg !18
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !18
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %31, i64 %37, i1 true) #8, !dbg !18
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !18
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %32, i64 %39, i1 true) #8, !dbg !18
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !18
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %34, i64 %41, i1 %26) #8, !dbg !18
  %43 = mul i32 %14, 50, !dbg !19
  %44 = mul i32 %15, 50, !dbg !19
  %45 = add i32 %43, %24, !dbg !20
  %46 = add i32 %44, %24, !dbg !20
  %47 = sext i32 %45 to i64, !dbg !21
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !21
  %49 = sext i32 %46 to i64, !dbg !21
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !21
  %51 = and i1 %27, %16, !dbg !22
  %52 = and i1 %27, %17, !dbg !22
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %48, i1 %51) #8, !dbg !23
  %54 = extractvalue { i32, i32 } %53, 0, !dbg !23
  %55 = extractvalue { i32, i32 } %53, 1, !dbg !23
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %50, i1 %52) #8, !dbg !23
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !23
  %58 = extractvalue { i32, i32 } %56, 1, !dbg !23
  %59 = and i32 %23, 254, !dbg !23
  %60 = shl nuw nsw i32 %11, 6, !dbg !23
  %61 = and i32 %60, 448, !dbg !23
  %62 = or disjoint i32 %61, %19, !dbg !23
  %63 = or disjoint i32 %62, %20, !dbg !23
  %64 = lshr i32 %11, 4, !dbg !23
  %65 = and i32 %64, 6, !dbg !23
  %66 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %65, !dbg !23
  %67 = getelementptr inbounds nuw float, ptr addrspace(3) %66, i32 %59, !dbg !23
  %68 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !23
  %69 = insertelement <2 x i32> %68, i32 %55, i64 1, !dbg !23
  store <2 x i32> %69, ptr addrspace(3) %67, align 8, !dbg !23
  %70 = or disjoint i32 %59, 256, !dbg !23
  %71 = lshr i32 %70, 5, !dbg !23
  %72 = and i32 %71, 14, !dbg !23
  %73 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %72, !dbg !23
  %74 = getelementptr inbounds nuw float, ptr addrspace(3) %73, i32 %70, !dbg !23
  %75 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !23
  %76 = insertelement <2 x i32> %75, i32 %58, i64 1, !dbg !23
  store <2 x i32> %76, ptr addrspace(3) %74, align 8, !dbg !23
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !23
  %77 = lshr exact i32 %61, 3, !dbg !23
  %78 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %77, !dbg !23
  %79 = getelementptr inbounds nuw float, ptr addrspace(3) %78, i32 %63, !dbg !23
  %80 = load float, ptr addrspace(3) %79, align 4, !dbg !23
  %81 = or disjoint i32 %63, 16, !dbg !23
  %82 = getelementptr inbounds nuw float, ptr addrspace(3) %78, i32 %81, !dbg !23
  %83 = load float, ptr addrspace(3) %82, align 4, !dbg !23
  %84 = or disjoint i32 %63, 32, !dbg !23
  %85 = getelementptr inbounds nuw float, ptr addrspace(3) %78, i32 %84, !dbg !23
  %86 = load float, ptr addrspace(3) %85, align 4, !dbg !23
  %87 = or disjoint i32 %63, 48, !dbg !23
  %88 = getelementptr inbounds nuw float, ptr addrspace(3) %78, i32 %87, !dbg !23
  %89 = load float, ptr addrspace(3) %88, align 4, !dbg !23
  %90 = or disjoint i32 %.lobit, %10, !dbg !13
  %91 = or disjoint i32 %90, 2, !dbg !13
  %92 = or disjoint i32 %90, 4, !dbg !13
  %93 = or disjoint i32 %90, 6, !dbg !13
  %94 = insertelement <4 x i32> poison, i32 %90, i64 0, !dbg !14
  %95 = insertelement <4 x i32> %94, i32 %91, i64 1, !dbg !14
  %96 = insertelement <4 x i32> %95, i32 %92, i64 2, !dbg !14
  %97 = insertelement <4 x i32> %96, i32 %93, i64 3, !dbg !14
  %98 = icmp slt <4 x i32> %97, splat (i32 400), !dbg !14
  %99 = srem <4 x i32> %97, splat (i32 50), !dbg !24
  %100 = insertelement <4 x i32> poison, i32 %25, i64 0, !dbg !25
  %101 = shufflevector <4 x i32> %100, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !25
  %102 = sub nsw <4 x i32> %101, %99, !dbg !25
  %103 = icmp sgt <4 x i32> %102, zeroinitializer, !dbg !26
  %104 = select <4 x i1> %103, <4 x i64> splat (i64 16), <4 x i64> zeroinitializer, !dbg !27
  %105 = tail call <4 x i32> @llvm.abs.v4i32(<4 x i32> %102, i1 true), !dbg !28
  %106 = zext nneg <4 x i32> %105 to <4 x i64>, !dbg !29
  %107 = icmp samesign ult <4 x i32> %105, splat (i32 8), !dbg !29
  %108 = extractelement <4 x i32> %105, i64 0, !dbg !30
  %109 = uitofp nneg i32 %108 to float, !dbg !30
  %110 = extractelement <4 x i32> %105, i64 1, !dbg !30
  %111 = uitofp nneg i32 %110 to float, !dbg !30
  %112 = extractelement <4 x i32> %105, i64 2, !dbg !30
  %113 = uitofp nneg i32 %112 to float, !dbg !30
  %114 = extractelement <4 x i32> %105, i64 3, !dbg !30
  %115 = uitofp nneg i32 %114 to float, !dbg !30
  %116 = fmul float %109, 1.250000e-01, !dbg !31
  %117 = fmul float %111, 1.250000e-01, !dbg !31
  %118 = fmul float %113, 1.250000e-01, !dbg !31
  %119 = fmul float %115, 1.250000e-01, !dbg !31
  %120 = fcmp olt float %116, 0x3810000000000000, !dbg !32
  %121 = fmul float %116, 0x4160000000000000, !dbg !32
  %.02.i = select i1 %120, float %121, float %116, !dbg !32
  %i.i.0.i = select i1 %120, float -2.300000e+01, float 0.000000e+00, !dbg !32
  %122 = bitcast float %.02.i to i32, !dbg !32
  %123 = add nsw i32 %122, -1059760811, !dbg !32
  %124 = and i32 %123, -8388608, !dbg !32
  %125 = sub i32 %122, %124, !dbg !32
  %126 = bitcast i32 %125 to float, !dbg !32
  %127 = sitofp i32 %124 to float, !dbg !32
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not.i = icmp eq i32 %128, 0, !dbg !32
  %129 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %127, float 0x3E80000000000000, float %i.i.0.i) #8, !dbg !32
  %130 = tail call float @llvm.nvvm.fma.rn.f(float %127, float 0x3E80000000000000, float %i.i.0.i) #8, !dbg !32
  %.08.i = select i1 %.not.i, float %130, float %129, !dbg !32
  %131 = fadd float %126, -1.000000e+00, !dbg !32
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not1.i = icmp eq i32 %132, 0, !dbg !32
  %133 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %131, float 0x3FC2073EC0000000) #8, !dbg !32
  %134 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %131, float 0x3FC2073EC0000000) #8, !dbg !32
  %.010.i = select i1 %.not1.i, float %134, float %133, !dbg !32
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not2.i = icmp eq i32 %135, 0, !dbg !32
  %136 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %131, float 0xBFBF19B980000000) #8, !dbg !32
  %137 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %131, float 0xBFBF19B980000000) #8, !dbg !32
  %.011.i = select i1 %.not2.i, float %137, float %136, !dbg !32
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not3.i = icmp eq i32 %138, 0, !dbg !32
  %139 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %131, float 0x3FC1E52AA0000000) #8, !dbg !32
  %140 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %131, float 0x3FC1E52AA0000000) #8, !dbg !32
  %.012.i = select i1 %.not3.i, float %140, float %139, !dbg !32
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not4.i = icmp eq i32 %141, 0, !dbg !32
  %142 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %131, float 0xBFC55B1720000000) #8, !dbg !32
  %143 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %131, float 0xBFC55B1720000000) #8, !dbg !32
  %.09.i = select i1 %.not4.i, float %143, float %142, !dbg !32
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not5.i = icmp eq i32 %144, 0, !dbg !32
  %145 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %131, float 0x3FC99DA160000000) #8, !dbg !32
  %146 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %131, float 0x3FC99DA160000000) #8, !dbg !32
  %.05.i = select i1 %.not5.i, float %146, float %145, !dbg !32
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not6.i = icmp eq i32 %147, 0, !dbg !32
  %148 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %131, float 0xBFCFFFE440000000) #8, !dbg !32
  %149 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %131, float 0xBFCFFFE440000000) #8, !dbg !32
  %.01.i = select i1 %.not6.i, float %149, float %148, !dbg !32
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not7.i = icmp eq i32 %150, 0, !dbg !32
  %151 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %131, float 0x3FD5554F00000000) #8, !dbg !32
  %152 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %131, float 0x3FD5554F00000000) #8, !dbg !32
  %.0.i = select i1 %.not7.i, float %152, float %151, !dbg !32
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not8.i = icmp eq i32 %153, 0, !dbg !32
  %154 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %131, float -5.000000e-01) #8, !dbg !32
  %155 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %131, float -5.000000e-01) #8, !dbg !32
  %.07.i = select i1 %.not8.i, float %155, float %154, !dbg !32
  %156 = fmul float %131, %.07.i, !dbg !32
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not9.i = icmp eq i32 %157, 0, !dbg !32
  %158 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %156, float %131, float %131) #8, !dbg !32
  %159 = tail call float @llvm.nvvm.fma.rn.f(float %156, float %131, float %131) #8, !dbg !32
  %.06.i = select i1 %.not9.i, float %159, float %158, !dbg !32
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not10.i = icmp eq i32 %160, 0, !dbg !32
  %161 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #8, !dbg !32
  %162 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #8, !dbg !32
  %.04.i = select i1 %.not10.i, float %162, float %161, !dbg !32
  %163 = icmp samesign ugt i32 %122, 2139095039, !dbg !32
  br i1 %163, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !32

__nv_fmaf_rn.exit.i.i:                            ; preds = %8
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not11.i = icmp eq i32 %164, 0, !dbg !32
  %165 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !32
  %166 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !32
  %.03.i = select i1 %.not11.i, float %166, float %165, !dbg !32
  br label %__nv_logf.exit, !dbg !32

__nv_logf.exit:                                   ; preds = %8, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %8 ], !dbg !32
  %167 = fcmp olt float %117, 0x3810000000000000, !dbg !32
  %168 = fmul float %117, 0x4160000000000000, !dbg !32
  %.02.i27 = select i1 %167, float %168, float %117, !dbg !32
  %i.i.0.i28 = select i1 %167, float -2.300000e+01, float 0.000000e+00, !dbg !32
  %169 = bitcast float %.02.i27 to i32, !dbg !32
  %170 = add nsw i32 %169, -1059760811, !dbg !32
  %171 = and i32 %170, -8388608, !dbg !32
  %172 = sub i32 %169, %171, !dbg !32
  %173 = bitcast i32 %172 to float, !dbg !32
  %174 = sitofp i32 %171 to float, !dbg !32
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not.i29 = icmp eq i32 %175, 0, !dbg !32
  %176 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %174, float 0x3E80000000000000, float %i.i.0.i28) #8, !dbg !32
  %177 = tail call float @llvm.nvvm.fma.rn.f(float %174, float 0x3E80000000000000, float %i.i.0.i28) #8, !dbg !32
  %.08.i30 = select i1 %.not.i29, float %177, float %176, !dbg !32
  %178 = fadd float %173, -1.000000e+00, !dbg !32
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not1.i31 = icmp eq i32 %179, 0, !dbg !32
  %180 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %178, float 0x3FC2073EC0000000) #8, !dbg !32
  %181 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %178, float 0x3FC2073EC0000000) #8, !dbg !32
  %.010.i32 = select i1 %.not1.i31, float %181, float %180, !dbg !32
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not2.i33 = icmp eq i32 %182, 0, !dbg !32
  %183 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i32, float %178, float 0xBFBF19B980000000) #8, !dbg !32
  %184 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i32, float %178, float 0xBFBF19B980000000) #8, !dbg !32
  %.011.i34 = select i1 %.not2.i33, float %184, float %183, !dbg !32
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not3.i35 = icmp eq i32 %185, 0, !dbg !32
  %186 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i34, float %178, float 0x3FC1E52AA0000000) #8, !dbg !32
  %187 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i34, float %178, float 0x3FC1E52AA0000000) #8, !dbg !32
  %.012.i36 = select i1 %.not3.i35, float %187, float %186, !dbg !32
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not4.i37 = icmp eq i32 %188, 0, !dbg !32
  %189 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i36, float %178, float 0xBFC55B1720000000) #8, !dbg !32
  %190 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i36, float %178, float 0xBFC55B1720000000) #8, !dbg !32
  %.09.i38 = select i1 %.not4.i37, float %190, float %189, !dbg !32
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not5.i39 = icmp eq i32 %191, 0, !dbg !32
  %192 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i38, float %178, float 0x3FC99DA160000000) #8, !dbg !32
  %193 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i38, float %178, float 0x3FC99DA160000000) #8, !dbg !32
  %.05.i40 = select i1 %.not5.i39, float %193, float %192, !dbg !32
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not6.i41 = icmp eq i32 %194, 0, !dbg !32
  %195 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i40, float %178, float 0xBFCFFFE440000000) #8, !dbg !32
  %196 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i40, float %178, float 0xBFCFFFE440000000) #8, !dbg !32
  %.01.i42 = select i1 %.not6.i41, float %196, float %195, !dbg !32
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not7.i43 = icmp eq i32 %197, 0, !dbg !32
  %198 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i42, float %178, float 0x3FD5554F00000000) #8, !dbg !32
  %199 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i42, float %178, float 0x3FD5554F00000000) #8, !dbg !32
  %.0.i44 = select i1 %.not7.i43, float %199, float %198, !dbg !32
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not8.i45 = icmp eq i32 %200, 0, !dbg !32
  %201 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i44, float %178, float -5.000000e-01) #8, !dbg !32
  %202 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i44, float %178, float -5.000000e-01) #8, !dbg !32
  %.07.i46 = select i1 %.not8.i45, float %202, float %201, !dbg !32
  %203 = fmul float %178, %.07.i46, !dbg !32
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not9.i47 = icmp eq i32 %204, 0, !dbg !32
  %205 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %203, float %178, float %178) #8, !dbg !32
  %206 = tail call float @llvm.nvvm.fma.rn.f(float %203, float %178, float %178) #8, !dbg !32
  %.06.i48 = select i1 %.not9.i47, float %206, float %205, !dbg !32
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not10.i49 = icmp eq i32 %207, 0, !dbg !32
  %208 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i30, float 0x3FE62E4300000000, float %.06.i48) #8, !dbg !32
  %209 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i30, float 0x3FE62E4300000000, float %.06.i48) #8, !dbg !32
  %.04.i50 = select i1 %.not10.i49, float %209, float %208, !dbg !32
  %210 = icmp samesign ugt i32 %169, 2139095039, !dbg !32
  br i1 %210, label %__nv_fmaf_rn.exit.i.i53, label %__nv_logf.exit56, !dbg !32

__nv_fmaf_rn.exit.i.i53:                          ; preds = %__nv_logf.exit
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not11.i54 = icmp eq i32 %211, 0, !dbg !32
  %212 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i27, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !32
  %213 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i27, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !32
  %.03.i55 = select i1 %.not11.i54, float %213, float %212, !dbg !32
  br label %__nv_logf.exit56, !dbg !32

__nv_logf.exit56:                                 ; preds = %__nv_logf.exit, %__nv_fmaf_rn.exit.i.i53
  %r.i.0.i51 = phi float [ %.03.i55, %__nv_fmaf_rn.exit.i.i53 ], [ %.04.i50, %__nv_logf.exit ], !dbg !32
  %214 = fcmp olt float %118, 0x3810000000000000, !dbg !32
  %215 = fmul float %118, 0x4160000000000000, !dbg !32
  %.02.i57 = select i1 %214, float %215, float %118, !dbg !32
  %i.i.0.i58 = select i1 %214, float -2.300000e+01, float 0.000000e+00, !dbg !32
  %216 = bitcast float %.02.i57 to i32, !dbg !32
  %217 = add nsw i32 %216, -1059760811, !dbg !32
  %218 = and i32 %217, -8388608, !dbg !32
  %219 = sub i32 %216, %218, !dbg !32
  %220 = bitcast i32 %219 to float, !dbg !32
  %221 = sitofp i32 %218 to float, !dbg !32
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not.i59 = icmp eq i32 %222, 0, !dbg !32
  %223 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %221, float 0x3E80000000000000, float %i.i.0.i58) #8, !dbg !32
  %224 = tail call float @llvm.nvvm.fma.rn.f(float %221, float 0x3E80000000000000, float %i.i.0.i58) #8, !dbg !32
  %.08.i60 = select i1 %.not.i59, float %224, float %223, !dbg !32
  %225 = fadd float %220, -1.000000e+00, !dbg !32
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not1.i61 = icmp eq i32 %226, 0, !dbg !32
  %227 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %225, float 0x3FC2073EC0000000) #8, !dbg !32
  %228 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %225, float 0x3FC2073EC0000000) #8, !dbg !32
  %.010.i62 = select i1 %.not1.i61, float %228, float %227, !dbg !32
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not2.i63 = icmp eq i32 %229, 0, !dbg !32
  %230 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i62, float %225, float 0xBFBF19B980000000) #8, !dbg !32
  %231 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i62, float %225, float 0xBFBF19B980000000) #8, !dbg !32
  %.011.i64 = select i1 %.not2.i63, float %231, float %230, !dbg !32
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not3.i65 = icmp eq i32 %232, 0, !dbg !32
  %233 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i64, float %225, float 0x3FC1E52AA0000000) #8, !dbg !32
  %234 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i64, float %225, float 0x3FC1E52AA0000000) #8, !dbg !32
  %.012.i66 = select i1 %.not3.i65, float %234, float %233, !dbg !32
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not4.i67 = icmp eq i32 %235, 0, !dbg !32
  %236 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i66, float %225, float 0xBFC55B1720000000) #8, !dbg !32
  %237 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i66, float %225, float 0xBFC55B1720000000) #8, !dbg !32
  %.09.i68 = select i1 %.not4.i67, float %237, float %236, !dbg !32
  %238 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not5.i69 = icmp eq i32 %238, 0, !dbg !32
  %239 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i68, float %225, float 0x3FC99DA160000000) #8, !dbg !32
  %240 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i68, float %225, float 0x3FC99DA160000000) #8, !dbg !32
  %.05.i70 = select i1 %.not5.i69, float %240, float %239, !dbg !32
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not6.i71 = icmp eq i32 %241, 0, !dbg !32
  %242 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i70, float %225, float 0xBFCFFFE440000000) #8, !dbg !32
  %243 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i70, float %225, float 0xBFCFFFE440000000) #8, !dbg !32
  %.01.i72 = select i1 %.not6.i71, float %243, float %242, !dbg !32
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not7.i73 = icmp eq i32 %244, 0, !dbg !32
  %245 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i72, float %225, float 0x3FD5554F00000000) #8, !dbg !32
  %246 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i72, float %225, float 0x3FD5554F00000000) #8, !dbg !32
  %.0.i74 = select i1 %.not7.i73, float %246, float %245, !dbg !32
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not8.i75 = icmp eq i32 %247, 0, !dbg !32
  %248 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i74, float %225, float -5.000000e-01) #8, !dbg !32
  %249 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i74, float %225, float -5.000000e-01) #8, !dbg !32
  %.07.i76 = select i1 %.not8.i75, float %249, float %248, !dbg !32
  %250 = fmul float %225, %.07.i76, !dbg !32
  %251 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not9.i77 = icmp eq i32 %251, 0, !dbg !32
  %252 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %250, float %225, float %225) #8, !dbg !32
  %253 = tail call float @llvm.nvvm.fma.rn.f(float %250, float %225, float %225) #8, !dbg !32
  %.06.i78 = select i1 %.not9.i77, float %253, float %252, !dbg !32
  %254 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not10.i79 = icmp eq i32 %254, 0, !dbg !32
  %255 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i60, float 0x3FE62E4300000000, float %.06.i78) #8, !dbg !32
  %256 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i60, float 0x3FE62E4300000000, float %.06.i78) #8, !dbg !32
  %.04.i80 = select i1 %.not10.i79, float %256, float %255, !dbg !32
  %257 = icmp samesign ugt i32 %216, 2139095039, !dbg !32
  br i1 %257, label %__nv_fmaf_rn.exit.i.i83, label %__nv_logf.exit86, !dbg !32

__nv_fmaf_rn.exit.i.i83:                          ; preds = %__nv_logf.exit56
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not11.i84 = icmp eq i32 %258, 0, !dbg !32
  %259 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i57, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !32
  %260 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i57, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !32
  %.03.i85 = select i1 %.not11.i84, float %260, float %259, !dbg !32
  br label %__nv_logf.exit86, !dbg !32

__nv_logf.exit86:                                 ; preds = %__nv_logf.exit56, %__nv_fmaf_rn.exit.i.i83
  %r.i.0.i81 = phi float [ %.03.i85, %__nv_fmaf_rn.exit.i.i83 ], [ %.04.i80, %__nv_logf.exit56 ], !dbg !32
  %261 = fcmp olt float %119, 0x3810000000000000, !dbg !32
  %262 = fmul float %119, 0x4160000000000000, !dbg !32
  %.02.i87 = select i1 %261, float %262, float %119, !dbg !32
  %i.i.0.i88 = select i1 %261, float -2.300000e+01, float 0.000000e+00, !dbg !32
  %263 = bitcast float %.02.i87 to i32, !dbg !32
  %264 = add nsw i32 %263, -1059760811, !dbg !32
  %265 = and i32 %264, -8388608, !dbg !32
  %266 = sub i32 %263, %265, !dbg !32
  %267 = bitcast i32 %266 to float, !dbg !32
  %268 = sitofp i32 %265 to float, !dbg !32
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not.i89 = icmp eq i32 %269, 0, !dbg !32
  %270 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %268, float 0x3E80000000000000, float %i.i.0.i88) #8, !dbg !32
  %271 = tail call float @llvm.nvvm.fma.rn.f(float %268, float 0x3E80000000000000, float %i.i.0.i88) #8, !dbg !32
  %.08.i90 = select i1 %.not.i89, float %271, float %270, !dbg !32
  %272 = fadd float %267, -1.000000e+00, !dbg !32
  %273 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not1.i91 = icmp eq i32 %273, 0, !dbg !32
  %274 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %272, float 0x3FC2073EC0000000) #8, !dbg !32
  %275 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %272, float 0x3FC2073EC0000000) #8, !dbg !32
  %.010.i92 = select i1 %.not1.i91, float %275, float %274, !dbg !32
  %276 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not2.i93 = icmp eq i32 %276, 0, !dbg !32
  %277 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i92, float %272, float 0xBFBF19B980000000) #8, !dbg !32
  %278 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i92, float %272, float 0xBFBF19B980000000) #8, !dbg !32
  %.011.i94 = select i1 %.not2.i93, float %278, float %277, !dbg !32
  %279 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not3.i95 = icmp eq i32 %279, 0, !dbg !32
  %280 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i94, float %272, float 0x3FC1E52AA0000000) #8, !dbg !32
  %281 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i94, float %272, float 0x3FC1E52AA0000000) #8, !dbg !32
  %.012.i96 = select i1 %.not3.i95, float %281, float %280, !dbg !32
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not4.i97 = icmp eq i32 %282, 0, !dbg !32
  %283 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i96, float %272, float 0xBFC55B1720000000) #8, !dbg !32
  %284 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i96, float %272, float 0xBFC55B1720000000) #8, !dbg !32
  %.09.i98 = select i1 %.not4.i97, float %284, float %283, !dbg !32
  %285 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not5.i99 = icmp eq i32 %285, 0, !dbg !32
  %286 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i98, float %272, float 0x3FC99DA160000000) #8, !dbg !32
  %287 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i98, float %272, float 0x3FC99DA160000000) #8, !dbg !32
  %.05.i100 = select i1 %.not5.i99, float %287, float %286, !dbg !32
  %288 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not6.i101 = icmp eq i32 %288, 0, !dbg !32
  %289 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i100, float %272, float 0xBFCFFFE440000000) #8, !dbg !32
  %290 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i100, float %272, float 0xBFCFFFE440000000) #8, !dbg !32
  %.01.i102 = select i1 %.not6.i101, float %290, float %289, !dbg !32
  %291 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not7.i103 = icmp eq i32 %291, 0, !dbg !32
  %292 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i102, float %272, float 0x3FD5554F00000000) #8, !dbg !32
  %293 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i102, float %272, float 0x3FD5554F00000000) #8, !dbg !32
  %.0.i104 = select i1 %.not7.i103, float %293, float %292, !dbg !32
  %294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not8.i105 = icmp eq i32 %294, 0, !dbg !32
  %295 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i104, float %272, float -5.000000e-01) #8, !dbg !32
  %296 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i104, float %272, float -5.000000e-01) #8, !dbg !32
  %.07.i106 = select i1 %.not8.i105, float %296, float %295, !dbg !32
  %297 = fmul float %272, %.07.i106, !dbg !32
  %298 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not9.i107 = icmp eq i32 %298, 0, !dbg !32
  %299 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %297, float %272, float %272) #8, !dbg !32
  %300 = tail call float @llvm.nvvm.fma.rn.f(float %297, float %272, float %272) #8, !dbg !32
  %.06.i108 = select i1 %.not9.i107, float %300, float %299, !dbg !32
  %301 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not10.i109 = icmp eq i32 %301, 0, !dbg !32
  %302 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i90, float 0x3FE62E4300000000, float %.06.i108) #8, !dbg !32
  %303 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i90, float 0x3FE62E4300000000, float %.06.i108) #8, !dbg !32
  %.04.i110 = select i1 %.not10.i109, float %303, float %302, !dbg !32
  %304 = icmp samesign ugt i32 %263, 2139095039, !dbg !32
  br i1 %304, label %__nv_fmaf_rn.exit.i.i113, label %__nv_logf.exit116, !dbg !32

__nv_fmaf_rn.exit.i.i113:                         ; preds = %__nv_logf.exit86
  %305 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !32
  %.not11.i114 = icmp eq i32 %305, 0, !dbg !32
  %306 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i87, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !32
  %307 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i87, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !32
  %.03.i115 = select i1 %.not11.i114, float %307, float %306, !dbg !32
  br label %__nv_logf.exit116, !dbg !32

__nv_logf.exit116:                                ; preds = %__nv_logf.exit86, %__nv_fmaf_rn.exit.i.i113
  %r.i.0.i111 = phi float [ %.03.i115, %__nv_fmaf_rn.exit.i.i113 ], [ %.04.i110, %__nv_logf.exit86 ], !dbg !32
  %308 = insertelement <4 x float> poison, float %r.i.0.i, i64 0, !dbg !33
  %309 = insertelement <4 x float> %308, float %r.i.0.i51, i64 1, !dbg !33
  %310 = insertelement <4 x float> %309, float %r.i.0.i81, i64 2, !dbg !33
  %311 = insertelement <4 x float> %310, float %r.i.0.i111, i64 3, !dbg !33
  %312 = fmul <4 x float> %311, splat (float 0x3FD7154760000000), !dbg !33
  %313 = fmul <4 x float> %312, splat (float 8.000000e+00), !dbg !34
  %314 = fptosi <4 x float> %313 to <4 x i64>, !dbg !35
  %315 = add <4 x i64> %314, splat (i64 8), !dbg !36
  %316 = tail call <4 x i64> @llvm.smin.v4i64(<4 x i64> %315, <4 x i64> splat (i64 15)), !dbg !37
  %317 = select <4 x i1> %107, <4 x i64> %106, <4 x i64> %316, !dbg !41
  %318 = add nsw <4 x i64> %317, %104, !dbg !42
  %319 = lshr <4 x i64> %318, splat (i64 58), !dbg !43
  %320 = and <4 x i64> %319, splat (i64 32), !dbg !43
  %321 = add nsw <4 x i64> %320, %318, !dbg !43
  %322 = icmp ugt <4 x i64> %321, splat (i64 31), !dbg !44
  %323 = and <4 x i1> %98, %322, !dbg !45
  %324 = bitcast <4 x i1> %323 to i4, !dbg !46
  %325 = icmp ne i4 %324, 0, !dbg !46
  %326 = and i1 %28, %325, !dbg !46
  br i1 %326, label %327, label %328, !dbg !46

327:                                              ; preds = %__nv_logf.exit116
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 66, ptr nonnull @assertFunc_0, i64 1), !dbg !46
  unreachable, !dbg !46

328:                                              ; preds = %__nv_logf.exit116
  %329 = and i32 %11, 7, !dbg !12
  %330 = or disjoint i32 %10, %329, !dbg !13
  %331 = icmp slt i32 %330, 400, !dbg !14
  %332 = and i1 %331, %26, !dbg !22
  %333 = sdiv i32 %93, 50, !dbg !47
  %334 = sdiv i32 %92, 50, !dbg !47
  %335 = sdiv i32 %91, 50, !dbg !47
  %336 = sdiv i32 %90, 50, !dbg !47
  %337 = sdiv i32 %15, 50, !dbg !47
  %338 = sdiv i32 %14, 50, !dbg !47
  %339 = mul i32 %337, 50, !dbg !24
  %.decomposed = sub i32 %15, %339, !dbg !24
  %340 = mul i32 %338, 50, !dbg !24
  %.decomposed118 = sub i32 %14, %340, !dbg !24
  %341 = and i32 %11, 24, !dbg !12
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !46
  %342 = sext i32 %336 to i64, !dbg !48
  %343 = sext i32 %335 to i64, !dbg !48
  %344 = sext i32 %334 to i64, !dbg !48
  %345 = sext i32 %333 to i64, !dbg !48
  %346 = extractelement <4 x i64> %321, i64 0, !dbg !49
  %.idx = shl i64 %346, 5, !dbg !49
  %347 = getelementptr i8, ptr addrspace(1) %0, i64 %.idx, !dbg !49
  %348 = getelementptr float, ptr addrspace(1) %347, i64 %342, !dbg !49
  %349 = extractelement <4 x i64> %321, i64 1, !dbg !49
  %.idx11 = shl i64 %349, 5, !dbg !49
  %350 = getelementptr i8, ptr addrspace(1) %0, i64 %.idx11, !dbg !49
  %351 = getelementptr float, ptr addrspace(1) %350, i64 %343, !dbg !49
  %352 = extractelement <4 x i64> %321, i64 2, !dbg !49
  %.idx12 = shl i64 %352, 5, !dbg !49
  %353 = getelementptr i8, ptr addrspace(1) %0, i64 %.idx12, !dbg !49
  %354 = getelementptr float, ptr addrspace(1) %353, i64 %344, !dbg !49
  %355 = extractelement <4 x i64> %321, i64 3, !dbg !49
  %.idx13 = shl i64 %355, 5, !dbg !49
  %356 = getelementptr i8, ptr addrspace(1) %0, i64 %.idx13, !dbg !49
  %357 = getelementptr float, ptr addrspace(1) %356, i64 %345, !dbg !49
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !50
  %358 = ptrtoint ptr addrspace(1) %348 to i64, !dbg !50
  %359 = ptrtoint ptr addrspace(1) %351 to i64, !dbg !50
  %360 = ptrtoint ptr addrspace(1) %354 to i64, !dbg !50
  %361 = ptrtoint ptr addrspace(1) %357 to i64, !dbg !50
  %362 = and i32 %11, 127, !dbg !50
  %363 = lshr i32 %362, 6, !dbg !50
  %364 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %363, !dbg !50
  %365 = getelementptr inbounds nuw i64, ptr addrspace(3) %364, i32 %362, !dbg !50
  %366 = insertelement <1 x i64> poison, i64 %358, i64 0, !dbg !50
  store <1 x i64> %366, ptr addrspace(3) %365, align 8, !dbg !50
  %367 = or disjoint i32 %362, 128, !dbg !50
  %368 = lshr i32 %367, 6, !dbg !50
  %369 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %368, !dbg !50
  %370 = getelementptr inbounds nuw i64, ptr addrspace(3) %369, i32 %367, !dbg !50
  %371 = insertelement <1 x i64> poison, i64 %359, i64 0, !dbg !50
  store <1 x i64> %371, ptr addrspace(3) %370, align 8, !dbg !50
  %372 = or disjoint i32 %362, 256, !dbg !50
  %373 = lshr i32 %372, 6, !dbg !50
  %374 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %373, !dbg !50
  %375 = getelementptr inbounds nuw i64, ptr addrspace(3) %374, i32 %372, !dbg !50
  %376 = insertelement <1 x i64> poison, i64 %360, i64 0, !dbg !50
  store <1 x i64> %376, ptr addrspace(3) %375, align 8, !dbg !50
  %377 = or disjoint i32 %362, 384, !dbg !50
  %378 = lshr i32 %377, 6, !dbg !50
  %379 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %378, !dbg !50
  %380 = getelementptr inbounds nuw i64, ptr addrspace(3) %379, i32 %377, !dbg !50
  %381 = insertelement <1 x i64> poison, i64 %361, i64 0, !dbg !50
  store <1 x i64> %381, ptr addrspace(3) %380, align 8, !dbg !50
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !50
  %382 = getelementptr inbounds nuw i64, ptr addrspace(3) %78, i32 %63, !dbg !50
  %383 = load i64, ptr addrspace(3) %382, align 8, !dbg !50
  %384 = getelementptr inbounds nuw i64, ptr addrspace(3) %78, i32 %81, !dbg !50
  %385 = load i64, ptr addrspace(3) %384, align 8, !dbg !50
  %386 = getelementptr inbounds nuw i64, ptr addrspace(3) %78, i32 %84, !dbg !50
  %387 = load i64, ptr addrspace(3) %386, align 8, !dbg !50
  %388 = getelementptr inbounds nuw i64, ptr addrspace(3) %78, i32 %87, !dbg !50
  %389 = load i64, ptr addrspace(3) %388, align 8, !dbg !50
  %390 = inttoptr i64 %383 to ptr addrspace(1), !dbg !50
  %391 = inttoptr i64 %385 to ptr addrspace(1), !dbg !50
  %392 = inttoptr i64 %387 to ptr addrspace(1), !dbg !50
  %393 = inttoptr i64 %389 to ptr addrspace(1), !dbg !50
  %394 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !50
  %395 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %390, i64 %394, i1 %331) #8, !dbg !50
  %396 = bitcast i32 %395 to float, !dbg !50
  %397 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !50
  %398 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %391, i64 %397, i1 %331) #8, !dbg !50
  %399 = bitcast i32 %398 to float, !dbg !50
  %400 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !50
  %401 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %392, i64 %400, i1 %331) #8, !dbg !50
  %402 = bitcast i32 %401 to float, !dbg !50
  %403 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !50
  %404 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %393, i64 %403, i1 %332) #8, !dbg !50
  %405 = bitcast i32 %404 to float, !dbg !50
  %406 = sitofp i64 %36 to float, !dbg !51
  %407 = sitofp i64 %38 to float, !dbg !51
  %408 = sitofp i64 %40 to float, !dbg !51
  %409 = sitofp i64 %42 to float, !dbg !51
  %410 = fsub float 1.000000e+00, %406, !dbg !52
  %411 = fsub float 1.000000e+00, %407, !dbg !52
  %412 = fsub float 1.000000e+00, %408, !dbg !52
  %413 = fsub float 1.000000e+00, %409, !dbg !52
  %414 = fmul float %410, 0x47EFFFFFE0000000, !dbg !53
  %415 = fmul float %411, 0x47EFFFFFE0000000, !dbg !53
  %416 = fmul float %412, 0x47EFFFFFE0000000, !dbg !53
  %417 = fmul float %413, 0x47EFFFFFE0000000, !dbg !53
  %418 = fsub float %396, %414, !dbg !54
  %419 = fsub float %399, %415, !dbg !54
  %420 = fsub float %402, %416, !dbg !54
  %421 = fsub float %405, %417, !dbg !54
  %422 = fadd float %80, %418, !dbg !55
  %423 = fadd float %83, %419, !dbg !55
  %424 = fadd float %86, %420, !dbg !55
  %425 = fadd float %89, %421, !dbg !55
  %426 = select i1 %331, float %422, float 0xFFF0000000000000, !dbg !56
  %427 = select i1 %331, float %423, float 0xFFF0000000000000, !dbg !56
  %428 = select i1 %331, float %424, float 0xFFF0000000000000, !dbg !56
  %429 = select i1 %332, float %425, float 0xFFF0000000000000, !dbg !56
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !57
  %430 = fcmp ogt float %426, %427, !dbg !59
  %431 = fcmp uno float %426, 0.000000e+00, !dbg !60
  %432 = or i1 %431, %430, !dbg !61
  %433 = select i1 %432, float %426, float %427, !dbg !62
  %434 = fcmp ogt float %433, %428, !dbg !59
  %435 = fcmp uno float %433, 0.000000e+00, !dbg !60
  %436 = or i1 %434, %435, !dbg !61
  %437 = select i1 %436, float %433, float %428, !dbg !62
  %438 = fcmp ogt float %437, %429, !dbg !59
  %439 = fcmp uno float %437, 0.000000e+00, !dbg !60
  %440 = or i1 %438, %439, !dbg !61
  %441 = select i1 %440, float %437, float %429, !dbg !62
  %442 = bitcast float %441 to i32, !dbg !57
  %443 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %442, i32 16, i32 31), !dbg !57
  %444 = bitcast i32 %443 to float, !dbg !57
  %445 = fcmp ogt float %441, %444, !dbg !59
  %446 = fcmp uno float %441, 0.000000e+00, !dbg !60
  %447 = or i1 %445, %446, !dbg !61
  %448 = select i1 %447, float %441, float %444, !dbg !62
  %449 = bitcast float %448 to i32, !dbg !57
  %450 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %449, i32 8, i32 31), !dbg !57
  %451 = bitcast i32 %450 to float, !dbg !57
  %452 = fcmp ogt float %448, %451, !dbg !59
  %453 = fcmp uno float %448, 0.000000e+00, !dbg !60
  %454 = or i1 %452, %453, !dbg !61
  %455 = icmp eq i32 %341, 0, !dbg !57
  %.idx117 = shl nuw nsw i32 %329, 4, !dbg !57
  %456 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx117, !dbg !57
  %457 = getelementptr float, ptr addrspace(3) %456, i32 %13, !dbg !57
  %458 = select i1 %454, i32 %449, i32 %450, !dbg !62
  %459 = insertelement <1 x i32> poison, i32 %458, i64 0, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %457, <1 x i32> %459, i1 %455) #8, !dbg !57
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !57
  %460 = icmp samesign ult i32 %11, 32, !dbg !57
  %461 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !57
  %462 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %461, i1 %460) #8, !dbg !57
  %463 = bitcast i32 %462 to float, !dbg !57
  %464 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %462, i32 2, i32 31), !dbg !57
  %465 = bitcast i32 %464 to float, !dbg !57
  %466 = fcmp ogt float %463, %465, !dbg !59
  %467 = fcmp uno float %463, 0.000000e+00, !dbg !60
  %468 = or i1 %467, %466, !dbg !61
  %469 = select i1 %468, float %463, float %465, !dbg !62
  %470 = bitcast float %469 to i32, !dbg !57
  %471 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %470, i32 1, i32 31), !dbg !57
  %472 = bitcast i32 %471 to float, !dbg !57
  %473 = fcmp ogt float %469, %472, !dbg !59
  %474 = fcmp uno float %469, 0.000000e+00, !dbg !60
  %475 = or i1 %473, %474, !dbg !61
  %476 = and i32 %11, 995, !dbg !57
  %477 = icmp eq i32 %476, 0, !dbg !57
  %478 = select i1 %475, i32 %470, i32 %471, !dbg !62
  %479 = insertelement <1 x i32> poison, i32 %478, i64 0, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %461, <1 x i32> %479, i1 %477) #8, !dbg !57
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !57
  %480 = load float, ptr addrspace(3) %456, align 16, !dbg !57
  %481 = fsub float %422, %480, !dbg !63
  %482 = fsub float %423, %480, !dbg !63
  %483 = fsub float %424, %480, !dbg !63
  %484 = fsub float %425, %480, !dbg !63
  %485 = fmul float %481, 0x3FF7154760000000, !dbg !64
  %486 = tail call float @llvm.nvvm.ex2.approx.f(float %485), !dbg !64
  %487 = fmul float %482, 0x3FF7154760000000, !dbg !64
  %488 = tail call float @llvm.nvvm.ex2.approx.f(float %487), !dbg !64
  %489 = fmul float %483, 0x3FF7154760000000, !dbg !64
  %490 = tail call float @llvm.nvvm.ex2.approx.f(float %489), !dbg !64
  %491 = fmul float %484, 0x3FF7154760000000, !dbg !64
  %492 = tail call float @llvm.nvvm.ex2.approx.f(float %491), !dbg !64
  %493 = select i1 %332, float %492, float 0.000000e+00, !dbg !65
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !66
  %494 = fadd float %486, %488, !dbg !70
  %495 = fadd float %494, %490, !dbg !70
  %496 = select i1 %331, float %495, float 0.000000e+00, !dbg !70
  %497 = fadd float %496, %493, !dbg !70
  %498 = bitcast float %497 to i32, !dbg !66
  %499 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %498, i32 16, i32 31), !dbg !66
  %500 = bitcast i32 %499 to float, !dbg !66
  %501 = fadd float %497, %500, !dbg !70
  %502 = bitcast float %501 to i32, !dbg !66
  %503 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %502, i32 8, i32 31), !dbg !66
  %504 = bitcast i32 %503 to float, !dbg !66
  %505 = fadd float %501, %504, !dbg !70
  %506 = bitcast float %505 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %457, <1 x i32> %506, i1 %455) #8, !dbg !66
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !66
  %507 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %461, i1 %460) #8, !dbg !66
  %508 = bitcast i32 %507 to float, !dbg !66
  %509 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %507, i32 2, i32 31), !dbg !66
  %510 = bitcast i32 %509 to float, !dbg !66
  %511 = fadd float %508, %510, !dbg !70
  %512 = bitcast float %511 to i32, !dbg !66
  %513 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %512, i32 1, i32 31), !dbg !66
  %514 = bitcast i32 %513 to float, !dbg !66
  %515 = fadd float %511, %514, !dbg !70
  %516 = bitcast float %515 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %461, <1 x i32> %516, i1 %477) #8, !dbg !66
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !66
  %517 = load float, ptr addrspace(3) %456, align 16, !dbg !66
  %518 = tail call float @llvm.nvvm.div.full(float %486, float %517), !dbg !71
  %519 = tail call float @llvm.nvvm.div.full(float %488, float %517), !dbg !71
  %520 = tail call float @llvm.nvvm.div.full(float %490, float %517), !dbg !71
  %521 = tail call float @llvm.nvvm.div.full(float %492, float %517), !dbg !71
  %522 = mul nsw i32 %.decomposed118, 50, !dbg !72
  %523 = mul nsw i32 %.decomposed, 50, !dbg !72
  %524 = add nsw i32 %522, %24, !dbg !73
  %525 = add nsw i32 %523, %24, !dbg !73
  %526 = mul i32 %338, 2528, !dbg !74
  %527 = mul i32 %337, 2528, !dbg !74
  %528 = add i32 %524, %526, !dbg !75
  %529 = add i32 %525, %527, !dbg !75
  %530 = sext i32 %528 to i64, !dbg !76
  %531 = getelementptr float, ptr addrspace(1) %3, i64 %530, !dbg !76
  %532 = sext i32 %529 to i64, !dbg !76
  %533 = getelementptr float, ptr addrspace(1) %3, i64 %532, !dbg !76
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !77
  store float %418, ptr addrspace(3) %79, align 4, !dbg !77
  store float %419, ptr addrspace(3) %82, align 4, !dbg !77
  store float %420, ptr addrspace(3) %85, align 4, !dbg !77
  store float %421, ptr addrspace(3) %88, align 4, !dbg !77
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !77
  %534 = load <2 x i32>, ptr addrspace(3) %74, align 8, !dbg !77
  %.extract = load i32, ptr addrspace(3) %67, align 8, !dbg !77
  %535 = getelementptr inbounds nuw i8, ptr addrspace(3) %67, i32 4, !dbg !77
  %.extract17 = load i32, ptr addrspace(3) %535, align 4, !dbg !77
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract17, ptr addrspace(1) %531, i1 %51) #8, !dbg !77
  %.extract18 = extractelement <2 x i32> %534, i64 0, !dbg !77
  %.extract19 = extractelement <2 x i32> %534, i64 1, !dbg !77
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract18, i32 %.extract19, ptr addrspace(1) %533, i1 %52) #8, !dbg !77
  %536 = getelementptr float, ptr addrspace(1) %4, i64 %530, !dbg !78
  %537 = getelementptr float, ptr addrspace(1) %4, i64 %532, !dbg !78
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !79
  store float %518, ptr addrspace(3) %79, align 4, !dbg !79
  store float %519, ptr addrspace(3) %82, align 4, !dbg !79
  store float %520, ptr addrspace(3) %85, align 4, !dbg !79
  store float %521, ptr addrspace(3) %88, align 4, !dbg !79
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !79
  %538 = load <2 x i32>, ptr addrspace(3) %74, align 8, !dbg !79
  %.extract23 = load i32, ptr addrspace(3) %67, align 8, !dbg !79
  %.extract24 = load i32, ptr addrspace(3) %535, align 4, !dbg !79
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract23, i32 %.extract24, ptr addrspace(1) %536, i1 %51) #8, !dbg !79
  %.extract25 = extractelement <2 x i32> %538, i64 0, !dbg !79
  %.extract26 = extractelement <2 x i32> %538, i64 1, !dbg !79
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract25, i32 %.extract26, ptr addrspace(1) %537, i1 %52) #8, !dbg !79
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #5

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x i32> @llvm.abs.v4i32(<4 x i32>, i1 immarg) #7

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x i64> @llvm.smin.v4i64(<4 x i64>, <4 x i64>) #7

attributes #0 = { noreturn }
attributes #1 = { "nvvm.reqntid"="128" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #8 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "cnfehoh4k6l3otcz6shdp3chj7l7akuk6bepi5ielbhql6xqmt2v.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/nf")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !6, file: !6, type: !7, spFlags: DISPFlagOptimized)
!6 = !DIFile(filename: "<unknown>", directory: "")
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = distinct !DISubprogram(name: "triton_per_fused__softmax__to_copy_add_mul_rsub_1", linkageName: "triton_per_fused__softmax__to_copy_add_mul_rsub_1", scope: !1, file: !1, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!10 = !DILocation(line: 24, column: 28, scope: !9)
!11 = !DILocation(line: 24, column: 33, scope: !9)
!12 = !DILocation(line: 25, column: 44, scope: !9)
!13 = !DILocation(line: 25, column: 23, scope: !9)
!14 = !DILocation(line: 26, column: 21, scope: !9)
!15 = !DILocation(line: 27, column: 38, scope: !9)
!16 = !DILocation(line: 29, column: 25, scope: !9)
!17 = !DILocation(line: 36, column: 31, scope: !9)
!18 = !DILocation(line: 36, column: 38, scope: !9)
!19 = !DILocation(line: 37, column: 41, scope: !9)
!20 = !DILocation(line: 37, column: 38, scope: !9)
!21 = !DILocation(line: 37, column: 31, scope: !9)
!22 = !DILocation(line: 37, column: 56, scope: !9)
!23 = !DILocation(line: 37, column: 46, scope: !9)
!24 = !DILocation(line: 33, column: 19, scope: !9)
!25 = !DILocation(line: 38, column: 19, scope: !9)
!26 = !DILocation(line: 40, column: 18, scope: !9)
!27 = !DILocation(line: 43, column: 18, scope: !9)
!28 = !DILocation(line: 45, column: 23, scope: !9)
!29 = !DILocation(line: 47, column: 18, scope: !9)
!30 = !DILocation(line: 48, column: 20, scope: !9)
!31 = !DILocation(line: 50, column: 20, scope: !9)
!32 = !DILocation(line: 51, column: 24, scope: !9)
!33 = !DILocation(line: 53, column: 20, scope: !9)
!34 = !DILocation(line: 55, column: 20, scope: !9)
!35 = !DILocation(line: 56, column: 21, scope: !9)
!36 = !DILocation(line: 57, column: 20, scope: !9)
!37 = !DILocation(line: 106, column: 29, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !9, file: !39, discriminator: 0)
!39 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!40 = !DILocation(line: 59, column: 42, scope: !9)
!41 = !DILocation(line: 60, column: 33, scope: !9)
!42 = !DILocation(line: 61, column: 19, scope: !9)
!43 = !DILocation(line: 65, column: 35, scope: !9)
!44 = !DILocation(line: 66, column: 38, scope: !9)
!45 = !DILocation(line: 66, column: 53, scope: !9)
!46 = !DILocation(line: 66, column: 73, scope: !9)
!47 = !DILocation(line: 34, column: 19, scope: !9)
!48 = !DILocation(line: 67, column: 36, scope: !9)
!49 = !DILocation(line: 67, column: 31, scope: !9)
!50 = !DILocation(line: 67, column: 46, scope: !9)
!51 = !DILocation(line: 68, column: 21, scope: !9)
!52 = !DILocation(line: 70, column: 20, scope: !9)
!53 = !DILocation(line: 72, column: 20, scope: !9)
!54 = !DILocation(line: 73, column: 20, scope: !9)
!55 = !DILocation(line: 74, column: 20, scope: !9)
!56 = !DILocation(line: 77, column: 45, scope: !9)
!57 = !DILocation(line: 124, column: 29, scope: !38, inlinedAt: !58)
!58 = !DILocation(line: 78, column: 39, scope: !9)
!59 = !DILocation(line: 111, column: 15, scope: !38, inlinedAt: !58)
!60 = !DILocation(line: 113, column: 21, scope: !38, inlinedAt: !58)
!61 = !DILocation(line: 113, column: 16, scope: !38, inlinedAt: !58)
!62 = !DILocation(line: 114, column: 29, scope: !38, inlinedAt: !58)
!63 = !DILocation(line: 79, column: 20, scope: !9)
!64 = !DILocation(line: 80, column: 24, scope: !9)
!65 = !DILocation(line: 82, column: 45, scope: !9)
!66 = !DILocation(line: 290, column: 36, scope: !67, inlinedAt: !69)
!67 = distinct !DILexicalBlockFile(scope: !9, file: !68, discriminator: 0)
!68 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!69 = !DILocation(line: 83, column: 26, scope: !9)
!70 = !DILocation(line: 260, column: 15, scope: !67, inlinedAt: !69)
!71 = !DILocation(line: 86, column: 21, scope: !9)
!72 = !DILocation(line: 87, column: 35, scope: !9)
!73 = !DILocation(line: 87, column: 32, scope: !9)
!74 = !DILocation(line: 87, column: 45, scope: !9)
!75 = !DILocation(line: 87, column: 40, scope: !9)
!76 = !DILocation(line: 87, column: 25, scope: !9)
!77 = !DILocation(line: 87, column: 57, scope: !9)
!78 = !DILocation(line: 88, column: 25, scope: !9)
!79 = !DILocation(line: 88, column: 57, scope: !9)
!80 = !DILocation(line: 88, column: 4, scope: !9)
