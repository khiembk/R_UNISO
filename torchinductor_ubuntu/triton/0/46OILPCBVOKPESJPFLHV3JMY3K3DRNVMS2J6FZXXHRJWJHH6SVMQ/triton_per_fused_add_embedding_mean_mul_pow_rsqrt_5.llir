; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [121 x i8] c"/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/ys/cysqe6nnnabirq4oi2rshbgx2umf7p4ionmnjgsdtuonxuvzwq2k.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 32128\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !5 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_per_fused_add_embedding_mean_mul_pow_rsqrt_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr #1 !dbg !9 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = shl nuw nsw i32 %10, 2, !dbg !11
  %12 = and i32 %11, 508, !dbg !11
  %13 = zext nneg i32 %9 to i64, !dbg !12
  %14 = getelementptr i64, ptr addrspace(1) %0, i64 %13, !dbg !12
  %15 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !13
  %16 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l"(ptr addrspace(1) %14, i64 %15) #7, !dbg !13
  %17 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !13
  %18 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l"(ptr addrspace(1) %14, i64 %17) #7, !dbg !13
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !13
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l"(ptr addrspace(1) %14, i64 %19) #7, !dbg !13
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !13
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l"(ptr addrspace(1) %14, i64 %21) #7, !dbg !13
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !13
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l"(ptr addrspace(1) %14, i64 %23) #7, !dbg !13
  %25 = shl i32 %9, 9, !dbg !14
  %26 = or disjoint i32 %12, %25, !dbg !15
  %27 = sext i32 %26 to i64, !dbg !16
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !16
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %28) #7, !dbg !17
  %30 = zext nneg i32 %12 to i64, !dbg !18
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !18
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !19
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l"(ptr addrspace(1) %31, i64 %32) #7, !dbg !19
  %34 = add i64 %24, 32128, !dbg !20
  %35 = icmp slt i64 %24, 0, !dbg !21
  %36 = select i1 %35, i64 %34, i64 %24, !dbg !22
  %37 = icmp ugt i64 %36, 32127, !dbg !23
  br i1 %37, label %38, label %39, !dbg !24

38:                                               ; preds = %8
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 42, ptr nonnull @assertFunc_0, i64 1), !dbg !24
  unreachable, !dbg !24

39:                                               ; preds = %8
  %40 = icmp slt i64 %22, 0, !dbg !21
  %41 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !17
  %42 = bitcast i32 %41 to float, !dbg !17
  %43 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !17
  %44 = bitcast i32 %43 to float, !dbg !17
  %45 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !17
  %46 = bitcast i32 %45 to float, !dbg !17
  %47 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !17
  %48 = bitcast i32 %47 to float, !dbg !17
  %49 = lshr i32 %10, 5, !dbg !11
  %50 = and i32 %10, 31, !dbg !11
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !24
  %51 = shl i64 %22, 9, !dbg !25
  %52 = add i64 %51, 16449536, !dbg !25
  %53 = select i1 %40, i64 %52, i64 %51, !dbg !25
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !26
  %55 = getelementptr float, ptr addrspace(1) %54, i64 %30, !dbg !26
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %55) #7, !dbg !27
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !27
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !27
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !27
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !27
  %61 = bitcast i32 %57 to float, !dbg !27
  %62 = bitcast i32 %58 to float, !dbg !27
  %63 = bitcast i32 %59 to float, !dbg !27
  %64 = bitcast i32 %60 to float, !dbg !27
  %65 = fadd float %48, %61, !dbg !28
  %66 = fadd float %46, %62, !dbg !28
  %67 = fadd float %44, %63, !dbg !28
  %68 = fadd float %42, %64, !dbg !28
  %69 = fmul float %65, %65, !dbg !29
  %70 = fmul float %66, %66, !dbg !29
  %71 = fmul float %67, %67, !dbg !29
  %72 = fmul float %68, %68, !dbg !29
  %73 = fadd float %69, %70, !dbg !30
  %74 = fadd float %71, %73, !dbg !30
  %75 = fadd float %72, %74, !dbg !30
  %76 = bitcast float %75 to i32, !dbg !34
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 16, i32 31), !dbg !34
  %78 = bitcast i32 %77 to float, !dbg !34
  %79 = fadd float %75, %78, !dbg !30
  %80 = bitcast float %79 to i32, !dbg !34
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 8, i32 31), !dbg !34
  %82 = bitcast i32 %81 to float, !dbg !34
  %83 = fadd float %79, %82, !dbg !30
  %84 = bitcast float %83 to i32, !dbg !34
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 4, i32 31), !dbg !34
  %86 = bitcast i32 %85 to float, !dbg !34
  %87 = fadd float %83, %86, !dbg !30
  %88 = bitcast float %87 to i32, !dbg !34
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 2, i32 31), !dbg !34
  %90 = bitcast i32 %89 to float, !dbg !34
  %91 = fadd float %87, %90, !dbg !30
  %92 = bitcast float %91 to i32, !dbg !34
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 1, i32 31), !dbg !34
  %94 = bitcast i32 %93 to float, !dbg !34
  %95 = fadd float %91, %94, !dbg !30
  %96 = and i32 %49, 3, !dbg !34
  %97 = icmp eq i32 %50, 0, !dbg !34
  %98 = getelementptr float, ptr addrspace(3) @global_smem, i32 %96, !dbg !34
  %99 = bitcast float %95 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 %97) #7, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !34
  %100 = icmp samesign ult i32 %10, 4, !dbg !34
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !34
  %102 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %101, i1 %100) #7, !dbg !34
  %103 = bitcast i32 %102 to float, !dbg !34
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 2, i32 31), !dbg !34
  %105 = bitcast i32 %104 to float, !dbg !34
  %106 = fadd float %103, %105, !dbg !30
  %107 = bitcast float %106 to i32, !dbg !34
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 1, i32 31), !dbg !34
  %109 = bitcast i32 %108 to float, !dbg !34
  %110 = fadd float %106, %109, !dbg !30
  %111 = icmp eq i32 %10, 0, !dbg !34
  %112 = bitcast float %110 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %112, i1 %111) #7, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !34
  %113 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !34
  %114 = fadd float %113, 0.000000e+00, !dbg !35
  %115 = tail call float @llvm.nvvm.div.full(float %114, float 5.120000e+02), !dbg !39
  %116 = fadd float %115, 0x3EB0C6F7A0000000, !dbg !40
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !41
  %.not.i = icmp eq i32 %117, 0, !dbg !41
  br i1 %.not.i, label %120, label %118, !dbg !41

118:                                              ; preds = %39
  %119 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %116), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

120:                                              ; preds = %39
  %121 = tail call float @llvm.nvvm.rsqrt.approx.f(float %116), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %118, %120
  %.0.i = phi float [ %119, %118 ], [ %121, %120 ], !dbg !41
  %122 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !19
  %123 = bitcast i32 %122 to float, !dbg !19
  %124 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !19
  %125 = bitcast i32 %124 to float, !dbg !19
  %126 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !19
  %127 = bitcast i32 %126 to float, !dbg !19
  %128 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !19
  %129 = bitcast i32 %128 to float, !dbg !19
  %130 = fmul float %65, %.0.i, !dbg !42
  %131 = fmul float %66, %.0.i, !dbg !42
  %132 = fmul float %67, %.0.i, !dbg !42
  %133 = fmul float %68, %.0.i, !dbg !42
  %134 = fmul float %130, %123, !dbg !43
  %135 = fmul float %131, %125, !dbg !43
  %136 = fmul float %132, %127, !dbg !43
  %137 = fmul float %133, %129, !dbg !43
  %138 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !44
  %139 = bitcast float %134 to i32, !dbg !45
  %140 = bitcast float %135 to i32, !dbg !45
  %141 = bitcast float %136 to i32, !dbg !45
  %142 = bitcast float %137 to i32, !dbg !45
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %139, i32 %140, i32 %141, i32 %142, ptr addrspace(1) %138) #7, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #5

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { noreturn }
attributes #1 = { "nvvm.reqntid"="128" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "cysqe6nnnabirq4oi2rshbgx2umf7p4ionmnjgsdtuonxuvzwq2k.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/ys")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !6, file: !6, type: !7, spFlags: DISPFlagOptimized)
!6 = !DIFile(filename: "<unknown>", directory: "")
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = distinct !DISubprogram(name: "triton_per_fused_add_embedding_mean_mul_pow_rsqrt_5", linkageName: "triton_per_fused_add_embedding_mean_mul_pow_rsqrt_5", scope: !1, file: !1, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!10 = !DILocation(line: 25, column: 28, scope: !9)
!11 = !DILocation(line: 28, column: 28, scope: !9)
!12 = !DILocation(line: 35, column: 30, scope: !9)
!13 = !DILocation(line: 35, column: 35, scope: !9)
!14 = !DILocation(line: 36, column: 41, scope: !9)
!15 = !DILocation(line: 36, column: 37, scope: !9)
!16 = !DILocation(line: 36, column: 30, scope: !9)
!17 = !DILocation(line: 36, column: 46, scope: !9)
!18 = !DILocation(line: 37, column: 31, scope: !9)
!19 = !DILocation(line: 37, column: 38, scope: !9)
!20 = !DILocation(line: 39, column: 18, scope: !9)
!21 = !DILocation(line: 40, column: 18, scope: !9)
!22 = !DILocation(line: 41, column: 32, scope: !9)
!23 = !DILocation(line: 42, column: 36, scope: !9)
!24 = !DILocation(line: 42, column: 51, scope: !9)
!25 = !DILocation(line: 43, column: 41, scope: !9)
!26 = !DILocation(line: 43, column: 30, scope: !9)
!27 = !DILocation(line: 43, column: 48, scope: !9)
!28 = !DILocation(line: 44, column: 18, scope: !9)
!29 = !DILocation(line: 45, column: 18, scope: !9)
!30 = !DILocation(line: 260, column: 15, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !9, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!33 = !DILocation(line: 47, column: 59, scope: !9)
!34 = !DILocation(line: 290, column: 36, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 66, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !9, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 47, column: 45, scope: !9)
!39 = !DILocation(line: 49, column: 21, scope: !9)
!40 = !DILocation(line: 51, column: 20, scope: !9)
!41 = !DILocation(line: 52, column: 28, scope: !9)
!42 = !DILocation(line: 53, column: 19, scope: !9)
!43 = !DILocation(line: 54, column: 20, scope: !9)
!44 = !DILocation(line: 55, column: 25, scope: !9)
!45 = !DILocation(line: 55, column: 48, scope: !9)
!46 = !DILocation(line: 55, column: 4, scope: !9)
