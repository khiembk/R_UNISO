; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [121 x i8] c"/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/ci/ccisb2yra76ab2haychl3vkjloggui7jornx4qodogdjo7v6y64e.py\00"
@assertMessage_0 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp27 < 32\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !5 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_mul_rsub_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr #1 !dbg !9 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 3, !dbg !12
  %13 = and i32 %11, 63, !dbg !12
  %14 = lshr i32 %11, 2, !dbg !12
  %15 = and i32 %14, 63, !dbg !12
  %16 = or disjoint i32 %10, %13, !dbg !13
  %17 = or disjoint i32 %15, %10, !dbg !13
  %18 = icmp slt i32 %16, 10368, !dbg !14
  %19 = icmp slt i32 %17, 10368, !dbg !14
  %20 = lshr i32 %11, 6, !dbg !15
  %21 = sdiv i32 %17, 324, !dbg !16
  %22 = mul i32 %21, 324, !dbg !17
  %.decomposed = sub i32 %17, %22, !dbg !17
  %23 = srem i32 %21, 8, !dbg !18
  %24 = sdiv i32 %17, 2592, !dbg !19
  %25 = mul nsw i32 %24, 324, !dbg !20
  %26 = mul i32 %17, 324, !dbg !21
  %27 = sext i32 %23 to i64, !dbg !22
  %28 = mul nsw i32 %.decomposed, 324, !dbg !23
  %29 = mul i32 %21, 104992, !dbg !24
  %invariant.gep = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !25
  %30 = and i32 %11, 255
  %31 = shl nuw nsw i32 %11, 2
  %32 = and i32 %31, 252
  %33 = and i32 %20, 3
  %34 = or disjoint i32 %33, %32
  %35 = lshr i32 %30, 2
  %36 = add nuw nsw i32 %35, %30
  %37 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %36
  %38 = lshr exact i32 %32, 2
  %39 = add nuw nsw i32 %38, %34
  %40 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %39
  %41 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %36
  %42 = getelementptr inbounds nuw i64, ptr addrspace(3) @global_smem, i32 %39
  %43 = add i32 %29, %28
  %44 = zext nneg i32 %12 to i64, !dbg !25
  %45 = sext i32 %25 to i64, !dbg !25
  %46 = sext i32 %.decomposed to i64, !dbg !25
  %invariant.gep25 = getelementptr i64, ptr addrspace(1) %1, i64 %45, !dbg !25
  br label %47, !dbg !25

47:                                               ; preds = %8, %132
  %indvars.iv = phi i64 [ 0, %8 ], [ %indvars.iv.next, %132 ]
  %48 = phi float [ 0.000000e+00, %8 ], [ %165, %132 ]
  %49 = phi float [ 0xFFF0000000000000, %8 ], [ %164, %132 ]
  %50 = phi i1 [ false, %8 ], [ %148, %132 ]
  %51 = or disjoint i64 %indvars.iv, %44, !dbg !26
  %gep26 = getelementptr i64, ptr addrspace(1) %invariant.gep25, i64 %51, !dbg !27
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !28
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %gep26, i64 %52, i1 %19) #8, !dbg !28
  %54 = trunc nuw nsw i64 %51 to i32, !dbg !29
  %55 = add i32 %26, %54, !dbg !29
  %56 = sext i32 %55 to i64, !dbg !30
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !30
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !31
  %59 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$4 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $2 + 0 ], $3;", "=r,r,l,l,b"(i32 0, ptr addrspace(1) %57, i64 %58, i1 %19) #8, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  %60 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !31
  store <1 x i32> %60, ptr addrspace(3) %37, align 4, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  %61 = load float, ptr addrspace(3) %40, align 4, !dbg !31
  %62 = sub nsw i64 %51, %46, !dbg !32
  %63 = icmp sgt i64 %62, 0, !dbg !33
  %64 = select i1 %63, i64 16, i64 0, !dbg !34
  %65 = trunc nsw i64 %62 to i32, !dbg !35
  %66 = tail call i32 @llvm.abs.i32(i32 %65, i1 false), !dbg !35
  %67 = sext i32 %66 to i64, !dbg !36
  %68 = icmp slt i32 %66, 8, !dbg !36
  %69 = sitofp i32 %66 to float, !dbg !37
  %70 = fmul float %69, 1.250000e-01, !dbg !38
  %71 = fcmp olt float %70, 0x3810000000000000, !dbg !39
  %72 = fmul float %70, 0x4160000000000000, !dbg !39
  %.02.i = select i1 %71, float %72, float %70, !dbg !39
  %i.i.0.i = select i1 %71, float -2.300000e+01, float 0.000000e+00, !dbg !39
  %73 = bitcast float %.02.i to i32, !dbg !39
  %74 = add i32 %73, -1059760811, !dbg !39
  %75 = and i32 %74, -8388608, !dbg !39
  %76 = sub i32 %73, %75, !dbg !39
  %77 = bitcast i32 %76 to float, !dbg !39
  %78 = sitofp i32 %75 to float, !dbg !39
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not.i = icmp eq i32 %79, 0, !dbg !39
  %80 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %78, float 0x3E80000000000000, float %i.i.0.i) #8, !dbg !39
  %81 = tail call float @llvm.nvvm.fma.rn.f(float %78, float 0x3E80000000000000, float %i.i.0.i) #8, !dbg !39
  %.08.i = select i1 %.not.i, float %81, float %80, !dbg !39
  %82 = fadd float %77, -1.000000e+00, !dbg !39
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not1.i = icmp eq i32 %83, 0, !dbg !39
  %84 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %82, float 0x3FC2073EC0000000) #8, !dbg !39
  %85 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %82, float 0x3FC2073EC0000000) #8, !dbg !39
  %.010.i = select i1 %.not1.i, float %85, float %84, !dbg !39
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not2.i = icmp eq i32 %86, 0, !dbg !39
  %87 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %82, float 0xBFBF19B980000000) #8, !dbg !39
  %88 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %82, float 0xBFBF19B980000000) #8, !dbg !39
  %.011.i = select i1 %.not2.i, float %88, float %87, !dbg !39
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not3.i = icmp eq i32 %89, 0, !dbg !39
  %90 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %82, float 0x3FC1E52AA0000000) #8, !dbg !39
  %91 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %82, float 0x3FC1E52AA0000000) #8, !dbg !39
  %.012.i = select i1 %.not3.i, float %91, float %90, !dbg !39
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not4.i = icmp eq i32 %92, 0, !dbg !39
  %93 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %82, float 0xBFC55B1720000000) #8, !dbg !39
  %94 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %82, float 0xBFC55B1720000000) #8, !dbg !39
  %.09.i = select i1 %.not4.i, float %94, float %93, !dbg !39
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not5.i = icmp eq i32 %95, 0, !dbg !39
  %96 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %82, float 0x3FC99DA160000000) #8, !dbg !39
  %97 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %82, float 0x3FC99DA160000000) #8, !dbg !39
  %.05.i = select i1 %.not5.i, float %97, float %96, !dbg !39
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not6.i = icmp eq i32 %98, 0, !dbg !39
  %99 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %82, float 0xBFCFFFE440000000) #8, !dbg !39
  %100 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %82, float 0xBFCFFFE440000000) #8, !dbg !39
  %.01.i = select i1 %.not6.i, float %100, float %99, !dbg !39
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not7.i = icmp eq i32 %101, 0, !dbg !39
  %102 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %82, float 0x3FD5554F00000000) #8, !dbg !39
  %103 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %82, float 0x3FD5554F00000000) #8, !dbg !39
  %.0.i = select i1 %.not7.i, float %103, float %102, !dbg !39
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not8.i = icmp eq i32 %104, 0, !dbg !39
  %105 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %82, float -5.000000e-01) #8, !dbg !39
  %106 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %82, float -5.000000e-01) #8, !dbg !39
  %.07.i = select i1 %.not8.i, float %106, float %105, !dbg !39
  %107 = fmul float %82, %.07.i, !dbg !39
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not9.i = icmp eq i32 %108, 0, !dbg !39
  %109 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %107, float %82, float %82) #8, !dbg !39
  %110 = tail call float @llvm.nvvm.fma.rn.f(float %107, float %82, float %82) #8, !dbg !39
  %.06.i = select i1 %.not9.i, float %110, float %109, !dbg !39
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not10.i = icmp eq i32 %111, 0, !dbg !39
  %112 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #8, !dbg !39
  %113 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #8, !dbg !39
  %.04.i = select i1 %.not10.i, float %113, float %112, !dbg !39
  %114 = icmp ugt i32 %73, 2139095039, !dbg !39
  br i1 %114, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !39

__nv_fmaf_rn.exit.i.i:                            ; preds = %47
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !39
  %.not11.i = icmp eq i32 %115, 0, !dbg !39
  %116 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !39
  %117 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !39
  %.03.i = select i1 %.not11.i, float %117, float %116, !dbg !39
  br label %__nv_logf.exit, !dbg !39

__nv_logf.exit:                                   ; preds = %47, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %47 ], !dbg !39
  %118 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !39
  %119 = fmul float %r.i.0.i, 0x3FD7154760000000, !dbg !40
  %120 = fmul float %119, 8.000000e+00, !dbg !41
  %121 = select i1 %118, float 0xFFF0000000000000, float %120, !dbg !39
  %122 = fptosi float %121 to i64, !dbg !42
  %123 = add i64 %122, 8, !dbg !43
  %124 = tail call i64 @llvm.smin.i64(i64 %123, i64 15), !dbg !44
  %125 = select i1 %68, i64 %67, i64 %124, !dbg !48
  %126 = add nsw i64 %125, %64, !dbg !49
  %127 = lshr i64 %126, 58, !dbg !50
  %128 = and i64 %127, 32, !dbg !50
  %129 = add nsw i64 %128, %126, !dbg !50
  %130 = icmp ugt i64 %129, 31, !dbg !51
  %.not6 = and i1 %19, %130, !dbg !52
  br i1 %.not6, label %131, label %132, !dbg !52

131:                                              ; preds = %__nv_logf.exit
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 73, ptr nonnull @assertFunc_0, i64 1), !dbg !52
  unreachable, !dbg !52

132:                                              ; preds = %__nv_logf.exit
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !52
  %.idx = shl i64 %129, 5, !dbg !53
  %gep = getelementptr i8, ptr addrspace(1) %invariant.gep, i64 %.idx, !dbg !53
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !54
  %133 = ptrtoint ptr addrspace(1) %gep to i64, !dbg !54
  %134 = insertelement <1 x i64> poison, i64 %133, i64 0, !dbg !54
  store <1 x i64> %134, ptr addrspace(3) %41, align 8, !dbg !54
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !54
  %135 = load i64, ptr addrspace(3) %42, align 8, !dbg !54
  %136 = inttoptr i64 %135 to ptr addrspace(1), !dbg !54
  %137 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !54
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %136, i64 %137, i1 %18) #8, !dbg !54
  %139 = bitcast i32 %138 to float, !dbg !54
  %140 = sitofp i64 %53 to float, !dbg !55
  %141 = fsub float 1.000000e+00, %140, !dbg !56
  %142 = fmul float %141, 0xC7EFFFFFE0000000, !dbg !57
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !57
  store float %142, ptr addrspace(3) %37, align 4, !dbg !57
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !57
  %143 = load float, ptr addrspace(3) %40, align 4, !dbg !57
  %144 = fadd float %143, %139, !dbg !58
  %145 = fadd float %61, %144, !dbg !59
  %146 = fcmp une float %145, 0xFFF0000000000000, !dbg !60
  %147 = select i1 %18, i1 %146, i1 false, !dbg !61
  %148 = or i1 %50, %147, !dbg !61
  %149 = fcmp ogt float %49, %145, !dbg !62
  %150 = fcmp uno float %49, 0.000000e+00, !dbg !64
  %151 = or i1 %150, %149, !dbg !65
  %152 = select i1 %151, float %49, float %145, !dbg !66
  %153 = fcmp oeq float %152, 0xFFF0000000000000, !dbg !67
  %154 = fsub float %49, %152, !dbg !68
  %155 = fmul float %154, 0x3FF7154760000000, !dbg !69
  %156 = tail call float @llvm.nvvm.ex2.approx.f(float %155), !dbg !69
  %157 = select i1 %153, float 1.000000e+00, float %156, !dbg !70
  %158 = fsub float %145, %152, !dbg !71
  %159 = fmul float %158, 0x3FF7154760000000, !dbg !69
  %160 = tail call float @llvm.nvvm.ex2.approx.f(float %159), !dbg !69
  %161 = select i1 %153, float 1.000000e+00, float %160, !dbg !72
  %162 = fmul float %48, %157, !dbg !73
  %163 = fadd float %161, %162, !dbg !74
  %164 = select i1 %18, float %152, float %49, !dbg !75
  %165 = select i1 %18, float %163, float %48, !dbg !76
  %166 = add i32 %43, %54, !dbg !77
  %167 = sext i32 %166 to i64, !dbg !78
  %168 = getelementptr float, ptr addrspace(1) %3, i64 %167, !dbg !78
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !79
  store float %144, ptr addrspace(3) %40, align 4, !dbg !79
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !79
  %169 = load i32, ptr addrspace(3) %37, align 4, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %169, ptr addrspace(1) %168, i1 %19) #8, !dbg !79
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !25
  %170 = icmp samesign ult i64 %indvars.iv, 320, !dbg !25
  br i1 %170, label %47, label %171, !dbg !25

171:                                              ; preds = %132
  %172 = zext i1 %148 to i8, !dbg !80
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !81
  %173 = shl nuw nsw i32 %13, 2, !dbg !81
  %174 = or disjoint i32 %173, %33, !dbg !81
  %175 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %174, !dbg !81
  %176 = insertelement <1 x i8> poison, i8 %172, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %175, <1 x i8> %176, i1 true) #8, !dbg !81
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !81
  %177 = icmp samesign ult i32 %11, 256, !dbg !81
  %178 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %11, !dbg !81
  %179 = tail call i8 asm sideeffect "@$2 ld.shared.b8 $0, [ $1 + 0 ];", "=h,r,b"(ptr addrspace(3) %178, i1 %177) #8, !dbg !81
  %180 = zext i8 %179 to i32, !dbg !81
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 2, i32 31), !dbg !81
  %182 = trunc i32 %181 to i8, !dbg !81
  %183 = or i8 %179, %182, !dbg !83
  %184 = zext i8 %183 to i32, !dbg !81
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 1, i32 31), !dbg !81
  %186 = trunc i32 %185 to i8, !dbg !81
  %187 = or i8 %183, %186, !dbg !83
  %188 = and i32 %11, 771, !dbg !81
  %189 = icmp eq i32 %188, 0, !dbg !81
  %190 = insertelement <1 x i8> poison, i8 %187, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %178, <1 x i8> %190, i1 %189) #8, !dbg !81
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !81
  %191 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %173, !dbg !81
  %192 = load i8, ptr addrspace(3) %191, align 4, !dbg !81
  %.not5 = icmp eq i8 %192, 0, !dbg !84
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !85
  %193 = getelementptr float, ptr addrspace(3) @global_smem, i32 %174, !dbg !85
  %194 = bitcast float %164 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %193, <1 x i32> %194, i1 true) #8, !dbg !85
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !85
  %195 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !85
  %196 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %195, i1 %177) #8, !dbg !85
  %197 = bitcast i32 %196 to float, !dbg !85
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 2, i32 31), !dbg !85
  %199 = bitcast i32 %198 to float, !dbg !85
  %200 = fcmp ogt float %197, %199, !dbg !87
  %201 = fcmp uno float %197, 0.000000e+00, !dbg !88
  %202 = or i1 %201, %200, !dbg !89
  %203 = select i1 %202, float %197, float %199, !dbg !90
  %204 = bitcast float %203 to i32, !dbg !85
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 1, i32 31), !dbg !85
  %206 = bitcast i32 %205 to float, !dbg !85
  %207 = fcmp ogt float %203, %206, !dbg !87
  %208 = fcmp uno float %203, 0.000000e+00, !dbg !88
  %209 = or i1 %207, %208, !dbg !89
  %210 = select i1 %209, i32 %204, i32 %205, !dbg !90
  %211 = insertelement <1 x i32> poison, i32 %210, i64 0, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %211, i1 %189) #8, !dbg !85
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !85
  %212 = getelementptr float, ptr addrspace(3) @global_smem, i32 %173, !dbg !85
  %213 = load float, ptr addrspace(3) %212, align 16, !dbg !85
  %214 = fcmp oeq float %213, 0xFFF0000000000000, !dbg !91
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !92
  %215 = shl nuw nsw i32 %13, 1, !dbg !92
  %216 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %215, !dbg !92
  store float %213, ptr addrspace(3) %216, align 8, !dbg !92
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !92
  %217 = shl nuw nsw i32 %15, 1, !dbg !92
  %218 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %217, !dbg !92
  %219 = load float, ptr addrspace(3) %218, align 8, !dbg !92
  %220 = fsub float %164, %213, !dbg !92
  %221 = fmul float %220, 0x3FF7154760000000, !dbg !93
  %222 = select i1 %214, float 0.000000e+00, float %221, !dbg !94
  %223 = tail call float @llvm.nvvm.ex2.approx.f(float %222), !dbg !93
  %224 = fmul float %165, %223, !dbg !95
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !96
  %225 = bitcast float %224 to <1 x i32>, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %193, <1 x i32> %225, i1 true) #8, !dbg !96
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !96
  %226 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %195, i1 %177) #8, !dbg !96
  %227 = bitcast i32 %226 to float, !dbg !96
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 2, i32 31), !dbg !96
  %229 = bitcast i32 %228 to float, !dbg !96
  %230 = fadd float %227, %229, !dbg !99
  %231 = bitcast float %230 to i32, !dbg !96
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 1, i32 31), !dbg !96
  %233 = bitcast i32 %232 to float, !dbg !96
  %234 = fadd float %230, %233, !dbg !99
  %235 = bitcast float %234 to <1 x i32>, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %235, i1 %189) #8, !dbg !96
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !96
  %236 = load i32, ptr addrspace(3) %212, align 16, !dbg !96
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !100
  %237 = insertelement <1 x i32> poison, i32 %236, i64 0, !dbg !100
  store <1 x i32> %237, ptr addrspace(3) %216, align 8, !dbg !100
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !100
  %238 = load float, ptr addrspace(3) %218, align 8, !dbg !100
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !101
  %239 = zext i1 %.not5 to i8, !dbg !101
  %240 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %215, !dbg !101
  %241 = insertelement <1 x i8> poison, i8 %239, i64 0, !dbg !101
  store <1 x i8> %241, ptr addrspace(3) %240, align 2, !dbg !101
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !101
  %242 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %217, !dbg !101
  %243 = load i8, ptr addrspace(3) %242, align 2, !dbg !101
  %.fr14 = freeze i8 %243, !dbg !101
  %244 = trunc i8 %.fr14 to i1, !dbg !101
  br i1 %244, label %.split.us, label %.split

.split.us:                                        ; preds = %171, %.split.us
  %indvars.iv20 = phi i64 [ %indvars.iv.next21, %.split.us ], [ 0, %171 ]
  %245 = trunc nuw nsw i64 %indvars.iv20 to i32, !dbg !102
  %246 = or disjoint i32 %12, %245, !dbg !102
  %247 = add i32 %246, %26, !dbg !102
  %248 = sext i32 %247 to i64, !dbg !103
  %249 = getelementptr float, ptr addrspace(1) %2, i64 %248, !dbg !103
  %250 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #8, !dbg !104
  %251 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$4 ld.global.L1::evict_first.L2::cache_hint.b32 { $0 }, [ $2 + 0 ], $3;", "=r,r,l,l,b"(i32 0, ptr addrspace(1) %249, i64 %250, i1 %19) #8, !dbg !104
  %252 = add i32 %43, %246, !dbg !105
  %253 = sext i32 %252 to i64, !dbg !106
  %254 = getelementptr float, ptr addrspace(1) %3, i64 %253, !dbg !106
  %255 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #8, !dbg !107
  %256 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$4 ld.global.L1::evict_first.L2::cache_hint.b32 { $0 }, [ $2 + 0 ], $3;", "=r,r,l,l,b"(i32 0, ptr addrspace(1) %254, i64 %255, i1 %19) #8, !dbg !107
  %257 = getelementptr float, ptr addrspace(1) %4, i64 %253, !dbg !108
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 0, ptr addrspace(1) %257, i1 %19) #8, !dbg !109
  %indvars.iv.next21 = add nuw nsw i64 %indvars.iv20, 4, !dbg !110
  %258 = icmp samesign ult i64 %indvars.iv20, 320, !dbg !110
  br i1 %258, label %.split.us, label %.split13.us, !dbg !110

.split:                                           ; preds = %171, %.split
  %indvars.iv18 = phi i64 [ %indvars.iv.next19, %.split ], [ 0, %171 ]
  %259 = trunc nuw nsw i64 %indvars.iv18 to i32, !dbg !102
  %260 = or disjoint i32 %12, %259, !dbg !102
  %261 = add i32 %260, %26, !dbg !102
  %262 = sext i32 %261 to i64, !dbg !103
  %263 = getelementptr float, ptr addrspace(1) %2, i64 %262, !dbg !103
  %264 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #8, !dbg !104
  %265 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$4 ld.global.L1::evict_first.L2::cache_hint.b32 { $0 }, [ $2 + 0 ], $3;", "=r,r,l,l,b"(i32 0, ptr addrspace(1) %263, i64 %264, i1 %19) #8, !dbg !104
  %266 = bitcast i32 %265 to float, !dbg !104
  %267 = add i32 %43, %260, !dbg !105
  %268 = sext i32 %267 to i64, !dbg !106
  %269 = getelementptr float, ptr addrspace(1) %3, i64 %268, !dbg !106
  %270 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #8, !dbg !107
  %271 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$4 ld.global.L1::evict_first.L2::cache_hint.b32 { $0 }, [ $2 + 0 ], $3;", "=r,r,l,l,b"(i32 0, ptr addrspace(1) %269, i64 %270, i1 %19) #8, !dbg !107
  %272 = bitcast i32 %271 to float, !dbg !107
  %273 = fadd float %266, %272, !dbg !111
  %274 = fsub float %273, %219, !dbg !112
  %275 = fmul float %274, 0x3FF7154760000000, !dbg !113
  %276 = tail call float @llvm.nvvm.ex2.approx.f(float %275), !dbg !113
  %277 = tail call float @llvm.nvvm.div.full(float %276, float %238), !dbg !100
  %278 = getelementptr float, ptr addrspace(1) %4, i64 %268, !dbg !108
  %279 = bitcast float %277 to i32, !dbg !109
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %279, ptr addrspace(1) %278, i1 %19) #8, !dbg !109
  %indvars.iv.next19 = add nuw nsw i64 %indvars.iv18, 4, !dbg !110
  %280 = icmp samesign ult i64 %indvars.iv18, 320, !dbg !110
  br i1 %280, label %.split, label %.split13.us, !dbg !110

.split13.us:                                      ; preds = %.split, %.split.us
  ret void, !dbg !114
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #7

attributes #0 = { noreturn }
attributes #1 = { "nvvm.reqntid"="256" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #8 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "ccisb2yra76ab2haychl3vkjloggui7jornx4qodogdjo7v6y64e.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/ci")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !6, file: !6, type: !7, spFlags: DISPFlagOptimized)
!6 = !DIFile(filename: "<unknown>", directory: "")
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mul_rsub_4", linkageName: "triton_red_fused__to_copy_add_mul_rsub_4", scope: !1, file: !1, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!10 = !DILocation(line: 23, column: 28, scope: !9)
!11 = !DILocation(line: 23, column: 33, scope: !9)
!12 = !DILocation(line: 24, column: 44, scope: !9)
!13 = !DILocation(line: 24, column: 23, scope: !9)
!14 = !DILocation(line: 25, column: 21, scope: !9)
!15 = !DILocation(line: 26, column: 37, scope: !9)
!16 = !DILocation(line: 29, column: 21, scope: !9)
!17 = !DILocation(line: 28, column: 19, scope: !9)
!18 = !DILocation(line: 29, column: 28, scope: !9)
!19 = !DILocation(line: 30, column: 19, scope: !9)
!20 = !DILocation(line: 43, column: 46, scope: !9)
!21 = !DILocation(line: 44, column: 46, scope: !9)
!22 = !DILocation(line: 74, column: 40, scope: !9)
!23 = !DILocation(line: 98, column: 40, scope: !9)
!24 = !DILocation(line: 98, column: 52, scope: !9)
!25 = !DILocation(line: 37, column: 40, scope: !9)
!26 = !DILocation(line: 38, column: 31, scope: !9)
!27 = !DILocation(line: 43, column: 35, scope: !9)
!28 = !DILocation(line: 43, column: 51, scope: !9)
!29 = !DILocation(line: 44, column: 42, scope: !9)
!30 = !DILocation(line: 44, column: 35, scope: !9)
!31 = !DILocation(line: 44, column: 51, scope: !9)
!32 = !DILocation(line: 45, column: 23, scope: !9)
!33 = !DILocation(line: 47, column: 22, scope: !9)
!34 = !DILocation(line: 50, column: 22, scope: !9)
!35 = !DILocation(line: 52, column: 27, scope: !9)
!36 = !DILocation(line: 54, column: 22, scope: !9)
!37 = !DILocation(line: 55, column: 24, scope: !9)
!38 = !DILocation(line: 57, column: 24, scope: !9)
!39 = !DILocation(line: 58, column: 28, scope: !9)
!40 = !DILocation(line: 60, column: 24, scope: !9)
!41 = !DILocation(line: 62, column: 24, scope: !9)
!42 = !DILocation(line: 63, column: 25, scope: !9)
!43 = !DILocation(line: 64, column: 24, scope: !9)
!44 = !DILocation(line: 106, column: 29, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !9, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 66, column: 46, scope: !9)
!48 = !DILocation(line: 67, column: 37, scope: !9)
!49 = !DILocation(line: 68, column: 23, scope: !9)
!50 = !DILocation(line: 72, column: 39, scope: !9)
!51 = !DILocation(line: 73, column: 42, scope: !9)
!52 = !DILocation(line: 73, column: 77, scope: !9)
!53 = !DILocation(line: 74, column: 35, scope: !9)
!54 = !DILocation(line: 74, column: 50, scope: !9)
!55 = !DILocation(line: 75, column: 25, scope: !9)
!56 = !DILocation(line: 77, column: 24, scope: !9)
!57 = !DILocation(line: 79, column: 24, scope: !9)
!58 = !DILocation(line: 80, column: 24, scope: !9)
!59 = !DILocation(line: 81, column: 24, scope: !9)
!60 = !DILocation(line: 83, column: 25, scope: !9)
!61 = !DILocation(line: 89, column: 50, scope: !9)
!62 = !DILocation(line: 111, column: 15, scope: !45, inlinedAt: !63)
!63 = !DILocation(line: 93, column: 43, scope: !9)
!64 = !DILocation(line: 113, column: 21, scope: !45, inlinedAt: !63)
!65 = !DILocation(line: 113, column: 16, scope: !45, inlinedAt: !63)
!66 = !DILocation(line: 114, column: 29, scope: !45, inlinedAt: !63)
!67 = !DILocation(line: 197, column: 19, scope: !45, inlinedAt: !63)
!68 = !DILocation(line: 197, column: 53, scope: !45, inlinedAt: !63)
!69 = !DILocation(line: 174, column: 24, scope: !45, inlinedAt: !63)
!70 = !DILocation(line: 197, column: 39, scope: !45, inlinedAt: !63)
!71 = !DILocation(line: 200, column: 53, scope: !45, inlinedAt: !63)
!72 = !DILocation(line: 200, column: 39, scope: !45, inlinedAt: !63)
!73 = !DILocation(line: 206, column: 24, scope: !45, inlinedAt: !63)
!74 = !DILocation(line: 206, column: 36, scope: !45, inlinedAt: !63)
!75 = !DILocation(line: 96, column: 64, scope: !9)
!76 = !DILocation(line: 97, column: 64, scope: !9)
!77 = !DILocation(line: 98, column: 45, scope: !9)
!78 = !DILocation(line: 98, column: 29, scope: !9)
!79 = !DILocation(line: 98, column: 64, scope: !9)
!80 = !DILocation(line: 99, column: 41, scope: !9)
!81 = !DILocation(line: 266, column: 29, scope: !45, inlinedAt: !82)
!82 = !DILocation(line: 99, column: 51, scope: !9)
!83 = !DILocation(line: 261, column: 15, scope: !45, inlinedAt: !82)
!84 = !DILocation(line: 99, column: 66, scope: !9)
!85 = !DILocation(line: 124, column: 29, scope: !45, inlinedAt: !86)
!86 = !DILocation(line: 102, column: 35, scope: !9)
!87 = !DILocation(line: 111, column: 15, scope: !45, inlinedAt: !86)
!88 = !DILocation(line: 113, column: 21, scope: !45, inlinedAt: !86)
!89 = !DILocation(line: 113, column: 16, scope: !45, inlinedAt: !86)
!90 = !DILocation(line: 114, column: 29, scope: !45, inlinedAt: !86)
!91 = !DILocation(line: 181, column: 40, scope: !45, inlinedAt: !86)
!92 = !DILocation(line: 181, column: 68, scope: !45, inlinedAt: !86)
!93 = !DILocation(line: 174, column: 24, scope: !45, inlinedAt: !86)
!94 = !DILocation(line: 181, column: 58, scope: !45, inlinedAt: !86)
!95 = !DILocation(line: 182, column: 31, scope: !45, inlinedAt: !86)
!96 = !DILocation(line: 290, column: 36, scope: !97, inlinedAt: !86)
!97 = distinct !DILexicalBlockFile(scope: !9, file: !98, discriminator: 0)
!98 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!99 = !DILocation(line: 260, column: 15, scope: !97, inlinedAt: !86)
!100 = !DILocation(line: 119, column: 25, scope: !9)
!101 = !DILocation(line: 121, column: 39, scope: !9)
!102 = !DILocation(line: 113, column: 42, scope: !9)
!103 = !DILocation(line: 113, column: 35, scope: !9)
!104 = !DILocation(line: 113, column: 51, scope: !9)
!105 = !DILocation(line: 114, column: 52, scope: !9)
!106 = !DILocation(line: 114, column: 36, scope: !9)
!107 = !DILocation(line: 114, column: 64, scope: !9)
!108 = !DILocation(line: 122, column: 29, scope: !9)
!109 = !DILocation(line: 122, column: 64, scope: !9)
!110 = !DILocation(line: 107, column: 40, scope: !9)
!111 = !DILocation(line: 116, column: 24, scope: !9)
!112 = !DILocation(line: 117, column: 24, scope: !9)
!113 = !DILocation(line: 118, column: 28, scope: !9)
!114 = !DILocation(line: 107, column: 4, scope: !9)
