; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_poi_fused_2(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr #0 !dbg !5 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !8
  %7 = shl nuw nsw i32 %6, 5, !dbg !9
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %9 = shl nuw nsw i32 %8, 2, !dbg !10
  %10 = and i32 %9, 28, !dbg !10
  %11 = lshr i32 %8, 3, !dbg !10
  %12 = and i32 %11, 15, !dbg !10
  %13 = or disjoint i32 %12, 16, !dbg !10
  %14 = or disjoint i32 %12, %7, !dbg !11
  %15 = or disjoint i32 %13, %7, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !12
  %17 = shl i32 %16, 5, !dbg !13
  %18 = or disjoint i32 %12, %17, !dbg !14
  %19 = or disjoint i32 %13, %17, !dbg !14
  %20 = or disjoint i32 %10, %17, !dbg !14
  %21 = icmp slt i32 %18, 324, !dbg !15
  %22 = icmp slt i32 %19, 324, !dbg !15
  %23 = icmp slt i32 %20, 324, !dbg !15
  %.masked = and i32 %7, 224, !dbg !16
  %24 = lshr i32 %6, 3, !dbg !17
  %25 = shl i32 %18, 8, !dbg !18
  %26 = shl i32 %19, 8, !dbg !18
  %27 = mul nuw nsw i32 %24, 82944, !dbg !19
  %28 = or disjoint i32 %.masked, %27, !dbg !20
  %29 = or disjoint i32 %28, %10, !dbg !20
  %30 = add i32 %29, %25, !dbg !21
  %31 = add i32 %29, %26, !dbg !21
  %32 = sext i32 %30 to i64, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !22
  %34 = sext i32 %31 to i64, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !22
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #3, !dbg !23
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$6 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l,b"(ptr addrspace(1) %33, i64 %36, i1 %21) #3, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !23
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #3, !dbg !23
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$6 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l,b"(ptr addrspace(1) %35, i64 %42, i1 %22) #3, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !23
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !23
  %48 = mul nuw nsw i32 %14, 324, !dbg !24
  %49 = mul nuw nsw i32 %15, 324, !dbg !24
  %50 = add i32 %48, %20, !dbg !25
  %51 = add i32 %49, %20, !dbg !25
  %52 = sext i32 %50 to i64, !dbg !26
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !26
  %54 = sext i32 %51 to i64, !dbg !26
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !26
  %56 = shl nuw nsw i32 %8, 7, !dbg !27
  %57 = and i32 %56, 896, !dbg !27
  %58 = or disjoint i32 %57, %12, !dbg !27
  %59 = and i32 %9, 508, !dbg !27
  %60 = lshr exact i32 %57, 1, !dbg !27
  %61 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %60, !dbg !27
  %62 = getelementptr inbounds nuw float, ptr addrspace(3) %61, i32 %58, !dbg !27
  %63 = insertelement <1 x i32> poison, i32 %38, i64 0, !dbg !27
  store <1 x i32> %63, ptr addrspace(3) %62, align 4, !dbg !27
  %64 = or disjoint i32 %58, 32, !dbg !27
  %65 = lshr i32 %64, 3, !dbg !27
  %66 = and i32 %65, 116, !dbg !27
  %67 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %66, !dbg !27
  %68 = getelementptr inbounds nuw float, ptr addrspace(3) %67, i32 %64, !dbg !27
  %69 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !27
  store <1 x i32> %69, ptr addrspace(3) %68, align 4, !dbg !27
  %70 = or disjoint i32 %58, 64, !dbg !27
  %71 = lshr i32 %70, 3, !dbg !27
  %72 = and i32 %71, 120, !dbg !27
  %73 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %72, !dbg !27
  %74 = getelementptr inbounds nuw float, ptr addrspace(3) %73, i32 %70, !dbg !27
  %75 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !27
  store <1 x i32> %75, ptr addrspace(3) %74, align 4, !dbg !27
  %76 = or disjoint i32 %58, 96, !dbg !27
  %77 = lshr i32 %76, 3, !dbg !27
  %78 = and i32 %77, 124, !dbg !27
  %79 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %78, !dbg !27
  %80 = getelementptr inbounds nuw float, ptr addrspace(3) %79, i32 %76, !dbg !27
  %81 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !27
  store <1 x i32> %81, ptr addrspace(3) %80, align 4, !dbg !27
  %82 = getelementptr inbounds nuw i8, ptr addrspace(3) %62, i32 64, !dbg !27
  %83 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !27
  store <1 x i32> %83, ptr addrspace(3) %82, align 4, !dbg !27
  %84 = or disjoint i32 %58, 48, !dbg !27
  %85 = lshr i32 %84, 3, !dbg !27
  %86 = and i32 %85, 116, !dbg !27
  %87 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %86, !dbg !27
  %88 = getelementptr inbounds nuw float, ptr addrspace(3) %87, i32 %84, !dbg !27
  %89 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !27
  store <1 x i32> %89, ptr addrspace(3) %88, align 4, !dbg !27
  %90 = or disjoint i32 %58, 80, !dbg !27
  %91 = lshr i32 %90, 3, !dbg !27
  %92 = and i32 %91, 120, !dbg !27
  %93 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %92, !dbg !27
  %94 = getelementptr inbounds nuw float, ptr addrspace(3) %93, i32 %90, !dbg !27
  %95 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !27
  store <1 x i32> %95, ptr addrspace(3) %94, align 4, !dbg !27
  %96 = or disjoint i32 %58, 112, !dbg !27
  %97 = lshr i32 %96, 3, !dbg !27
  %98 = and i32 %97, 124, !dbg !27
  %99 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %98, !dbg !27
  %100 = getelementptr inbounds nuw float, ptr addrspace(3) %99, i32 %96, !dbg !27
  %101 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !27
  store <1 x i32> %101, ptr addrspace(3) %100, align 4, !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !27
  %102 = lshr i32 %8, 1, !dbg !27
  %103 = and i32 %102, 60, !dbg !27
  %104 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %103, !dbg !27
  %105 = getelementptr inbounds nuw float, ptr addrspace(3) %104, i32 %59, !dbg !27
  %106 = or disjoint i32 %59, 512, !dbg !27
  %107 = lshr i32 %106, 3, !dbg !27
  %108 = and i32 %107, 124, !dbg !27
  %109 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %108, !dbg !27
  %110 = getelementptr inbounds nuw float, ptr addrspace(3) %109, i32 %106, !dbg !27
  %111 = load <4 x i32>, ptr addrspace(3) %110, align 16, !dbg !27
  %.extract = load i32, ptr addrspace(3) %105, align 16, !dbg !27
  %112 = getelementptr inbounds nuw i8, ptr addrspace(3) %105, i32 4, !dbg !27
  %.extract8 = load i32, ptr addrspace(3) %112, align 4, !dbg !27
  %113 = getelementptr inbounds nuw i8, ptr addrspace(3) %105, i32 8, !dbg !27
  %.extract9 = load i32, ptr addrspace(3) %113, align 8, !dbg !27
  %114 = getelementptr inbounds nuw i8, ptr addrspace(3) %105, i32 12, !dbg !27
  %.extract10 = load i32, ptr addrspace(3) %114, align 4, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %53, i1 %23) #3, !dbg !27
  %.extract11 = extractelement <4 x i32> %111, i64 0, !dbg !27
  %.extract12 = extractelement <4 x i32> %111, i64 1, !dbg !27
  %.extract13 = extractelement <4 x i32> %111, i64 2, !dbg !27
  %.extract14 = extractelement <4 x i32> %111, i64 3, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %55, i1 %23) #3, !dbg !27
  ret void, !dbg !28
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #2

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "chh4ejsizsnp6bru5hz2bxcf62jsquzrqpa6xoyynnkb7ghsg6b7.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/hh")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "triton_poi_fused_2", linkageName: "triton_poi_fused_2", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 21, column: 28, scope: !5)
!9 = !DILocation(line: 21, column: 33, scope: !5)
!10 = !DILocation(line: 22, column: 44, scope: !5)
!11 = !DILocation(line: 22, column: 23, scope: !5)
!12 = !DILocation(line: 24, column: 28, scope: !5)
!13 = !DILocation(line: 24, column: 33, scope: !5)
!14 = !DILocation(line: 25, column: 23, scope: !5)
!15 = !DILocation(line: 26, column: 21, scope: !5)
!16 = !DILocation(line: 28, column: 19, scope: !5)
!17 = !DILocation(line: 29, column: 19, scope: !5)
!18 = !DILocation(line: 31, column: 39, scope: !5)
!19 = !DILocation(line: 31, column: 50, scope: !5)
!20 = !DILocation(line: 31, column: 35, scope: !5)
!21 = !DILocation(line: 31, column: 44, scope: !5)
!22 = !DILocation(line: 31, column: 30, scope: !5)
!23 = !DILocation(line: 31, column: 55, scope: !5)
!24 = !DILocation(line: 34, column: 34, scope: !5)
!25 = !DILocation(line: 34, column: 30, scope: !5)
!26 = !DILocation(line: 34, column: 25, scope: !5)
!27 = !DILocation(line: 34, column: 45, scope: !5)
!28 = !DILocation(line: 34, column: 4, scope: !5)
