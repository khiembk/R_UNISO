; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr #0 !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %8 = shl i32 %7, 3, !dbg !9
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %10 = lshr i32 %9, 6, !dbg !10
  %11 = and i32 %10, 7, !dbg !10
  %12 = or disjoint i32 %11, %8, !dbg !11
  %13 = icmp slt i32 %12, 10368, !dbg !12
  %14 = shl nuw nsw i32 %9, 2, !dbg !13
  %15 = and i32 %14, 252, !dbg !13
  %16 = sdiv i32 %12, 324, !dbg !14
  %17 = mul i32 %12, 324, !dbg !15
  %18 = mul i32 %12, 324
  %19 = shl nsw i32 %16, 4
  %20 = add i32 %19, %18
  %21 = add i32 %15, %17, !dbg !16
  %22 = sext i32 %21 to i64, !dbg !17
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !17
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !18
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %23, i64 %24, i1 %13) #5, !dbg !18
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !18
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !18
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !18
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !18
  %30 = add i32 %20, %15, !dbg !19
  %31 = sext i32 %30 to i64, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !20
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !21
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %32, i64 %33, i1 %13) #5, !dbg !21
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !21
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !21
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !21
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !21
  %39 = or disjoint i32 %15, 256, !dbg !22
  %40 = icmp samesign ult i32 %39, 324, !dbg !23
  %41 = add i32 %39, %17, !dbg !16
  %42 = sext i32 %41 to i64, !dbg !17
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !17
  %44 = and i1 %13, %40, !dbg !24
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !18
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %43, i64 %45, i1 %44) #5, !dbg !18
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !18
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !18
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !18
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !18
  %51 = add i32 %20, %39, !dbg !19
  %52 = sext i32 %51 to i64, !dbg !20
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !20
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !21
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %53, i64 %54, i1 %44) #5, !dbg !21
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !21
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !21
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !21
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !21
  %60 = insertelement <8 x i32> poison, i32 %29, i64 0, !dbg !18
  %61 = insertelement <8 x i32> %60, i32 %50, i64 1, !dbg !18
  %62 = insertelement <8 x i32> %61, i32 %28, i64 2, !dbg !18
  %63 = insertelement <8 x i32> %62, i32 %49, i64 3, !dbg !18
  %64 = insertelement <8 x i32> %63, i32 %26, i64 4, !dbg !18
  %65 = insertelement <8 x i32> %64, i32 %47, i64 5, !dbg !18
  %66 = insertelement <8 x i32> %65, i32 %27, i64 6, !dbg !18
  %67 = insertelement <8 x i32> %66, i32 %48, i64 7, !dbg !18
  %68 = bitcast <8 x i32> %67 to <8 x float>, !dbg !18
  %69 = insertelement <8 x i32> poison, i32 %38, i64 0, !dbg !21
  %70 = insertelement <8 x i32> %69, i32 %59, i64 1, !dbg !21
  %71 = insertelement <8 x i32> %70, i32 %37, i64 2, !dbg !21
  %72 = insertelement <8 x i32> %71, i32 %58, i64 3, !dbg !21
  %73 = insertelement <8 x i32> %72, i32 %35, i64 4, !dbg !21
  %74 = insertelement <8 x i32> %73, i32 %56, i64 5, !dbg !21
  %75 = insertelement <8 x i32> %74, i32 %36, i64 6, !dbg !21
  %76 = insertelement <8 x i32> %75, i32 %57, i64 7, !dbg !21
  %77 = bitcast <8 x i32> %76 to <8 x float>, !dbg !21
  %78 = fadd <8 x float> %68, %77, !dbg !25
  %79 = extractelement <8 x float> %78, i64 4, !dbg !26
  %80 = extractelement <8 x float> %78, i64 6, !dbg !26
  %81 = extractelement <8 x float> %78, i64 2, !dbg !26
  %82 = extractelement <8 x float> %78, i64 0, !dbg !26
  %83 = fsub float 0xFFF0000000000000, %79, !dbg !30
  %84 = fsub float 0xFFF0000000000000, %80, !dbg !30
  %85 = fsub float 0xFFF0000000000000, %81, !dbg !30
  %86 = fsub float 0xFFF0000000000000, %82, !dbg !30
  %87 = fmul float %83, 0x3FF7154760000000, !dbg !31
  %88 = tail call float @llvm.nvvm.ex2.approx.f(float %87), !dbg !31
  %89 = fmul float %84, 0x3FF7154760000000, !dbg !31
  %90 = tail call float @llvm.nvvm.ex2.approx.f(float %89), !dbg !31
  %91 = fmul float %85, 0x3FF7154760000000, !dbg !31
  %92 = tail call float @llvm.nvvm.ex2.approx.f(float %91), !dbg !31
  %93 = fmul float %86, 0x3FF7154760000000, !dbg !31
  %94 = tail call float @llvm.nvvm.ex2.approx.f(float %93), !dbg !31
  %95 = fsub float %79, %79, !dbg !32
  %96 = fsub float %80, %80, !dbg !32
  %97 = fsub float %81, %81, !dbg !32
  %98 = fsub float %82, %82, !dbg !32
  %99 = fmul float %95, 0x3FF7154760000000, !dbg !31
  %100 = tail call float @llvm.nvvm.ex2.approx.f(float %99), !dbg !31
  %101 = fmul float %96, 0x3FF7154760000000, !dbg !31
  %102 = tail call float @llvm.nvvm.ex2.approx.f(float %101), !dbg !31
  %103 = fmul float %97, 0x3FF7154760000000, !dbg !31
  %104 = tail call float @llvm.nvvm.ex2.approx.f(float %103), !dbg !31
  %105 = fmul float %98, 0x3FF7154760000000, !dbg !31
  %106 = tail call float @llvm.nvvm.ex2.approx.f(float %105), !dbg !31
  %107 = fcmp une <8 x float> %78, splat (float 0xFFF0000000000000), !dbg !33
  %108 = insertelement <8 x i1> poison, i1 %13, i64 0, !dbg !34
  %109 = insertelement <8 x i1> %108, i1 %44, i64 1, !dbg !34
  %110 = shufflevector <8 x i1> %109, <8 x i1> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !34
  %111 = select <8 x i1> %110, <8 x i1> %107, <8 x i1> zeroinitializer, !dbg !34
  %112 = extractelement <8 x float> %78, i64 5, !dbg !32
  %113 = extractelement <8 x float> %78, i64 7, !dbg !32
  %114 = extractelement <8 x float> %78, i64 3, !dbg !32
  %115 = extractelement <8 x float> %78, i64 1, !dbg !32
  %116 = lshr i32 %9, 5, !dbg !10
  %117 = and i32 %9, 31, !dbg !13
  %118 = bitcast <8 x i1> %111 to i8, !dbg !35
  %119 = icmp ne i8 %118, 0, !dbg !35
  %120 = zext i1 %119 to i32, !dbg !37
  %121 = tail call i32 @llvm.nvvm.redux.sync.or(i32 %120, i32 -1), !dbg !37
  %122 = trunc i32 %121 to i8, !dbg !37
  %123 = and i32 %116, 1, !dbg !37
  %124 = icmp eq i32 %117, 0, !dbg !37
  %125 = shl nuw nsw i32 %11, 1, !dbg !37
  %126 = or disjoint i32 %125, %123, !dbg !37
  %127 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %126, !dbg !37
  %128 = insertelement <1 x i8> poison, i8 %122, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %127, <1 x i8> %128, i1 %124) #5, !dbg !37
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !37
  %129 = icmp samesign ult i32 %9, 16, !dbg !37
  %130 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %9, !dbg !37
  %131 = tail call i8 asm sideeffect "@$2 ld.shared.b8 $0, [ $1 + 0 ];", "=h,r,b"(ptr addrspace(3) %130, i1 %129) #5, !dbg !37
  %132 = zext i8 %131 to i32, !dbg !37
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 1, i32 31), !dbg !37
  %134 = trunc i32 %133 to i8, !dbg !37
  %135 = or i8 %131, %134, !dbg !35
  %136 = and i32 %9, 1009, !dbg !37
  %137 = icmp eq i32 %136, 0, !dbg !37
  %138 = insertelement <1 x i8> poison, i8 %135, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %130, <1 x i8> %138, i1 %137) #5, !dbg !37
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !37
  %139 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %125, !dbg !37
  %140 = load i8, ptr addrspace(3) %139, align 2, !dbg !37
  %.not = icmp eq i8 %140, 0, !dbg !38
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %126, !dbg !39
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !39
  %143 = getelementptr float, ptr addrspace(3) @global_smem, i32 %125, !dbg !39
  %144 = shufflevector <8 x float> %78, <8 x float> poison, <2 x i32> <i32 2, i32 0>, !dbg !26
  %145 = fcmp oeq <2 x float> %144, splat (float 0xFFF0000000000000), !dbg !26
  %146 = insertelement <2 x float> poison, float %92, i64 0, !dbg !41
  %147 = insertelement <2 x float> %146, float %94, i64 1, !dbg !41
  %148 = fmul <2 x float> %147, zeroinitializer, !dbg !41
  %149 = insertelement <2 x float> poison, float %104, i64 0, !dbg !42
  %150 = insertelement <2 x float> %149, float %106, i64 1, !dbg !42
  %151 = fadd <2 x float> %150, %148, !dbg !42
  %152 = select <2 x i1> %145, <2 x float> splat (float 1.000000e+00), <2 x float> %151, !dbg !42
  %153 = insertelement <2 x i1> poison, i1 %13, i64 0, !dbg !43
  %154 = shufflevector <2 x i1> %153, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !43
  %155 = select <2 x i1> %154, <2 x float> %144, <2 x float> splat (float 0xFFF0000000000000), !dbg !43
  %156 = select <2 x i1> %154, <2 x float> %152, <2 x float> zeroinitializer, !dbg !44
  %157 = shufflevector <8 x float> %78, <8 x float> poison, <2 x i32> <i32 3, i32 1>, !dbg !45
  %158 = fcmp ogt <2 x float> %155, %157, !dbg !45
  %159 = fcmp uno <2 x float> %155, zeroinitializer, !dbg !46
  %160 = or <2 x i1> %159, %158, !dbg !47
  %161 = select <2 x i1> %160, <2 x float> %155, <2 x float> %157, !dbg !48
  %162 = fcmp oeq <2 x float> %161, splat (float 0xFFF0000000000000), !dbg !26
  %163 = extractelement <2 x float> %161, i64 0, !dbg !43
  %164 = extractelement <2 x float> %155, i64 0, !dbg !30
  %165 = fsub float %164, %163, !dbg !30
  %166 = extractelement <2 x float> %161, i64 1, !dbg !43
  %167 = extractelement <2 x float> %155, i64 1, !dbg !30
  %168 = fsub float %167, %166, !dbg !30
  %169 = fmul float %165, 0x3FF7154760000000, !dbg !31
  %170 = tail call float @llvm.nvvm.ex2.approx.f(float %169), !dbg !31
  %171 = fmul float %168, 0x3FF7154760000000, !dbg !31
  %172 = tail call float @llvm.nvvm.ex2.approx.f(float %171), !dbg !31
  %173 = insertelement <2 x float> poison, float %170, i64 0, !dbg !49
  %174 = insertelement <2 x float> %173, float %172, i64 1, !dbg !49
  %175 = select <2 x i1> %162, <2 x float> splat (float 1.000000e+00), <2 x float> %174, !dbg !49
  %176 = fsub float %114, %163, !dbg !32
  %177 = fsub float %115, %166, !dbg !32
  %178 = fmul float %176, 0x3FF7154760000000, !dbg !31
  %179 = tail call float @llvm.nvvm.ex2.approx.f(float %178), !dbg !31
  %180 = fmul float %177, 0x3FF7154760000000, !dbg !31
  %181 = tail call float @llvm.nvvm.ex2.approx.f(float %180), !dbg !31
  %182 = insertelement <2 x float> poison, float %179, i64 0, !dbg !50
  %183 = insertelement <2 x float> %182, float %181, i64 1, !dbg !50
  %184 = select <2 x i1> %162, <2 x float> splat (float 1.000000e+00), <2 x float> %183, !dbg !50
  %185 = fmul <2 x float> %156, %175, !dbg !41
  %186 = fadd <2 x float> %184, %185, !dbg !42
  %187 = select i1 %44, float %163, float %164, !dbg !43
  %188 = select i1 %44, float %166, float %167, !dbg !43
  %189 = insertelement <2 x i1> poison, i1 %44, i64 0, !dbg !44
  %190 = shufflevector <2 x i1> %189, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !44
  %191 = select <2 x i1> %190, <2 x float> %186, <2 x float> %156, !dbg !44
  %192 = shufflevector <8 x float> %78, <8 x float> poison, <2 x i32> <i32 4, i32 6>, !dbg !26
  %193 = fcmp oeq <2 x float> %192, splat (float 0xFFF0000000000000), !dbg !26
  %194 = insertelement <2 x float> poison, float %88, i64 0, !dbg !41
  %195 = insertelement <2 x float> %194, float %90, i64 1, !dbg !41
  %196 = fmul <2 x float> %195, zeroinitializer, !dbg !41
  %197 = insertelement <2 x float> poison, float %100, i64 0, !dbg !42
  %198 = insertelement <2 x float> %197, float %102, i64 1, !dbg !42
  %199 = fadd <2 x float> %198, %196, !dbg !42
  %200 = select <2 x i1> %193, <2 x float> splat (float 1.000000e+00), <2 x float> %199, !dbg !42
  %201 = select <2 x i1> %154, <2 x float> %192, <2 x float> splat (float 0xFFF0000000000000), !dbg !43
  %202 = select <2 x i1> %154, <2 x float> %200, <2 x float> zeroinitializer, !dbg !44
  %203 = shufflevector <8 x float> %78, <8 x float> poison, <2 x i32> <i32 5, i32 7>, !dbg !45
  %204 = fcmp ogt <2 x float> %201, %203, !dbg !45
  %205 = fcmp uno <2 x float> %201, zeroinitializer, !dbg !46
  %206 = or <2 x i1> %205, %204, !dbg !47
  %207 = select <2 x i1> %206, <2 x float> %201, <2 x float> %203, !dbg !48
  %208 = fcmp oeq <2 x float> %207, splat (float 0xFFF0000000000000), !dbg !26
  %209 = extractelement <2 x float> %207, i64 0, !dbg !43
  %210 = extractelement <2 x float> %201, i64 0, !dbg !30
  %211 = fsub float %210, %209, !dbg !30
  %212 = extractelement <2 x float> %207, i64 1, !dbg !43
  %213 = extractelement <2 x float> %201, i64 1, !dbg !30
  %214 = fsub float %213, %212, !dbg !30
  %215 = fmul float %211, 0x3FF7154760000000, !dbg !31
  %216 = tail call float @llvm.nvvm.ex2.approx.f(float %215), !dbg !31
  %217 = fmul float %214, 0x3FF7154760000000, !dbg !31
  %218 = tail call float @llvm.nvvm.ex2.approx.f(float %217), !dbg !31
  %219 = insertelement <2 x float> poison, float %216, i64 0, !dbg !49
  %220 = insertelement <2 x float> %219, float %218, i64 1, !dbg !49
  %221 = select <2 x i1> %208, <2 x float> splat (float 1.000000e+00), <2 x float> %220, !dbg !49
  %222 = fsub float %112, %209, !dbg !32
  %223 = fsub float %113, %212, !dbg !32
  %224 = fmul float %222, 0x3FF7154760000000, !dbg !31
  %225 = tail call float @llvm.nvvm.ex2.approx.f(float %224), !dbg !31
  %226 = fmul float %223, 0x3FF7154760000000, !dbg !31
  %227 = tail call float @llvm.nvvm.ex2.approx.f(float %226), !dbg !31
  %228 = insertelement <2 x float> poison, float %225, i64 0, !dbg !50
  %229 = insertelement <2 x float> %228, float %227, i64 1, !dbg !50
  %230 = select <2 x i1> %208, <2 x float> splat (float 1.000000e+00), <2 x float> %229, !dbg !50
  %231 = fmul <2 x float> %202, %221, !dbg !41
  %232 = fadd <2 x float> %230, %231, !dbg !42
  %233 = select i1 %44, float %209, float %210, !dbg !43
  %234 = select i1 %44, float %212, float %213, !dbg !43
  %235 = select <2 x i1> %190, <2 x float> %232, <2 x float> %202, !dbg !44
  %236 = fcmp ogt float %233, %234, !dbg !51
  %237 = fcmp uno float %233, 0.000000e+00, !dbg !52
  %238 = or i1 %236, %237, !dbg !53
  %239 = select i1 %238, float %233, float %234, !dbg !54
  %240 = fcmp uno float %239, 0.000000e+00, !dbg !52
  %241 = fcmp ogt float %239, %187, !dbg !51
  %242 = or i1 %241, %240, !dbg !53
  %243 = select i1 %242, float %239, float %187, !dbg !54
  %244 = fcmp ogt float %243, %188, !dbg !51
  %245 = fcmp uno float %243, 0.000000e+00, !dbg !52
  %246 = or i1 %244, %245, !dbg !53
  %247 = select i1 %246, float %243, float %188, !dbg !54
  %248 = bitcast float %247 to i32, !dbg !39
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 16, i32 31), !dbg !39
  %250 = bitcast i32 %249 to float, !dbg !39
  %251 = fcmp ogt float %247, %250, !dbg !51
  %252 = fcmp uno float %247, 0.000000e+00, !dbg !52
  %253 = or i1 %252, %251, !dbg !53
  %254 = select i1 %253, float %247, float %250, !dbg !54
  %255 = bitcast float %254 to i32, !dbg !39
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 8, i32 31), !dbg !39
  %257 = bitcast i32 %256 to float, !dbg !39
  %258 = fcmp ogt float %254, %257, !dbg !51
  %259 = fcmp uno float %254, 0.000000e+00, !dbg !52
  %260 = or i1 %258, %259, !dbg !53
  %261 = select i1 %260, float %254, float %257, !dbg !54
  %262 = bitcast float %261 to i32, !dbg !39
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 4, i32 31), !dbg !39
  %264 = bitcast i32 %263 to float, !dbg !39
  %265 = fcmp ogt float %261, %264, !dbg !51
  %266 = fcmp uno float %261, 0.000000e+00, !dbg !52
  %267 = or i1 %265, %266, !dbg !53
  %268 = select i1 %267, float %261, float %264, !dbg !54
  %269 = bitcast float %268 to i32, !dbg !39
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 2, i32 31), !dbg !39
  %271 = bitcast i32 %270 to float, !dbg !39
  %272 = fcmp ogt float %268, %271, !dbg !51
  %273 = fcmp uno float %268, 0.000000e+00, !dbg !52
  %274 = or i1 %272, %273, !dbg !53
  %275 = select i1 %274, float %268, float %271, !dbg !54
  %276 = bitcast float %275 to i32, !dbg !39
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 1, i32 31), !dbg !39
  %278 = bitcast i32 %277 to float, !dbg !39
  %279 = fcmp ogt float %275, %278, !dbg !51
  %280 = fcmp uno float %275, 0.000000e+00, !dbg !52
  %281 = or i1 %279, %280, !dbg !53
  %282 = select i1 %281, i32 %276, i32 %277, !dbg !54
  %283 = insertelement <1 x i32> poison, i32 %282, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %283, i1 %124) #5, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  %284 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %142, i1 %129) #5, !dbg !39
  %285 = bitcast i32 %284 to float, !dbg !39
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 1, i32 31), !dbg !39
  %287 = bitcast i32 %286 to float, !dbg !39
  %288 = fcmp ogt float %285, %287, !dbg !51
  %289 = fcmp uno float %285, 0.000000e+00, !dbg !52
  %290 = or i1 %289, %288, !dbg !53
  %291 = select i1 %290, i32 %284, i32 %286, !dbg !54
  %292 = insertelement <1 x i32> poison, i32 %291, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %292, i1 %137) #5, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  %293 = load float, ptr addrspace(3) %143, align 8, !dbg !39
  %294 = fcmp oeq float %293, 0xFFF0000000000000, !dbg !55
  %295 = fsub float %233, %293, !dbg !56
  %296 = fsub float %234, %293, !dbg !56
  %297 = fsub float %187, %293, !dbg !56
  %298 = fsub float %188, %293, !dbg !56
  %299 = fmul float %295, 0x3FF7154760000000, !dbg !57
  %300 = select i1 %294, float 0.000000e+00, float %299, !dbg !58
  %301 = tail call float @llvm.nvvm.ex2.approx.f(float %300), !dbg !57
  %302 = fmul float %296, 0x3FF7154760000000, !dbg !57
  %303 = select i1 %294, float 0.000000e+00, float %302, !dbg !58
  %304 = tail call float @llvm.nvvm.ex2.approx.f(float %303), !dbg !57
  %305 = fmul float %297, 0x3FF7154760000000, !dbg !57
  %306 = select i1 %294, float 0.000000e+00, float %305, !dbg !58
  %307 = tail call float @llvm.nvvm.ex2.approx.f(float %306), !dbg !57
  %308 = fmul float %298, 0x3FF7154760000000, !dbg !57
  %309 = select i1 %294, float 0.000000e+00, float %308, !dbg !58
  %310 = tail call float @llvm.nvvm.ex2.approx.f(float %309), !dbg !57
  %311 = insertelement <2 x float> poison, float %301, i64 0, !dbg !59
  %312 = insertelement <2 x float> %311, float %304, i64 1, !dbg !59
  %313 = fmul <2 x float> %235, %312, !dbg !59
  %314 = insertelement <2 x float> poison, float %307, i64 0, !dbg !59
  %315 = insertelement <2 x float> %314, float %310, i64 1, !dbg !59
  %316 = fmul <2 x float> %191, %315, !dbg !59
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !60
  %shift = shufflevector <2 x float> %313, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !63
  %317 = fadd <2 x float> %313, %shift, !dbg !63
  %318 = fadd <2 x float> %317, %316, !dbg !63
  %shift15 = shufflevector <2 x float> %316, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !63
  %319 = fadd <2 x float> %318, %shift15, !dbg !63
  %320 = extractelement <2 x float> %319, i64 0, !dbg !63
  %321 = bitcast float %320 to i32, !dbg !60
  %322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %321, i32 16, i32 31), !dbg !60
  %323 = bitcast i32 %322 to float, !dbg !60
  %324 = fadd float %320, %323, !dbg !63
  %325 = bitcast float %324 to i32, !dbg !60
  %326 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %325, i32 8, i32 31), !dbg !60
  %327 = bitcast i32 %326 to float, !dbg !60
  %328 = fadd float %324, %327, !dbg !63
  %329 = bitcast float %328 to i32, !dbg !60
  %330 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %329, i32 4, i32 31), !dbg !60
  %331 = bitcast i32 %330 to float, !dbg !60
  %332 = fadd float %328, %331, !dbg !63
  %333 = bitcast float %332 to i32, !dbg !60
  %334 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %333, i32 2, i32 31), !dbg !60
  %335 = bitcast i32 %334 to float, !dbg !60
  %336 = fadd float %332, %335, !dbg !63
  %337 = bitcast float %336 to i32, !dbg !60
  %338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %337, i32 1, i32 31), !dbg !60
  %339 = bitcast i32 %338 to float, !dbg !60
  %340 = fadd float %336, %339, !dbg !63
  %341 = bitcast float %340 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %341, i1 %124) #5, !dbg !60
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !60
  %342 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %142, i1 %129) #5, !dbg !60
  %343 = bitcast i32 %342 to float, !dbg !60
  %344 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %342, i32 1, i32 31), !dbg !60
  %345 = bitcast i32 %344 to float, !dbg !60
  %346 = fadd float %343, %345, !dbg !63
  %347 = bitcast float %346 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %347, i1 %137) #5, !dbg !60
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !60
  %348 = load float, ptr addrspace(3) %143, align 8, !dbg !60
  %349 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #5, !dbg !64
  %350 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %23, i64 %349, i1 %13) #5, !dbg !64
  %351 = extractvalue { i32, i32, i32, i32 } %350, 0, !dbg !64
  %352 = extractvalue { i32, i32, i32, i32 } %350, 1, !dbg !64
  %353 = extractvalue { i32, i32, i32, i32 } %350, 2, !dbg !64
  %354 = extractvalue { i32, i32, i32, i32 } %350, 3, !dbg !64
  %355 = bitcast i32 %351 to float, !dbg !64
  %356 = bitcast i32 %352 to float, !dbg !64
  %357 = bitcast i32 %353 to float, !dbg !64
  %358 = bitcast i32 %354 to float, !dbg !64
  %359 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #5, !dbg !65
  %360 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %32, i64 %359, i1 %13) #5, !dbg !65
  %361 = extractvalue { i32, i32, i32, i32 } %360, 0, !dbg !65
  %362 = extractvalue { i32, i32, i32, i32 } %360, 1, !dbg !65
  %363 = extractvalue { i32, i32, i32, i32 } %360, 2, !dbg !65
  %364 = extractvalue { i32, i32, i32, i32 } %360, 3, !dbg !65
  %365 = bitcast i32 %361 to float, !dbg !65
  %366 = bitcast i32 %362 to float, !dbg !65
  %367 = bitcast i32 %363 to float, !dbg !65
  %368 = bitcast i32 %364 to float, !dbg !65
  %369 = fadd float %355, %365, !dbg !66
  %370 = fadd float %356, %366, !dbg !66
  %371 = fadd float %357, %367, !dbg !66
  %372 = fadd float %358, %368, !dbg !66
  %373 = fsub float %369, %293, !dbg !67
  %374 = fsub float %370, %293, !dbg !67
  %375 = fsub float %371, %293, !dbg !67
  %376 = fsub float %372, %293, !dbg !67
  %377 = fmul float %373, 0x3FF7154760000000, !dbg !68
  %378 = tail call float @llvm.nvvm.ex2.approx.f(float %377), !dbg !68
  %379 = fmul float %374, 0x3FF7154760000000, !dbg !68
  %380 = tail call float @llvm.nvvm.ex2.approx.f(float %379), !dbg !68
  %381 = fmul float %375, 0x3FF7154760000000, !dbg !68
  %382 = tail call float @llvm.nvvm.ex2.approx.f(float %381), !dbg !68
  %383 = fmul float %376, 0x3FF7154760000000, !dbg !68
  %384 = tail call float @llvm.nvvm.ex2.approx.f(float %383), !dbg !68
  %385 = tail call float @llvm.nvvm.div.full(float %378, float %348), !dbg !69
  %386 = tail call float @llvm.nvvm.div.full(float %380, float %348), !dbg !69
  %387 = tail call float @llvm.nvvm.div.full(float %382, float %348), !dbg !69
  %388 = tail call float @llvm.nvvm.div.full(float %384, float %348), !dbg !69
  %389 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !70
  %390 = bitcast float %385 to i32, !dbg !71
  %391 = select i1 %.not, i32 0, i32 %390, !dbg !72
  %392 = bitcast float %386 to i32, !dbg !71
  %393 = select i1 %.not, i32 0, i32 %392, !dbg !72
  %394 = bitcast float %387 to i32, !dbg !71
  %395 = select i1 %.not, i32 0, i32 %394, !dbg !72
  %396 = bitcast float %388 to i32, !dbg !71
  %397 = select i1 %.not, i32 0, i32 %396, !dbg !72
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %391, i32 %393, i32 %395, i32 %397, ptr addrspace(1) %389, i1 %13) #5, !dbg !71
  %398 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #5, !dbg !64
  %399 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %43, i64 %398, i1 %44) #5, !dbg !64
  %400 = extractvalue { i32, i32, i32, i32 } %399, 0, !dbg !64
  %401 = extractvalue { i32, i32, i32, i32 } %399, 1, !dbg !64
  %402 = extractvalue { i32, i32, i32, i32 } %399, 2, !dbg !64
  %403 = extractvalue { i32, i32, i32, i32 } %399, 3, !dbg !64
  %404 = bitcast i32 %400 to float, !dbg !64
  %405 = bitcast i32 %401 to float, !dbg !64
  %406 = bitcast i32 %402 to float, !dbg !64
  %407 = bitcast i32 %403 to float, !dbg !64
  %408 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #5, !dbg !65
  %409 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %53, i64 %408, i1 %44) #5, !dbg !65
  %410 = extractvalue { i32, i32, i32, i32 } %409, 0, !dbg !65
  %411 = extractvalue { i32, i32, i32, i32 } %409, 1, !dbg !65
  %412 = extractvalue { i32, i32, i32, i32 } %409, 2, !dbg !65
  %413 = extractvalue { i32, i32, i32, i32 } %409, 3, !dbg !65
  %414 = bitcast i32 %410 to float, !dbg !65
  %415 = bitcast i32 %411 to float, !dbg !65
  %416 = bitcast i32 %412 to float, !dbg !65
  %417 = bitcast i32 %413 to float, !dbg !65
  %418 = fadd float %404, %414, !dbg !66
  %419 = fadd float %405, %415, !dbg !66
  %420 = fadd float %406, %416, !dbg !66
  %421 = fadd float %407, %417, !dbg !66
  %422 = fsub float %418, %293, !dbg !67
  %423 = fsub float %419, %293, !dbg !67
  %424 = fsub float %420, %293, !dbg !67
  %425 = fsub float %421, %293, !dbg !67
  %426 = fmul float %422, 0x3FF7154760000000, !dbg !68
  %427 = tail call float @llvm.nvvm.ex2.approx.f(float %426), !dbg !68
  %428 = fmul float %423, 0x3FF7154760000000, !dbg !68
  %429 = tail call float @llvm.nvvm.ex2.approx.f(float %428), !dbg !68
  %430 = fmul float %424, 0x3FF7154760000000, !dbg !68
  %431 = tail call float @llvm.nvvm.ex2.approx.f(float %430), !dbg !68
  %432 = fmul float %425, 0x3FF7154760000000, !dbg !68
  %433 = tail call float @llvm.nvvm.ex2.approx.f(float %432), !dbg !68
  %434 = tail call float @llvm.nvvm.div.full(float %427, float %348), !dbg !69
  %435 = tail call float @llvm.nvvm.div.full(float %429, float %348), !dbg !69
  %436 = tail call float @llvm.nvvm.div.full(float %431, float %348), !dbg !69
  %437 = tail call float @llvm.nvvm.div.full(float %433, float %348), !dbg !69
  %438 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !70
  %439 = bitcast float %434 to i32, !dbg !71
  %440 = select i1 %.not, i32 0, i32 %439, !dbg !72
  %441 = bitcast float %435 to i32, !dbg !71
  %442 = select i1 %.not, i32 0, i32 %441, !dbg !72
  %443 = bitcast float %436 to i32, !dbg !71
  %444 = select i1 %.not, i32 0, i32 %443, !dbg !72
  %445 = bitcast float %437 to i32, !dbg !71
  %446 = select i1 %.not, i32 0, i32 %445, !dbg !72
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %440, i32 %442, i32 %444, i32 %446, ptr addrspace(1) %438, i1 %44) #5, !dbg !71
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.redux.sync.or(i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

attributes #0 = { "nvvm.reqntid"="512" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "coefcjzwqeaazrpai4joq343fvrsgrhhb67vzijrbyjgc63uwhrl.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/oe")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "triton_red_fused_9", linkageName: "triton_red_fused_9", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 23, column: 28, scope: !5)
!9 = !DILocation(line: 23, column: 33, scope: !5)
!10 = !DILocation(line: 24, column: 44, scope: !5)
!11 = !DILocation(line: 24, column: 23, scope: !5)
!12 = !DILocation(line: 25, column: 21, scope: !5)
!13 = !DILocation(line: 26, column: 37, scope: !5)
!14 = !DILocation(line: 30, column: 19, scope: !5)
!15 = !DILocation(line: 42, column: 45, scope: !5)
!16 = !DILocation(line: 42, column: 41, scope: !5)
!17 = !DILocation(line: 42, column: 34, scope: !5)
!18 = !DILocation(line: 42, column: 50, scope: !5)
!19 = !DILocation(line: 43, column: 50, scope: !5)
!20 = !DILocation(line: 43, column: 34, scope: !5)
!21 = !DILocation(line: 43, column: 62, scope: !5)
!22 = !DILocation(line: 37, column: 31, scope: !5)
!23 = !DILocation(line: 38, column: 29, scope: !5)
!24 = !DILocation(line: 42, column: 60, scope: !5)
!25 = !DILocation(line: 44, column: 22, scope: !5)
!26 = !DILocation(line: 197, column: 19, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !5, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 56, column: 43, scope: !5)
!30 = !DILocation(line: 197, column: 53, scope: !27, inlinedAt: !29)
!31 = !DILocation(line: 174, column: 24, scope: !27, inlinedAt: !29)
!32 = !DILocation(line: 200, column: 53, scope: !27, inlinedAt: !29)
!33 = !DILocation(line: 46, column: 23, scope: !5)
!34 = !DILocation(line: 52, column: 49, scope: !5)
!35 = !DILocation(line: 261, column: 15, scope: !27, inlinedAt: !36)
!36 = !DILocation(line: 61, column: 49, scope: !5)
!37 = !DILocation(line: 266, column: 29, scope: !27, inlinedAt: !36)
!38 = !DILocation(line: 61, column: 64, scope: !5)
!39 = !DILocation(line: 124, column: 29, scope: !27, inlinedAt: !40)
!40 = !DILocation(line: 64, column: 35, scope: !5)
!41 = !DILocation(line: 206, column: 24, scope: !27, inlinedAt: !29)
!42 = !DILocation(line: 206, column: 36, scope: !27, inlinedAt: !29)
!43 = !DILocation(line: 59, column: 64, scope: !5)
!44 = !DILocation(line: 60, column: 64, scope: !5)
!45 = !DILocation(line: 111, column: 15, scope: !27, inlinedAt: !29)
!46 = !DILocation(line: 113, column: 21, scope: !27, inlinedAt: !29)
!47 = !DILocation(line: 113, column: 16, scope: !27, inlinedAt: !29)
!48 = !DILocation(line: 114, column: 29, scope: !27, inlinedAt: !29)
!49 = !DILocation(line: 197, column: 39, scope: !27, inlinedAt: !29)
!50 = !DILocation(line: 200, column: 39, scope: !27, inlinedAt: !29)
!51 = !DILocation(line: 111, column: 15, scope: !27, inlinedAt: !40)
!52 = !DILocation(line: 113, column: 21, scope: !27, inlinedAt: !40)
!53 = !DILocation(line: 113, column: 16, scope: !27, inlinedAt: !40)
!54 = !DILocation(line: 114, column: 29, scope: !27, inlinedAt: !40)
!55 = !DILocation(line: 181, column: 40, scope: !27, inlinedAt: !40)
!56 = !DILocation(line: 181, column: 68, scope: !27, inlinedAt: !40)
!57 = !DILocation(line: 174, column: 24, scope: !27, inlinedAt: !40)
!58 = !DILocation(line: 181, column: 58, scope: !27, inlinedAt: !40)
!59 = !DILocation(line: 182, column: 31, scope: !27, inlinedAt: !40)
!60 = !DILocation(line: 290, column: 36, scope: !61, inlinedAt: !40)
!61 = distinct !DILexicalBlockFile(scope: !5, file: !62, discriminator: 0)
!62 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!63 = !DILocation(line: 260, column: 15, scope: !61, inlinedAt: !40)
!64 = !DILocation(line: 75, column: 51, scope: !5)
!65 = !DILocation(line: 76, column: 63, scope: !5)
!66 = !DILocation(line: 78, column: 24, scope: !5)
!67 = !DILocation(line: 79, column: 24, scope: !5)
!68 = !DILocation(line: 80, column: 28, scope: !5)
!69 = !DILocation(line: 81, column: 25, scope: !5)
!70 = !DILocation(line: 84, column: 29, scope: !5)
!71 = !DILocation(line: 84, column: 64, scope: !5)
!72 = !DILocation(line: 83, column: 39, scope: !5)
!73 = !DILocation(line: 69, column: 4, scope: !5)
