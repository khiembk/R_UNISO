; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_per_fused_add_mean_mul_pow_rsqrt_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr #0 !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !9
  %11 = and i32 %10, 31, !dbg !9
  %12 = lshr i32 %10, 5, !dbg !9
  %13 = shl nuw nsw i32 %10, 2, !dbg !9
  %14 = and i32 %13, 508, !dbg !9
  %15 = shl i32 %9, 9, !dbg !10
  %16 = or disjoint i32 %14, %15, !dbg !11
  %17 = sext i32 %16 to i64, !dbg !12
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !12
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %18) #6, !dbg !13
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !13
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !13
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !13
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !13
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !14
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %24) #6, !dbg !15
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !15
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !15
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !15
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !15
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !16
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %30) #6, !dbg !17
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !17
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !17
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !17
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !17
  %36 = zext nneg i32 %14 to i64, !dbg !18
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !18
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #6, !dbg !19
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l"(ptr addrspace(1) %37, i64 %38) #6, !dbg !19
  %40 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !13
  %41 = insertelement <2 x i32> %40, i32 %21, i64 1, !dbg !13
  %42 = bitcast <2 x i32> %41 to <2 x float>, !dbg !13
  %43 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !15
  %44 = insertelement <2 x i32> %43, i32 %27, i64 1, !dbg !15
  %45 = bitcast <2 x i32> %44 to <2 x float>, !dbg !15
  %46 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !17
  %47 = insertelement <2 x i32> %46, i32 %33, i64 1, !dbg !17
  %48 = bitcast <2 x i32> %47 to <2 x float>, !dbg !17
  %49 = fadd <2 x float> %42, %45, !dbg !20
  %50 = fadd <2 x float> %49, %48, !dbg !21
  %51 = fmul <2 x float> %50, %50, !dbg !22
  %52 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !13
  %53 = insertelement <2 x i32> %52, i32 %22, i64 1, !dbg !13
  %54 = bitcast <2 x i32> %53 to <2 x float>, !dbg !13
  %55 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !15
  %56 = insertelement <2 x i32> %55, i32 %28, i64 1, !dbg !15
  %57 = bitcast <2 x i32> %56 to <2 x float>, !dbg !15
  %58 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !17
  %59 = insertelement <2 x i32> %58, i32 %34, i64 1, !dbg !17
  %60 = bitcast <2 x i32> %59 to <2 x float>, !dbg !17
  %61 = fadd <2 x float> %54, %57, !dbg !20
  %62 = fadd <2 x float> %61, %60, !dbg !21
  %63 = fmul <2 x float> %62, %62, !dbg !22
  %shift = shufflevector <2 x float> %51, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !23
  %64 = fadd <2 x float> %51, %shift, !dbg !23
  %shift1 = shufflevector <2 x float> %63, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !23
  %65 = fadd <2 x float> %shift1, %64, !dbg !23
  %66 = fadd <2 x float> %63, %65, !dbg !23
  %67 = extractelement <2 x float> %66, i64 0, !dbg !23
  %68 = bitcast float %67 to i32, !dbg !27
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 16, i32 31), !dbg !27
  %70 = bitcast i32 %69 to float, !dbg !27
  %71 = fadd float %67, %70, !dbg !23
  %72 = bitcast float %71 to i32, !dbg !27
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 8, i32 31), !dbg !27
  %74 = bitcast i32 %73 to float, !dbg !27
  %75 = fadd float %71, %74, !dbg !23
  %76 = bitcast float %75 to i32, !dbg !27
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 4, i32 31), !dbg !27
  %78 = bitcast i32 %77 to float, !dbg !27
  %79 = fadd float %75, %78, !dbg !23
  %80 = bitcast float %79 to i32, !dbg !27
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 2, i32 31), !dbg !27
  %82 = bitcast i32 %81 to float, !dbg !27
  %83 = fadd float %79, %82, !dbg !23
  %84 = bitcast float %83 to i32, !dbg !27
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 1, i32 31), !dbg !27
  %86 = bitcast i32 %85 to float, !dbg !27
  %87 = fadd float %83, %86, !dbg !23
  %88 = and i32 %12, 3, !dbg !27
  %89 = icmp eq i32 %11, 0, !dbg !27
  %90 = getelementptr float, ptr addrspace(3) @global_smem, i32 %88, !dbg !27
  %91 = bitcast float %87 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 %89) #6, !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !27
  %92 = icmp samesign ult i32 %10, 4, !dbg !27
  %93 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !27
  %94 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %93, i1 %92) #6, !dbg !27
  %95 = bitcast i32 %94 to float, !dbg !27
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 2, i32 31), !dbg !27
  %97 = bitcast i32 %96 to float, !dbg !27
  %98 = fadd float %95, %97, !dbg !23
  %99 = bitcast float %98 to i32, !dbg !27
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 1, i32 31), !dbg !27
  %101 = bitcast i32 %100 to float, !dbg !27
  %102 = fadd float %98, %101, !dbg !23
  %103 = icmp eq i32 %10, 0, !dbg !27
  %104 = bitcast float %102 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %104, i1 %103) #6, !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !27
  %105 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !27
  %106 = fadd float %105, 0.000000e+00, !dbg !28
  %107 = tail call float @llvm.nvvm.div.full(float %106, float 5.120000e+02), !dbg !32
  %108 = fadd float %107, 0x3EB0C6F7A0000000, !dbg !33
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !34
  %.not.i = icmp eq i32 %109, 0, !dbg !34
  br i1 %.not.i, label %112, label %110, !dbg !34

110:                                              ; preds = %8
  %111 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %108), !dbg !34
  br label %__nv_rsqrtf.exit, !dbg !34

112:                                              ; preds = %8
  %113 = tail call float @llvm.nvvm.rsqrt.approx.f(float %108), !dbg !34
  br label %__nv_rsqrtf.exit, !dbg !34

__nv_rsqrtf.exit:                                 ; preds = %110, %112
  %.0.i = phi float [ %111, %110 ], [ %113, %112 ], !dbg !34
  %114 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !19
  %115 = bitcast i32 %114 to float, !dbg !19
  %116 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !19
  %117 = bitcast i32 %116 to float, !dbg !19
  %118 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !19
  %119 = bitcast i32 %118 to float, !dbg !19
  %120 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !19
  %121 = bitcast i32 %120 to float, !dbg !19
  %122 = extractelement <2 x float> %50, i64 0, !dbg !35
  %123 = fmul float %122, %.0.i, !dbg !35
  %124 = extractelement <2 x float> %50, i64 1, !dbg !35
  %125 = fmul float %124, %.0.i, !dbg !35
  %126 = extractelement <2 x float> %62, i64 1, !dbg !35
  %127 = fmul float %126, %.0.i, !dbg !35
  %128 = extractelement <2 x float> %62, i64 0, !dbg !35
  %129 = fmul float %128, %.0.i, !dbg !35
  %130 = fmul float %123, %121, !dbg !36
  %131 = fmul float %125, %119, !dbg !36
  %132 = fmul float %127, %117, !dbg !36
  %133 = fmul float %129, %115, !dbg !36
  %134 = getelementptr float, ptr addrspace(1) %4, i64 %17, !dbg !37
  %135 = bitcast float %130 to i32, !dbg !38
  %136 = bitcast float %131 to i32, !dbg !38
  %137 = bitcast float %132 to i32, !dbg !38
  %138 = bitcast float %133 to i32, !dbg !38
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %135, i32 %136, i32 %137, i32 %138, ptr addrspace(1) %134) #6, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "cm6ncetewmgk5qsolkak7uceryayez6utaznewcxtvw3qmueefb4.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/m6")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "triton_per_fused_add_mean_mul_pow_rsqrt_2", linkageName: "triton_per_fused_add_mean_mul_pow_rsqrt_2", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 25, column: 28, scope: !5)
!9 = !DILocation(line: 28, column: 28, scope: !5)
!10 = !DILocation(line: 35, column: 41, scope: !5)
!11 = !DILocation(line: 35, column: 37, scope: !5)
!12 = !DILocation(line: 35, column: 30, scope: !5)
!13 = !DILocation(line: 35, column: 46, scope: !5)
!14 = !DILocation(line: 36, column: 30, scope: !5)
!15 = !DILocation(line: 36, column: 46, scope: !5)
!16 = !DILocation(line: 37, column: 30, scope: !5)
!17 = !DILocation(line: 37, column: 46, scope: !5)
!18 = !DILocation(line: 38, column: 30, scope: !5)
!19 = !DILocation(line: 38, column: 37, scope: !5)
!20 = !DILocation(line: 39, column: 18, scope: !5)
!21 = !DILocation(line: 40, column: 18, scope: !5)
!22 = !DILocation(line: 41, column: 18, scope: !5)
!23 = !DILocation(line: 260, column: 15, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !5, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!26 = !DILocation(line: 43, column: 57, scope: !5)
!27 = !DILocation(line: 290, column: 36, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 66, column: 15, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !5, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 43, column: 44, scope: !5)
!32 = !DILocation(line: 45, column: 20, scope: !5)
!33 = !DILocation(line: 47, column: 20, scope: !5)
!34 = !DILocation(line: 48, column: 28, scope: !5)
!35 = !DILocation(line: 49, column: 19, scope: !5)
!36 = !DILocation(line: 50, column: 19, scope: !5)
!37 = !DILocation(line: 51, column: 25, scope: !5)
!38 = !DILocation(line: 51, column: 48, scope: !5)
!39 = !DILocation(line: 51, column: 4, scope: !5)
