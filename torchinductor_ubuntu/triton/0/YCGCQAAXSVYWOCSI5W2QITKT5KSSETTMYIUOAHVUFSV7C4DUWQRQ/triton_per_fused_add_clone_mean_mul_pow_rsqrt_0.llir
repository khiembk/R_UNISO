; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_per_fused_add_clone_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr #0 !dbg !5 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !9
  %10 = and i32 %9, 31, !dbg !9
  %11 = lshr i32 %9, 5, !dbg !9
  %12 = shl nuw nsw i32 %9, 2, !dbg !9
  %13 = and i32 %12, 508, !dbg !9
  %14 = icmp samesign ult i32 %13, 384, !dbg !10
  %15 = mul i32 %8, 384, !dbg !11
  %16 = add i32 %13, %15, !dbg !12
  %17 = sext i32 %16 to i64, !dbg !13
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !13
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %18, i1 %14) #6, !dbg !14
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !14
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !14
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !14
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !14
  %24 = bitcast i32 %20 to float, !dbg !14
  %25 = bitcast i32 %21 to float, !dbg !14
  %26 = bitcast i32 %22 to float, !dbg !14
  %27 = bitcast i32 %23 to float, !dbg !14
  %28 = zext nneg i32 %13 to i64, !dbg !15
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !15
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #6, !dbg !16
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %29, i64 %30, i1 %14) #6, !dbg !16
  %32 = fmul float %24, %24, !dbg !17
  %33 = fmul float %25, %25, !dbg !17
  %34 = fmul float %26, %26, !dbg !17
  %35 = fmul float %27, %27, !dbg !17
  %36 = fadd float %32, %33, !dbg !18
  %37 = fadd float %34, %36, !dbg !18
  %38 = fadd float %35, %37, !dbg !18
  %39 = select i1 %14, float %38, float 0.000000e+00, !dbg !18
  %40 = bitcast float %39 to i32, !dbg !22
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 16, i32 31), !dbg !22
  %42 = bitcast i32 %41 to float, !dbg !22
  %43 = fadd float %39, %42, !dbg !18
  %44 = bitcast float %43 to i32, !dbg !22
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 8, i32 31), !dbg !22
  %46 = bitcast i32 %45 to float, !dbg !22
  %47 = fadd float %43, %46, !dbg !18
  %48 = bitcast float %47 to i32, !dbg !22
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 4, i32 31), !dbg !22
  %50 = bitcast i32 %49 to float, !dbg !22
  %51 = fadd float %47, %50, !dbg !18
  %52 = bitcast float %51 to i32, !dbg !22
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 2, i32 31), !dbg !22
  %54 = bitcast i32 %53 to float, !dbg !22
  %55 = fadd float %51, %54, !dbg !18
  %56 = bitcast float %55 to i32, !dbg !22
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 1, i32 31), !dbg !22
  %58 = bitcast i32 %57 to float, !dbg !22
  %59 = fadd float %55, %58, !dbg !18
  %60 = and i32 %11, 3, !dbg !22
  %61 = icmp eq i32 %10, 0, !dbg !22
  %62 = getelementptr float, ptr addrspace(3) @global_smem, i32 %60, !dbg !22
  %63 = bitcast float %59 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %63, i1 %61) #6, !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %64 = icmp samesign ult i32 %9, 4, !dbg !22
  %65 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !22
  %66 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %65, i1 %64) #6, !dbg !22
  %67 = bitcast i32 %66 to float, !dbg !22
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 2, i32 31), !dbg !22
  %69 = bitcast i32 %68 to float, !dbg !22
  %70 = fadd float %67, %69, !dbg !18
  %71 = bitcast float %70 to i32, !dbg !22
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 1, i32 31), !dbg !22
  %73 = bitcast i32 %72 to float, !dbg !22
  %74 = fadd float %70, %73, !dbg !18
  %75 = icmp eq i32 %9, 0, !dbg !22
  %76 = bitcast float %74 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %76, i1 %75) #6, !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %77 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !22
  %78 = fadd float %77, 0.000000e+00, !dbg !23
  %79 = tail call float @llvm.nvvm.div.full(float %78, float 3.840000e+02), !dbg !27
  %80 = fadd float %79, 0x3EB0C6F7A0000000, !dbg !28
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !29
  %.not.i = icmp eq i32 %81, 0, !dbg !29
  br i1 %.not.i, label %84, label %82, !dbg !29

82:                                               ; preds = %7
  %83 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %80), !dbg !29
  br label %__nv_rsqrtf.exit, !dbg !29

84:                                               ; preds = %7
  %85 = tail call float @llvm.nvvm.rsqrt.approx.f(float %80), !dbg !29
  br label %__nv_rsqrtf.exit, !dbg !29

__nv_rsqrtf.exit:                                 ; preds = %82, %84
  %.0.i = phi float [ %83, %82 ], [ %85, %84 ], !dbg !29
  %86 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !16
  %87 = bitcast i32 %86 to float, !dbg !16
  %88 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !16
  %89 = bitcast i32 %88 to float, !dbg !16
  %90 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !16
  %91 = bitcast i32 %90 to float, !dbg !16
  %92 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !16
  %93 = bitcast i32 %92 to float, !dbg !16
  %94 = fmul float %.0.i, %24, !dbg !30
  %95 = fmul float %.0.i, %25, !dbg !30
  %96 = fmul float %.0.i, %26, !dbg !30
  %97 = fmul float %.0.i, %27, !dbg !30
  %98 = fmul float %94, %93, !dbg !31
  %99 = fmul float %95, %91, !dbg !31
  %100 = fmul float %96, %89, !dbg !31
  %101 = fmul float %97, %87, !dbg !31
  %102 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %20, i32 %21, i32 %22, i32 %23, ptr addrspace(1) %102, i1 %14) #6, !dbg !33
  %103 = getelementptr float, ptr addrspace(1) %3, i64 %17, !dbg !34
  %104 = bitcast float %98 to i32, !dbg !35
  %105 = bitcast float %99 to i32, !dbg !35
  %106 = bitcast float %100 to i32, !dbg !35
  %107 = bitcast float %101 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %104, i32 %105, i32 %106, i32 %107, ptr addrspace(1) %103, i1 %14) #6, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "cww2krno77atvhnkweffxzgjvgge7qzsuv3sgfsnm4bhot2obctn.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/ww")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "triton_per_fused_add_clone_mean_mul_pow_rsqrt_0", linkageName: "triton_per_fused_add_clone_mean_mul_pow_rsqrt_0", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 25, column: 28, scope: !5)
!9 = !DILocation(line: 28, column: 28, scope: !5)
!10 = !DILocation(line: 30, column: 25, scope: !5)
!11 = !DILocation(line: 35, column: 41, scope: !5)
!12 = !DILocation(line: 35, column: 37, scope: !5)
!13 = !DILocation(line: 35, column: 30, scope: !5)
!14 = !DILocation(line: 35, column: 46, scope: !5)
!15 = !DILocation(line: 36, column: 30, scope: !5)
!16 = !DILocation(line: 36, column: 37, scope: !5)
!17 = !DILocation(line: 37, column: 18, scope: !5)
!18 = !DILocation(line: 260, column: 15, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !5, file: !20, discriminator: 0)
!20 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!21 = !DILocation(line: 40, column: 57, scope: !5)
!22 = !DILocation(line: 290, column: 36, scope: !19, inlinedAt: !21)
!23 = !DILocation(line: 66, column: 15, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !5, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 40, column: 44, scope: !5)
!27 = !DILocation(line: 42, column: 19, scope: !5)
!28 = !DILocation(line: 44, column: 19, scope: !5)
!29 = !DILocation(line: 45, column: 28, scope: !5)
!30 = !DILocation(line: 46, column: 19, scope: !5)
!31 = !DILocation(line: 47, column: 19, scope: !5)
!32 = !DILocation(line: 48, column: 25, scope: !5)
!33 = !DILocation(line: 48, column: 47, scope: !5)
!34 = !DILocation(line: 49, column: 25, scope: !5)
!35 = !DILocation(line: 49, column: 48, scope: !5)
!36 = !DILocation(line: 49, column: 4, scope: !5)
