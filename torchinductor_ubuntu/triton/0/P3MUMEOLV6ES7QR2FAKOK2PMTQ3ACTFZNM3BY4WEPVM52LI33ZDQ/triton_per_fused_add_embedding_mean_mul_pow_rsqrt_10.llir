; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [121 x i8] c"/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/ms/cmskui5zdkdehzpvjklswh53pbihuhbhsdy24v5pozr2pr2nqxtz.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 32128\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !5 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_per_fused_add_embedding_mean_mul_pow_rsqrt_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr #1 !dbg !9 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = shl nuw nsw i32 %12, 2, !dbg !11
  %14 = and i32 %13, 508, !dbg !11
  %15 = icmp samesign ult i32 %14, 384, !dbg !12
  %16 = zext nneg i32 %11 to i64, !dbg !13
  %17 = getelementptr i64, ptr addrspace(1) %1, i64 %16, !dbg !13
  %18 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !14
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l"(ptr addrspace(1) %17, i64 %18) #7, !dbg !14
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !14
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l"(ptr addrspace(1) %17, i64 %20) #7, !dbg !14
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !14
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l"(ptr addrspace(1) %17, i64 %22) #7, !dbg !14
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !14
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l"(ptr addrspace(1) %17, i64 %24) #7, !dbg !14
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !14
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l"(ptr addrspace(1) %17, i64 %26) #7, !dbg !14
  %28 = mul i32 %11, 384, !dbg !15
  %29 = add i32 %14, %28, !dbg !16
  %30 = sext i32 %29 to i64, !dbg !17
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !17
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %31, i1 %15) #7, !dbg !18
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !19
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %33, i1 %15) #7, !dbg !20
  %35 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !21
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %35, i1 %15) #7, !dbg !22
  %37 = zext nneg i32 %14 to i64, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %5, i64 %37, !dbg !23
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #7, !dbg !24
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %38, i64 %39, i1 %15) #7, !dbg !24
  %41 = add i64 %27, 32128, !dbg !25
  %42 = icmp slt i64 %27, 0, !dbg !26
  %43 = select i1 %42, i64 %41, i64 %27, !dbg !27
  %44 = icmp ugt i64 %43, 32127, !dbg !28
  br i1 %44, label %45, label %46, !dbg !29

45:                                               ; preds = %10
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 44, ptr nonnull @assertFunc_0, i64 1), !dbg !29
  unreachable, !dbg !29

46:                                               ; preds = %10
  %47 = icmp slt i64 %25, 0, !dbg !26
  %48 = add i64 %25, 32128, !dbg !25
  %49 = select i1 %47, i64 %48, i64 %25, !dbg !27
  %50 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !22
  %51 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !22
  %52 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !22
  %53 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !22
  %54 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !20
  %55 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !20
  %56 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !20
  %57 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !20
  %58 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !18
  %59 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !18
  %60 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !18
  %61 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !18
  %62 = lshr i32 %12, 5, !dbg !11
  %63 = and i32 %12, 31, !dbg !11
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !29
  %.idx = mul i64 %49, 1536, !dbg !30
  %64 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx, !dbg !30
  %65 = getelementptr float, ptr addrspace(1) %64, i64 %37, !dbg !30
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %65, i1 %15) #7, !dbg !31
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !31
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !31
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !31
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !31
  %71 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !22
  %72 = insertelement <2 x i32> %71, i32 %52, i64 1, !dbg !22
  %73 = bitcast <2 x i32> %72 to <2 x float>, !dbg !22
  %74 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !20
  %75 = insertelement <2 x i32> %74, i32 %56, i64 1, !dbg !20
  %76 = bitcast <2 x i32> %75 to <2 x float>, !dbg !20
  %77 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !18
  %78 = insertelement <2 x i32> %77, i32 %60, i64 1, !dbg !18
  %79 = bitcast <2 x i32> %78 to <2 x float>, !dbg !18
  %80 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !31
  %81 = insertelement <2 x i32> %80, i32 %68, i64 1, !dbg !31
  %82 = bitcast <2 x i32> %81 to <2 x float>, !dbg !31
  %83 = fadd <2 x float> %79, %82, !dbg !32
  %84 = fadd <2 x float> %83, %76, !dbg !33
  %85 = fadd <2 x float> %84, %73, !dbg !34
  %86 = fmul <2 x float> %85, %85, !dbg !35
  %87 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !22
  %88 = insertelement <2 x i32> %87, i32 %51, i64 1, !dbg !22
  %89 = bitcast <2 x i32> %88 to <2 x float>, !dbg !22
  %90 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !20
  %91 = insertelement <2 x i32> %90, i32 %55, i64 1, !dbg !20
  %92 = bitcast <2 x i32> %91 to <2 x float>, !dbg !20
  %93 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !18
  %94 = insertelement <2 x i32> %93, i32 %59, i64 1, !dbg !18
  %95 = bitcast <2 x i32> %94 to <2 x float>, !dbg !18
  %96 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !31
  %97 = insertelement <2 x i32> %96, i32 %69, i64 1, !dbg !31
  %98 = bitcast <2 x i32> %97 to <2 x float>, !dbg !31
  %99 = fadd <2 x float> %95, %98, !dbg !32
  %100 = fadd <2 x float> %99, %92, !dbg !33
  %101 = fadd <2 x float> %100, %89, !dbg !34
  %102 = fmul <2 x float> %101, %101, !dbg !35
  %shift = shufflevector <2 x float> %86, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !36
  %103 = fadd <2 x float> %86, %shift, !dbg !36
  %shift1 = shufflevector <2 x float> %102, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !36
  %104 = fadd <2 x float> %shift1, %103, !dbg !36
  %105 = fadd <2 x float> %102, %104, !dbg !36
  %106 = extractelement <2 x float> %105, i64 0, !dbg !36
  %107 = select i1 %15, float %106, float 0.000000e+00, !dbg !36
  %108 = bitcast float %107 to i32, !dbg !40
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 16, i32 31), !dbg !40
  %110 = bitcast i32 %109 to float, !dbg !40
  %111 = fadd float %107, %110, !dbg !36
  %112 = bitcast float %111 to i32, !dbg !40
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 8, i32 31), !dbg !40
  %114 = bitcast i32 %113 to float, !dbg !40
  %115 = fadd float %111, %114, !dbg !36
  %116 = bitcast float %115 to i32, !dbg !40
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 4, i32 31), !dbg !40
  %118 = bitcast i32 %117 to float, !dbg !40
  %119 = fadd float %115, %118, !dbg !36
  %120 = bitcast float %119 to i32, !dbg !40
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 2, i32 31), !dbg !40
  %122 = bitcast i32 %121 to float, !dbg !40
  %123 = fadd float %119, %122, !dbg !36
  %124 = bitcast float %123 to i32, !dbg !40
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 1, i32 31), !dbg !40
  %126 = bitcast i32 %125 to float, !dbg !40
  %127 = fadd float %123, %126, !dbg !36
  %128 = and i32 %62, 3, !dbg !40
  %129 = icmp eq i32 %63, 0, !dbg !40
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i32 %128, !dbg !40
  %131 = bitcast float %127 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 %129) #7, !dbg !40
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !40
  %132 = icmp samesign ult i32 %12, 4, !dbg !40
  %133 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !40
  %134 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %133, i1 %132) #7, !dbg !40
  %135 = bitcast i32 %134 to float, !dbg !40
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 2, i32 31), !dbg !40
  %137 = bitcast i32 %136 to float, !dbg !40
  %138 = fadd float %135, %137, !dbg !36
  %139 = bitcast float %138 to i32, !dbg !40
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 1, i32 31), !dbg !40
  %141 = bitcast i32 %140 to float, !dbg !40
  %142 = fadd float %138, %141, !dbg !36
  %143 = icmp eq i32 %12, 0, !dbg !40
  %144 = bitcast float %142 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %144, i1 %143) #7, !dbg !40
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !40
  %145 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !40
  %146 = fadd float %145, 0.000000e+00, !dbg !41
  %147 = tail call float @llvm.nvvm.div.full(float %146, float 3.840000e+02), !dbg !45
  %148 = fadd float %147, 0x3EB0C6F7A0000000, !dbg !46
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !47
  %.not.i = icmp eq i32 %149, 0, !dbg !47
  br i1 %.not.i, label %152, label %150, !dbg !47

150:                                              ; preds = %46
  %151 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %148), !dbg !47
  br label %__nv_rsqrtf.exit, !dbg !47

152:                                              ; preds = %46
  %153 = tail call float @llvm.nvvm.rsqrt.approx.f(float %148), !dbg !47
  br label %__nv_rsqrtf.exit, !dbg !47

__nv_rsqrtf.exit:                                 ; preds = %150, %152
  %.0.i = phi float [ %151, %150 ], [ %153, %152 ], !dbg !47
  %154 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !24
  %155 = bitcast i32 %154 to float, !dbg !24
  %156 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !24
  %157 = bitcast i32 %156 to float, !dbg !24
  %158 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !24
  %159 = bitcast i32 %158 to float, !dbg !24
  %160 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !24
  %161 = bitcast i32 %160 to float, !dbg !24
  %162 = extractelement <2 x float> %85, i64 0, !dbg !48
  %163 = fmul float %162, %.0.i, !dbg !49
  %164 = extractelement <2 x float> %85, i64 1, !dbg !48
  %165 = fmul float %164, %.0.i, !dbg !49
  %166 = extractelement <2 x float> %101, i64 1, !dbg !48
  %167 = fmul float %166, %.0.i, !dbg !49
  %168 = extractelement <2 x float> %101, i64 0, !dbg !48
  %169 = fmul float %168, %.0.i, !dbg !49
  %170 = fmul float %163, %155, !dbg !50
  %171 = fmul float %165, %157, !dbg !50
  %172 = fmul float %167, %159, !dbg !50
  %173 = fmul float %169, %161, !dbg !50
  %174 = bitcast float %162 to i32, !dbg !48
  %175 = bitcast float %164 to i32, !dbg !48
  %176 = bitcast float %166 to i32, !dbg !48
  %177 = bitcast float %168 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %174, i32 %175, i32 %176, i32 %177, ptr addrspace(1) %31, i1 %15) #7, !dbg !48
  %178 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !51
  %179 = bitcast float %170 to i32, !dbg !52
  %180 = bitcast float %171 to i32, !dbg !52
  %181 = bitcast float %172 to i32, !dbg !52
  %182 = bitcast float %173 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %179, i32 %180, i32 %181, i32 %182, ptr addrspace(1) %178, i1 %15) #7, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #5

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #5

attributes #0 = { noreturn }
attributes #1 = { "nvvm.reqntid"="128" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "cmskui5zdkdehzpvjklswh53pbihuhbhsdy24v5pozr2pr2nqxtz.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/ms")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !6, file: !6, type: !7, spFlags: DISPFlagOptimized)
!6 = !DIFile(filename: "<unknown>", directory: "")
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = distinct !DISubprogram(name: "triton_per_fused_add_embedding_mean_mul_pow_rsqrt_10", linkageName: "triton_per_fused_add_embedding_mean_mul_pow_rsqrt_10", scope: !1, file: !1, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!10 = !DILocation(line: 25, column: 28, scope: !9)
!11 = !DILocation(line: 28, column: 28, scope: !9)
!12 = !DILocation(line: 30, column: 25, scope: !9)
!13 = !DILocation(line: 35, column: 30, scope: !9)
!14 = !DILocation(line: 35, column: 35, scope: !9)
!15 = !DILocation(line: 36, column: 45, scope: !9)
!16 = !DILocation(line: 36, column: 41, scope: !9)
!17 = !DILocation(line: 36, column: 34, scope: !9)
!18 = !DILocation(line: 36, column: 50, scope: !9)
!19 = !DILocation(line: 37, column: 30, scope: !9)
!20 = !DILocation(line: 37, column: 46, scope: !9)
!21 = !DILocation(line: 38, column: 31, scope: !9)
!22 = !DILocation(line: 38, column: 47, scope: !9)
!23 = !DILocation(line: 39, column: 31, scope: !9)
!24 = !DILocation(line: 39, column: 38, scope: !9)
!25 = !DILocation(line: 41, column: 18, scope: !9)
!26 = !DILocation(line: 42, column: 18, scope: !9)
!27 = !DILocation(line: 43, column: 32, scope: !9)
!28 = !DILocation(line: 44, column: 36, scope: !9)
!29 = !DILocation(line: 44, column: 51, scope: !9)
!30 = !DILocation(line: 45, column: 30, scope: !9)
!31 = !DILocation(line: 45, column: 48, scope: !9)
!32 = !DILocation(line: 46, column: 18, scope: !9)
!33 = !DILocation(line: 47, column: 19, scope: !9)
!34 = !DILocation(line: 48, column: 20, scope: !9)
!35 = !DILocation(line: 49, column: 20, scope: !9)
!36 = !DILocation(line: 260, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !9, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!39 = !DILocation(line: 52, column: 59, scope: !9)
!40 = !DILocation(line: 290, column: 36, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 66, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !9, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 52, column: 45, scope: !9)
!45 = !DILocation(line: 54, column: 21, scope: !9)
!46 = !DILocation(line: 56, column: 20, scope: !9)
!47 = !DILocation(line: 57, column: 28, scope: !9)
!48 = !DILocation(line: 60, column: 51, scope: !9)
!49 = !DILocation(line: 58, column: 20, scope: !9)
!50 = !DILocation(line: 59, column: 20, scope: !9)
!51 = !DILocation(line: 61, column: 25, scope: !9)
!52 = !DILocation(line: 61, column: 48, scope: !9)
!53 = !DILocation(line: 61, column: 4, scope: !9)
