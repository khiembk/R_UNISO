; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_per_fused__softmax_add_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr #0 !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %8 = shl i32 %7, 5, !dbg !9
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %10 = lshr i32 %9, 5, !dbg !10
  %11 = and i32 %10, 7, !dbg !10
  %12 = or disjoint i32 %10, %8, !dbg !11
  %13 = shl nuw nsw i32 %9, 1, !dbg !12
  %14 = and i32 %13, 62, !dbg !12
  %15 = icmp samesign ult i32 %14, 50, !dbg !13
  %16 = or disjoint i32 %11, %8, !dbg !11
  %17 = or disjoint i32 %16, 8, !dbg !11
  %18 = or disjoint i32 %16, 16, !dbg !11
  %19 = or i32 %12, 24, !dbg !11
  %20 = insertelement <4 x i32> poison, i32 %19, i64 0, !dbg !14
  %21 = insertelement <4 x i32> %20, i32 %18, i64 1, !dbg !14
  %22 = insertelement <4 x i32> %21, i32 %17, i64 2, !dbg !14
  %23 = insertelement <4 x i32> %22, i32 %16, i64 3, !dbg !14
  %24 = icmp slt <4 x i32> %23, splat (i32 400), !dbg !14
  %25 = sdiv i32 %16, 50, !dbg !15
  %26 = mul i32 %25, 50, !dbg !16
  %.decomposed = sub i32 %16, %26, !dbg !16
  %27 = sdiv i32 %17, 50, !dbg !15
  %28 = mul i32 %27, 50, !dbg !16
  %.decomposed1 = sub i32 %17, %28, !dbg !16
  %29 = sdiv i32 %18, 50, !dbg !15
  %30 = mul i32 %29, 50, !dbg !16
  %.decomposed2 = sub i32 %18, %30, !dbg !16
  %31 = sdiv i32 %19, 50, !dbg !15
  %32 = mul i32 %31, 50, !dbg !16
  %.decomposed3 = sub i32 %19, %32, !dbg !16
  %33 = mul i32 %16, 50, !dbg !17
  %34 = mul i32 %17, 50, !dbg !17
  %35 = mul i32 %18, 50, !dbg !17
  %36 = mul i32 %19, 50, !dbg !17
  %37 = add i32 %33, %14, !dbg !18
  %38 = add i32 %34, %14, !dbg !18
  %39 = add i32 %35, %14, !dbg !18
  %40 = add i32 %36, %14, !dbg !18
  %41 = sext i32 %37 to i64, !dbg !19
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !19
  %43 = sext i32 %38 to i64, !dbg !19
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !19
  %45 = sext i32 %39 to i64, !dbg !19
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !19
  %47 = sext i32 %40 to i64, !dbg !19
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !19
  %49 = insertelement <4 x i1> poison, i1 %15, i64 0, !dbg !20
  %50 = shufflevector <4 x i1> %49, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !20
  %51 = and <4 x i1> %50, %24, !dbg !20
  %52 = extractelement <4 x i1> %51, i64 3, !dbg !21
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %42, i1 %52) #4, !dbg !25
  %54 = extractvalue { i32, i32 } %53, 0, !dbg !25
  %55 = extractvalue { i32, i32 } %53, 1, !dbg !25
  %56 = extractelement <4 x i1> %51, i64 2, !dbg !21
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %44, i1 %56) #4, !dbg !25
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !25
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !25
  %60 = extractelement <4 x i1> %51, i64 1, !dbg !21
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %46, i1 %60) #4, !dbg !25
  %62 = extractvalue { i32, i32 } %61, 0, !dbg !25
  %63 = extractvalue { i32, i32 } %61, 1, !dbg !25
  %64 = extractelement <4 x i1> %51, i64 0, !dbg !21
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %48, i1 %64) #4, !dbg !25
  %66 = extractvalue { i32, i32 } %65, 0, !dbg !25
  %67 = extractvalue { i32, i32 } %65, 1, !dbg !25
  %68 = insertelement <4 x i32> poison, i32 %66, i64 0, !dbg !25
  %69 = insertelement <4 x i32> %68, i32 %62, i64 1, !dbg !25
  %70 = insertelement <4 x i32> %69, i32 %58, i64 2, !dbg !25
  %71 = insertelement <4 x i32> %70, i32 %54, i64 3, !dbg !25
  %72 = bitcast <4 x i32> %71 to <4 x float>, !dbg !25
  %73 = insertelement <4 x i32> poison, i32 %67, i64 0, !dbg !25
  %74 = insertelement <4 x i32> %73, i32 %63, i64 1, !dbg !25
  %75 = insertelement <4 x i32> %74, i32 %59, i64 2, !dbg !25
  %76 = insertelement <4 x i32> %75, i32 %55, i64 3, !dbg !25
  %77 = bitcast <4 x i32> %76 to <4 x float>, !dbg !25
  %78 = mul nsw i32 %.decomposed, 50, !dbg !26
  %79 = mul nsw i32 %.decomposed1, 50, !dbg !26
  %80 = mul nsw i32 %.decomposed2, 50, !dbg !26
  %81 = mul nsw i32 %.decomposed3, 50, !dbg !26
  %82 = add nsw i32 %78, %14, !dbg !27
  %83 = add nsw i32 %79, %14, !dbg !27
  %84 = add nsw i32 %80, %14, !dbg !27
  %85 = add nsw i32 %81, %14, !dbg !27
  %86 = mul i32 %25, 2528, !dbg !28
  %87 = mul i32 %27, 2528, !dbg !28
  %88 = mul i32 %29, 2528, !dbg !28
  %89 = mul i32 %31, 2528, !dbg !28
  %90 = add i32 %82, %86, !dbg !29
  %91 = add i32 %83, %87, !dbg !29
  %92 = add i32 %84, %88, !dbg !29
  %93 = add i32 %85, %89, !dbg !29
  %94 = sext i32 %90 to i64, !dbg !30
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !30
  %96 = sext i32 %91 to i64, !dbg !30
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %96, !dbg !30
  %98 = sext i32 %92 to i64, !dbg !30
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !30
  %100 = sext i32 %93 to i64, !dbg !30
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !30
  %102 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %95, i1 %52) #4, !dbg !31
  %103 = extractvalue { i32, i32 } %102, 0, !dbg !31
  %104 = extractvalue { i32, i32 } %102, 1, !dbg !31
  %105 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %97, i1 %56) #4, !dbg !31
  %106 = extractvalue { i32, i32 } %105, 0, !dbg !31
  %107 = extractvalue { i32, i32 } %105, 1, !dbg !31
  %108 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %99, i1 %60) #4, !dbg !31
  %109 = extractvalue { i32, i32 } %108, 0, !dbg !31
  %110 = extractvalue { i32, i32 } %108, 1, !dbg !31
  %111 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %101, i1 %64) #4, !dbg !31
  %112 = extractvalue { i32, i32 } %111, 0, !dbg !31
  %113 = extractvalue { i32, i32 } %111, 1, !dbg !31
  %114 = insertelement <4 x i32> poison, i32 %112, i64 0, !dbg !31
  %115 = insertelement <4 x i32> %114, i32 %109, i64 1, !dbg !31
  %116 = insertelement <4 x i32> %115, i32 %106, i64 2, !dbg !31
  %117 = insertelement <4 x i32> %116, i32 %103, i64 3, !dbg !31
  %118 = bitcast <4 x i32> %117 to <4 x float>, !dbg !31
  %119 = insertelement <4 x i32> poison, i32 %113, i64 0, !dbg !31
  %120 = insertelement <4 x i32> %119, i32 %110, i64 1, !dbg !31
  %121 = insertelement <4 x i32> %120, i32 %107, i64 2, !dbg !31
  %122 = insertelement <4 x i32> %121, i32 %104, i64 3, !dbg !31
  %123 = bitcast <4 x i32> %122 to <4 x float>, !dbg !31
  %124 = fadd <4 x float> %72, %118, !dbg !32
  %125 = fadd <4 x float> %77, %123, !dbg !32
  %126 = select <4 x i1> %51, <4 x float> %124, <4 x float> splat (float 0xFFF0000000000000), !dbg !33
  %127 = select <4 x i1> %51, <4 x float> %125, <4 x float> splat (float 0xFFF0000000000000), !dbg !33
  %128 = extractelement <4 x float> %126, i64 3, !dbg !34
  %129 = fcmp uno float %128, 0.000000e+00, !dbg !38
  %130 = fcmp ogt <4 x float> %126, %127, !dbg !39
  %131 = extractelement <4 x i1> %130, i64 3, !dbg !40
  %132 = or i1 %131, %129, !dbg !40
  %133 = extractelement <4 x float> %127, i64 3, !dbg !34
  %134 = select i1 %132, float %128, float %133, !dbg !34
  %135 = extractelement <4 x float> %126, i64 2, !dbg !34
  %136 = fcmp uno float %135, 0.000000e+00, !dbg !38
  %137 = extractelement <4 x i1> %130, i64 2, !dbg !40
  %138 = or i1 %137, %136, !dbg !40
  %139 = extractelement <4 x float> %127, i64 2, !dbg !34
  %140 = select i1 %138, float %135, float %139, !dbg !34
  %141 = extractelement <4 x float> %126, i64 1, !dbg !34
  %142 = fcmp uno float %141, 0.000000e+00, !dbg !38
  %143 = extractelement <4 x i1> %130, i64 1, !dbg !40
  %144 = or i1 %143, %142, !dbg !40
  %145 = extractelement <4 x float> %127, i64 1, !dbg !34
  %146 = select i1 %144, float %141, float %145, !dbg !34
  %147 = extractelement <4 x float> %126, i64 0, !dbg !34
  %148 = fcmp uno float %147, 0.000000e+00, !dbg !38
  %149 = extractelement <4 x i1> %130, i64 0, !dbg !40
  %150 = or i1 %149, %148, !dbg !40
  %151 = extractelement <4 x float> %127, i64 0, !dbg !34
  %152 = select i1 %150, float %147, float %151, !dbg !34
  %153 = bitcast float %134 to i32, !dbg !41
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 16, i32 31), !dbg !41
  %155 = bitcast i32 %154 to float, !dbg !41
  %156 = fcmp ogt float %134, %155, !dbg !39
  %157 = fcmp uno float %134, 0.000000e+00, !dbg !38
  %158 = or i1 %156, %157, !dbg !40
  %159 = select i1 %158, float %134, float %155, !dbg !34
  %160 = bitcast float %159 to i32, !dbg !41
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 8, i32 31), !dbg !41
  %162 = bitcast i32 %161 to float, !dbg !41
  %163 = fcmp ogt float %159, %162, !dbg !39
  %164 = fcmp uno float %159, 0.000000e+00, !dbg !38
  %165 = or i1 %163, %164, !dbg !40
  %166 = select i1 %165, float %159, float %162, !dbg !34
  %167 = bitcast float %166 to i32, !dbg !41
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 4, i32 31), !dbg !41
  %169 = bitcast i32 %168 to float, !dbg !41
  %170 = fcmp ogt float %166, %169, !dbg !39
  %171 = fcmp uno float %166, 0.000000e+00, !dbg !38
  %172 = or i1 %170, %171, !dbg !40
  %173 = select i1 %172, float %166, float %169, !dbg !34
  %174 = bitcast float %173 to i32, !dbg !41
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 2, i32 31), !dbg !41
  %176 = bitcast i32 %175 to float, !dbg !41
  %177 = fcmp ogt float %173, %176, !dbg !39
  %178 = fcmp uno float %173, 0.000000e+00, !dbg !38
  %179 = or i1 %177, %178, !dbg !40
  %180 = select i1 %179, float %173, float %176, !dbg !34
  %181 = bitcast float %180 to i32, !dbg !41
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 1, i32 31), !dbg !41
  %183 = bitcast i32 %182 to float, !dbg !41
  %184 = fcmp ogt float %180, %183, !dbg !39
  %185 = fcmp uno float %180, 0.000000e+00, !dbg !38
  %186 = or i1 %184, %185, !dbg !40
  %187 = select i1 %186, float %180, float %183, !dbg !34
  %188 = bitcast float %140 to i32, !dbg !41
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 16, i32 31), !dbg !41
  %190 = bitcast i32 %189 to float, !dbg !41
  %191 = fcmp ogt float %140, %190, !dbg !39
  %192 = fcmp uno float %140, 0.000000e+00, !dbg !38
  %193 = or i1 %192, %191, !dbg !40
  %194 = select i1 %193, float %140, float %190, !dbg !34
  %195 = bitcast float %194 to i32, !dbg !41
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 8, i32 31), !dbg !41
  %197 = bitcast i32 %196 to float, !dbg !41
  %198 = fcmp ogt float %194, %197, !dbg !39
  %199 = fcmp uno float %194, 0.000000e+00, !dbg !38
  %200 = or i1 %198, %199, !dbg !40
  %201 = select i1 %200, float %194, float %197, !dbg !34
  %202 = bitcast float %201 to i32, !dbg !41
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 4, i32 31), !dbg !41
  %204 = bitcast i32 %203 to float, !dbg !41
  %205 = fcmp ogt float %201, %204, !dbg !39
  %206 = fcmp uno float %201, 0.000000e+00, !dbg !38
  %207 = or i1 %205, %206, !dbg !40
  %208 = select i1 %207, float %201, float %204, !dbg !34
  %209 = bitcast float %208 to i32, !dbg !41
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 2, i32 31), !dbg !41
  %211 = bitcast i32 %210 to float, !dbg !41
  %212 = fcmp ogt float %208, %211, !dbg !39
  %213 = fcmp uno float %208, 0.000000e+00, !dbg !38
  %214 = or i1 %212, %213, !dbg !40
  %215 = select i1 %214, float %208, float %211, !dbg !34
  %216 = bitcast float %215 to i32, !dbg !41
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 1, i32 31), !dbg !41
  %218 = bitcast i32 %217 to float, !dbg !41
  %219 = fcmp ogt float %215, %218, !dbg !39
  %220 = fcmp uno float %215, 0.000000e+00, !dbg !38
  %221 = or i1 %219, %220, !dbg !40
  %222 = select i1 %221, float %215, float %218, !dbg !34
  %223 = bitcast float %146 to i32, !dbg !41
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 16, i32 31), !dbg !41
  %225 = bitcast i32 %224 to float, !dbg !41
  %226 = fcmp ogt float %146, %225, !dbg !39
  %227 = fcmp uno float %146, 0.000000e+00, !dbg !38
  %228 = or i1 %227, %226, !dbg !40
  %229 = select i1 %228, float %146, float %225, !dbg !34
  %230 = bitcast float %229 to i32, !dbg !41
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 8, i32 31), !dbg !41
  %232 = bitcast i32 %231 to float, !dbg !41
  %233 = fcmp ogt float %229, %232, !dbg !39
  %234 = fcmp uno float %229, 0.000000e+00, !dbg !38
  %235 = or i1 %233, %234, !dbg !40
  %236 = select i1 %235, float %229, float %232, !dbg !34
  %237 = bitcast float %236 to i32, !dbg !41
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 4, i32 31), !dbg !41
  %239 = bitcast i32 %238 to float, !dbg !41
  %240 = fcmp ogt float %236, %239, !dbg !39
  %241 = fcmp uno float %236, 0.000000e+00, !dbg !38
  %242 = or i1 %240, %241, !dbg !40
  %243 = select i1 %242, float %236, float %239, !dbg !34
  %244 = bitcast float %243 to i32, !dbg !41
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 2, i32 31), !dbg !41
  %246 = bitcast i32 %245 to float, !dbg !41
  %247 = fcmp ogt float %243, %246, !dbg !39
  %248 = fcmp uno float %243, 0.000000e+00, !dbg !38
  %249 = or i1 %247, %248, !dbg !40
  %250 = select i1 %249, float %243, float %246, !dbg !34
  %251 = bitcast float %250 to i32, !dbg !41
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 1, i32 31), !dbg !41
  %253 = bitcast i32 %252 to float, !dbg !41
  %254 = fcmp ogt float %250, %253, !dbg !39
  %255 = fcmp uno float %250, 0.000000e+00, !dbg !38
  %256 = or i1 %254, %255, !dbg !40
  %257 = select i1 %256, float %250, float %253, !dbg !34
  %258 = bitcast float %152 to i32, !dbg !41
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 16, i32 31), !dbg !41
  %260 = bitcast i32 %259 to float, !dbg !41
  %261 = fcmp ogt float %152, %260, !dbg !39
  %262 = fcmp uno float %152, 0.000000e+00, !dbg !38
  %263 = or i1 %262, %261, !dbg !40
  %264 = select i1 %263, float %152, float %260, !dbg !34
  %265 = bitcast float %264 to i32, !dbg !41
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 8, i32 31), !dbg !41
  %267 = bitcast i32 %266 to float, !dbg !41
  %268 = fcmp ogt float %264, %267, !dbg !39
  %269 = fcmp uno float %264, 0.000000e+00, !dbg !38
  %270 = or i1 %268, %269, !dbg !40
  %271 = select i1 %270, float %264, float %267, !dbg !34
  %272 = bitcast float %271 to i32, !dbg !41
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 4, i32 31), !dbg !41
  %274 = bitcast i32 %273 to float, !dbg !41
  %275 = fcmp ogt float %271, %274, !dbg !39
  %276 = fcmp uno float %271, 0.000000e+00, !dbg !38
  %277 = or i1 %275, %276, !dbg !40
  %278 = select i1 %277, float %271, float %274, !dbg !34
  %279 = bitcast float %278 to i32, !dbg !41
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 2, i32 31), !dbg !41
  %281 = bitcast i32 %280 to float, !dbg !41
  %282 = fcmp ogt float %278, %281, !dbg !39
  %283 = fcmp uno float %278, 0.000000e+00, !dbg !38
  %284 = or i1 %282, %283, !dbg !40
  %285 = select i1 %284, float %278, float %281, !dbg !34
  %286 = bitcast float %285 to i32, !dbg !41
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 1, i32 31), !dbg !41
  %288 = bitcast i32 %287 to float, !dbg !41
  %289 = fcmp ogt float %285, %288, !dbg !39
  %290 = fcmp uno float %285, 0.000000e+00, !dbg !38
  %291 = or i1 %289, %290, !dbg !40
  %292 = select i1 %291, float %285, float %288, !dbg !34
  %293 = extractelement <4 x float> %124, i64 3, !dbg !42
  %294 = fsub float %293, %187, !dbg !42
  %295 = extractelement <4 x float> %125, i64 3, !dbg !42
  %296 = fsub float %295, %187, !dbg !42
  %297 = extractelement <4 x float> %124, i64 2, !dbg !42
  %298 = fsub float %297, %222, !dbg !42
  %299 = extractelement <4 x float> %125, i64 2, !dbg !42
  %300 = fsub float %299, %222, !dbg !42
  %301 = extractelement <4 x float> %124, i64 1, !dbg !42
  %302 = fsub float %301, %257, !dbg !42
  %303 = extractelement <4 x float> %125, i64 1, !dbg !42
  %304 = fsub float %303, %257, !dbg !42
  %305 = extractelement <4 x float> %124, i64 0, !dbg !42
  %306 = fsub float %305, %292, !dbg !42
  %307 = extractelement <4 x float> %125, i64 0, !dbg !42
  %308 = fsub float %307, %292, !dbg !42
  %309 = fmul float %294, 0x3FF7154760000000, !dbg !43
  %310 = tail call float @llvm.nvvm.ex2.approx.f(float %309), !dbg !43
  %311 = fmul float %296, 0x3FF7154760000000, !dbg !43
  %312 = tail call float @llvm.nvvm.ex2.approx.f(float %311), !dbg !43
  %313 = fmul float %298, 0x3FF7154760000000, !dbg !43
  %314 = tail call float @llvm.nvvm.ex2.approx.f(float %313), !dbg !43
  %315 = fmul float %300, 0x3FF7154760000000, !dbg !43
  %316 = tail call float @llvm.nvvm.ex2.approx.f(float %315), !dbg !43
  %317 = fmul float %302, 0x3FF7154760000000, !dbg !43
  %318 = tail call float @llvm.nvvm.ex2.approx.f(float %317), !dbg !43
  %319 = fmul float %304, 0x3FF7154760000000, !dbg !43
  %320 = tail call float @llvm.nvvm.ex2.approx.f(float %319), !dbg !43
  %321 = fmul float %306, 0x3FF7154760000000, !dbg !43
  %322 = tail call float @llvm.nvvm.ex2.approx.f(float %321), !dbg !43
  %323 = fmul float %308, 0x3FF7154760000000, !dbg !43
  %324 = tail call float @llvm.nvvm.ex2.approx.f(float %323), !dbg !43
  %325 = fadd float %310, %312, !dbg !21
  %326 = select i1 %52, float %325, float 0.000000e+00, !dbg !21
  %327 = fadd float %314, %316, !dbg !21
  %328 = select i1 %56, float %327, float 0.000000e+00, !dbg !21
  %329 = fadd float %318, %320, !dbg !21
  %330 = select i1 %60, float %329, float 0.000000e+00, !dbg !21
  %331 = fadd float %322, %324, !dbg !21
  %332 = select i1 %64, float %331, float 0.000000e+00, !dbg !21
  %333 = bitcast float %326 to i32, !dbg !44
  %334 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %333, i32 16, i32 31), !dbg !44
  %335 = bitcast i32 %334 to float, !dbg !44
  %336 = fadd float %326, %335, !dbg !21
  %337 = bitcast float %336 to i32, !dbg !44
  %338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %337, i32 8, i32 31), !dbg !44
  %339 = bitcast i32 %338 to float, !dbg !44
  %340 = fadd float %336, %339, !dbg !21
  %341 = bitcast float %340 to i32, !dbg !44
  %342 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %341, i32 4, i32 31), !dbg !44
  %343 = bitcast i32 %342 to float, !dbg !44
  %344 = fadd float %340, %343, !dbg !21
  %345 = bitcast float %344 to i32, !dbg !44
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 2, i32 31), !dbg !44
  %347 = bitcast i32 %346 to float, !dbg !44
  %348 = fadd float %344, %347, !dbg !21
  %349 = bitcast float %348 to i32, !dbg !44
  %350 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %349, i32 1, i32 31), !dbg !44
  %351 = bitcast i32 %350 to float, !dbg !44
  %352 = fadd float %348, %351, !dbg !21
  %353 = bitcast float %328 to i32, !dbg !44
  %354 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %353, i32 16, i32 31), !dbg !44
  %355 = bitcast i32 %354 to float, !dbg !44
  %356 = fadd float %328, %355, !dbg !21
  %357 = bitcast float %356 to i32, !dbg !44
  %358 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %357, i32 8, i32 31), !dbg !44
  %359 = bitcast i32 %358 to float, !dbg !44
  %360 = fadd float %356, %359, !dbg !21
  %361 = bitcast float %360 to i32, !dbg !44
  %362 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %361, i32 4, i32 31), !dbg !44
  %363 = bitcast i32 %362 to float, !dbg !44
  %364 = fadd float %360, %363, !dbg !21
  %365 = bitcast float %364 to i32, !dbg !44
  %366 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %365, i32 2, i32 31), !dbg !44
  %367 = bitcast i32 %366 to float, !dbg !44
  %368 = fadd float %364, %367, !dbg !21
  %369 = bitcast float %368 to i32, !dbg !44
  %370 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %369, i32 1, i32 31), !dbg !44
  %371 = bitcast i32 %370 to float, !dbg !44
  %372 = fadd float %368, %371, !dbg !21
  %373 = bitcast float %330 to i32, !dbg !44
  %374 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %373, i32 16, i32 31), !dbg !44
  %375 = bitcast i32 %374 to float, !dbg !44
  %376 = fadd float %330, %375, !dbg !21
  %377 = bitcast float %376 to i32, !dbg !44
  %378 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %377, i32 8, i32 31), !dbg !44
  %379 = bitcast i32 %378 to float, !dbg !44
  %380 = fadd float %376, %379, !dbg !21
  %381 = bitcast float %380 to i32, !dbg !44
  %382 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %381, i32 4, i32 31), !dbg !44
  %383 = bitcast i32 %382 to float, !dbg !44
  %384 = fadd float %380, %383, !dbg !21
  %385 = bitcast float %384 to i32, !dbg !44
  %386 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %385, i32 2, i32 31), !dbg !44
  %387 = bitcast i32 %386 to float, !dbg !44
  %388 = fadd float %384, %387, !dbg !21
  %389 = bitcast float %388 to i32, !dbg !44
  %390 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %389, i32 1, i32 31), !dbg !44
  %391 = bitcast i32 %390 to float, !dbg !44
  %392 = fadd float %388, %391, !dbg !21
  %393 = bitcast float %332 to i32, !dbg !44
  %394 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %393, i32 16, i32 31), !dbg !44
  %395 = bitcast i32 %394 to float, !dbg !44
  %396 = fadd float %332, %395, !dbg !21
  %397 = bitcast float %396 to i32, !dbg !44
  %398 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %397, i32 8, i32 31), !dbg !44
  %399 = bitcast i32 %398 to float, !dbg !44
  %400 = fadd float %396, %399, !dbg !21
  %401 = bitcast float %400 to i32, !dbg !44
  %402 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %401, i32 4, i32 31), !dbg !44
  %403 = bitcast i32 %402 to float, !dbg !44
  %404 = fadd float %400, %403, !dbg !21
  %405 = bitcast float %404 to i32, !dbg !44
  %406 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %405, i32 2, i32 31), !dbg !44
  %407 = bitcast i32 %406 to float, !dbg !44
  %408 = fadd float %404, %407, !dbg !21
  %409 = bitcast float %408 to i32, !dbg !44
  %410 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %409, i32 1, i32 31), !dbg !44
  %411 = bitcast i32 %410 to float, !dbg !44
  %412 = fadd float %408, %411, !dbg !21
  %413 = tail call float @llvm.nvvm.div.full(float %310, float %352), !dbg !45
  %414 = tail call float @llvm.nvvm.div.full(float %312, float %352), !dbg !45
  %415 = tail call float @llvm.nvvm.div.full(float %314, float %372), !dbg !45
  %416 = tail call float @llvm.nvvm.div.full(float %316, float %372), !dbg !45
  %417 = tail call float @llvm.nvvm.div.full(float %318, float %392), !dbg !45
  %418 = tail call float @llvm.nvvm.div.full(float %320, float %392), !dbg !45
  %419 = tail call float @llvm.nvvm.div.full(float %322, float %412), !dbg !45
  %420 = tail call float @llvm.nvvm.div.full(float %324, float %412), !dbg !45
  %421 = getelementptr float, ptr addrspace(1) %2, i64 %94, !dbg !46
  %422 = getelementptr float, ptr addrspace(1) %2, i64 %96, !dbg !46
  %423 = getelementptr float, ptr addrspace(1) %2, i64 %98, !dbg !46
  %424 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !46
  %425 = bitcast float %413 to i32, !dbg !47
  %426 = bitcast float %414 to i32, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %425, i32 %426, ptr addrspace(1) %421, i1 %52) #4, !dbg !47
  %427 = bitcast float %415 to i32, !dbg !47
  %428 = bitcast float %416 to i32, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %427, i32 %428, ptr addrspace(1) %422, i1 %56) #4, !dbg !47
  %429 = bitcast float %417 to i32, !dbg !47
  %430 = bitcast float %418 to i32, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %429, i32 %430, ptr addrspace(1) %423, i1 %60) #4, !dbg !47
  %431 = bitcast float %419 to i32, !dbg !47
  %432 = bitcast float %420 to i32, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %431, i32 %432, ptr addrspace(1) %424, i1 %64) #4, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { "nvvm.reqntid"="256" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "c7mz7vr6bkrwjj5imx4qpkjzm5b35yar4qnwwkujddm3d4utpios.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/7m")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "triton_per_fused__softmax_add_6", linkageName: "triton_per_fused__softmax_add_6", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 24, column: 28, scope: !5)
!9 = !DILocation(line: 24, column: 33, scope: !5)
!10 = !DILocation(line: 25, column: 44, scope: !5)
!11 = !DILocation(line: 25, column: 23, scope: !5)
!12 = !DILocation(line: 27, column: 38, scope: !5)
!13 = !DILocation(line: 29, column: 25, scope: !5)
!14 = !DILocation(line: 26, column: 21, scope: !5)
!15 = !DILocation(line: 35, column: 19, scope: !5)
!16 = !DILocation(line: 34, column: 19, scope: !5)
!17 = !DILocation(line: 36, column: 40, scope: !5)
!18 = !DILocation(line: 36, column: 37, scope: !5)
!19 = !DILocation(line: 36, column: 30, scope: !5)
!20 = !DILocation(line: 36, column: 55, scope: !5)
!21 = !DILocation(line: 260, column: 15, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !5, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!24 = !DILocation(line: 47, column: 26, scope: !5)
!25 = !DILocation(line: 36, column: 45, scope: !5)
!26 = !DILocation(line: 37, column: 40, scope: !5)
!27 = !DILocation(line: 37, column: 37, scope: !5)
!28 = !DILocation(line: 37, column: 50, scope: !5)
!29 = !DILocation(line: 37, column: 45, scope: !5)
!30 = !DILocation(line: 37, column: 30, scope: !5)
!31 = !DILocation(line: 37, column: 55, scope: !5)
!32 = !DILocation(line: 38, column: 18, scope: !5)
!33 = !DILocation(line: 41, column: 43, scope: !5)
!34 = !DILocation(line: 114, column: 29, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !5, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 42, column: 37, scope: !5)
!38 = !DILocation(line: 113, column: 21, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 111, column: 15, scope: !35, inlinedAt: !37)
!40 = !DILocation(line: 113, column: 16, scope: !35, inlinedAt: !37)
!41 = !DILocation(line: 124, column: 29, scope: !35, inlinedAt: !37)
!42 = !DILocation(line: 43, column: 18, scope: !5)
!43 = !DILocation(line: 44, column: 24, scope: !5)
!44 = !DILocation(line: 290, column: 36, scope: !22, inlinedAt: !24)
!45 = !DILocation(line: 50, column: 21, scope: !5)
!46 = !DILocation(line: 51, column: 25, scope: !5)
!47 = !DILocation(line: 51, column: 57, scope: !5)
!48 = !DILocation(line: 51, column: 4, scope: !5)
