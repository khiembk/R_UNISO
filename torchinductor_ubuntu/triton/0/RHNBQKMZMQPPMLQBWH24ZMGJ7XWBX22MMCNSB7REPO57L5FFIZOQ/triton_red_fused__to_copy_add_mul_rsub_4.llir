; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [121 x i8] c"/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/ci/ccisb2yra76ab2haychl3vkjloggui7jornx4qodogdjo7v6y64e.py\00"
@assertMessage_0 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp27 < 32\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !5 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_mul_rsub_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr #1 !dbg !9 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !10
  %10 = icmp samesign ult i32 %9, 10368, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 127, !dbg !12
  %13 = or disjoint i32 %12, 128, !dbg !12
  %14 = shl nuw nsw i32 %11, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = udiv i32 %9, 324, !dbg !13
  %17 = mul i32 %16, 324, !dbg !14
  %.decomposed = sub i32 %9, %17, !dbg !14
  %18 = and i32 %16, 7, !dbg !15
  %19 = udiv i32 %9, 2592, !dbg !16
  %20 = mul nuw nsw i32 %19, 324, !dbg !17
  %21 = mul i32 %9, 324, !dbg !18
  %22 = zext nneg i32 %18 to i64, !dbg !19
  %23 = mul nuw nsw i32 %.decomposed, 324, !dbg !20
  %24 = mul i32 %16, 104992, !dbg !21
  %invariant.gep = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !22
  %25 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %15
  %26 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %12
  %27 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13
  %28 = add i32 %24, %23
  %29 = zext nneg i32 %15 to i64, !dbg !22
  %30 = zext nneg i32 %20 to i64, !dbg !22
  %31 = zext nneg i32 %.decomposed to i64, !dbg !22
  %32 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !22
  %33 = insertelement <2 x i32> %32, i32 %13, i64 1, !dbg !22
  %invariant.gep58 = getelementptr i64, ptr addrspace(1) %1, i64 %30, !dbg !22
  %34 = getelementptr inbounds nuw i8, ptr addrspace(3) %25, i32 4
  %35 = insertelement <2 x i1> poison, i1 %10, i64 0, !dbg !23
  %36 = shufflevector <2 x i1> %35, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !23
  %37 = insertelement <2 x i64> poison, i64 %31, i64 0, !dbg !24
  %38 = shufflevector <2 x i64> %37, <2 x i64> poison, <2 x i32> zeroinitializer, !dbg !24
  br label %39, !dbg !22

39:                                               ; preds = %8, %195
  %40 = phi i1 [ true, %8 ], [ false, %195 ]
  %indvars.iv = phi i64 [ 0, %8 ], [ 256, %195 ]
  %41 = phi float [ 0.000000e+00, %8 ], [ %257, %195 ]
  %42 = phi float [ 0.000000e+00, %8 ], [ %258, %195 ]
  %43 = phi float [ 0xFFF0000000000000, %8 ], [ %255, %195 ]
  %44 = phi float [ 0xFFF0000000000000, %8 ], [ %256, %195 ]
  %45 = phi i1 [ false, %8 ], [ %222, %195 ]
  %46 = phi i1 [ false, %8 ], [ %224, %195 ]
  %47 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !25
  %48 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !25
  %49 = shufflevector <2 x i32> %48, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !25
  %50 = or disjoint <2 x i32> %49, %33, !dbg !25
  %51 = zext nneg <2 x i32> %50 to <2 x i64>, !dbg !25
  %52 = or disjoint i64 %indvars.iv, %29, !dbg !25
  %53 = icmp samesign ult i64 %52, 324, !dbg !26
  %gep59 = getelementptr i64, ptr addrspace(1) %invariant.gep58, i64 %52, !dbg !27
  %54 = and i1 %10, %53, !dbg !23
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !28
  %56 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$4 ld.global.L1::evict_last.L2::cache_hint.v2.b64 { $0, $1 }, [ $2 + 0 ], $3;", "=l,=l,l,l,b"(ptr addrspace(1) %gep59, i64 %55, i1 %54) #8, !dbg !28
  %57 = trunc nuw nsw i64 %52 to i32, !dbg !29
  %58 = add i32 %21, %57, !dbg !29
  %59 = sext i32 %58 to i64, !dbg !30
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !30
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !31
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$6 ld.global.L1::evict_last.L2::cache_hint.v2.b32 { $0, $1 }, [ $4 + 0 ], $5;", "=r,=r,r,r,l,l,b"(i32 0, i32 0, ptr addrspace(1) %60, i64 %61, i1 %54) #8, !dbg !31
  %63 = extractvalue { i32, i32 } %62, 0, !dbg !31
  %64 = extractvalue { i32, i32 } %62, 1, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  %65 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !31
  %66 = insertelement <2 x i32> %65, i32 %64, i64 1, !dbg !31
  store <2 x i32> %66, ptr addrspace(3) %25, align 8, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  %67 = load float, ptr addrspace(3) %26, align 4, !dbg !31
  %68 = load float, ptr addrspace(3) %27, align 4, !dbg !31
  %69 = icmp samesign ult <2 x i32> %50, splat (i32 324), !dbg !26
  %70 = and <2 x i1> %36, %69, !dbg !23
  %71 = sub nsw <2 x i64> %51, %38, !dbg !24
  %72 = icmp sgt <2 x i64> %71, zeroinitializer, !dbg !32
  %73 = select <2 x i1> %72, <2 x i64> splat (i64 16), <2 x i64> zeroinitializer, !dbg !33
  %74 = trunc <2 x i64> %71 to <2 x i32>, !dbg !34
  %75 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %74, i1 false), !dbg !34
  %76 = sext <2 x i32> %75 to <2 x i64>, !dbg !35
  %77 = icmp slt <2 x i32> %75, splat (i32 8), !dbg !35
  %78 = extractelement <2 x i32> %75, i64 0, !dbg !36
  %79 = sitofp i32 %78 to float, !dbg !36
  %80 = extractelement <2 x i32> %75, i64 1, !dbg !36
  %81 = sitofp i32 %80 to float, !dbg !36
  %82 = fmul float %79, 1.250000e-01, !dbg !37
  %83 = fmul float %81, 1.250000e-01, !dbg !37
  %84 = fcmp olt float %82, 0x3810000000000000, !dbg !38
  %85 = fmul float %82, 0x4160000000000000, !dbg !38
  %.02.i = select i1 %84, float %85, float %82, !dbg !38
  %i.i.0.i = select i1 %84, float -2.300000e+01, float 0.000000e+00, !dbg !38
  %86 = bitcast float %.02.i to i32, !dbg !38
  %87 = add i32 %86, -1059760811, !dbg !38
  %88 = and i32 %87, -8388608, !dbg !38
  %89 = sub i32 %86, %88, !dbg !38
  %90 = bitcast i32 %89 to float, !dbg !38
  %91 = sitofp i32 %88 to float, !dbg !38
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !38
  %.not.i = icmp eq i32 %92, 0, !dbg !38
  %93 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %91, float 0x3E80000000000000, float %i.i.0.i) #8, !dbg !38
  %94 = tail call float @llvm.nvvm.fma.rn.f(float %91, float 0x3E80000000000000, float %i.i.0.i) #8, !dbg !38
  %.08.i = select i1 %.not.i, float %94, float %93, !dbg !38
  %95 = fadd float %90, -1.000000e+00, !dbg !38
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !38
  %.not1.i = icmp eq i32 %96, 0, !dbg !38
  %97 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %95, float 0x3FC2073EC0000000) #8, !dbg !38
  %98 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %95, float 0x3FC2073EC0000000) #8, !dbg !38
  %.010.i = select i1 %.not1.i, float %98, float %97, !dbg !38
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !38
  %.not2.i = icmp eq i32 %99, 0, !dbg !38
  %100 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %95, float 0xBFBF19B980000000) #8, !dbg !38
  %101 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %95, float 0xBFBF19B980000000) #8, !dbg !38
  %.011.i = select i1 %.not2.i, float %101, float %100, !dbg !38
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !38
  %.not3.i = icmp eq i32 %102, 0, !dbg !38
  %103 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %95, float 0x3FC1E52AA0000000) #8, !dbg !38
  %104 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %95, float 0x3FC1E52AA0000000) #8, !dbg !38
  %.012.i = select i1 %.not3.i, float %104, float %103, !dbg !38
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !38
  %.not4.i = icmp eq i32 %105, 0, !dbg !38
  %106 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %95, float 0xBFC55B1720000000) #8, !dbg !38
  %107 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %95, float 0xBFC55B1720000000) #8, !dbg !38
  %.09.i = select i1 %.not4.i, float %107, float %106, !dbg !38
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !38
  %.not5.i = icmp eq i32 %108, 0, !dbg !38
  %109 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %95, float 0x3FC99DA160000000) #8, !dbg !38
  %110 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %95, float 0x3FC99DA160000000) #8, !dbg !38
  %.05.i = select i1 %.not5.i, float %110, float %109, !dbg !38
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !38
  %.not6.i = icmp eq i32 %111, 0, !dbg !38
  %112 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %95, float 0xBFCFFFE440000000) #8, !dbg !38
  %113 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %95, float 0xBFCFFFE440000000) #8, !dbg !38
  %.01.i = select i1 %.not6.i, float %113, float %112, !dbg !38
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !38
  %.not7.i = icmp eq i32 %114, 0, !dbg !38
  %115 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %95, float 0x3FD5554F00000000) #8, !dbg !38
  %116 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %95, float 0x3FD5554F00000000) #8, !dbg !38
  %.0.i = select i1 %.not7.i, float %116, float %115, !dbg !38
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !38
  %.not8.i = icmp eq i32 %117, 0, !dbg !38
  %118 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %95, float -5.000000e-01) #8, !dbg !38
  %119 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %95, float -5.000000e-01) #8, !dbg !38
  %.07.i = select i1 %.not8.i, float %119, float %118, !dbg !38
  %120 = fmul float %95, %.07.i, !dbg !38
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !38
  %.not9.i = icmp eq i32 %121, 0, !dbg !38
  %122 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %120, float %95, float %95) #8, !dbg !38
  %123 = tail call float @llvm.nvvm.fma.rn.f(float %120, float %95, float %95) #8, !dbg !38
  %.06.i = select i1 %.not9.i, float %123, float %122, !dbg !38
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !38
  %.not10.i = icmp eq i32 %124, 0, !dbg !38
  %125 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #8, !dbg !38
  %126 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #8, !dbg !38
  %.04.i = select i1 %.not10.i, float %126, float %125, !dbg !38
  %127 = icmp ugt i32 %86, 2139095039, !dbg !38
  br i1 %127, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !38

__nv_fmaf_rn.exit.i.i:                            ; preds = %39
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !38
  %.not11.i = icmp eq i32 %128, 0, !dbg !38
  %129 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !38
  %130 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !38
  %.03.i = select i1 %.not11.i, float %130, float %129, !dbg !38
  br label %__nv_logf.exit, !dbg !38

__nv_logf.exit:                                   ; preds = %39, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %39 ], !dbg !38
  %131 = fcmp olt float %83, 0x3810000000000000, !dbg !38
  %132 = fmul float %83, 0x4160000000000000, !dbg !38
  %.02.i9 = select i1 %131, float %132, float %83, !dbg !38
  %i.i.0.i10 = select i1 %131, float -2.300000e+01, float 0.000000e+00, !dbg !38
  %133 = bitcast float %.02.i9 to i32, !dbg !38
  %134 = add i32 %133, -1059760811, !dbg !38
  %135 = and i32 %134, -8388608, !dbg !38
  %136 = sub i32 %133, %135, !dbg !38
  %137 = bitcast i32 %136 to float, !dbg !38
  %138 = sitofp i32 %135 to float, !dbg !38
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !38
  %.not.i11 = icmp eq i32 %139, 0, !dbg !38
  %140 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %138, float 0x3E80000000000000, float %i.i.0.i10) #8, !dbg !38
  %141 = tail call float @llvm.nvvm.fma.rn.f(float %138, float 0x3E80000000000000, float %i.i.0.i10) #8, !dbg !38
  %.08.i12 = select i1 %.not.i11, float %141, float %140, !dbg !38
  %142 = fadd float %137, -1.000000e+00, !dbg !38
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !38
  %.not1.i13 = icmp eq i32 %143, 0, !dbg !38
  %144 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %142, float 0x3FC2073EC0000000) #8, !dbg !38
  %145 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %142, float 0x3FC2073EC0000000) #8, !dbg !38
  %.010.i14 = select i1 %.not1.i13, float %145, float %144, !dbg !38
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !38
  %.not2.i15 = icmp eq i32 %146, 0, !dbg !38
  %147 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i14, float %142, float 0xBFBF19B980000000) #8, !dbg !38
  %148 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i14, float %142, float 0xBFBF19B980000000) #8, !dbg !38
  %.011.i16 = select i1 %.not2.i15, float %148, float %147, !dbg !38
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !38
  %.not3.i17 = icmp eq i32 %149, 0, !dbg !38
  %150 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i16, float %142, float 0x3FC1E52AA0000000) #8, !dbg !38
  %151 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i16, float %142, float 0x3FC1E52AA0000000) #8, !dbg !38
  %.012.i18 = select i1 %.not3.i17, float %151, float %150, !dbg !38
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !38
  %.not4.i19 = icmp eq i32 %152, 0, !dbg !38
  %153 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i18, float %142, float 0xBFC55B1720000000) #8, !dbg !38
  %154 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i18, float %142, float 0xBFC55B1720000000) #8, !dbg !38
  %.09.i20 = select i1 %.not4.i19, float %154, float %153, !dbg !38
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !38
  %.not5.i21 = icmp eq i32 %155, 0, !dbg !38
  %156 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i20, float %142, float 0x3FC99DA160000000) #8, !dbg !38
  %157 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i20, float %142, float 0x3FC99DA160000000) #8, !dbg !38
  %.05.i22 = select i1 %.not5.i21, float %157, float %156, !dbg !38
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !38
  %.not6.i23 = icmp eq i32 %158, 0, !dbg !38
  %159 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i22, float %142, float 0xBFCFFFE440000000) #8, !dbg !38
  %160 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i22, float %142, float 0xBFCFFFE440000000) #8, !dbg !38
  %.01.i24 = select i1 %.not6.i23, float %160, float %159, !dbg !38
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !38
  %.not7.i25 = icmp eq i32 %161, 0, !dbg !38
  %162 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i24, float %142, float 0x3FD5554F00000000) #8, !dbg !38
  %163 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i24, float %142, float 0x3FD5554F00000000) #8, !dbg !38
  %.0.i26 = select i1 %.not7.i25, float %163, float %162, !dbg !38
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !38
  %.not8.i27 = icmp eq i32 %164, 0, !dbg !38
  %165 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i26, float %142, float -5.000000e-01) #8, !dbg !38
  %166 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i26, float %142, float -5.000000e-01) #8, !dbg !38
  %.07.i28 = select i1 %.not8.i27, float %166, float %165, !dbg !38
  %167 = fmul float %142, %.07.i28, !dbg !38
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !38
  %.not9.i29 = icmp eq i32 %168, 0, !dbg !38
  %169 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %167, float %142, float %142) #8, !dbg !38
  %170 = tail call float @llvm.nvvm.fma.rn.f(float %167, float %142, float %142) #8, !dbg !38
  %.06.i30 = select i1 %.not9.i29, float %170, float %169, !dbg !38
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !38
  %.not10.i31 = icmp eq i32 %171, 0, !dbg !38
  %172 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i12, float 0x3FE62E4300000000, float %.06.i30) #8, !dbg !38
  %173 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i12, float 0x3FE62E4300000000, float %.06.i30) #8, !dbg !38
  %.04.i32 = select i1 %.not10.i31, float %173, float %172, !dbg !38
  %174 = icmp ugt i32 %133, 2139095039, !dbg !38
  br i1 %174, label %__nv_fmaf_rn.exit.i.i35, label %__nv_logf.exit38, !dbg !38

__nv_fmaf_rn.exit.i.i35:                          ; preds = %__nv_logf.exit
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !38
  %.not11.i36 = icmp eq i32 %175, 0, !dbg !38
  %176 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i9, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !38
  %177 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i9, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !38
  %.03.i37 = select i1 %.not11.i36, float %177, float %176, !dbg !38
  br label %__nv_logf.exit38, !dbg !38

__nv_logf.exit38:                                 ; preds = %__nv_logf.exit, %__nv_fmaf_rn.exit.i.i35
  %r.i.0.i33 = phi float [ %.03.i37, %__nv_fmaf_rn.exit.i.i35 ], [ %.04.i32, %__nv_logf.exit ], !dbg !38
  %178 = insertelement <2 x float> poison, float %r.i.0.i, i64 0, !dbg !39
  %179 = insertelement <2 x float> %178, float %r.i.0.i33, i64 1, !dbg !39
  %180 = fmul <2 x float> %179, splat (float 0x3FD7154760000000), !dbg !39
  %181 = fmul <2 x float> %180, splat (float 8.000000e+00), !dbg !40
  %182 = fptosi <2 x float> %181 to <2 x i64>, !dbg !41
  %183 = add <2 x i64> %182, splat (i64 8), !dbg !42
  %184 = tail call <2 x i64> @llvm.smin.v2i64(<2 x i64> %183, <2 x i64> splat (i64 15)), !dbg !43
  %185 = select <2 x i1> %77, <2 x i64> %76, <2 x i64> %184, !dbg !47
  %186 = add nsw <2 x i64> %185, %73, !dbg !48
  %187 = lshr <2 x i64> %186, splat (i64 58), !dbg !49
  %188 = and <2 x i64> %187, splat (i64 32), !dbg !49
  %189 = add nsw <2 x i64> %188, %186, !dbg !49
  %190 = icmp ugt <2 x i64> %189, splat (i64 31), !dbg !50
  %191 = and <2 x i1> %70, %190, !dbg !51
  %shift = shufflevector <2 x i1> %191, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !52
  %192 = or <2 x i1> %191, %shift, !dbg !52
  %193 = extractelement <2 x i1> %192, i64 0, !dbg !52
  br i1 %193, label %194, label %195, !dbg !52

194:                                              ; preds = %__nv_logf.exit38
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 73, ptr nonnull @assertFunc_0, i64 1), !dbg !52
  unreachable, !dbg !52

195:                                              ; preds = %__nv_logf.exit38
  %196 = extractvalue { i64, i64 } %56, 1, !dbg !28
  %197 = extractvalue { i64, i64 } %56, 0, !dbg !28
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !52
  %198 = extractelement <2 x i64> %189, i64 0, !dbg !53
  %.idx = shl i64 %198, 5, !dbg !53
  %gep = getelementptr i8, ptr addrspace(1) %invariant.gep, i64 %.idx, !dbg !53
  %199 = extractelement <2 x i64> %189, i64 1, !dbg !53
  %.idx6 = shl i64 %199, 5, !dbg !53
  %gep45 = getelementptr i8, ptr addrspace(1) %invariant.gep, i64 %.idx6, !dbg !53
  %200 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !54
  %201 = extractelement <2 x i1> %70, i64 0, !dbg !55
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %gep, i64 %200, i1 %201) #8, !dbg !54
  %203 = bitcast i32 %202 to float, !dbg !54
  %204 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !54
  %205 = extractelement <2 x i1> %70, i64 1, !dbg !55
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %gep45, i64 %204, i1 %205) #8, !dbg !54
  %207 = bitcast i32 %206 to float, !dbg !54
  %208 = insertelement <2 x i64> poison, i64 %197, i64 0, !dbg !56
  %209 = insertelement <2 x i64> %208, i64 %196, i64 1, !dbg !56
  %210 = sitofp <2 x i64> %209 to <2 x float>, !dbg !56
  %211 = fsub <2 x float> splat (float 1.000000e+00), %210, !dbg !57
  %212 = fmul <2 x float> %211, splat (float 0xC7EFFFFFE0000000), !dbg !58
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !58
  store <2 x float> %212, ptr addrspace(3) %25, align 8, !dbg !58
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !58
  %213 = load float, ptr addrspace(3) %26, align 4, !dbg !58
  %214 = load float, ptr addrspace(3) %27, align 4, !dbg !58
  %215 = fadd float %213, %203, !dbg !59
  %216 = fadd float %214, %207, !dbg !59
  %217 = fadd float %67, %215, !dbg !60
  %218 = fadd float %68, %216, !dbg !60
  %219 = fcmp une float %217, 0xFFF0000000000000, !dbg !61
  %220 = fcmp une float %218, 0xFFF0000000000000, !dbg !61
  %221 = select i1 %201, i1 %219, i1 false, !dbg !55
  %222 = or i1 %45, %221, !dbg !55
  %223 = select i1 %205, i1 %220, i1 false, !dbg !55
  %224 = or i1 %46, %223, !dbg !55
  %225 = fcmp ogt float %43, %217, !dbg !62
  %226 = fcmp ogt float %44, %218, !dbg !62
  %227 = fcmp uno float %43, 0.000000e+00, !dbg !64
  %228 = fcmp uno float %44, 0.000000e+00, !dbg !64
  %229 = or i1 %227, %225, !dbg !65
  %230 = or i1 %228, %226, !dbg !65
  %231 = select i1 %229, float %43, float %217, !dbg !66
  %232 = select i1 %230, float %44, float %218, !dbg !66
  %233 = fcmp oeq float %231, 0xFFF0000000000000, !dbg !67
  %234 = fcmp oeq float %232, 0xFFF0000000000000, !dbg !67
  %235 = fsub float %43, %231, !dbg !68
  %236 = fsub float %44, %232, !dbg !68
  %237 = fmul float %235, 0x3FF7154760000000, !dbg !69
  %238 = tail call float @llvm.nvvm.ex2.approx.f(float %237), !dbg !69
  %239 = fmul float %236, 0x3FF7154760000000, !dbg !69
  %240 = tail call float @llvm.nvvm.ex2.approx.f(float %239), !dbg !69
  %241 = select i1 %233, float 1.000000e+00, float %238, !dbg !70
  %242 = select i1 %234, float 1.000000e+00, float %240, !dbg !70
  %243 = fsub float %217, %231, !dbg !71
  %244 = fsub float %218, %232, !dbg !71
  %245 = fmul float %243, 0x3FF7154760000000, !dbg !69
  %246 = tail call float @llvm.nvvm.ex2.approx.f(float %245), !dbg !69
  %247 = fmul float %244, 0x3FF7154760000000, !dbg !69
  %248 = tail call float @llvm.nvvm.ex2.approx.f(float %247), !dbg !69
  %249 = select i1 %233, float 1.000000e+00, float %246, !dbg !72
  %250 = select i1 %234, float 1.000000e+00, float %248, !dbg !72
  %251 = fmul float %41, %241, !dbg !73
  %252 = fmul float %42, %242, !dbg !73
  %253 = fadd float %249, %251, !dbg !74
  %254 = fadd float %250, %252, !dbg !74
  %255 = select i1 %201, float %231, float %43, !dbg !75
  %256 = select i1 %205, float %232, float %44, !dbg !75
  %257 = select i1 %201, float %253, float %41, !dbg !76
  %258 = select i1 %205, float %254, float %42, !dbg !76
  %259 = add i32 %28, %57, !dbg !77
  %260 = sext i32 %259 to i64, !dbg !78
  %261 = getelementptr float, ptr addrspace(1) %3, i64 %260, !dbg !78
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !79
  store float %215, ptr addrspace(3) %26, align 4, !dbg !79
  store float %216, ptr addrspace(3) %27, align 4, !dbg !79
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !79
  %.extract = load i32, ptr addrspace(3) %25, align 8, !dbg !79
  %.extract8 = load i32, ptr addrspace(3) %34, align 4, !dbg !79
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract8, ptr addrspace(1) %261, i1 %54) #8, !dbg !79
  br i1 %40, label %39, label %262, !dbg !22

262:                                              ; preds = %195
  %263 = lshr i32 %11, 5, !dbg !12
  %264 = and i32 %11, 31, !dbg !12
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !80
  %265 = or i1 %222, %224, !dbg !82
  %266 = zext i1 %265 to i32, !dbg !80
  %267 = tail call i32 @llvm.nvvm.redux.sync.or(i32 %266, i32 -1), !dbg !80
  %268 = trunc i32 %267 to i8, !dbg !80
  %269 = and i32 %263, 3, !dbg !80
  %270 = icmp eq i32 %264, 0, !dbg !80
  %271 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %269, !dbg !80
  %272 = insertelement <1 x i8> poison, i8 %268, i64 0, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %271, <1 x i8> %272, i1 %270) #8, !dbg !80
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !80
  %273 = icmp samesign ult i32 %11, 4, !dbg !80
  %274 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %11, !dbg !80
  %275 = tail call i8 asm sideeffect "@$2 ld.shared.b8 $0, [ $1 + 0 ];", "=h,r,b"(ptr addrspace(3) %274, i1 %273) #8, !dbg !80
  %276 = zext i8 %275 to i32, !dbg !80
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 2, i32 31), !dbg !80
  %278 = trunc i32 %277 to i8, !dbg !80
  %279 = or i8 %275, %278, !dbg !82
  %280 = zext i8 %279 to i32, !dbg !80
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 1, i32 31), !dbg !80
  %282 = trunc i32 %281 to i8, !dbg !80
  %283 = or i8 %279, %282, !dbg !82
  %284 = icmp eq i32 %11, 0, !dbg !80
  %285 = insertelement <1 x i8> poison, i8 %283, i64 0, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %274, <1 x i8> %285, i1 %284) #8, !dbg !80
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !80
  %286 = load i8, ptr addrspace(3) @global_smem, align 16, !dbg !80
  %.not = icmp eq i8 %286, 0, !dbg !83
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !84
  %287 = fcmp ogt float %255, %256, !dbg !86
  %288 = fcmp uno float %255, 0.000000e+00, !dbg !87
  %289 = or i1 %287, %288, !dbg !88
  %290 = select i1 %289, float %255, float %256, !dbg !89
  %291 = bitcast float %290 to i32, !dbg !84
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 16, i32 31), !dbg !84
  %293 = bitcast i32 %292 to float, !dbg !84
  %294 = fcmp ogt float %290, %293, !dbg !86
  %295 = fcmp uno float %290, 0.000000e+00, !dbg !87
  %296 = or i1 %295, %294, !dbg !88
  %297 = select i1 %296, float %290, float %293, !dbg !89
  %298 = bitcast float %297 to i32, !dbg !84
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 8, i32 31), !dbg !84
  %300 = bitcast i32 %299 to float, !dbg !84
  %301 = fcmp ogt float %297, %300, !dbg !86
  %302 = fcmp uno float %297, 0.000000e+00, !dbg !87
  %303 = or i1 %301, %302, !dbg !88
  %304 = select i1 %303, float %297, float %300, !dbg !89
  %305 = bitcast float %304 to i32, !dbg !84
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 4, i32 31), !dbg !84
  %307 = bitcast i32 %306 to float, !dbg !84
  %308 = fcmp ogt float %304, %307, !dbg !86
  %309 = fcmp uno float %304, 0.000000e+00, !dbg !87
  %310 = or i1 %308, %309, !dbg !88
  %311 = select i1 %310, float %304, float %307, !dbg !89
  %312 = bitcast float %311 to i32, !dbg !84
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 2, i32 31), !dbg !84
  %314 = bitcast i32 %313 to float, !dbg !84
  %315 = fcmp ogt float %311, %314, !dbg !86
  %316 = fcmp uno float %311, 0.000000e+00, !dbg !87
  %317 = or i1 %315, %316, !dbg !88
  %318 = select i1 %317, float %311, float %314, !dbg !89
  %319 = bitcast float %318 to i32, !dbg !84
  %320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 1, i32 31), !dbg !84
  %321 = bitcast i32 %320 to float, !dbg !84
  %322 = fcmp ogt float %318, %321, !dbg !86
  %323 = fcmp uno float %318, 0.000000e+00, !dbg !87
  %324 = or i1 %322, %323, !dbg !88
  %325 = getelementptr float, ptr addrspace(3) @global_smem, i32 %269, !dbg !84
  %326 = select i1 %324, i32 %319, i32 %320, !dbg !89
  %327 = insertelement <1 x i32> poison, i32 %326, i64 0, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %325, <1 x i32> %327, i1 %270) #8, !dbg !84
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !84
  %328 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !84
  %329 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %328, i1 %273) #8, !dbg !84
  %330 = bitcast i32 %329 to float, !dbg !84
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %329, i32 2, i32 31), !dbg !84
  %332 = bitcast i32 %331 to float, !dbg !84
  %333 = fcmp ogt float %330, %332, !dbg !86
  %334 = fcmp uno float %330, 0.000000e+00, !dbg !87
  %335 = or i1 %334, %333, !dbg !88
  %336 = select i1 %335, float %330, float %332, !dbg !89
  %337 = bitcast float %336 to i32, !dbg !84
  %338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %337, i32 1, i32 31), !dbg !84
  %339 = bitcast i32 %338 to float, !dbg !84
  %340 = fcmp ogt float %336, %339, !dbg !86
  %341 = fcmp uno float %336, 0.000000e+00, !dbg !87
  %342 = or i1 %340, %341, !dbg !88
  %343 = select i1 %342, i32 %337, i32 %338, !dbg !89
  %344 = insertelement <1 x i32> poison, i32 %343, i64 0, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %328, <1 x i32> %344, i1 %284) #8, !dbg !84
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !84
  %345 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !84
  %346 = fcmp oeq float %345, 0xFFF0000000000000, !dbg !90
  %347 = fsub float %255, %345, !dbg !91
  %348 = fsub float %256, %345, !dbg !91
  %349 = fmul float %347, 0x3FF7154760000000, !dbg !92
  %350 = select i1 %346, float 0.000000e+00, float %349, !dbg !93
  %351 = tail call float @llvm.nvvm.ex2.approx.f(float %350), !dbg !92
  %352 = fmul float %348, 0x3FF7154760000000, !dbg !92
  %353 = select i1 %346, float 0.000000e+00, float %352, !dbg !93
  %354 = tail call float @llvm.nvvm.ex2.approx.f(float %353), !dbg !92
  %355 = fmul float %257, %351, !dbg !94
  %356 = fmul float %258, %354, !dbg !94
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !95
  %357 = fadd float %355, %356, !dbg !98
  %358 = bitcast float %357 to i32, !dbg !95
  %359 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %358, i32 16, i32 31), !dbg !95
  %360 = bitcast i32 %359 to float, !dbg !95
  %361 = fadd float %357, %360, !dbg !98
  %362 = bitcast float %361 to i32, !dbg !95
  %363 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %362, i32 8, i32 31), !dbg !95
  %364 = bitcast i32 %363 to float, !dbg !95
  %365 = fadd float %361, %364, !dbg !98
  %366 = bitcast float %365 to i32, !dbg !95
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 4, i32 31), !dbg !95
  %368 = bitcast i32 %367 to float, !dbg !95
  %369 = fadd float %365, %368, !dbg !98
  %370 = bitcast float %369 to i32, !dbg !95
  %371 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %370, i32 2, i32 31), !dbg !95
  %372 = bitcast i32 %371 to float, !dbg !95
  %373 = fadd float %369, %372, !dbg !98
  %374 = bitcast float %373 to i32, !dbg !95
  %375 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %374, i32 1, i32 31), !dbg !95
  %376 = bitcast i32 %375 to float, !dbg !95
  %377 = fadd float %373, %376, !dbg !98
  %378 = bitcast float %377 to <1 x i32>, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %325, <1 x i32> %378, i1 %270) #8, !dbg !95
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !95
  %379 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %328, i1 %273) #8, !dbg !95
  %380 = bitcast i32 %379 to float, !dbg !95
  %381 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %379, i32 2, i32 31), !dbg !95
  %382 = bitcast i32 %381 to float, !dbg !95
  %383 = fadd float %380, %382, !dbg !98
  %384 = bitcast float %383 to i32, !dbg !95
  %385 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %384, i32 1, i32 31), !dbg !95
  %386 = bitcast i32 %385 to float, !dbg !95
  %387 = fadd float %383, %386, !dbg !98
  %388 = bitcast float %387 to <1 x i32>, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %328, <1 x i32> %388, i1 %284) #8, !dbg !95
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !95
  %389 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !95
  %390 = add i32 %15, %21, !dbg !99
  %391 = sext i32 %390 to i64, !dbg !100
  %392 = getelementptr float, ptr addrspace(1) %2, i64 %391, !dbg !100
  %393 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #8, !dbg !101
  %394 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$6 ld.global.L1::evict_first.L2::cache_hint.v2.b32 { $0, $1 }, [ $4 + 0 ], $5;", "=r,=r,r,r,l,l,b"(i32 0, i32 0, ptr addrspace(1) %392, i64 %393, i1 %10) #8, !dbg !101
  %395 = extractvalue { i32, i32 } %394, 0, !dbg !101
  %396 = extractvalue { i32, i32 } %394, 1, !dbg !101
  %397 = bitcast i32 %395 to float, !dbg !101
  %398 = bitcast i32 %396 to float, !dbg !101
  %399 = add i32 %28, %15, !dbg !102
  %400 = sext i32 %399 to i64, !dbg !103
  %401 = getelementptr float, ptr addrspace(1) %3, i64 %400, !dbg !103
  %402 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #8, !dbg !104
  %403 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$6 ld.global.L1::evict_first.L2::cache_hint.v2.b32 { $0, $1 }, [ $4 + 0 ], $5;", "=r,=r,r,r,l,l,b"(i32 0, i32 0, ptr addrspace(1) %401, i64 %402, i1 %10) #8, !dbg !104
  %404 = extractvalue { i32, i32 } %403, 0, !dbg !104
  %405 = extractvalue { i32, i32 } %403, 1, !dbg !104
  %406 = bitcast i32 %404 to float, !dbg !104
  %407 = bitcast i32 %405 to float, !dbg !104
  %408 = fadd float %397, %406, !dbg !105
  %409 = fadd float %398, %407, !dbg !105
  %410 = fsub float %408, %345, !dbg !106
  %411 = fsub float %409, %345, !dbg !106
  %412 = fmul float %410, 0x3FF7154760000000, !dbg !107
  %413 = tail call float @llvm.nvvm.ex2.approx.f(float %412), !dbg !107
  %414 = fmul float %411, 0x3FF7154760000000, !dbg !107
  %415 = tail call float @llvm.nvvm.ex2.approx.f(float %414), !dbg !107
  %416 = tail call float @llvm.nvvm.div.full(float %413, float %389), !dbg !108
  %417 = tail call float @llvm.nvvm.div.full(float %415, float %389), !dbg !108
  %418 = getelementptr float, ptr addrspace(1) %4, i64 %400, !dbg !109
  %419 = bitcast float %416 to i32, !dbg !110
  %420 = select i1 %.not, i32 0, i32 %419, !dbg !111
  %421 = bitcast float %417 to i32, !dbg !110
  %422 = select i1 %.not, i32 0, i32 %421, !dbg !111
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %420, i32 %422, ptr addrspace(1) %418, i1 %10) #8, !dbg !110
  %423 = or disjoint i64 %29, 256, !dbg !112
  %424 = icmp samesign ult i64 %423, 324, !dbg !113
  %425 = trunc nuw nsw i64 %423 to i32, !dbg !99
  %426 = add i32 %21, %425, !dbg !99
  %427 = sext i32 %426 to i64, !dbg !100
  %428 = getelementptr float, ptr addrspace(1) %2, i64 %427, !dbg !100
  %429 = and i1 %10, %424, !dbg !114
  %430 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #8, !dbg !101
  %431 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$6 ld.global.L1::evict_first.L2::cache_hint.v2.b32 { $0, $1 }, [ $4 + 0 ], $5;", "=r,=r,r,r,l,l,b"(i32 0, i32 0, ptr addrspace(1) %428, i64 %430, i1 %429) #8, !dbg !101
  %432 = extractvalue { i32, i32 } %431, 0, !dbg !101
  %433 = extractvalue { i32, i32 } %431, 1, !dbg !101
  %434 = bitcast i32 %432 to float, !dbg !101
  %435 = bitcast i32 %433 to float, !dbg !101
  %436 = add i32 %28, %425, !dbg !102
  %437 = sext i32 %436 to i64, !dbg !103
  %438 = getelementptr float, ptr addrspace(1) %3, i64 %437, !dbg !103
  %439 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #8, !dbg !104
  %440 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$6 ld.global.L1::evict_first.L2::cache_hint.v2.b32 { $0, $1 }, [ $4 + 0 ], $5;", "=r,=r,r,r,l,l,b"(i32 0, i32 0, ptr addrspace(1) %438, i64 %439, i1 %429) #8, !dbg !104
  %441 = extractvalue { i32, i32 } %440, 0, !dbg !104
  %442 = extractvalue { i32, i32 } %440, 1, !dbg !104
  %443 = bitcast i32 %441 to float, !dbg !104
  %444 = bitcast i32 %442 to float, !dbg !104
  %445 = fadd float %434, %443, !dbg !105
  %446 = fadd float %435, %444, !dbg !105
  %447 = fsub float %445, %345, !dbg !106
  %448 = fsub float %446, %345, !dbg !106
  %449 = fmul float %447, 0x3FF7154760000000, !dbg !107
  %450 = tail call float @llvm.nvvm.ex2.approx.f(float %449), !dbg !107
  %451 = fmul float %448, 0x3FF7154760000000, !dbg !107
  %452 = tail call float @llvm.nvvm.ex2.approx.f(float %451), !dbg !107
  %453 = tail call float @llvm.nvvm.div.full(float %450, float %389), !dbg !108
  %454 = tail call float @llvm.nvvm.div.full(float %452, float %389), !dbg !108
  %455 = getelementptr float, ptr addrspace(1) %4, i64 %437, !dbg !109
  %456 = bitcast float %453 to i32, !dbg !110
  %457 = select i1 %.not, i32 0, i32 %456, !dbg !111
  %458 = bitcast float %454 to i32, !dbg !110
  %459 = select i1 %.not, i32 0, i32 %458, !dbg !111
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %457, i32 %459, ptr addrspace(1) %455, i1 %429) #8, !dbg !110
  ret void, !dbg !115
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.redux.sync.or(i32, i32) #4

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #5

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x i32> @llvm.abs.v2i32(<2 x i32>, i1 immarg) #7

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x i64> @llvm.smin.v2i64(<2 x i64>, <2 x i64>) #7

attributes #0 = { noreturn }
attributes #1 = { "nvvm.reqntid"="128" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #8 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "ccisb2yra76ab2haychl3vkjloggui7jornx4qodogdjo7v6y64e.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/ci")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !6, file: !6, type: !7, spFlags: DISPFlagOptimized)
!6 = !DIFile(filename: "<unknown>", directory: "")
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mul_rsub_4", linkageName: "triton_red_fused__to_copy_add_mul_rsub_4", scope: !1, file: !1, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!10 = !DILocation(line: 23, column: 28, scope: !9)
!11 = !DILocation(line: 25, column: 21, scope: !9)
!12 = !DILocation(line: 26, column: 37, scope: !9)
!13 = !DILocation(line: 29, column: 21, scope: !9)
!14 = !DILocation(line: 28, column: 19, scope: !9)
!15 = !DILocation(line: 29, column: 28, scope: !9)
!16 = !DILocation(line: 30, column: 19, scope: !9)
!17 = !DILocation(line: 43, column: 46, scope: !9)
!18 = !DILocation(line: 44, column: 46, scope: !9)
!19 = !DILocation(line: 74, column: 40, scope: !9)
!20 = !DILocation(line: 98, column: 40, scope: !9)
!21 = !DILocation(line: 98, column: 52, scope: !9)
!22 = !DILocation(line: 37, column: 40, scope: !9)
!23 = !DILocation(line: 43, column: 61, scope: !9)
!24 = !DILocation(line: 45, column: 23, scope: !9)
!25 = !DILocation(line: 38, column: 31, scope: !9)
!26 = !DILocation(line: 39, column: 29, scope: !9)
!27 = !DILocation(line: 43, column: 35, scope: !9)
!28 = !DILocation(line: 43, column: 51, scope: !9)
!29 = !DILocation(line: 44, column: 42, scope: !9)
!30 = !DILocation(line: 44, column: 35, scope: !9)
!31 = !DILocation(line: 44, column: 51, scope: !9)
!32 = !DILocation(line: 47, column: 22, scope: !9)
!33 = !DILocation(line: 50, column: 22, scope: !9)
!34 = !DILocation(line: 52, column: 27, scope: !9)
!35 = !DILocation(line: 54, column: 22, scope: !9)
!36 = !DILocation(line: 55, column: 24, scope: !9)
!37 = !DILocation(line: 57, column: 24, scope: !9)
!38 = !DILocation(line: 58, column: 28, scope: !9)
!39 = !DILocation(line: 60, column: 24, scope: !9)
!40 = !DILocation(line: 62, column: 24, scope: !9)
!41 = !DILocation(line: 63, column: 25, scope: !9)
!42 = !DILocation(line: 64, column: 24, scope: !9)
!43 = !DILocation(line: 106, column: 29, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !9, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 66, column: 46, scope: !9)
!47 = !DILocation(line: 67, column: 37, scope: !9)
!48 = !DILocation(line: 68, column: 23, scope: !9)
!49 = !DILocation(line: 72, column: 39, scope: !9)
!50 = !DILocation(line: 73, column: 42, scope: !9)
!51 = !DILocation(line: 73, column: 57, scope: !9)
!52 = !DILocation(line: 73, column: 77, scope: !9)
!53 = !DILocation(line: 74, column: 35, scope: !9)
!54 = !DILocation(line: 74, column: 50, scope: !9)
!55 = !DILocation(line: 89, column: 50, scope: !9)
!56 = !DILocation(line: 75, column: 25, scope: !9)
!57 = !DILocation(line: 77, column: 24, scope: !9)
!58 = !DILocation(line: 79, column: 24, scope: !9)
!59 = !DILocation(line: 80, column: 24, scope: !9)
!60 = !DILocation(line: 81, column: 24, scope: !9)
!61 = !DILocation(line: 83, column: 25, scope: !9)
!62 = !DILocation(line: 111, column: 15, scope: !44, inlinedAt: !63)
!63 = !DILocation(line: 93, column: 43, scope: !9)
!64 = !DILocation(line: 113, column: 21, scope: !44, inlinedAt: !63)
!65 = !DILocation(line: 113, column: 16, scope: !44, inlinedAt: !63)
!66 = !DILocation(line: 114, column: 29, scope: !44, inlinedAt: !63)
!67 = !DILocation(line: 197, column: 19, scope: !44, inlinedAt: !63)
!68 = !DILocation(line: 197, column: 53, scope: !44, inlinedAt: !63)
!69 = !DILocation(line: 174, column: 24, scope: !44, inlinedAt: !63)
!70 = !DILocation(line: 197, column: 39, scope: !44, inlinedAt: !63)
!71 = !DILocation(line: 200, column: 53, scope: !44, inlinedAt: !63)
!72 = !DILocation(line: 200, column: 39, scope: !44, inlinedAt: !63)
!73 = !DILocation(line: 206, column: 24, scope: !44, inlinedAt: !63)
!74 = !DILocation(line: 206, column: 36, scope: !44, inlinedAt: !63)
!75 = !DILocation(line: 96, column: 64, scope: !9)
!76 = !DILocation(line: 97, column: 64, scope: !9)
!77 = !DILocation(line: 98, column: 45, scope: !9)
!78 = !DILocation(line: 98, column: 29, scope: !9)
!79 = !DILocation(line: 98, column: 64, scope: !9)
!80 = !DILocation(line: 266, column: 29, scope: !44, inlinedAt: !81)
!81 = !DILocation(line: 99, column: 51, scope: !9)
!82 = !DILocation(line: 261, column: 15, scope: !44, inlinedAt: !81)
!83 = !DILocation(line: 99, column: 66, scope: !9)
!84 = !DILocation(line: 124, column: 29, scope: !44, inlinedAt: !85)
!85 = !DILocation(line: 102, column: 35, scope: !9)
!86 = !DILocation(line: 111, column: 15, scope: !44, inlinedAt: !85)
!87 = !DILocation(line: 113, column: 21, scope: !44, inlinedAt: !85)
!88 = !DILocation(line: 113, column: 16, scope: !44, inlinedAt: !85)
!89 = !DILocation(line: 114, column: 29, scope: !44, inlinedAt: !85)
!90 = !DILocation(line: 181, column: 40, scope: !44, inlinedAt: !85)
!91 = !DILocation(line: 181, column: 68, scope: !44, inlinedAt: !85)
!92 = !DILocation(line: 174, column: 24, scope: !44, inlinedAt: !85)
!93 = !DILocation(line: 181, column: 58, scope: !44, inlinedAt: !85)
!94 = !DILocation(line: 182, column: 31, scope: !44, inlinedAt: !85)
!95 = !DILocation(line: 290, column: 36, scope: !96, inlinedAt: !85)
!96 = distinct !DILexicalBlockFile(scope: !9, file: !97, discriminator: 0)
!97 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!98 = !DILocation(line: 260, column: 15, scope: !96, inlinedAt: !85)
!99 = !DILocation(line: 113, column: 42, scope: !9)
!100 = !DILocation(line: 113, column: 35, scope: !9)
!101 = !DILocation(line: 113, column: 51, scope: !9)
!102 = !DILocation(line: 114, column: 52, scope: !9)
!103 = !DILocation(line: 114, column: 36, scope: !9)
!104 = !DILocation(line: 114, column: 64, scope: !9)
!105 = !DILocation(line: 116, column: 24, scope: !9)
!106 = !DILocation(line: 117, column: 24, scope: !9)
!107 = !DILocation(line: 118, column: 28, scope: !9)
!108 = !DILocation(line: 119, column: 25, scope: !9)
!109 = !DILocation(line: 122, column: 29, scope: !9)
!110 = !DILocation(line: 122, column: 64, scope: !9)
!111 = !DILocation(line: 121, column: 39, scope: !9)
!112 = !DILocation(line: 108, column: 31, scope: !9)
!113 = !DILocation(line: 109, column: 29, scope: !9)
!114 = !DILocation(line: 113, column: 61, scope: !9)
!115 = !DILocation(line: 107, column: 4, scope: !9)
