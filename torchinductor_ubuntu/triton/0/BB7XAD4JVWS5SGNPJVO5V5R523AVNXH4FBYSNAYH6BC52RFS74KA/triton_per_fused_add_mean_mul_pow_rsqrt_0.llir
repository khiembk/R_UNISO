; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_per_fused_add_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr #0 !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !9
  %9 = and i32 %8, 31, !dbg !9
  %10 = lshr i32 %8, 5, !dbg !9
  %11 = shl nuw nsw i32 %8, 2, !dbg !9
  %12 = and i32 %11, 508, !dbg !9
  %13 = shl i32 %7, 9, !dbg !10
  %14 = or disjoint i32 %12, %13, !dbg !11
  %15 = sext i32 %14 to i64, !dbg !12
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !12
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %16) #6, !dbg !13
  %18 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !13
  %19 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !13
  %20 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !13
  %21 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !13
  %22 = bitcast i32 %18 to float, !dbg !13
  %23 = bitcast i32 %19 to float, !dbg !13
  %24 = bitcast i32 %20 to float, !dbg !13
  %25 = bitcast i32 %21 to float, !dbg !13
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !14
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %26) #6, !dbg !15
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !15
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !15
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !15
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !15
  %32 = bitcast i32 %28 to float, !dbg !15
  %33 = bitcast i32 %29 to float, !dbg !15
  %34 = bitcast i32 %30 to float, !dbg !15
  %35 = bitcast i32 %31 to float, !dbg !15
  %36 = zext nneg i32 %12 to i64, !dbg !16
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !16
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #6, !dbg !17
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ], $5;", "=r,=r,=r,=r,l,l"(ptr addrspace(1) %37, i64 %38) #6, !dbg !17
  %40 = fadd float %22, %32, !dbg !18
  %41 = fadd float %23, %33, !dbg !18
  %42 = fadd float %24, %34, !dbg !18
  %43 = fadd float %25, %35, !dbg !18
  %44 = fmul float %40, %40, !dbg !19
  %45 = fmul float %41, %41, !dbg !19
  %46 = fmul float %42, %42, !dbg !19
  %47 = fmul float %43, %43, !dbg !19
  %48 = fadd float %44, %45, !dbg !20
  %49 = fadd float %46, %48, !dbg !20
  %50 = fadd float %47, %49, !dbg !20
  %51 = bitcast float %50 to i32, !dbg !24
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 16, i32 31), !dbg !24
  %53 = bitcast i32 %52 to float, !dbg !24
  %54 = fadd float %50, %53, !dbg !20
  %55 = bitcast float %54 to i32, !dbg !24
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 8, i32 31), !dbg !24
  %57 = bitcast i32 %56 to float, !dbg !24
  %58 = fadd float %54, %57, !dbg !20
  %59 = bitcast float %58 to i32, !dbg !24
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 4, i32 31), !dbg !24
  %61 = bitcast i32 %60 to float, !dbg !24
  %62 = fadd float %58, %61, !dbg !20
  %63 = bitcast float %62 to i32, !dbg !24
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 2, i32 31), !dbg !24
  %65 = bitcast i32 %64 to float, !dbg !24
  %66 = fadd float %62, %65, !dbg !20
  %67 = bitcast float %66 to i32, !dbg !24
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 1, i32 31), !dbg !24
  %69 = bitcast i32 %68 to float, !dbg !24
  %70 = fadd float %66, %69, !dbg !20
  %71 = and i32 %10, 3, !dbg !24
  %72 = icmp eq i32 %9, 0, !dbg !24
  %73 = getelementptr float, ptr addrspace(3) @global_smem, i32 %71, !dbg !24
  %74 = bitcast float %70 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 %72) #6, !dbg !24
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !24
  %75 = icmp samesign ult i32 %8, 4, !dbg !24
  %76 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !24
  %77 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %76, i1 %75) #6, !dbg !24
  %78 = bitcast i32 %77 to float, !dbg !24
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 2, i32 31), !dbg !24
  %80 = bitcast i32 %79 to float, !dbg !24
  %81 = fadd float %78, %80, !dbg !20
  %82 = bitcast float %81 to i32, !dbg !24
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 1, i32 31), !dbg !24
  %84 = bitcast i32 %83 to float, !dbg !24
  %85 = fadd float %81, %84, !dbg !20
  %86 = icmp eq i32 %8, 0, !dbg !24
  %87 = bitcast float %85 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %87, i1 %86) #6, !dbg !24
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !24
  %88 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !24
  %89 = fadd float %88, 0.000000e+00, !dbg !25
  %90 = tail call float @llvm.nvvm.div.full(float %89, float 5.120000e+02), !dbg !29
  %91 = fadd float %90, 0x3EB0C6F7A0000000, !dbg !30
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !31
  %.not.i = icmp eq i32 %92, 0, !dbg !31
  br i1 %.not.i, label %95, label %93, !dbg !31

93:                                               ; preds = %6
  %94 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %91), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

95:                                               ; preds = %6
  %96 = tail call float @llvm.nvvm.rsqrt.approx.f(float %91), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

__nv_rsqrtf.exit:                                 ; preds = %93, %95
  %.0.i = phi float [ %94, %93 ], [ %96, %95 ], !dbg !31
  %97 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !17
  %98 = bitcast i32 %97 to float, !dbg !17
  %99 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !17
  %100 = bitcast i32 %99 to float, !dbg !17
  %101 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !17
  %102 = bitcast i32 %101 to float, !dbg !17
  %103 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !17
  %104 = bitcast i32 %103 to float, !dbg !17
  %105 = fmul float %40, %.0.i, !dbg !32
  %106 = fmul float %41, %.0.i, !dbg !32
  %107 = fmul float %42, %.0.i, !dbg !32
  %108 = fmul float %43, %.0.i, !dbg !32
  %109 = fmul float %105, %104, !dbg !33
  %110 = fmul float %106, %102, !dbg !33
  %111 = fmul float %107, %100, !dbg !33
  %112 = fmul float %108, %98, !dbg !33
  %113 = bitcast float %109 to i32, !dbg !34
  %114 = bitcast float %110 to i32, !dbg !34
  %115 = bitcast float %111 to i32, !dbg !34
  %116 = bitcast float %112 to i32, !dbg !34
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %113, i32 %114, i32 %115, i32 %116, ptr addrspace(1) %26) #6, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "cj55mshclrxvwku34g4cd3nw4pz5525cc377z4rfceqwkxbp35zm.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/j5")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "triton_per_fused_add_mean_mul_pow_rsqrt_0", linkageName: "triton_per_fused_add_mean_mul_pow_rsqrt_0", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 25, column: 28, scope: !5)
!9 = !DILocation(line: 28, column: 28, scope: !5)
!10 = !DILocation(line: 35, column: 41, scope: !5)
!11 = !DILocation(line: 35, column: 37, scope: !5)
!12 = !DILocation(line: 35, column: 30, scope: !5)
!13 = !DILocation(line: 35, column: 46, scope: !5)
!14 = !DILocation(line: 36, column: 34, scope: !5)
!15 = !DILocation(line: 36, column: 50, scope: !5)
!16 = !DILocation(line: 37, column: 30, scope: !5)
!17 = !DILocation(line: 37, column: 37, scope: !5)
!18 = !DILocation(line: 38, column: 18, scope: !5)
!19 = !DILocation(line: 39, column: 18, scope: !5)
!20 = !DILocation(line: 260, column: 15, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !5, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!23 = !DILocation(line: 41, column: 57, scope: !5)
!24 = !DILocation(line: 290, column: 36, scope: !21, inlinedAt: !23)
!25 = !DILocation(line: 66, column: 15, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !5, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 41, column: 44, scope: !5)
!29 = !DILocation(line: 43, column: 19, scope: !5)
!30 = !DILocation(line: 45, column: 19, scope: !5)
!31 = !DILocation(line: 46, column: 28, scope: !5)
!32 = !DILocation(line: 47, column: 19, scope: !5)
!33 = !DILocation(line: 48, column: 19, scope: !5)
!34 = !DILocation(line: 49, column: 51, scope: !5)
!35 = !DILocation(line: 49, column: 4, scope: !5)
