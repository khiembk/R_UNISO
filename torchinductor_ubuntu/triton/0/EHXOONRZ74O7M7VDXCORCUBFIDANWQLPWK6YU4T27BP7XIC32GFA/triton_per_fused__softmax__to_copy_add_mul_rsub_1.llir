; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [121 x i8] c"/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/nf/cnfehoh4k6l3otcz6shdp3chj7l7akuk6bepi5ielbhql6xqmt2v.py\00"
@assertMessage_0 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp27 < 32\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !5 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_per_fused__softmax__to_copy_add_mul_rsub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr #1 !dbg !9 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !10
  %10 = icmp samesign ult i32 %9, 400, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 63, !dbg !12
  %13 = icmp samesign ult i32 %12, 50, !dbg !13
  %14 = udiv i32 %9, 50, !dbg !14
  %15 = mul i32 %14, 50, !dbg !15
  %.decomposed = sub i32 %9, %15, !dbg !15
  %16 = zext nneg i32 %12 to i64, !dbg !16
  %17 = getelementptr i64, ptr addrspace(1) %1, i64 %16, !dbg !16
  %18 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !17
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b64 { $0 }, [ $1 + 0 ], $2;", "=l,l,l,b"(ptr addrspace(1) %17, i64 %18, i1 %13) #8, !dbg !17
  %20 = mul i32 %9, 50, !dbg !18
  %21 = add i32 %12, %20, !dbg !19
  %22 = sext i32 %21 to i64, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !20
  %24 = and i1 %10, %13, !dbg !21
  %25 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %23, i1 %24) #8, !dbg !22
  %26 = sub nsw i32 %12, %.decomposed, !dbg !23
  %27 = icmp sgt i32 %26, 0, !dbg !24
  %28 = select i1 %27, i64 16, i64 0, !dbg !25
  %29 = tail call i32 @llvm.abs.i32(i32 %26, i1 true), !dbg !26
  %30 = zext nneg i32 %29 to i64, !dbg !27
  %31 = icmp samesign ult i32 %29, 8, !dbg !27
  %32 = uitofp nneg i32 %29 to float, !dbg !28
  %33 = fmul float %32, 1.250000e-01, !dbg !29
  %34 = fcmp olt float %33, 0x3810000000000000, !dbg !30
  %35 = fmul float %33, 0x4160000000000000, !dbg !30
  %.02.i = select i1 %34, float %35, float %33, !dbg !30
  %i.i.0.i = select i1 %34, float -2.300000e+01, float 0.000000e+00, !dbg !30
  %36 = bitcast float %.02.i to i32, !dbg !30
  %37 = add nsw i32 %36, -1059760811, !dbg !30
  %38 = and i32 %37, -8388608, !dbg !30
  %39 = sub i32 %36, %38, !dbg !30
  %40 = bitcast i32 %39 to float, !dbg !30
  %41 = sitofp i32 %38 to float, !dbg !30
  %42 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !30
  %.not.i = icmp eq i32 %42, 0, !dbg !30
  %43 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %41, float 0x3E80000000000000, float %i.i.0.i) #8, !dbg !30
  %44 = tail call float @llvm.nvvm.fma.rn.f(float %41, float 0x3E80000000000000, float %i.i.0.i) #8, !dbg !30
  %.08.i = select i1 %.not.i, float %44, float %43, !dbg !30
  %45 = fadd float %40, -1.000000e+00, !dbg !30
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !30
  %.not1.i = icmp eq i32 %46, 0, !dbg !30
  %47 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %45, float 0x3FC2073EC0000000) #8, !dbg !30
  %48 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %45, float 0x3FC2073EC0000000) #8, !dbg !30
  %.010.i = select i1 %.not1.i, float %48, float %47, !dbg !30
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !30
  %.not2.i = icmp eq i32 %49, 0, !dbg !30
  %50 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %45, float 0xBFBF19B980000000) #8, !dbg !30
  %51 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %45, float 0xBFBF19B980000000) #8, !dbg !30
  %.011.i = select i1 %.not2.i, float %51, float %50, !dbg !30
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !30
  %.not3.i = icmp eq i32 %52, 0, !dbg !30
  %53 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %45, float 0x3FC1E52AA0000000) #8, !dbg !30
  %54 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %45, float 0x3FC1E52AA0000000) #8, !dbg !30
  %.012.i = select i1 %.not3.i, float %54, float %53, !dbg !30
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !30
  %.not4.i = icmp eq i32 %55, 0, !dbg !30
  %56 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %45, float 0xBFC55B1720000000) #8, !dbg !30
  %57 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %45, float 0xBFC55B1720000000) #8, !dbg !30
  %.09.i = select i1 %.not4.i, float %57, float %56, !dbg !30
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !30
  %.not5.i = icmp eq i32 %58, 0, !dbg !30
  %59 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %45, float 0x3FC99DA160000000) #8, !dbg !30
  %60 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %45, float 0x3FC99DA160000000) #8, !dbg !30
  %.05.i = select i1 %.not5.i, float %60, float %59, !dbg !30
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !30
  %.not6.i = icmp eq i32 %61, 0, !dbg !30
  %62 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %45, float 0xBFCFFFE440000000) #8, !dbg !30
  %63 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %45, float 0xBFCFFFE440000000) #8, !dbg !30
  %.01.i = select i1 %.not6.i, float %63, float %62, !dbg !30
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !30
  %.not7.i = icmp eq i32 %64, 0, !dbg !30
  %65 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %45, float 0x3FD5554F00000000) #8, !dbg !30
  %66 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %45, float 0x3FD5554F00000000) #8, !dbg !30
  %.0.i = select i1 %.not7.i, float %66, float %65, !dbg !30
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !30
  %.not8.i = icmp eq i32 %67, 0, !dbg !30
  %68 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %45, float -5.000000e-01) #8, !dbg !30
  %69 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %45, float -5.000000e-01) #8, !dbg !30
  %.07.i = select i1 %.not8.i, float %69, float %68, !dbg !30
  %70 = fmul float %45, %.07.i, !dbg !30
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !30
  %.not9.i = icmp eq i32 %71, 0, !dbg !30
  %72 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %70, float %45, float %45) #8, !dbg !30
  %73 = tail call float @llvm.nvvm.fma.rn.f(float %70, float %45, float %45) #8, !dbg !30
  %.06.i = select i1 %.not9.i, float %73, float %72, !dbg !30
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !30
  %.not10.i = icmp eq i32 %74, 0, !dbg !30
  %75 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #8, !dbg !30
  %76 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #8, !dbg !30
  %.04.i = select i1 %.not10.i, float %76, float %75, !dbg !30
  %77 = icmp samesign ugt i32 %36, 2139095039, !dbg !30
  br i1 %77, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !30

__nv_fmaf_rn.exit.i.i:                            ; preds = %8
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !30
  %.not11.i = icmp eq i32 %78, 0, !dbg !30
  %79 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !30
  %80 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !30
  %.03.i = select i1 %.not11.i, float %80, float %79, !dbg !30
  br label %__nv_logf.exit, !dbg !30

__nv_logf.exit:                                   ; preds = %8, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %8 ], !dbg !30
  %81 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !30
  %82 = fmul float %r.i.0.i, 0x3FD7154760000000, !dbg !31
  %83 = fmul float %82, 8.000000e+00, !dbg !32
  %84 = select i1 %81, float 0xFFF0000000000000, float %83, !dbg !30
  %85 = fptosi float %84 to i64, !dbg !33
  %86 = add i64 %85, 8, !dbg !34
  %87 = tail call i64 @llvm.smin.i64(i64 %86, i64 15), !dbg !35
  %88 = select i1 %31, i64 %30, i64 %87, !dbg !39
  %89 = add nsw i64 %88, %28, !dbg !40
  %90 = lshr i64 %89, 58, !dbg !41
  %91 = and i64 %90, 32, !dbg !41
  %92 = add nsw i64 %91, %89, !dbg !41
  %93 = icmp ugt i64 %92, 31, !dbg !42
  %.not1 = and i1 %24, %93, !dbg !43
  br i1 %.not1, label %94, label %95, !dbg !43

94:                                               ; preds = %__nv_logf.exit
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 66, ptr nonnull @assertFunc_0, i64 1), !dbg !43
  unreachable, !dbg !43

95:                                               ; preds = %__nv_logf.exit
  %96 = bitcast i32 %25 to float, !dbg !22
  %97 = lshr i32 %11, 5, !dbg !12
  %98 = and i32 %11, 31, !dbg !12
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !43
  %99 = zext nneg i32 %14 to i64, !dbg !44
  %.idx = shl i64 %92, 5, !dbg !45
  %100 = getelementptr i8, ptr addrspace(1) %0, i64 %.idx, !dbg !45
  %101 = getelementptr float, ptr addrspace(1) %100, i64 %99, !dbg !45
  %102 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !46
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %101, i64 %102, i1 %24) #8, !dbg !46
  %104 = bitcast i32 %103 to float, !dbg !46
  %105 = sitofp i64 %19 to float, !dbg !47
  %106 = fsub float 1.000000e+00, %105, !dbg !48
  %107 = fmul float %106, 0x47EFFFFFE0000000, !dbg !49
  %108 = fsub float %104, %107, !dbg !50
  %109 = fadd float %108, %96, !dbg !51
  %110 = select i1 %24, float %109, float 0xFFF0000000000000, !dbg !52
  %111 = bitcast float %110 to i32, !dbg !53
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 16, i32 31), !dbg !53
  %113 = bitcast i32 %112 to float, !dbg !53
  %114 = fcmp ogt float %110, %113, !dbg !55
  %115 = fcmp uno float %110, 0.000000e+00, !dbg !56
  %116 = or i1 %114, %115, !dbg !57
  %117 = select i1 %116, float %110, float %113, !dbg !58
  %118 = bitcast float %117 to i32, !dbg !53
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 8, i32 31), !dbg !53
  %120 = bitcast i32 %119 to float, !dbg !53
  %121 = fcmp ogt float %117, %120, !dbg !55
  %122 = fcmp uno float %117, 0.000000e+00, !dbg !56
  %123 = or i1 %121, %122, !dbg !57
  %124 = select i1 %123, float %117, float %120, !dbg !58
  %125 = bitcast float %124 to i32, !dbg !53
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 4, i32 31), !dbg !53
  %127 = bitcast i32 %126 to float, !dbg !53
  %128 = fcmp ogt float %124, %127, !dbg !55
  %129 = fcmp uno float %124, 0.000000e+00, !dbg !56
  %130 = or i1 %128, %129, !dbg !57
  %131 = select i1 %130, float %124, float %127, !dbg !58
  %132 = bitcast float %131 to i32, !dbg !53
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 2, i32 31), !dbg !53
  %134 = bitcast i32 %133 to float, !dbg !53
  %135 = fcmp ogt float %131, %134, !dbg !55
  %136 = fcmp uno float %131, 0.000000e+00, !dbg !56
  %137 = or i1 %135, %136, !dbg !57
  %138 = select i1 %137, float %131, float %134, !dbg !58
  %139 = bitcast float %138 to i32, !dbg !53
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 1, i32 31), !dbg !53
  %141 = bitcast i32 %140 to float, !dbg !53
  %142 = fcmp ogt float %138, %141, !dbg !55
  %143 = fcmp uno float %138, 0.000000e+00, !dbg !56
  %144 = or i1 %142, %143, !dbg !57
  %145 = and i32 %97, 1, !dbg !53
  %146 = icmp eq i32 %98, 0, !dbg !53
  %147 = getelementptr float, ptr addrspace(3) @global_smem, i32 %145, !dbg !53
  %148 = select i1 %144, i32 %139, i32 %140, !dbg !58
  %149 = insertelement <1 x i32> poison, i32 %148, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %149, i1 %146) #8, !dbg !53
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !53
  %150 = icmp samesign ult i32 %11, 2, !dbg !53
  %151 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !53
  %152 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %151, i1 %150) #8, !dbg !53
  %153 = bitcast i32 %152 to float, !dbg !53
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 1, i32 31), !dbg !53
  %155 = bitcast i32 %154 to float, !dbg !53
  %156 = fcmp ogt float %153, %155, !dbg !55
  %157 = fcmp uno float %153, 0.000000e+00, !dbg !56
  %158 = or i1 %157, %156, !dbg !57
  %159 = icmp eq i32 %11, 0, !dbg !53
  %160 = select i1 %158, i32 %152, i32 %154, !dbg !58
  %161 = insertelement <1 x i32> poison, i32 %160, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %161, i1 %159) #8, !dbg !53
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !53
  %162 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !53
  %163 = fsub float %109, %162, !dbg !59
  %164 = fmul float %163, 0x3FF7154760000000, !dbg !60
  %165 = tail call float @llvm.nvvm.ex2.approx.f(float %164), !dbg !60
  %166 = select i1 %24, float %165, float 0.000000e+00, !dbg !61
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !62
  %167 = bitcast float %166 to i32, !dbg !62
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 16, i32 31), !dbg !62
  %169 = bitcast i32 %168 to float, !dbg !62
  %170 = fadd float %166, %169, !dbg !66
  %171 = bitcast float %170 to i32, !dbg !62
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 8, i32 31), !dbg !62
  %173 = bitcast i32 %172 to float, !dbg !62
  %174 = fadd float %170, %173, !dbg !66
  %175 = bitcast float %174 to i32, !dbg !62
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 4, i32 31), !dbg !62
  %177 = bitcast i32 %176 to float, !dbg !62
  %178 = fadd float %174, %177, !dbg !66
  %179 = bitcast float %178 to i32, !dbg !62
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 2, i32 31), !dbg !62
  %181 = bitcast i32 %180 to float, !dbg !62
  %182 = fadd float %178, %181, !dbg !66
  %183 = bitcast float %182 to i32, !dbg !62
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 1, i32 31), !dbg !62
  %185 = bitcast i32 %184 to float, !dbg !62
  %186 = fadd float %182, %185, !dbg !66
  %187 = bitcast float %186 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %187, i1 %146) #8, !dbg !62
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !62
  %188 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %151, i1 %150) #8, !dbg !62
  %189 = bitcast i32 %188 to float, !dbg !62
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 1, i32 31), !dbg !62
  %191 = bitcast i32 %190 to float, !dbg !62
  %192 = fadd float %189, %191, !dbg !66
  %193 = bitcast float %192 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %193, i1 %159) #8, !dbg !62
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !62
  %194 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !62
  %195 = tail call float @llvm.nvvm.div.full(float %165, float %194), !dbg !67
  %196 = mul nuw nsw i32 %.decomposed, 50, !dbg !68
  %197 = add nuw nsw i32 %196, %12, !dbg !69
  %198 = mul i32 %14, 2528, !dbg !70
  %199 = add i32 %197, %198, !dbg !71
  %200 = sext i32 %199 to i64, !dbg !72
  %201 = getelementptr float, ptr addrspace(1) %3, i64 %200, !dbg !72
  %202 = bitcast float %108 to i32, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %202, ptr addrspace(1) %201, i1 %24) #8, !dbg !73
  %203 = getelementptr float, ptr addrspace(1) %4, i64 %200, !dbg !74
  %204 = bitcast float %195 to i32, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %204, ptr addrspace(1) %203, i1 %24) #8, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #5

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #7

attributes #0 = { noreturn }
attributes #1 = { "nvvm.reqntid"="64" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #6 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #8 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "cnfehoh4k6l3otcz6shdp3chj7l7akuk6bepi5ielbhql6xqmt2v.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/nf")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !6, file: !6, type: !7, spFlags: DISPFlagOptimized)
!6 = !DIFile(filename: "<unknown>", directory: "")
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = distinct !DISubprogram(name: "triton_per_fused__softmax__to_copy_add_mul_rsub_1", linkageName: "triton_per_fused__softmax__to_copy_add_mul_rsub_1", scope: !1, file: !1, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!10 = !DILocation(line: 24, column: 28, scope: !9)
!11 = !DILocation(line: 26, column: 21, scope: !9)
!12 = !DILocation(line: 27, column: 38, scope: !9)
!13 = !DILocation(line: 29, column: 25, scope: !9)
!14 = !DILocation(line: 34, column: 19, scope: !9)
!15 = !DILocation(line: 33, column: 19, scope: !9)
!16 = !DILocation(line: 36, column: 31, scope: !9)
!17 = !DILocation(line: 36, column: 38, scope: !9)
!18 = !DILocation(line: 37, column: 41, scope: !9)
!19 = !DILocation(line: 37, column: 38, scope: !9)
!20 = !DILocation(line: 37, column: 31, scope: !9)
!21 = !DILocation(line: 37, column: 56, scope: !9)
!22 = !DILocation(line: 37, column: 46, scope: !9)
!23 = !DILocation(line: 38, column: 19, scope: !9)
!24 = !DILocation(line: 40, column: 18, scope: !9)
!25 = !DILocation(line: 43, column: 18, scope: !9)
!26 = !DILocation(line: 45, column: 23, scope: !9)
!27 = !DILocation(line: 47, column: 18, scope: !9)
!28 = !DILocation(line: 48, column: 20, scope: !9)
!29 = !DILocation(line: 50, column: 20, scope: !9)
!30 = !DILocation(line: 51, column: 24, scope: !9)
!31 = !DILocation(line: 53, column: 20, scope: !9)
!32 = !DILocation(line: 55, column: 20, scope: !9)
!33 = !DILocation(line: 56, column: 21, scope: !9)
!34 = !DILocation(line: 57, column: 20, scope: !9)
!35 = !DILocation(line: 106, column: 29, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !9, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 59, column: 42, scope: !9)
!39 = !DILocation(line: 60, column: 33, scope: !9)
!40 = !DILocation(line: 61, column: 19, scope: !9)
!41 = !DILocation(line: 65, column: 35, scope: !9)
!42 = !DILocation(line: 66, column: 38, scope: !9)
!43 = !DILocation(line: 66, column: 73, scope: !9)
!44 = !DILocation(line: 67, column: 36, scope: !9)
!45 = !DILocation(line: 67, column: 31, scope: !9)
!46 = !DILocation(line: 67, column: 46, scope: !9)
!47 = !DILocation(line: 68, column: 21, scope: !9)
!48 = !DILocation(line: 70, column: 20, scope: !9)
!49 = !DILocation(line: 72, column: 20, scope: !9)
!50 = !DILocation(line: 73, column: 20, scope: !9)
!51 = !DILocation(line: 74, column: 20, scope: !9)
!52 = !DILocation(line: 77, column: 45, scope: !9)
!53 = !DILocation(line: 124, column: 29, scope: !36, inlinedAt: !54)
!54 = !DILocation(line: 78, column: 39, scope: !9)
!55 = !DILocation(line: 111, column: 15, scope: !36, inlinedAt: !54)
!56 = !DILocation(line: 113, column: 21, scope: !36, inlinedAt: !54)
!57 = !DILocation(line: 113, column: 16, scope: !36, inlinedAt: !54)
!58 = !DILocation(line: 114, column: 29, scope: !36, inlinedAt: !54)
!59 = !DILocation(line: 79, column: 20, scope: !9)
!60 = !DILocation(line: 80, column: 24, scope: !9)
!61 = !DILocation(line: 82, column: 45, scope: !9)
!62 = !DILocation(line: 290, column: 36, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlockFile(scope: !9, file: !64, discriminator: 0)
!64 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!65 = !DILocation(line: 83, column: 26, scope: !9)
!66 = !DILocation(line: 260, column: 15, scope: !63, inlinedAt: !65)
!67 = !DILocation(line: 86, column: 21, scope: !9)
!68 = !DILocation(line: 87, column: 35, scope: !9)
!69 = !DILocation(line: 87, column: 32, scope: !9)
!70 = !DILocation(line: 87, column: 45, scope: !9)
!71 = !DILocation(line: 87, column: 40, scope: !9)
!72 = !DILocation(line: 87, column: 25, scope: !9)
!73 = !DILocation(line: 87, column: 57, scope: !9)
!74 = !DILocation(line: 88, column: 25, scope: !9)
!75 = !DILocation(line: 88, column: 57, scope: !9)
!76 = !DILocation(line: 88, column: 4, scope: !9)
