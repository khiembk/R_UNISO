; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [121 x i8] c"/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/ci/ccisb2yra76ab2haychl3vkjloggui7jornx4qodogdjo7v6y64e.py\00"
@assertMessage_0 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp27 < 32\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !5 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_mul_rsub_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr #1 !dbg !9 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !10
  %10 = icmp samesign ult i32 %9, 10368, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 127, !dbg !12
  %13 = or disjoint i32 %12, 128, !dbg !12
  %14 = or disjoint i32 %12, 256, !dbg !12
  %15 = or disjoint i32 %12, 384, !dbg !12
  %16 = shl nuw nsw i32 %11, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %17, 2, !dbg !12
  %19 = udiv i32 %9, 324, !dbg !13
  %20 = mul i32 %19, 324, !dbg !14
  %.decomposed = sub i32 %9, %20, !dbg !14
  %21 = udiv i32 %9, 2592, !dbg !15
  %22 = icmp samesign ult i32 %14, 324, !dbg !16
  %23 = icmp samesign ult i32 %17, 324, !dbg !16
  %24 = mul nuw nsw i32 %21, 324, !dbg !17
  %25 = add nuw nsw i32 %17, %24, !dbg !18
  %26 = add nuw nsw i32 %18, %24, !dbg !18
  %27 = zext nneg i32 %25 to i64, !dbg !19
  %28 = getelementptr i64, ptr addrspace(1) %1, i64 %27, !dbg !19
  %29 = zext nneg i32 %26 to i64, !dbg !19
  %30 = getelementptr i64, ptr addrspace(1) %1, i64 %29, !dbg !19
  %31 = and i1 %10, %22, !dbg !20
  %32 = and i1 %10, %23, !dbg !20
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !21
  %34 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$4 ld.global.L1::evict_last.L2::cache_hint.v2.b64 { $0, $1 }, [ $2 + 0 ], $3;", "=l,=l,l,l,b"(ptr addrspace(1) %28, i64 %33, i1 %32) #8, !dbg !21
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !21
  %36 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$4 ld.global.L1::evict_last.L2::cache_hint.v2.b64 { $0, $1 }, [ $2 + 0 ], $3;", "=l,=l,l,l,b"(ptr addrspace(1) %30, i64 %35, i1 %32) #8, !dbg !21
  %37 = mul i32 %9, 324, !dbg !22
  %38 = add i32 %17, %37, !dbg !23
  %39 = sext i32 %38 to i64, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !24
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !25
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %40, i64 %41, i1 %32) #8, !dbg !25
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !25
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !25
  %47 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %17, !dbg !25
  %48 = insertelement <4 x i32> poison, i32 %43, i64 0, !dbg !25
  %49 = insertelement <4 x i32> %48, i32 %44, i64 1, !dbg !25
  %50 = insertelement <4 x i32> %49, i32 %45, i64 2, !dbg !25
  %51 = insertelement <4 x i32> %50, i32 %46, i64 3, !dbg !25
  store <4 x i32> %51, ptr addrspace(3) %47, align 16, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %52 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %12, !dbg !25
  %53 = load float, ptr addrspace(3) %52, align 4, !dbg !25
  %54 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13, !dbg !25
  %55 = load float, ptr addrspace(3) %54, align 4, !dbg !25
  %56 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14, !dbg !25
  %57 = load float, ptr addrspace(3) %56, align 4, !dbg !25
  %58 = sub nsw i32 %14, %.decomposed, !dbg !26
  %59 = sub nuw nsw i32 %15, %.decomposed, !dbg !26
  %60 = icmp sgt i32 %58, 0, !dbg !27
  %61 = select i1 %60, i64 16, i64 0, !dbg !28
  %62 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !26
  %63 = insertelement <2 x i32> %62, i32 %12, i64 1, !dbg !26
  %64 = insertelement <2 x i32> poison, i32 %.decomposed, i64 0, !dbg !26
  %65 = shufflevector <2 x i32> %64, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !26
  %66 = sub nsw <2 x i32> %63, %65, !dbg !26
  %67 = icmp sgt <2 x i32> %66, zeroinitializer, !dbg !27
  %68 = select <2 x i1> %67, <2 x i64> splat (i64 16), <2 x i64> zeroinitializer, !dbg !28
  %69 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %66, i1 true), !dbg !29
  %70 = tail call i32 @llvm.abs.i32(i32 %58, i1 true), !dbg !29
  %71 = zext nneg <2 x i32> %69 to <2 x i64>, !dbg !30
  %72 = zext nneg i32 %70 to i64, !dbg !30
  %73 = icmp samesign ult <2 x i32> %69, splat (i32 8), !dbg !30
  %74 = icmp samesign ult i32 %70, 8, !dbg !30
  %75 = extractelement <2 x i32> %69, i64 1, !dbg !31
  %76 = uitofp nneg i32 %75 to float, !dbg !31
  %77 = extractelement <2 x i32> %69, i64 0, !dbg !31
  %78 = uitofp nneg i32 %77 to float, !dbg !31
  %79 = uitofp nneg i32 %70 to float, !dbg !31
  %80 = uitofp nneg i32 %59 to float, !dbg !31
  %81 = fmul float %76, 1.250000e-01, !dbg !32
  %82 = fmul float %78, 1.250000e-01, !dbg !32
  %83 = fmul float %79, 1.250000e-01, !dbg !32
  %84 = fmul float %80, 1.250000e-01, !dbg !32
  %85 = fcmp olt float %81, 0x3810000000000000, !dbg !33
  %86 = fmul float %81, 0x4160000000000000, !dbg !33
  %.02.i = select i1 %85, float %86, float %81, !dbg !33
  %i.i.0.i = select i1 %85, float -2.300000e+01, float 0.000000e+00, !dbg !33
  %87 = bitcast float %.02.i to i32, !dbg !33
  %88 = add nsw i32 %87, -1059760811, !dbg !33
  %89 = and i32 %88, -8388608, !dbg !33
  %90 = sub i32 %87, %89, !dbg !33
  %91 = bitcast i32 %90 to float, !dbg !33
  %92 = sitofp i32 %89 to float, !dbg !33
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not.i = icmp eq i32 %93, 0, !dbg !33
  %94 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %92, float 0x3E80000000000000, float %i.i.0.i) #8, !dbg !33
  %95 = tail call float @llvm.nvvm.fma.rn.f(float %92, float 0x3E80000000000000, float %i.i.0.i) #8, !dbg !33
  %.08.i = select i1 %.not.i, float %95, float %94, !dbg !33
  %96 = fadd float %91, -1.000000e+00, !dbg !33
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not1.i = icmp eq i32 %97, 0, !dbg !33
  %98 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %96, float 0x3FC2073EC0000000) #8, !dbg !33
  %99 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %96, float 0x3FC2073EC0000000) #8, !dbg !33
  %.010.i = select i1 %.not1.i, float %99, float %98, !dbg !33
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not2.i = icmp eq i32 %100, 0, !dbg !33
  %101 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %96, float 0xBFBF19B980000000) #8, !dbg !33
  %102 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %96, float 0xBFBF19B980000000) #8, !dbg !33
  %.011.i = select i1 %.not2.i, float %102, float %101, !dbg !33
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not3.i = icmp eq i32 %103, 0, !dbg !33
  %104 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %96, float 0x3FC1E52AA0000000) #8, !dbg !33
  %105 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %96, float 0x3FC1E52AA0000000) #8, !dbg !33
  %.012.i = select i1 %.not3.i, float %105, float %104, !dbg !33
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not4.i = icmp eq i32 %106, 0, !dbg !33
  %107 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %96, float 0xBFC55B1720000000) #8, !dbg !33
  %108 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %96, float 0xBFC55B1720000000) #8, !dbg !33
  %.09.i = select i1 %.not4.i, float %108, float %107, !dbg !33
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not5.i = icmp eq i32 %109, 0, !dbg !33
  %110 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %96, float 0x3FC99DA160000000) #8, !dbg !33
  %111 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %96, float 0x3FC99DA160000000) #8, !dbg !33
  %.05.i = select i1 %.not5.i, float %111, float %110, !dbg !33
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not6.i = icmp eq i32 %112, 0, !dbg !33
  %113 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %96, float 0xBFCFFFE440000000) #8, !dbg !33
  %114 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %96, float 0xBFCFFFE440000000) #8, !dbg !33
  %.01.i = select i1 %.not6.i, float %114, float %113, !dbg !33
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not7.i = icmp eq i32 %115, 0, !dbg !33
  %116 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %96, float 0x3FD5554F00000000) #8, !dbg !33
  %117 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %96, float 0x3FD5554F00000000) #8, !dbg !33
  %.0.i = select i1 %.not7.i, float %117, float %116, !dbg !33
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not8.i = icmp eq i32 %118, 0, !dbg !33
  %119 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %96, float -5.000000e-01) #8, !dbg !33
  %120 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %96, float -5.000000e-01) #8, !dbg !33
  %.07.i = select i1 %.not8.i, float %120, float %119, !dbg !33
  %121 = fmul float %96, %.07.i, !dbg !33
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not9.i = icmp eq i32 %122, 0, !dbg !33
  %123 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %121, float %96, float %96) #8, !dbg !33
  %124 = tail call float @llvm.nvvm.fma.rn.f(float %121, float %96, float %96) #8, !dbg !33
  %.06.i = select i1 %.not9.i, float %124, float %123, !dbg !33
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not10.i = icmp eq i32 %125, 0, !dbg !33
  %126 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #8, !dbg !33
  %127 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #8, !dbg !33
  %.04.i = select i1 %.not10.i, float %127, float %126, !dbg !33
  %128 = icmp samesign ugt i32 %87, 2139095039, !dbg !33
  br i1 %128, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !33

__nv_fmaf_rn.exit.i.i:                            ; preds = %8
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not11.i = icmp eq i32 %129, 0, !dbg !33
  %130 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !33
  %131 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !33
  %.03.i = select i1 %.not11.i, float %131, float %130, !dbg !33
  br label %__nv_logf.exit, !dbg !33

__nv_logf.exit:                                   ; preds = %8, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %8 ], !dbg !33
  %132 = fcmp olt float %82, 0x3810000000000000, !dbg !33
  %133 = fmul float %82, 0x4160000000000000, !dbg !33
  %.02.i14 = select i1 %132, float %133, float %82, !dbg !33
  %i.i.0.i15 = select i1 %132, float -2.300000e+01, float 0.000000e+00, !dbg !33
  %134 = bitcast float %.02.i14 to i32, !dbg !33
  %135 = add nsw i32 %134, -1059760811, !dbg !33
  %136 = and i32 %135, -8388608, !dbg !33
  %137 = sub i32 %134, %136, !dbg !33
  %138 = bitcast i32 %137 to float, !dbg !33
  %139 = sitofp i32 %136 to float, !dbg !33
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not.i16 = icmp eq i32 %140, 0, !dbg !33
  %141 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %139, float 0x3E80000000000000, float %i.i.0.i15) #8, !dbg !33
  %142 = tail call float @llvm.nvvm.fma.rn.f(float %139, float 0x3E80000000000000, float %i.i.0.i15) #8, !dbg !33
  %.08.i17 = select i1 %.not.i16, float %142, float %141, !dbg !33
  %143 = fadd float %138, -1.000000e+00, !dbg !33
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not1.i18 = icmp eq i32 %144, 0, !dbg !33
  %145 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %143, float 0x3FC2073EC0000000) #8, !dbg !33
  %146 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %143, float 0x3FC2073EC0000000) #8, !dbg !33
  %.010.i19 = select i1 %.not1.i18, float %146, float %145, !dbg !33
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not2.i20 = icmp eq i32 %147, 0, !dbg !33
  %148 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i19, float %143, float 0xBFBF19B980000000) #8, !dbg !33
  %149 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i19, float %143, float 0xBFBF19B980000000) #8, !dbg !33
  %.011.i21 = select i1 %.not2.i20, float %149, float %148, !dbg !33
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not3.i22 = icmp eq i32 %150, 0, !dbg !33
  %151 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i21, float %143, float 0x3FC1E52AA0000000) #8, !dbg !33
  %152 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i21, float %143, float 0x3FC1E52AA0000000) #8, !dbg !33
  %.012.i23 = select i1 %.not3.i22, float %152, float %151, !dbg !33
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not4.i24 = icmp eq i32 %153, 0, !dbg !33
  %154 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i23, float %143, float 0xBFC55B1720000000) #8, !dbg !33
  %155 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i23, float %143, float 0xBFC55B1720000000) #8, !dbg !33
  %.09.i25 = select i1 %.not4.i24, float %155, float %154, !dbg !33
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not5.i26 = icmp eq i32 %156, 0, !dbg !33
  %157 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i25, float %143, float 0x3FC99DA160000000) #8, !dbg !33
  %158 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i25, float %143, float 0x3FC99DA160000000) #8, !dbg !33
  %.05.i27 = select i1 %.not5.i26, float %158, float %157, !dbg !33
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not6.i28 = icmp eq i32 %159, 0, !dbg !33
  %160 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i27, float %143, float 0xBFCFFFE440000000) #8, !dbg !33
  %161 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i27, float %143, float 0xBFCFFFE440000000) #8, !dbg !33
  %.01.i29 = select i1 %.not6.i28, float %161, float %160, !dbg !33
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not7.i30 = icmp eq i32 %162, 0, !dbg !33
  %163 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i29, float %143, float 0x3FD5554F00000000) #8, !dbg !33
  %164 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i29, float %143, float 0x3FD5554F00000000) #8, !dbg !33
  %.0.i31 = select i1 %.not7.i30, float %164, float %163, !dbg !33
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not8.i32 = icmp eq i32 %165, 0, !dbg !33
  %166 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i31, float %143, float -5.000000e-01) #8, !dbg !33
  %167 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i31, float %143, float -5.000000e-01) #8, !dbg !33
  %.07.i33 = select i1 %.not8.i32, float %167, float %166, !dbg !33
  %168 = fmul float %143, %.07.i33, !dbg !33
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not9.i34 = icmp eq i32 %169, 0, !dbg !33
  %170 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %168, float %143, float %143) #8, !dbg !33
  %171 = tail call float @llvm.nvvm.fma.rn.f(float %168, float %143, float %143) #8, !dbg !33
  %.06.i35 = select i1 %.not9.i34, float %171, float %170, !dbg !33
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not10.i36 = icmp eq i32 %172, 0, !dbg !33
  %173 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i17, float 0x3FE62E4300000000, float %.06.i35) #8, !dbg !33
  %174 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i17, float 0x3FE62E4300000000, float %.06.i35) #8, !dbg !33
  %.04.i37 = select i1 %.not10.i36, float %174, float %173, !dbg !33
  %175 = icmp samesign ugt i32 %134, 2139095039, !dbg !33
  br i1 %175, label %__nv_fmaf_rn.exit.i.i40, label %__nv_logf.exit43, !dbg !33

__nv_fmaf_rn.exit.i.i40:                          ; preds = %__nv_logf.exit
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not11.i41 = icmp eq i32 %176, 0, !dbg !33
  %177 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i14, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !33
  %178 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i14, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !33
  %.03.i42 = select i1 %.not11.i41, float %178, float %177, !dbg !33
  br label %__nv_logf.exit43, !dbg !33

__nv_logf.exit43:                                 ; preds = %__nv_logf.exit, %__nv_fmaf_rn.exit.i.i40
  %r.i.0.i38 = phi float [ %.03.i42, %__nv_fmaf_rn.exit.i.i40 ], [ %.04.i37, %__nv_logf.exit ], !dbg !33
  %179 = fcmp olt float %83, 0x3810000000000000, !dbg !33
  %180 = fmul float %83, 0x4160000000000000, !dbg !33
  %.02.i44 = select i1 %179, float %180, float %83, !dbg !33
  %i.i.0.i45 = select i1 %179, float -2.300000e+01, float 0.000000e+00, !dbg !33
  %181 = bitcast float %.02.i44 to i32, !dbg !33
  %182 = add nsw i32 %181, -1059760811, !dbg !33
  %183 = and i32 %182, -8388608, !dbg !33
  %184 = sub i32 %181, %183, !dbg !33
  %185 = bitcast i32 %184 to float, !dbg !33
  %186 = sitofp i32 %183 to float, !dbg !33
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not.i46 = icmp eq i32 %187, 0, !dbg !33
  %188 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %186, float 0x3E80000000000000, float %i.i.0.i45) #8, !dbg !33
  %189 = tail call float @llvm.nvvm.fma.rn.f(float %186, float 0x3E80000000000000, float %i.i.0.i45) #8, !dbg !33
  %.08.i47 = select i1 %.not.i46, float %189, float %188, !dbg !33
  %190 = fadd float %185, -1.000000e+00, !dbg !33
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not1.i48 = icmp eq i32 %191, 0, !dbg !33
  %192 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %190, float 0x3FC2073EC0000000) #8, !dbg !33
  %193 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %190, float 0x3FC2073EC0000000) #8, !dbg !33
  %.010.i49 = select i1 %.not1.i48, float %193, float %192, !dbg !33
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not2.i50 = icmp eq i32 %194, 0, !dbg !33
  %195 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i49, float %190, float 0xBFBF19B980000000) #8, !dbg !33
  %196 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i49, float %190, float 0xBFBF19B980000000) #8, !dbg !33
  %.011.i51 = select i1 %.not2.i50, float %196, float %195, !dbg !33
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not3.i52 = icmp eq i32 %197, 0, !dbg !33
  %198 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i51, float %190, float 0x3FC1E52AA0000000) #8, !dbg !33
  %199 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i51, float %190, float 0x3FC1E52AA0000000) #8, !dbg !33
  %.012.i53 = select i1 %.not3.i52, float %199, float %198, !dbg !33
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not4.i54 = icmp eq i32 %200, 0, !dbg !33
  %201 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i53, float %190, float 0xBFC55B1720000000) #8, !dbg !33
  %202 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i53, float %190, float 0xBFC55B1720000000) #8, !dbg !33
  %.09.i55 = select i1 %.not4.i54, float %202, float %201, !dbg !33
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not5.i56 = icmp eq i32 %203, 0, !dbg !33
  %204 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i55, float %190, float 0x3FC99DA160000000) #8, !dbg !33
  %205 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i55, float %190, float 0x3FC99DA160000000) #8, !dbg !33
  %.05.i57 = select i1 %.not5.i56, float %205, float %204, !dbg !33
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not6.i58 = icmp eq i32 %206, 0, !dbg !33
  %207 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i57, float %190, float 0xBFCFFFE440000000) #8, !dbg !33
  %208 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i57, float %190, float 0xBFCFFFE440000000) #8, !dbg !33
  %.01.i59 = select i1 %.not6.i58, float %208, float %207, !dbg !33
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not7.i60 = icmp eq i32 %209, 0, !dbg !33
  %210 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i59, float %190, float 0x3FD5554F00000000) #8, !dbg !33
  %211 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i59, float %190, float 0x3FD5554F00000000) #8, !dbg !33
  %.0.i61 = select i1 %.not7.i60, float %211, float %210, !dbg !33
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not8.i62 = icmp eq i32 %212, 0, !dbg !33
  %213 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i61, float %190, float -5.000000e-01) #8, !dbg !33
  %214 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i61, float %190, float -5.000000e-01) #8, !dbg !33
  %.07.i63 = select i1 %.not8.i62, float %214, float %213, !dbg !33
  %215 = fmul float %190, %.07.i63, !dbg !33
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not9.i64 = icmp eq i32 %216, 0, !dbg !33
  %217 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %215, float %190, float %190) #8, !dbg !33
  %218 = tail call float @llvm.nvvm.fma.rn.f(float %215, float %190, float %190) #8, !dbg !33
  %.06.i65 = select i1 %.not9.i64, float %218, float %217, !dbg !33
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not10.i66 = icmp eq i32 %219, 0, !dbg !33
  %220 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i47, float 0x3FE62E4300000000, float %.06.i65) #8, !dbg !33
  %221 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i47, float 0x3FE62E4300000000, float %.06.i65) #8, !dbg !33
  %.04.i67 = select i1 %.not10.i66, float %221, float %220, !dbg !33
  %222 = icmp samesign ugt i32 %181, 2139095039, !dbg !33
  br i1 %222, label %__nv_fmaf_rn.exit.i.i70, label %__nv_logf.exit73, !dbg !33

__nv_fmaf_rn.exit.i.i70:                          ; preds = %__nv_logf.exit43
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not11.i71 = icmp eq i32 %223, 0, !dbg !33
  %224 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i44, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !33
  %225 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i44, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !33
  %.03.i72 = select i1 %.not11.i71, float %225, float %224, !dbg !33
  br label %__nv_logf.exit73, !dbg !33

__nv_logf.exit73:                                 ; preds = %__nv_logf.exit43, %__nv_fmaf_rn.exit.i.i70
  %r.i.0.i68 = phi float [ %.03.i72, %__nv_fmaf_rn.exit.i.i70 ], [ %.04.i67, %__nv_logf.exit43 ], !dbg !33
  %226 = fcmp oeq float %.02.i44, 0.000000e+00, !dbg !33
  %227 = fcmp olt float %84, 0x3810000000000000, !dbg !33
  %228 = fmul float %84, 0x4160000000000000, !dbg !33
  %.02.i74 = select i1 %227, float %228, float %84, !dbg !33
  %i.i.0.i75 = select i1 %227, float -2.300000e+01, float 0.000000e+00, !dbg !33
  %229 = bitcast float %.02.i74 to i32, !dbg !33
  %230 = add nsw i32 %229, -1059760811, !dbg !33
  %231 = and i32 %230, -8388608, !dbg !33
  %232 = sub i32 %229, %231, !dbg !33
  %233 = bitcast i32 %232 to float, !dbg !33
  %234 = sitofp i32 %231 to float, !dbg !33
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not.i76 = icmp eq i32 %235, 0, !dbg !33
  %236 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %234, float 0x3E80000000000000, float %i.i.0.i75) #8, !dbg !33
  %237 = tail call float @llvm.nvvm.fma.rn.f(float %234, float 0x3E80000000000000, float %i.i.0.i75) #8, !dbg !33
  %.08.i77 = select i1 %.not.i76, float %237, float %236, !dbg !33
  %238 = fadd float %233, -1.000000e+00, !dbg !33
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not1.i78 = icmp eq i32 %239, 0, !dbg !33
  %240 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %238, float 0x3FC2073EC0000000) #8, !dbg !33
  %241 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %238, float 0x3FC2073EC0000000) #8, !dbg !33
  %.010.i79 = select i1 %.not1.i78, float %241, float %240, !dbg !33
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not2.i80 = icmp eq i32 %242, 0, !dbg !33
  %243 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i79, float %238, float 0xBFBF19B980000000) #8, !dbg !33
  %244 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i79, float %238, float 0xBFBF19B980000000) #8, !dbg !33
  %.011.i81 = select i1 %.not2.i80, float %244, float %243, !dbg !33
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not3.i82 = icmp eq i32 %245, 0, !dbg !33
  %246 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i81, float %238, float 0x3FC1E52AA0000000) #8, !dbg !33
  %247 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i81, float %238, float 0x3FC1E52AA0000000) #8, !dbg !33
  %.012.i83 = select i1 %.not3.i82, float %247, float %246, !dbg !33
  %248 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not4.i84 = icmp eq i32 %248, 0, !dbg !33
  %249 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i83, float %238, float 0xBFC55B1720000000) #8, !dbg !33
  %250 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i83, float %238, float 0xBFC55B1720000000) #8, !dbg !33
  %.09.i85 = select i1 %.not4.i84, float %250, float %249, !dbg !33
  %251 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not5.i86 = icmp eq i32 %251, 0, !dbg !33
  %252 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i85, float %238, float 0x3FC99DA160000000) #8, !dbg !33
  %253 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i85, float %238, float 0x3FC99DA160000000) #8, !dbg !33
  %.05.i87 = select i1 %.not5.i86, float %253, float %252, !dbg !33
  %254 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not6.i88 = icmp eq i32 %254, 0, !dbg !33
  %255 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i87, float %238, float 0xBFCFFFE440000000) #8, !dbg !33
  %256 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i87, float %238, float 0xBFCFFFE440000000) #8, !dbg !33
  %.01.i89 = select i1 %.not6.i88, float %256, float %255, !dbg !33
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not7.i90 = icmp eq i32 %257, 0, !dbg !33
  %258 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i89, float %238, float 0x3FD5554F00000000) #8, !dbg !33
  %259 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i89, float %238, float 0x3FD5554F00000000) #8, !dbg !33
  %.0.i91 = select i1 %.not7.i90, float %259, float %258, !dbg !33
  %260 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not8.i92 = icmp eq i32 %260, 0, !dbg !33
  %261 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i91, float %238, float -5.000000e-01) #8, !dbg !33
  %262 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i91, float %238, float -5.000000e-01) #8, !dbg !33
  %.07.i93 = select i1 %.not8.i92, float %262, float %261, !dbg !33
  %263 = fmul float %238, %.07.i93, !dbg !33
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not9.i94 = icmp eq i32 %264, 0, !dbg !33
  %265 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %263, float %238, float %238) #8, !dbg !33
  %266 = tail call float @llvm.nvvm.fma.rn.f(float %263, float %238, float %238) #8, !dbg !33
  %.06.i95 = select i1 %.not9.i94, float %266, float %265, !dbg !33
  %267 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not10.i96 = icmp eq i32 %267, 0, !dbg !33
  %268 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i77, float 0x3FE62E4300000000, float %.06.i95) #8, !dbg !33
  %269 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i77, float 0x3FE62E4300000000, float %.06.i95) #8, !dbg !33
  %.04.i97 = select i1 %.not10.i96, float %269, float %268, !dbg !33
  %270 = icmp samesign ugt i32 %229, 2139095039, !dbg !33
  br i1 %270, label %__nv_fmaf_rn.exit.i.i100, label %__nv_logf.exit103, !dbg !33

__nv_fmaf_rn.exit.i.i100:                         ; preds = %__nv_logf.exit73
  %271 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #8, !dbg !33
  %.not11.i101 = icmp eq i32 %271, 0, !dbg !33
  %272 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i74, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !33
  %273 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i74, float 0x7FF0000000000000, float 0x7FF0000000000000) #8, !dbg !33
  %.03.i102 = select i1 %.not11.i101, float %273, float %272, !dbg !33
  br label %__nv_logf.exit103, !dbg !33

__nv_logf.exit103:                                ; preds = %__nv_logf.exit73, %__nv_fmaf_rn.exit.i.i100
  %r.i.0.i98 = phi float [ %.03.i102, %__nv_fmaf_rn.exit.i.i100 ], [ %.04.i97, %__nv_logf.exit73 ], !dbg !33
  %274 = insertelement <2 x float> poison, float %r.i.0.i38, i64 0, !dbg !34
  %275 = insertelement <2 x float> %274, float %r.i.0.i, i64 1, !dbg !34
  %276 = fmul <2 x float> %275, splat (float 0x3FD7154760000000), !dbg !34
  %277 = fmul float %r.i.0.i68, 0x3FD7154760000000, !dbg !34
  %278 = fmul float %277, 8.000000e+00, !dbg !35
  %279 = select i1 %226, float 0xFFF0000000000000, float %278, !dbg !33
  %280 = fptosi float %279 to i64, !dbg !36
  %281 = add i64 %280, 8, !dbg !37
  %282 = tail call i64 @llvm.smin.i64(i64 %281, i64 15), !dbg !38
  %283 = select i1 %74, i64 %72, i64 %282, !dbg !42
  %284 = add nsw i64 %283, %61, !dbg !43
  %285 = fmul <2 x float> %276, splat (float 8.000000e+00), !dbg !35
  %286 = fptosi <2 x float> %285 to <2 x i64>, !dbg !36
  %287 = add <2 x i64> %286, splat (i64 8), !dbg !37
  %288 = tail call <2 x i64> @llvm.smin.v2i64(<2 x i64> %287, <2 x i64> splat (i64 15)), !dbg !38
  %289 = select <2 x i1> %73, <2 x i64> %71, <2 x i64> %288, !dbg !42
  %290 = add nsw <2 x i64> %289, %68, !dbg !43
  %291 = lshr <2 x i64> %290, splat (i64 58), !dbg !44
  %292 = and <2 x i64> %291, splat (i64 32), !dbg !44
  %293 = add nsw <2 x i64> %292, %290, !dbg !44
  %294 = lshr i64 %284, 58, !dbg !44
  %295 = and i64 %294, 32, !dbg !44
  %296 = add nsw i64 %295, %284, !dbg !44
  %297 = icmp ugt i64 %296, 31, !dbg !45
  %.not4 = and i1 %31, %297, !dbg !46
  %298 = extractelement <2 x i64> %293, i64 0, !dbg !46
  %299 = extractelement <2 x i64> %293, i64 1, !dbg !46
  %300 = or i64 %298, %299, !dbg !46
  %.not13 = icmp ugt i64 %300, 31, !dbg !46
  %301 = and i1 %10, %.not13, !dbg !46
  %302 = or i1 %301, %.not4, !dbg !46
  br i1 %302, label %303, label %304, !dbg !46

303:                                              ; preds = %__nv_logf.exit103
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 73, ptr nonnull @assertFunc_0, i64 1), !dbg !46
  unreachable, !dbg !46

304:                                              ; preds = %__nv_logf.exit103
  %305 = fcmp oeq float %.02.i74, 0.000000e+00, !dbg !33
  %306 = fmul float %r.i.0.i98, 0x3FD7154760000000, !dbg !34
  %307 = fmul float %306, 8.000000e+00, !dbg !35
  %308 = select i1 %305, float 0xFFF0000000000000, float %307, !dbg !33
  %309 = fptosi float %308 to i64, !dbg !36
  %310 = add i64 %309, 8, !dbg !37
  %311 = icmp slt i64 %310, -16, !dbg !47
  %312 = tail call i64 @llvm.smin.i64(i64 %310, i64 15), !dbg !38
  %.v = select i1 %311, i64 48, i64 16, !dbg !44
  %313 = add nsw i64 %.v, %312, !dbg !44
  %314 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %15, !dbg !25
  %315 = extractvalue { i64, i64 } %36, 1, !dbg !21
  %316 = extractvalue { i64, i64 } %36, 0, !dbg !21
  %317 = extractvalue { i64, i64 } %34, 1, !dbg !21
  %318 = extractvalue { i64, i64 } %34, 0, !dbg !21
  %319 = and i32 %19, 7, !dbg !48
  %320 = lshr i32 %11, 5, !dbg !12
  %321 = and i32 %11, 31, !dbg !12
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !46
  %322 = zext nneg i32 %319 to i64, !dbg !49
  %.idx = shl i64 %299, 5, !dbg !50
  %323 = getelementptr i8, ptr addrspace(1) %0, i64 %.idx, !dbg !50
  %324 = getelementptr float, ptr addrspace(1) %323, i64 %322, !dbg !50
  %.idx5 = shl i64 %298, 5, !dbg !50
  %325 = getelementptr i8, ptr addrspace(1) %0, i64 %.idx5, !dbg !50
  %326 = getelementptr float, ptr addrspace(1) %325, i64 %322, !dbg !50
  %.idx6 = shl i64 %296, 5, !dbg !50
  %327 = getelementptr i8, ptr addrspace(1) %0, i64 %.idx6, !dbg !50
  %328 = getelementptr float, ptr addrspace(1) %327, i64 %322, !dbg !50
  %.idx7 = shl i64 %313, 5, !dbg !50
  %329 = getelementptr i8, ptr addrspace(1) %0, i64 %.idx7, !dbg !50
  %330 = getelementptr float, ptr addrspace(1) %329, i64 %322, !dbg !50
  %331 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !51
  %332 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %324, i64 %331, i1 %10) #8, !dbg !51
  %333 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !51
  %334 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %326, i64 %333, i1 %10) #8, !dbg !51
  %335 = bitcast i32 %334 to float, !dbg !51
  %336 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !51
  %337 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %328, i64 %336, i1 %31) #8, !dbg !51
  %338 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #8, !dbg !51
  %339 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 ld.global.L1::evict_last.L2::cache_hint.b32 { $0 }, [ $1 + 0 ], $2;", "=r,l,l,b"(ptr addrspace(1) %330, i64 %338, i1 false) #8, !dbg !51
  %340 = bitcast i32 %339 to float, !dbg !51
  %341 = insertelement <4 x i64> poison, i64 %318, i64 0, !dbg !52
  %342 = insertelement <4 x i64> %341, i64 %317, i64 1, !dbg !52
  %343 = insertelement <4 x i64> %342, i64 %316, i64 2, !dbg !52
  %344 = insertelement <4 x i64> %343, i64 %315, i64 3, !dbg !52
  %345 = sitofp <4 x i64> %344 to <4 x float>, !dbg !52
  %346 = fsub <4 x float> splat (float 1.000000e+00), %345, !dbg !53
  %347 = fmul <4 x float> %346, splat (float 0xC7EFFFFFE0000000), !dbg !54
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !54
  store <4 x float> %347, ptr addrspace(3) %47, align 16, !dbg !54
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !54
  %348 = load float, ptr addrspace(3) %52, align 4, !dbg !54
  %349 = load float, ptr addrspace(3) %54, align 4, !dbg !54
  %350 = load float, ptr addrspace(3) %56, align 4, !dbg !54
  %351 = load float, ptr addrspace(3) %314, align 4, !dbg !54
  %352 = fadd float %349, %335, !dbg !55
  %353 = fadd float %351, %340, !dbg !55
  %354 = fadd float %55, %352, !dbg !56
  %355 = fcmp une float %354, 0xFFF0000000000000, !dbg !57
  %356 = fsub float 0xFFF0000000000000, %354, !dbg !58
  %357 = fmul float %356, 0x3FF7154760000000, !dbg !60
  %358 = tail call float @llvm.nvvm.ex2.approx.f(float %357), !dbg !60
  %359 = fsub float %354, %354, !dbg !61
  %360 = fmul float %359, 0x3FF7154760000000, !dbg !60
  %361 = tail call float @llvm.nvvm.ex2.approx.f(float %360), !dbg !60
  %362 = fmul float %358, 0.000000e+00, !dbg !62
  %363 = fadd float %362, %361, !dbg !63
  %364 = select i1 %355, float %363, float 1.000000e+00, !dbg !63
  %365 = select i1 %10, float %354, float 0xFFF0000000000000, !dbg !64
  %366 = select i1 %10, float %364, float 0.000000e+00, !dbg !65
  %367 = mul nuw nsw i32 %.decomposed, 324, !dbg !66
  %368 = add nuw nsw i32 %17, %367, !dbg !67
  %369 = mul i32 %19, 104992, !dbg !68
  %370 = add i32 %368, %369, !dbg !69
  %371 = sext i32 %370 to i64, !dbg !70
  %372 = getelementptr float, ptr addrspace(1) %3, i64 %371, !dbg !70
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !71
  store float %352, ptr addrspace(3) %54, align 4, !dbg !71
  store float %353, ptr addrspace(3) %314, align 4, !dbg !71
  %373 = getelementptr inbounds nuw i8, ptr addrspace(3) %47, i32 4, !dbg !71
  %374 = getelementptr inbounds nuw i8, ptr addrspace(3) %47, i32 8, !dbg !71
  %375 = getelementptr inbounds nuw i8, ptr addrspace(3) %47, i32 12, !dbg !71
  %376 = and i32 %320, 3, !dbg !72
  %377 = icmp eq i32 %321, 0, !dbg !72
  %378 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %376, !dbg !72
  %379 = icmp samesign ult i32 %11, 4, !dbg !72
  %380 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %11, !dbg !72
  %381 = icmp eq i32 %11, 0, !dbg !72
  %382 = getelementptr float, ptr addrspace(3) @global_smem, i32 %376, !dbg !74
  %383 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !74
  %384 = insertelement <2 x i32> poison, i32 %332, i64 0, !dbg !51
  %385 = insertelement <2 x i32> %384, i32 %337, i64 1, !dbg !51
  %386 = bitcast <2 x i32> %385 to <2 x float>, !dbg !51
  %387 = insertelement <2 x float> poison, float %348, i64 0, !dbg !55
  %388 = insertelement <2 x float> %387, float %350, i64 1, !dbg !55
  %389 = fadd <2 x float> %388, %386, !dbg !55
  %390 = insertelement <2 x float> poison, float %53, i64 0, !dbg !56
  %391 = insertelement <2 x float> %390, float %57, i64 1, !dbg !56
  %392 = fadd <2 x float> %391, %389, !dbg !56
  %393 = fcmp une <2 x float> %392, splat (float 0xFFF0000000000000), !dbg !57
  %394 = extractelement <2 x i1> %393, i64 1, !dbg !76
  %395 = select i1 %31, i1 %394, i1 false, !dbg !76
  %396 = extractelement <2 x float> %392, i64 0, !dbg !58
  %397 = fsub float 0xFFF0000000000000, %396, !dbg !58
  %398 = extractelement <2 x float> %392, i64 1, !dbg !58
  %399 = fsub float 0xFFF0000000000000, %398, !dbg !58
  %400 = fmul float %397, 0x3FF7154760000000, !dbg !60
  %401 = tail call float @llvm.nvvm.ex2.approx.f(float %400), !dbg !60
  %402 = fmul float %399, 0x3FF7154760000000, !dbg !60
  %403 = tail call float @llvm.nvvm.ex2.approx.f(float %402), !dbg !60
  %404 = fsub float %396, %396, !dbg !61
  %405 = fsub float %398, %398, !dbg !61
  %406 = fmul float %404, 0x3FF7154760000000, !dbg !60
  %407 = tail call float @llvm.nvvm.ex2.approx.f(float %406), !dbg !60
  %408 = fmul float %405, 0x3FF7154760000000, !dbg !60
  %409 = tail call float @llvm.nvvm.ex2.approx.f(float %408), !dbg !60
  %410 = insertelement <2 x float> poison, float %401, i64 0, !dbg !62
  %411 = insertelement <2 x float> %410, float %403, i64 1, !dbg !62
  %412 = fmul <2 x float> %411, zeroinitializer, !dbg !62
  %413 = insertelement <2 x float> poison, float %407, i64 0, !dbg !63
  %414 = insertelement <2 x float> %413, float %409, i64 1, !dbg !63
  %415 = fadd <2 x float> %412, %414, !dbg !63
  %416 = select <2 x i1> %393, <2 x float> %415, <2 x float> splat (float 1.000000e+00), !dbg !63
  %417 = select i1 %10, float %396, float 0xFFF0000000000000, !dbg !64
  %418 = select i1 %31, float %398, float 0xFFF0000000000000, !dbg !64
  %419 = insertelement <2 x i1> poison, i1 %10, i64 0, !dbg !65
  %420 = insertelement <2 x i1> %419, i1 %31, i64 1, !dbg !65
  %421 = select <2 x i1> %420, <2 x float> %416, <2 x float> zeroinitializer, !dbg !65
  %422 = extractelement <2 x float> %389, i64 0, !dbg !71
  store float %422, ptr addrspace(3) %52, align 4, !dbg !71
  %423 = extractelement <2 x float> %389, i64 1, !dbg !71
  store float %423, ptr addrspace(3) %56, align 4, !dbg !71
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !71
  %.extract = load i32, ptr addrspace(3) %47, align 16, !dbg !71
  %.extract11 = load i32, ptr addrspace(3) %373, align 4, !dbg !71
  %.extract12 = load i32, ptr addrspace(3) %374, align 8, !dbg !71
  %.extract13 = load i32, ptr addrspace(3) %375, align 4, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %372, i1 %32) #8, !dbg !71
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !72
  %424 = extractelement <2 x i1> %393, i64 0, !dbg !77
  %425 = or i1 %424, %355, !dbg !77
  %426 = select i1 %10, i1 %425, i1 false, !dbg !77
  %427 = or i1 %426, %395, !dbg !77
  %428 = zext i1 %427 to i32, !dbg !72
  %429 = tail call i32 @llvm.nvvm.redux.sync.or(i32 %428, i32 -1), !dbg !72
  %430 = trunc i32 %429 to i8, !dbg !72
  %431 = insertelement <1 x i8> poison, i8 %430, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %378, <1 x i8> %431, i1 %377) #8, !dbg !72
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !72
  %432 = tail call i8 asm sideeffect "@$2 ld.shared.b8 $0, [ $1 + 0 ];", "=h,r,b"(ptr addrspace(3) %380, i1 %379) #8, !dbg !72
  %433 = zext i8 %432 to i32, !dbg !72
  %434 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %433, i32 2, i32 31), !dbg !72
  %435 = trunc i32 %434 to i8, !dbg !72
  %436 = or i8 %432, %435, !dbg !77
  %437 = zext i8 %436 to i32, !dbg !72
  %438 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %437, i32 1, i32 31), !dbg !72
  %439 = trunc i32 %438 to i8, !dbg !72
  %440 = or i8 %436, %439, !dbg !77
  %441 = insertelement <1 x i8> poison, i8 %440, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %380, <1 x i8> %441, i1 %381) #8, !dbg !72
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !72
  %442 = load i8, ptr addrspace(3) @global_smem, align 16, !dbg !72
  %.not = icmp eq i8 %442, 0, !dbg !78
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !74
  %443 = fcmp ogt float %417, %365, !dbg !79
  %444 = fcmp uno float %417, 0.000000e+00, !dbg !80
  %445 = or i1 %444, %443, !dbg !81
  %446 = select i1 %445, float %417, float %365, !dbg !82
  %447 = fcmp ogt float %446, %418, !dbg !79
  %448 = fcmp uno float %446, 0.000000e+00, !dbg !80
  %449 = or i1 %447, %448, !dbg !81
  %450 = select i1 %449, float %446, float %418, !dbg !82
  %451 = bitcast float %450 to i32, !dbg !74
  %452 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %451, i32 16, i32 31), !dbg !74
  %453 = bitcast i32 %452 to float, !dbg !74
  %454 = fcmp ogt float %450, %453, !dbg !79
  %455 = fcmp uno float %450, 0.000000e+00, !dbg !80
  %456 = or i1 %455, %454, !dbg !81
  %457 = select i1 %456, float %450, float %453, !dbg !82
  %458 = bitcast float %457 to i32, !dbg !74
  %459 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %458, i32 8, i32 31), !dbg !74
  %460 = bitcast i32 %459 to float, !dbg !74
  %461 = fcmp ogt float %457, %460, !dbg !79
  %462 = fcmp uno float %457, 0.000000e+00, !dbg !80
  %463 = or i1 %461, %462, !dbg !81
  %464 = select i1 %463, float %457, float %460, !dbg !82
  %465 = bitcast float %464 to i32, !dbg !74
  %466 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %465, i32 4, i32 31), !dbg !74
  %467 = bitcast i32 %466 to float, !dbg !74
  %468 = fcmp ogt float %464, %467, !dbg !79
  %469 = fcmp uno float %464, 0.000000e+00, !dbg !80
  %470 = or i1 %468, %469, !dbg !81
  %471 = select i1 %470, float %464, float %467, !dbg !82
  %472 = bitcast float %471 to i32, !dbg !74
  %473 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %472, i32 2, i32 31), !dbg !74
  %474 = bitcast i32 %473 to float, !dbg !74
  %475 = fcmp ogt float %471, %474, !dbg !79
  %476 = fcmp uno float %471, 0.000000e+00, !dbg !80
  %477 = or i1 %475, %476, !dbg !81
  %478 = select i1 %477, float %471, float %474, !dbg !82
  %479 = bitcast float %478 to i32, !dbg !74
  %480 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %479, i32 1, i32 31), !dbg !74
  %481 = bitcast i32 %480 to float, !dbg !74
  %482 = fcmp ogt float %478, %481, !dbg !79
  %483 = fcmp uno float %478, 0.000000e+00, !dbg !80
  %484 = or i1 %482, %483, !dbg !81
  %485 = select i1 %484, i32 %479, i32 %480, !dbg !82
  %486 = insertelement <1 x i32> poison, i32 %485, i64 0, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %382, <1 x i32> %486, i1 %377) #8, !dbg !74
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !74
  %487 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %383, i1 %379) #8, !dbg !74
  %488 = bitcast i32 %487 to float, !dbg !74
  %489 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %487, i32 2, i32 31), !dbg !74
  %490 = bitcast i32 %489 to float, !dbg !74
  %491 = fcmp ogt float %488, %490, !dbg !79
  %492 = fcmp uno float %488, 0.000000e+00, !dbg !80
  %493 = or i1 %492, %491, !dbg !81
  %494 = select i1 %493, float %488, float %490, !dbg !82
  %495 = bitcast float %494 to i32, !dbg !74
  %496 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %495, i32 1, i32 31), !dbg !74
  %497 = bitcast i32 %496 to float, !dbg !74
  %498 = fcmp ogt float %494, %497, !dbg !79
  %499 = fcmp uno float %494, 0.000000e+00, !dbg !80
  %500 = or i1 %498, %499, !dbg !81
  %501 = select i1 %500, i32 %495, i32 %496, !dbg !82
  %502 = insertelement <1 x i32> poison, i32 %501, i64 0, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %383, <1 x i32> %502, i1 %381) #8, !dbg !74
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !74
  %503 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !74
  %504 = fcmp oeq float %503, 0xFFF0000000000000, !dbg !83
  %505 = fsub float %417, %503, !dbg !84
  %506 = fsub float %365, %503, !dbg !84
  %507 = fsub float %418, %503, !dbg !84
  %508 = fsub float 0xFFF0000000000000, %503, !dbg !84
  %509 = fmul float %505, 0x3FF7154760000000, !dbg !85
  %510 = select i1 %504, float 0.000000e+00, float %509, !dbg !86
  %511 = tail call float @llvm.nvvm.ex2.approx.f(float %510), !dbg !85
  %512 = fmul float %506, 0x3FF7154760000000, !dbg !85
  %513 = select i1 %504, float 0.000000e+00, float %512, !dbg !86
  %514 = tail call float @llvm.nvvm.ex2.approx.f(float %513), !dbg !85
  %515 = fmul float %507, 0x3FF7154760000000, !dbg !85
  %516 = select i1 %504, float 0.000000e+00, float %515, !dbg !86
  %517 = tail call float @llvm.nvvm.ex2.approx.f(float %516), !dbg !85
  %518 = fmul float %508, 0x3FF7154760000000, !dbg !85
  %519 = select i1 %504, float 0.000000e+00, float %518, !dbg !86
  %520 = tail call float @llvm.nvvm.ex2.approx.f(float %519), !dbg !85
  %521 = fmul float %366, %514, !dbg !87
  %522 = insertelement <2 x float> poison, float %511, i64 0, !dbg !87
  %523 = insertelement <2 x float> %522, float %517, i64 1, !dbg !87
  %524 = fmul <2 x float> %421, %523, !dbg !87
  %525 = fmul float %520, 0.000000e+00, !dbg !87
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !88
  %526 = extractelement <2 x float> %524, i64 0, !dbg !91
  %527 = fadd float %526, %521, !dbg !91
  %528 = extractelement <2 x float> %524, i64 1, !dbg !91
  %529 = fadd float %527, %528, !dbg !91
  %530 = fadd float %529, %525, !dbg !91
  %531 = bitcast float %530 to i32, !dbg !88
  %532 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %531, i32 16, i32 31), !dbg !88
  %533 = bitcast i32 %532 to float, !dbg !88
  %534 = fadd float %530, %533, !dbg !91
  %535 = bitcast float %534 to i32, !dbg !88
  %536 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %535, i32 8, i32 31), !dbg !88
  %537 = bitcast i32 %536 to float, !dbg !88
  %538 = fadd float %534, %537, !dbg !91
  %539 = bitcast float %538 to i32, !dbg !88
  %540 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %539, i32 4, i32 31), !dbg !88
  %541 = bitcast i32 %540 to float, !dbg !88
  %542 = fadd float %538, %541, !dbg !91
  %543 = bitcast float %542 to i32, !dbg !88
  %544 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %543, i32 2, i32 31), !dbg !88
  %545 = bitcast i32 %544 to float, !dbg !88
  %546 = fadd float %542, %545, !dbg !91
  %547 = bitcast float %546 to i32, !dbg !88
  %548 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %547, i32 1, i32 31), !dbg !88
  %549 = bitcast i32 %548 to float, !dbg !88
  %550 = fadd float %546, %549, !dbg !91
  %551 = bitcast float %550 to <1 x i32>, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %382, <1 x i32> %551, i1 %377) #8, !dbg !88
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !88
  %552 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %383, i1 %379) #8, !dbg !88
  %553 = bitcast i32 %552 to float, !dbg !88
  %554 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %552, i32 2, i32 31), !dbg !88
  %555 = bitcast i32 %554 to float, !dbg !88
  %556 = fadd float %553, %555, !dbg !91
  %557 = bitcast float %556 to i32, !dbg !88
  %558 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %557, i32 1, i32 31), !dbg !88
  %559 = bitcast i32 %558 to float, !dbg !88
  %560 = fadd float %556, %559, !dbg !91
  %561 = bitcast float %560 to <1 x i32>, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %383, <1 x i32> %561, i1 %381) #8, !dbg !88
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !88
  %562 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !88
  %563 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #8, !dbg !92
  %564 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %40, i64 %563, i1 %32) #8, !dbg !92
  %565 = extractvalue { i32, i32, i32, i32 } %564, 0, !dbg !92
  %566 = extractvalue { i32, i32, i32, i32 } %564, 1, !dbg !92
  %567 = extractvalue { i32, i32, i32, i32 } %564, 2, !dbg !92
  %568 = extractvalue { i32, i32, i32, i32 } %564, 3, !dbg !92
  %569 = bitcast i32 %565 to float, !dbg !92
  %570 = bitcast i32 %566 to float, !dbg !92
  %571 = bitcast i32 %567 to float, !dbg !92
  %572 = bitcast i32 %568 to float, !dbg !92
  %573 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_first.b64 $0, 1.0;", "=l"() #8, !dbg !93
  %574 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_first.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %372, i64 %573, i1 %32) #8, !dbg !93
  %575 = extractvalue { i32, i32, i32, i32 } %574, 0, !dbg !93
  %576 = extractvalue { i32, i32, i32, i32 } %574, 1, !dbg !93
  %577 = extractvalue { i32, i32, i32, i32 } %574, 2, !dbg !93
  %578 = extractvalue { i32, i32, i32, i32 } %574, 3, !dbg !93
  %579 = bitcast i32 %575 to float, !dbg !93
  %580 = bitcast i32 %576 to float, !dbg !93
  %581 = bitcast i32 %577 to float, !dbg !93
  %582 = bitcast i32 %578 to float, !dbg !93
  %583 = fadd float %569, %579, !dbg !94
  %584 = fadd float %570, %580, !dbg !94
  %585 = fadd float %571, %581, !dbg !94
  %586 = fadd float %572, %582, !dbg !94
  %587 = fsub float %583, %503, !dbg !95
  %588 = fsub float %584, %503, !dbg !95
  %589 = fsub float %585, %503, !dbg !95
  %590 = fsub float %586, %503, !dbg !95
  %591 = fmul float %587, 0x3FF7154760000000, !dbg !96
  %592 = tail call float @llvm.nvvm.ex2.approx.f(float %591), !dbg !96
  %593 = fmul float %588, 0x3FF7154760000000, !dbg !96
  %594 = tail call float @llvm.nvvm.ex2.approx.f(float %593), !dbg !96
  %595 = fmul float %589, 0x3FF7154760000000, !dbg !96
  %596 = tail call float @llvm.nvvm.ex2.approx.f(float %595), !dbg !96
  %597 = fmul float %590, 0x3FF7154760000000, !dbg !96
  %598 = tail call float @llvm.nvvm.ex2.approx.f(float %597), !dbg !96
  %599 = tail call float @llvm.nvvm.div.full(float %592, float %562), !dbg !97
  %600 = tail call float @llvm.nvvm.div.full(float %594, float %562), !dbg !97
  %601 = tail call float @llvm.nvvm.div.full(float %596, float %562), !dbg !97
  %602 = tail call float @llvm.nvvm.div.full(float %598, float %562), !dbg !97
  %603 = getelementptr float, ptr addrspace(1) %4, i64 %371, !dbg !98
  %604 = bitcast float %599 to i32, !dbg !99
  %605 = select i1 %.not, i32 0, i32 %604, !dbg !100
  %606 = bitcast float %600 to i32, !dbg !99
  %607 = select i1 %.not, i32 0, i32 %606, !dbg !100
  %608 = bitcast float %601 to i32, !dbg !99
  %609 = select i1 %.not, i32 0, i32 %608, !dbg !100
  %610 = bitcast float %602 to i32, !dbg !99
  %611 = select i1 %.not, i32 0, i32 %610, !dbg !100
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %605, i32 %607, i32 %609, i32 %611, ptr addrspace(1) %603, i1 %32) #8, !dbg !99
  ret void, !dbg !101
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.redux.sync.or(i32, i32) #5

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #7

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x i32> @llvm.abs.v2i32(<2 x i32>, i1 immarg) #7

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x i64> @llvm.smin.v2i64(<2 x i64>, <2 x i64>) #7

attributes #0 = { noreturn }
attributes #1 = { "nvvm.reqntid"="128" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #6 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #8 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "ccisb2yra76ab2haychl3vkjloggui7jornx4qodogdjo7v6y64e.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/ci")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !6, file: !6, type: !7, spFlags: DISPFlagOptimized)
!6 = !DIFile(filename: "<unknown>", directory: "")
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mul_rsub_4", linkageName: "triton_red_fused__to_copy_add_mul_rsub_4", scope: !1, file: !1, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!10 = !DILocation(line: 23, column: 28, scope: !9)
!11 = !DILocation(line: 25, column: 21, scope: !9)
!12 = !DILocation(line: 26, column: 37, scope: !9)
!13 = !DILocation(line: 29, column: 21, scope: !9)
!14 = !DILocation(line: 28, column: 19, scope: !9)
!15 = !DILocation(line: 30, column: 19, scope: !9)
!16 = !DILocation(line: 39, column: 29, scope: !9)
!17 = !DILocation(line: 43, column: 46, scope: !9)
!18 = !DILocation(line: 43, column: 42, scope: !9)
!19 = !DILocation(line: 43, column: 35, scope: !9)
!20 = !DILocation(line: 43, column: 61, scope: !9)
!21 = !DILocation(line: 43, column: 51, scope: !9)
!22 = !DILocation(line: 44, column: 46, scope: !9)
!23 = !DILocation(line: 44, column: 42, scope: !9)
!24 = !DILocation(line: 44, column: 35, scope: !9)
!25 = !DILocation(line: 44, column: 51, scope: !9)
!26 = !DILocation(line: 45, column: 23, scope: !9)
!27 = !DILocation(line: 47, column: 22, scope: !9)
!28 = !DILocation(line: 50, column: 22, scope: !9)
!29 = !DILocation(line: 52, column: 27, scope: !9)
!30 = !DILocation(line: 54, column: 22, scope: !9)
!31 = !DILocation(line: 55, column: 24, scope: !9)
!32 = !DILocation(line: 57, column: 24, scope: !9)
!33 = !DILocation(line: 58, column: 28, scope: !9)
!34 = !DILocation(line: 60, column: 24, scope: !9)
!35 = !DILocation(line: 62, column: 24, scope: !9)
!36 = !DILocation(line: 63, column: 25, scope: !9)
!37 = !DILocation(line: 64, column: 24, scope: !9)
!38 = !DILocation(line: 106, column: 29, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !9, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 66, column: 46, scope: !9)
!42 = !DILocation(line: 67, column: 37, scope: !9)
!43 = !DILocation(line: 68, column: 23, scope: !9)
!44 = !DILocation(line: 72, column: 39, scope: !9)
!45 = !DILocation(line: 73, column: 42, scope: !9)
!46 = !DILocation(line: 73, column: 77, scope: !9)
!47 = !DILocation(line: 71, column: 24, scope: !9)
!48 = !DILocation(line: 29, column: 28, scope: !9)
!49 = !DILocation(line: 74, column: 40, scope: !9)
!50 = !DILocation(line: 74, column: 35, scope: !9)
!51 = !DILocation(line: 74, column: 50, scope: !9)
!52 = !DILocation(line: 75, column: 25, scope: !9)
!53 = !DILocation(line: 77, column: 24, scope: !9)
!54 = !DILocation(line: 79, column: 24, scope: !9)
!55 = !DILocation(line: 80, column: 24, scope: !9)
!56 = !DILocation(line: 81, column: 24, scope: !9)
!57 = !DILocation(line: 83, column: 25, scope: !9)
!58 = !DILocation(line: 197, column: 53, scope: !39, inlinedAt: !59)
!59 = !DILocation(line: 93, column: 43, scope: !9)
!60 = !DILocation(line: 174, column: 24, scope: !39, inlinedAt: !59)
!61 = !DILocation(line: 200, column: 53, scope: !39, inlinedAt: !59)
!62 = !DILocation(line: 206, column: 24, scope: !39, inlinedAt: !59)
!63 = !DILocation(line: 206, column: 36, scope: !39, inlinedAt: !59)
!64 = !DILocation(line: 96, column: 64, scope: !9)
!65 = !DILocation(line: 97, column: 64, scope: !9)
!66 = !DILocation(line: 98, column: 40, scope: !9)
!67 = !DILocation(line: 98, column: 36, scope: !9)
!68 = !DILocation(line: 98, column: 52, scope: !9)
!69 = !DILocation(line: 98, column: 45, scope: !9)
!70 = !DILocation(line: 98, column: 29, scope: !9)
!71 = !DILocation(line: 98, column: 64, scope: !9)
!72 = !DILocation(line: 266, column: 29, scope: !39, inlinedAt: !73)
!73 = !DILocation(line: 99, column: 51, scope: !9)
!74 = !DILocation(line: 124, column: 29, scope: !39, inlinedAt: !75)
!75 = !DILocation(line: 102, column: 35, scope: !9)
!76 = !DILocation(line: 89, column: 50, scope: !9)
!77 = !DILocation(line: 261, column: 15, scope: !39, inlinedAt: !73)
!78 = !DILocation(line: 99, column: 66, scope: !9)
!79 = !DILocation(line: 111, column: 15, scope: !39, inlinedAt: !75)
!80 = !DILocation(line: 113, column: 21, scope: !39, inlinedAt: !75)
!81 = !DILocation(line: 113, column: 16, scope: !39, inlinedAt: !75)
!82 = !DILocation(line: 114, column: 29, scope: !39, inlinedAt: !75)
!83 = !DILocation(line: 181, column: 40, scope: !39, inlinedAt: !75)
!84 = !DILocation(line: 181, column: 68, scope: !39, inlinedAt: !75)
!85 = !DILocation(line: 174, column: 24, scope: !39, inlinedAt: !75)
!86 = !DILocation(line: 181, column: 58, scope: !39, inlinedAt: !75)
!87 = !DILocation(line: 182, column: 31, scope: !39, inlinedAt: !75)
!88 = !DILocation(line: 290, column: 36, scope: !89, inlinedAt: !75)
!89 = distinct !DILexicalBlockFile(scope: !9, file: !90, discriminator: 0)
!90 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!91 = !DILocation(line: 260, column: 15, scope: !89, inlinedAt: !75)
!92 = !DILocation(line: 113, column: 51, scope: !9)
!93 = !DILocation(line: 114, column: 64, scope: !9)
!94 = !DILocation(line: 116, column: 24, scope: !9)
!95 = !DILocation(line: 117, column: 24, scope: !9)
!96 = !DILocation(line: 118, column: 28, scope: !9)
!97 = !DILocation(line: 119, column: 25, scope: !9)
!98 = !DILocation(line: 122, column: 29, scope: !9)
!99 = !DILocation(line: 122, column: 64, scope: !9)
!100 = !DILocation(line: 121, column: 39, scope: !9)
!101 = !DILocation(line: 107, column: 4, scope: !9)
