; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_per_fused_add_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr #0 !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !8
  %10 = shl nuw nsw i32 %9, 3, !dbg !9
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %12 = and i32 %11, 24, !dbg !10
  %13 = lshr i32 %11, 5, !dbg !10
  %14 = lshr i32 %11, 4, !dbg !10
  %15 = and i32 %11, 1, !dbg !10
  %16 = shl nuw nsw i32 %15, 2, !dbg !10
  %17 = lshr i32 %11, 2, !dbg !10
  %18 = and i32 %17, 7, !dbg !10
  %19 = and i32 %14, 7, !dbg !11
  %20 = or disjoint i32 %19, %10, !dbg !11
  %21 = or disjoint i32 %16, %10, !dbg !11
  %22 = or disjoint i32 %18, %10, !dbg !11
  %23 = icmp eq i32 %9, 0, !dbg !12
  %24 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !13
  %25 = shl i32 %24, 2, !dbg !14
  %26 = and i32 %11, 128, !dbg !15
  %.lobit4 = lshr exact i32 %26, 7, !dbg !15
  %27 = lshr i32 %11, 1, !dbg !15
  %28 = and i32 %27, 3, !dbg !15
  %29 = and i32 %11, 3, !dbg !15
  %30 = or disjoint i32 %.lobit4, %25, !dbg !16
  %31 = or disjoint i32 %30, 2, !dbg !16
  %32 = or disjoint i32 %28, %25, !dbg !16
  %33 = or disjoint i32 %25, %29, !dbg !16
  %34 = icmp slt i32 %32, 64, !dbg !17
  %35 = icmp slt i32 %30, 64, !dbg !17
  %36 = icmp slt i32 %31, 64, !dbg !17
  %37 = icmp slt i32 %33, 64, !dbg !17
  %38 = shl nuw nsw i32 %11, 2, !dbg !18
  %39 = and i32 %38, 60, !dbg !18
  %40 = and i32 %11, 248, !dbg !18
  %41 = shl i32 %30, 6, !dbg !19
  %42 = shl i32 %31, 6, !dbg !19
  %43 = or disjoint i32 %41, %39, !dbg !20
  %44 = or disjoint i32 %42, %39, !dbg !20
  %45 = shl nuw nsw i32 %20, 12, !dbg !21
  %46 = add i32 %43, %45, !dbg !22
  %47 = add i32 %44, %45, !dbg !22
  %48 = sext i32 %46 to i64, !dbg !23
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !23
  %50 = sext i32 %47 to i64, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !23
  %52 = and i1 %23, %34, !dbg !24
  %53 = and i1 %23, %35, !dbg !24
  %54 = and i1 %23, %36, !dbg !24
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !25
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %49, i64 %55, i1 %53) #5, !dbg !25
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !25
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !25
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !25
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !25
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !25
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %51, i64 %61, i1 %54) #5, !dbg !25
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !25
  %67 = shl nuw nsw i32 %11, 5, !dbg !25
  %68 = and i32 %67, 480, !dbg !25
  %69 = shl nuw nsw i32 %26, 2, !dbg !25
  %70 = or disjoint i32 %68, %69, !dbg !25
  %71 = and i32 %14, 7, !dbg !25
  %72 = or disjoint i32 %71, %70, !dbg !25
  %73 = shl nuw nsw i32 %11, 8, !dbg !25
  %74 = and i32 %73, 1536, !dbg !25
  %75 = and i32 %11, 120, !dbg !25
  %76 = or disjoint i32 %75, %74, !dbg !25
  %77 = or disjoint i32 %76, %16, !dbg !25
  %78 = or disjoint i32 %77, %26, !dbg !25
  %79 = lshr exact i32 %70, 1, !dbg !25
  %80 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %79, !dbg !25
  %81 = getelementptr inbounds nuw float, ptr addrspace(3) %80, i32 %72, !dbg !25
  %82 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !25
  store <1 x i32> %82, ptr addrspace(3) %81, align 4, !dbg !25
  %83 = or disjoint i32 %72, 8, !dbg !25
  %84 = lshr i32 %83, 3, !dbg !25
  %85 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %84, !dbg !25
  %86 = getelementptr inbounds nuw float, ptr addrspace(3) %85, i32 %83, !dbg !25
  %87 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !25
  store <1 x i32> %87, ptr addrspace(3) %86, align 4, !dbg !25
  %88 = or disjoint i32 %72, 16, !dbg !25
  %89 = lshr i32 %88, 3, !dbg !25
  %90 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %89, !dbg !25
  %91 = getelementptr inbounds nuw float, ptr addrspace(3) %90, i32 %88, !dbg !25
  %92 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !25
  store <1 x i32> %92, ptr addrspace(3) %91, align 4, !dbg !25
  %93 = or disjoint i32 %72, 24, !dbg !25
  %94 = lshr i32 %93, 3, !dbg !25
  %95 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %94, !dbg !25
  %96 = getelementptr inbounds nuw float, ptr addrspace(3) %95, i32 %93, !dbg !25
  %97 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !25
  store <1 x i32> %97, ptr addrspace(3) %96, align 4, !dbg !25
  %98 = or disjoint i32 %72, 1024, !dbg !25
  %99 = lshr i32 %98, 3, !dbg !25
  %100 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %99, !dbg !25
  %101 = getelementptr inbounds nuw float, ptr addrspace(3) %100, i32 %98, !dbg !25
  %102 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !25
  store <1 x i32> %102, ptr addrspace(3) %101, align 4, !dbg !25
  %103 = or disjoint i32 %72, 1032, !dbg !25
  %104 = lshr i32 %103, 3, !dbg !25
  %105 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %104, !dbg !25
  %106 = getelementptr inbounds nuw float, ptr addrspace(3) %105, i32 %103, !dbg !25
  %107 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !25
  store <1 x i32> %107, ptr addrspace(3) %106, align 4, !dbg !25
  %108 = or disjoint i32 %72, 1040, !dbg !25
  %109 = lshr i32 %108, 3, !dbg !25
  %110 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %109, !dbg !25
  %111 = getelementptr inbounds nuw float, ptr addrspace(3) %110, i32 %108, !dbg !25
  %112 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !25
  store <1 x i32> %112, ptr addrspace(3) %111, align 4, !dbg !25
  %113 = or disjoint i32 %72, 1048, !dbg !25
  %114 = lshr i32 %113, 3, !dbg !25
  %115 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %114, !dbg !25
  %116 = getelementptr inbounds nuw float, ptr addrspace(3) %115, i32 %113, !dbg !25
  %117 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !25
  store <1 x i32> %117, ptr addrspace(3) %116, align 4, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %118 = lshr i32 %78, 3, !dbg !25
  %119 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %118, !dbg !25
  %120 = getelementptr inbounds nuw float, ptr addrspace(3) %119, i32 %78, !dbg !25
  %121 = or disjoint i32 %78, 256, !dbg !25
  %122 = lshr i32 %121, 3, !dbg !25
  %123 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %122, !dbg !25
  %124 = getelementptr inbounds nuw float, ptr addrspace(3) %123, i32 %121, !dbg !25
  %125 = load float, ptr addrspace(3) %124, align 4, !dbg !25
  %126 = or disjoint i32 %78, 257, !dbg !25
  %127 = lshr i32 %126, 3, !dbg !25
  %128 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %127, !dbg !25
  %129 = getelementptr inbounds nuw float, ptr addrspace(3) %128, i32 %126, !dbg !25
  %130 = load float, ptr addrspace(3) %129, align 4, !dbg !25
  %131 = or disjoint i32 %78, 258, !dbg !25
  %132 = lshr i32 %131, 3, !dbg !25
  %133 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %132, !dbg !25
  %134 = getelementptr inbounds nuw float, ptr addrspace(3) %133, i32 %131, !dbg !25
  %135 = load float, ptr addrspace(3) %134, align 4, !dbg !25
  %136 = or disjoint i32 %78, 259, !dbg !25
  %137 = lshr i32 %136, 3, !dbg !25
  %138 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %137, !dbg !25
  %139 = getelementptr inbounds nuw float, ptr addrspace(3) %138, i32 %136, !dbg !25
  %140 = load float, ptr addrspace(3) %139, align 4, !dbg !25
  %141 = shl i32 %32, 9, !dbg !26
  %142 = add i32 %141, %21, !dbg !27
  %143 = add i32 %142, %40, !dbg !28
  %144 = add i32 %142, 256, !dbg !27
  %145 = add i32 %144, %40, !dbg !28
  %146 = sext i32 %143 to i64, !dbg !29
  %147 = getelementptr float, ptr addrspace(1) %1, i64 %146, !dbg !29
  %148 = sext i32 %145 to i64, !dbg !29
  %149 = getelementptr float, ptr addrspace(1) %1, i64 %148, !dbg !29
  %150 = or disjoint i32 %16, 1, !dbg !30
  %151 = or disjoint i32 %16, 2, !dbg !30
  %152 = or disjoint i32 %16, 3, !dbg !30
  %153 = load <4 x float>, ptr addrspace(3) %120, align 4, !dbg !25
  %154 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !34
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %147, i64 %154, i1 %52) #5, !dbg !34
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !34
  %157 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !34
  %158 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !34
  %159 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !34
  %160 = insertelement <4 x i32> poison, i32 %156, i64 0, !dbg !34
  %161 = insertelement <4 x i32> %160, i32 %157, i64 1, !dbg !34
  %162 = insertelement <4 x i32> %161, i32 %158, i64 2, !dbg !34
  %163 = insertelement <4 x i32> %162, i32 %159, i64 3, !dbg !34
  %164 = bitcast <4 x i32> %163 to <4 x float>, !dbg !34
  %165 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09createpolicy.fractional.L2::evict_last.b64 $0, 1.0;", "=l"() #5, !dbg !34
  %166 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$10 ld.global.L1::evict_last.L2::cache_hint.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ], $9;", "=r,=r,=r,=r,r,r,r,r,l,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %149, i64 %165, i1 %52) #5, !dbg !34
  %167 = extractvalue { i32, i32, i32, i32 } %166, 0, !dbg !34
  %168 = extractvalue { i32, i32, i32, i32 } %166, 1, !dbg !34
  %169 = extractvalue { i32, i32, i32, i32 } %166, 2, !dbg !34
  %170 = extractvalue { i32, i32, i32, i32 } %166, 3, !dbg !34
  %171 = insertelement <4 x i32> poison, i32 %167, i64 0, !dbg !34
  %172 = insertelement <4 x i32> %171, i32 %168, i64 1, !dbg !34
  %173 = insertelement <4 x i32> %172, i32 %169, i64 2, !dbg !34
  %174 = insertelement <4 x i32> %173, i32 %170, i64 3, !dbg !34
  %175 = bitcast <4 x i32> %174 to <4 x float>, !dbg !34
  %176 = fadd <4 x float> %153, %164, !dbg !35
  %177 = insertelement <4 x float> poison, float %125, i64 0, !dbg !35
  %178 = insertelement <4 x float> %177, float %130, i64 1, !dbg !35
  %179 = insertelement <4 x float> %178, float %135, i64 2, !dbg !35
  %180 = insertelement <4 x float> %179, float %140, i64 3, !dbg !35
  %181 = fadd <4 x float> %180, %175, !dbg !35
  %182 = insertelement <4 x i1> poison, i1 %52, i64 0, !dbg !36
  %183 = shufflevector <4 x i1> %182, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !36
  %184 = select <4 x i1> %183, <4 x float> %176, <4 x float> splat (float 0xFFF0000000000000), !dbg !36
  %185 = select <4 x i1> %183, <4 x float> %181, <4 x float> splat (float 0xFFF0000000000000), !dbg !36
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  %186 = extractelement <4 x float> %184, i64 0, !dbg !37
  %187 = fcmp uno float %186, 0.000000e+00, !dbg !38
  %188 = fcmp ogt <4 x float> %184, %185, !dbg !39
  %189 = extractelement <4 x i1> %188, i64 0, !dbg !40
  %190 = or i1 %187, %189, !dbg !40
  %191 = extractelement <4 x float> %185, i64 0, !dbg !37
  %192 = select i1 %190, float %186, float %191, !dbg !37
  %193 = extractelement <4 x float> %184, i64 1, !dbg !37
  %194 = fcmp uno float %193, 0.000000e+00, !dbg !38
  %195 = extractelement <4 x i1> %188, i64 1, !dbg !40
  %196 = or i1 %194, %195, !dbg !40
  %197 = extractelement <4 x float> %185, i64 1, !dbg !37
  %198 = select i1 %196, float %193, float %197, !dbg !37
  %199 = extractelement <4 x float> %184, i64 2, !dbg !37
  %200 = fcmp uno float %199, 0.000000e+00, !dbg !38
  %201 = extractelement <4 x i1> %188, i64 2, !dbg !40
  %202 = or i1 %200, %201, !dbg !40
  %203 = extractelement <4 x float> %185, i64 2, !dbg !37
  %204 = select i1 %202, float %199, float %203, !dbg !37
  %205 = extractelement <4 x float> %184, i64 3, !dbg !37
  %206 = fcmp uno float %205, 0.000000e+00, !dbg !38
  %207 = extractelement <4 x i1> %188, i64 3, !dbg !40
  %208 = or i1 %206, %207, !dbg !40
  %209 = extractelement <4 x float> %185, i64 3, !dbg !37
  %210 = select i1 %208, float %205, float %209, !dbg !37
  %211 = bitcast float %192 to i32, !dbg !30
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 16, i32 31), !dbg !30
  %213 = bitcast i32 %212 to float, !dbg !30
  %214 = fcmp ogt float %192, %213, !dbg !39
  %215 = fcmp uno float %192, 0.000000e+00, !dbg !38
  %216 = or i1 %214, %215, !dbg !40
  %217 = select i1 %216, float %192, float %213, !dbg !37
  %218 = bitcast float %217 to i32, !dbg !30
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 8, i32 31), !dbg !30
  %220 = bitcast i32 %219 to float, !dbg !30
  %221 = fcmp ogt float %217, %220, !dbg !39
  %222 = fcmp uno float %217, 0.000000e+00, !dbg !38
  %223 = or i1 %221, %222, !dbg !40
  %224 = bitcast float %198 to i32, !dbg !30
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 16, i32 31), !dbg !30
  %226 = bitcast i32 %225 to float, !dbg !30
  %227 = fcmp ogt float %198, %226, !dbg !39
  %228 = fcmp uno float %198, 0.000000e+00, !dbg !38
  %229 = or i1 %227, %228, !dbg !40
  %230 = select i1 %229, float %198, float %226, !dbg !37
  %231 = bitcast float %230 to i32, !dbg !30
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 8, i32 31), !dbg !30
  %233 = bitcast i32 %232 to float, !dbg !30
  %234 = fcmp ogt float %230, %233, !dbg !39
  %235 = fcmp uno float %230, 0.000000e+00, !dbg !38
  %236 = or i1 %234, %235, !dbg !40
  %237 = bitcast float %204 to i32, !dbg !30
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 16, i32 31), !dbg !30
  %239 = bitcast i32 %238 to float, !dbg !30
  %240 = fcmp ogt float %204, %239, !dbg !39
  %241 = fcmp uno float %204, 0.000000e+00, !dbg !38
  %242 = or i1 %240, %241, !dbg !40
  %243 = select i1 %242, float %204, float %239, !dbg !37
  %244 = bitcast float %243 to i32, !dbg !30
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 8, i32 31), !dbg !30
  %246 = bitcast i32 %245 to float, !dbg !30
  %247 = fcmp ogt float %243, %246, !dbg !39
  %248 = fcmp uno float %243, 0.000000e+00, !dbg !38
  %249 = or i1 %247, %248, !dbg !40
  %250 = bitcast float %210 to i32, !dbg !30
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 16, i32 31), !dbg !30
  %252 = bitcast i32 %251 to float, !dbg !30
  %253 = fcmp ogt float %210, %252, !dbg !39
  %254 = fcmp uno float %210, 0.000000e+00, !dbg !38
  %255 = or i1 %254, %253, !dbg !40
  %256 = select i1 %255, float %210, float %252, !dbg !37
  %257 = bitcast float %256 to i32, !dbg !30
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 8, i32 31), !dbg !30
  %259 = bitcast i32 %258 to float, !dbg !30
  %260 = fcmp ogt float %256, %259, !dbg !39
  %261 = fcmp uno float %256, 0.000000e+00, !dbg !38
  %262 = or i1 %260, %261, !dbg !40
  %263 = and i32 %13, 7, !dbg !30
  %264 = icmp eq i32 %12, 0, !dbg !30
  %265 = shl nuw nsw i32 %28, 3, !dbg !30
  %266 = or disjoint i32 %265, %16, !dbg !30
  %.idx = shl nuw nsw i32 %266, 5, !dbg !30
  %267 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !30
  %268 = getelementptr float, ptr addrspace(3) %267, i32 %263, !dbg !30
  %269 = select i1 %223, i32 %218, i32 %219, !dbg !37
  %270 = insertelement <1 x i32> poison, i32 %269, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %270, i1 %264) #5, !dbg !30
  %271 = or disjoint i32 %265, %150, !dbg !30
  %.idx12 = shl nuw nsw i32 %271, 5, !dbg !30
  %272 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx12, !dbg !30
  %273 = getelementptr float, ptr addrspace(3) %272, i32 %263, !dbg !30
  %274 = select i1 %236, i32 %231, i32 %232, !dbg !37
  %275 = insertelement <1 x i32> poison, i32 %274, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %275, i1 %264) #5, !dbg !30
  %276 = or disjoint i32 %265, %151, !dbg !30
  %.idx13 = shl nuw nsw i32 %276, 5, !dbg !30
  %277 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx13, !dbg !30
  %278 = getelementptr float, ptr addrspace(3) %277, i32 %263, !dbg !30
  %279 = select i1 %249, i32 %244, i32 %245, !dbg !37
  %280 = insertelement <1 x i32> poison, i32 %279, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %278, <1 x i32> %280, i1 %264) #5, !dbg !30
  %281 = or disjoint i32 %265, %152, !dbg !30
  %.idx14 = shl nuw nsw i32 %281, 5, !dbg !30
  %282 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx14, !dbg !30
  %283 = getelementptr float, ptr addrspace(3) %282, i32 %263, !dbg !30
  %284 = select i1 %262, i32 %257, i32 %258, !dbg !37
  %285 = insertelement <1 x i32> poison, i32 %284, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %283, <1 x i32> %285, i1 %264) #5, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  %286 = icmp samesign ult i32 %11, 256, !dbg !30
  %287 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !30
  %288 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %287, i1 %286) #5, !dbg !30
  %289 = bitcast i32 %288 to float, !dbg !30
  %290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 4, i32 31), !dbg !30
  %291 = bitcast i32 %290 to float, !dbg !30
  %292 = fcmp ogt float %289, %291, !dbg !39
  %293 = fcmp uno float %289, 0.000000e+00, !dbg !38
  %294 = or i1 %293, %292, !dbg !40
  %295 = select i1 %294, float %289, float %291, !dbg !37
  %296 = bitcast float %295 to i32, !dbg !30
  %297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 2, i32 31), !dbg !30
  %298 = bitcast i32 %297 to float, !dbg !30
  %299 = fcmp ogt float %295, %298, !dbg !39
  %300 = fcmp uno float %295, 0.000000e+00, !dbg !38
  %301 = or i1 %299, %300, !dbg !40
  %302 = select i1 %301, float %295, float %298, !dbg !37
  %303 = bitcast float %302 to i32, !dbg !30
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 1, i32 31), !dbg !30
  %305 = bitcast i32 %304 to float, !dbg !30
  %306 = fcmp ogt float %302, %305, !dbg !39
  %307 = fcmp uno float %302, 0.000000e+00, !dbg !38
  %308 = or i1 %306, %307, !dbg !40
  %309 = and i32 %11, 775, !dbg !30
  %310 = icmp eq i32 %309, 0, !dbg !30
  %311 = select i1 %308, i32 %303, i32 %304, !dbg !37
  %312 = insertelement <1 x i32> poison, i32 %311, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, <1 x i32> %312, i1 %310) #5, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  %313 = load float, ptr addrspace(3) %267, align 16, !dbg !30
  %314 = load float, ptr addrspace(3) %272, align 16, !dbg !30
  %315 = load float, ptr addrspace(3) %277, align 16, !dbg !30
  %316 = load float, ptr addrspace(3) %282, align 16, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !41
  %317 = shl nuw nsw i32 %15, 4, !dbg !41
  %318 = or disjoint i32 %317, %28, !dbg !41
  %319 = and i32 %11, 31, !dbg !41
  %320 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %317, !dbg !41
  %321 = getelementptr inbounds nuw float, ptr addrspace(3) %320, i32 %318, !dbg !41
  store float %313, ptr addrspace(3) %321, align 4, !dbg !41
  %322 = or disjoint i32 %318, 4, !dbg !41
  %323 = lshr i32 %322, 2, !dbg !41
  %324 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %323, !dbg !41
  %325 = getelementptr inbounds nuw float, ptr addrspace(3) %324, i32 %322, !dbg !41
  store float %314, ptr addrspace(3) %325, align 4, !dbg !41
  %326 = or disjoint i32 %318, 8, !dbg !41
  %327 = lshr i32 %326, 2, !dbg !41
  %328 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %327, !dbg !41
  %329 = getelementptr inbounds nuw float, ptr addrspace(3) %328, i32 %326, !dbg !41
  store float %315, ptr addrspace(3) %329, align 4, !dbg !41
  %330 = or disjoint i32 %318, 12, !dbg !41
  %331 = lshr i32 %330, 2, !dbg !41
  %332 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %331, !dbg !41
  %333 = getelementptr inbounds nuw float, ptr addrspace(3) %332, i32 %330, !dbg !41
  store float %316, ptr addrspace(3) %333, align 4, !dbg !41
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !41
  %334 = lshr i32 %319, 2, !dbg !41
  %335 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %334, !dbg !41
  %336 = getelementptr inbounds nuw float, ptr addrspace(3) %335, i32 %319, !dbg !41
  %337 = load i32, ptr addrspace(3) %336, align 4, !dbg !41
  %338 = extractelement <4 x float> %176, i64 0, !dbg !42
  %339 = fsub float %338, %313, !dbg !42
  %340 = extractelement <4 x float> %176, i64 1, !dbg !42
  %341 = fsub float %340, %314, !dbg !42
  %342 = extractelement <4 x float> %176, i64 2, !dbg !42
  %343 = fsub float %342, %315, !dbg !42
  %344 = extractelement <4 x float> %176, i64 3, !dbg !42
  %345 = fsub float %344, %316, !dbg !42
  %346 = extractelement <4 x float> %181, i64 0, !dbg !42
  %347 = fsub float %346, %313, !dbg !42
  %348 = extractelement <4 x float> %181, i64 1, !dbg !42
  %349 = fsub float %348, %314, !dbg !42
  %350 = extractelement <4 x float> %181, i64 2, !dbg !42
  %351 = fsub float %350, %315, !dbg !42
  %352 = extractelement <4 x float> %181, i64 3, !dbg !42
  %353 = fsub float %352, %316, !dbg !42
  %354 = fmul float %339, 0x3FF7154760000000, !dbg !43
  %355 = tail call float @llvm.nvvm.ex2.approx.f(float %354), !dbg !43
  %356 = fmul float %341, 0x3FF7154760000000, !dbg !43
  %357 = tail call float @llvm.nvvm.ex2.approx.f(float %356), !dbg !43
  %358 = fmul float %343, 0x3FF7154760000000, !dbg !43
  %359 = tail call float @llvm.nvvm.ex2.approx.f(float %358), !dbg !43
  %360 = fmul float %345, 0x3FF7154760000000, !dbg !43
  %361 = tail call float @llvm.nvvm.ex2.approx.f(float %360), !dbg !43
  %362 = fmul float %347, 0x3FF7154760000000, !dbg !43
  %363 = tail call float @llvm.nvvm.ex2.approx.f(float %362), !dbg !43
  %364 = fmul float %349, 0x3FF7154760000000, !dbg !43
  %365 = tail call float @llvm.nvvm.ex2.approx.f(float %364), !dbg !43
  %366 = fmul float %351, 0x3FF7154760000000, !dbg !43
  %367 = tail call float @llvm.nvvm.ex2.approx.f(float %366), !dbg !43
  %368 = fmul float %353, 0x3FF7154760000000, !dbg !43
  %369 = tail call float @llvm.nvvm.ex2.approx.f(float %368), !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !44
  %370 = fadd float %355, %363, !dbg !48
  %371 = select i1 %52, float %370, float 0.000000e+00, !dbg !48
  %372 = fadd float %357, %365, !dbg !48
  %373 = select i1 %52, float %372, float 0.000000e+00, !dbg !48
  %374 = fadd float %359, %367, !dbg !48
  %375 = select i1 %52, float %374, float 0.000000e+00, !dbg !48
  %376 = fadd float %361, %369, !dbg !48
  %377 = select i1 %52, float %376, float 0.000000e+00, !dbg !48
  %378 = bitcast float %371 to i32, !dbg !44
  %379 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %378, i32 16, i32 31), !dbg !44
  %380 = bitcast i32 %379 to float, !dbg !44
  %381 = fadd float %371, %380, !dbg !48
  %382 = bitcast float %381 to i32, !dbg !44
  %383 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %382, i32 8, i32 31), !dbg !44
  %384 = bitcast i32 %383 to float, !dbg !44
  %385 = fadd float %381, %384, !dbg !48
  %386 = bitcast float %373 to i32, !dbg !44
  %387 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %386, i32 16, i32 31), !dbg !44
  %388 = bitcast i32 %387 to float, !dbg !44
  %389 = fadd float %373, %388, !dbg !48
  %390 = bitcast float %389 to i32, !dbg !44
  %391 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %390, i32 8, i32 31), !dbg !44
  %392 = bitcast i32 %391 to float, !dbg !44
  %393 = fadd float %389, %392, !dbg !48
  %394 = bitcast float %375 to i32, !dbg !44
  %395 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %394, i32 16, i32 31), !dbg !44
  %396 = bitcast i32 %395 to float, !dbg !44
  %397 = fadd float %375, %396, !dbg !48
  %398 = bitcast float %397 to i32, !dbg !44
  %399 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %398, i32 8, i32 31), !dbg !44
  %400 = bitcast i32 %399 to float, !dbg !44
  %401 = fadd float %397, %400, !dbg !48
  %402 = bitcast float %377 to i32, !dbg !44
  %403 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %402, i32 16, i32 31), !dbg !44
  %404 = bitcast i32 %403 to float, !dbg !44
  %405 = fadd float %377, %404, !dbg !48
  %406 = bitcast float %405 to i32, !dbg !44
  %407 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %406, i32 8, i32 31), !dbg !44
  %408 = bitcast i32 %407 to float, !dbg !44
  %409 = fadd float %405, %408, !dbg !48
  %410 = bitcast float %385 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %410, i1 %264) #5, !dbg !44
  %411 = bitcast float %393 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %411, i1 %264) #5, !dbg !44
  %412 = bitcast float %401 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %278, <1 x i32> %412, i1 %264) #5, !dbg !44
  %413 = bitcast float %409 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %283, <1 x i32> %413, i1 %264) #5, !dbg !44
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !44
  %414 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %287, i1 %286) #5, !dbg !44
  %415 = bitcast i32 %414 to float, !dbg !44
  %416 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %414, i32 4, i32 31), !dbg !44
  %417 = bitcast i32 %416 to float, !dbg !44
  %418 = fadd float %415, %417, !dbg !48
  %419 = bitcast float %418 to i32, !dbg !44
  %420 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %419, i32 2, i32 31), !dbg !44
  %421 = bitcast i32 %420 to float, !dbg !44
  %422 = fadd float %418, %421, !dbg !48
  %423 = bitcast float %422 to i32, !dbg !44
  %424 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %423, i32 1, i32 31), !dbg !44
  %425 = bitcast i32 %424 to float, !dbg !44
  %426 = fadd float %422, %425, !dbg !48
  %427 = bitcast float %426 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, <1 x i32> %427, i1 %310) #5, !dbg !44
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !44
  %428 = load i32, ptr addrspace(3) %267, align 16, !dbg !44
  %429 = load i32, ptr addrspace(3) %272, align 16, !dbg !44
  %430 = load i32, ptr addrspace(3) %277, align 16, !dbg !44
  %431 = load i32, ptr addrspace(3) %282, align 16, !dbg !44
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !49
  %432 = insertelement <1 x i32> poison, i32 %428, i64 0, !dbg !49
  store <1 x i32> %432, ptr addrspace(3) %321, align 4, !dbg !49
  %433 = insertelement <1 x i32> poison, i32 %429, i64 0, !dbg !49
  store <1 x i32> %433, ptr addrspace(3) %325, align 4, !dbg !49
  %434 = insertelement <1 x i32> poison, i32 %430, i64 0, !dbg !49
  store <1 x i32> %434, ptr addrspace(3) %329, align 4, !dbg !49
  %435 = insertelement <1 x i32> poison, i32 %431, i64 0, !dbg !49
  store <1 x i32> %435, ptr addrspace(3) %333, align 4, !dbg !49
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !49
  %436 = load i32, ptr addrspace(3) %336, align 4, !dbg !49
  %437 = shl nuw nsw i32 %22, 6, !dbg !50
  %438 = add i32 %437, %33, !dbg !51
  %439 = sext i32 %438 to i64, !dbg !52
  %440 = getelementptr float, ptr addrspace(1) %2, i64 %439, !dbg !52
  %441 = and i32 %11, 224, !dbg !53
  %442 = or i32 %441, %9, !dbg !53
  %443 = icmp eq i32 %442, 0, !dbg !53
  %444 = and i1 %37, %443, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %337, ptr addrspace(1) %440, i1 %444) #5, !dbg !53
  %445 = getelementptr float, ptr addrspace(1) %3, i64 %439, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %436, ptr addrspace(1) %445, i1 %444) #5, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

attributes #0 = { "nvvm.reqntid"="256" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "claemv32fqlvujzqgcxvvvdmn3ith7s5dli5nr6leneidikarcqt.py", directory: "/mnt/disk1/khiemtt/universal-offline-bbo/torchinductor_ubuntu/la")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "triton_per_fused_add_2", linkageName: "triton_per_fused_add_2", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 25, column: 28, scope: !5)
!9 = !DILocation(line: 25, column: 33, scope: !5)
!10 = !DILocation(line: 26, column: 44, scope: !5)
!11 = !DILocation(line: 26, column: 23, scope: !5)
!12 = !DILocation(line: 27, column: 21, scope: !5)
!13 = !DILocation(line: 28, column: 28, scope: !5)
!14 = !DILocation(line: 28, column: 33, scope: !5)
!15 = !DILocation(line: 29, column: 44, scope: !5)
!16 = !DILocation(line: 29, column: 23, scope: !5)
!17 = !DILocation(line: 30, column: 21, scope: !5)
!18 = !DILocation(line: 31, column: 38, scope: !5)
!19 = !DILocation(line: 39, column: 40, scope: !5)
!20 = !DILocation(line: 39, column: 37, scope: !5)
!21 = !DILocation(line: 39, column: 50, scope: !5)
!22 = !DILocation(line: 39, column: 45, scope: !5)
!23 = !DILocation(line: 39, column: 30, scope: !5)
!24 = !DILocation(line: 39, column: 63, scope: !5)
!25 = !DILocation(line: 39, column: 55, scope: !5)
!26 = !DILocation(line: 40, column: 48, scope: !5)
!27 = !DILocation(line: 40, column: 35, scope: !5)
!28 = !DILocation(line: 40, column: 44, scope: !5)
!29 = !DILocation(line: 40, column: 30, scope: !5)
!30 = !DILocation(line: 124, column: 29, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !5, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 45, column: 37, scope: !5)
!34 = !DILocation(line: 40, column: 53, scope: !5)
!35 = !DILocation(line: 41, column: 18, scope: !5)
!36 = !DILocation(line: 44, column: 41, scope: !5)
!37 = !DILocation(line: 114, column: 29, scope: !31, inlinedAt: !33)
!38 = !DILocation(line: 113, column: 21, scope: !31, inlinedAt: !33)
!39 = !DILocation(line: 111, column: 15, scope: !31, inlinedAt: !33)
!40 = !DILocation(line: 113, column: 16, scope: !31, inlinedAt: !33)
!41 = !DILocation(line: 45, column: 40, scope: !5)
!42 = !DILocation(line: 46, column: 18, scope: !5)
!43 = !DILocation(line: 47, column: 24, scope: !5)
!44 = !DILocation(line: 290, column: 36, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !5, file: !46, discriminator: 0)
!46 = !DIFile(filename: "standard.py", directory: "/mnt/disk1/anaconda3/envs/pqhung/lib/python3.9/site-packages/triton/language")
!47 = !DILocation(line: 50, column: 26, scope: !5)
!48 = !DILocation(line: 260, column: 15, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 50, column: 29, scope: !5)
!50 = !DILocation(line: 51, column: 33, scope: !5)
!51 = !DILocation(line: 51, column: 30, scope: !5)
!52 = !DILocation(line: 51, column: 25, scope: !5)
!53 = !DILocation(line: 51, column: 44, scope: !5)
!54 = !DILocation(line: 52, column: 25, scope: !5)
!55 = !DILocation(line: 52, column: 45, scope: !5)
!56 = !DILocation(line: 52, column: 4, scope: !5)
